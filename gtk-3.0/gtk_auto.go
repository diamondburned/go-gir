package gtk

/*
#cgo pkg-config: gtk+-3.0
#include <gtk/gtk-a11y.h>
#include <gtk/gtk.h>
#include <gtk/gtkx.h>
extern void myGtkAccelGroupActivate(GtkAccelGroup* accel_group, GObject* acceleratable, guint32 keyval, GdkModifierType modifier);
static void* getPointer_myGtkAccelGroupActivate() {
return (void*)(myGtkAccelGroupActivate);
}
extern void myGtkAccelGroupFindFunc(GtkAccelKey* key, GClosure* closure, gpointer data);
static void* getPointer_myGtkAccelGroupFindFunc() {
return (void*)(myGtkAccelGroupFindFunc);
}
extern void myGtkAccelMapForeach(gpointer data, gchar* accel_path, guint32 accel_key, GdkModifierType accel_mods, gboolean changed);
static void* getPointer_myGtkAccelMapForeach() {
return (void*)(myGtkAccelMapForeach);
}
extern void myGtkAssistantPageFunc(gint32 current_page, gpointer data);
static void* getPointer_myGtkAssistantPageFunc() {
return (void*)(myGtkAssistantPageFunc);
}
extern void myGtkBuilderConnectFunc(GtkBuilder* builder, GObject* object, gchar* signal_name, gchar* handler_name, GObject* connect_object, GConnectFlags flags, gpointer user_data);
static void* getPointer_myGtkBuilderConnectFunc() {
return (void*)(myGtkBuilderConnectFunc);
}
extern void myGtkCalendarDetailFunc(GtkCalendar* calendar, guint32 year, guint32 month, guint32 day, gpointer user_data);
static void* getPointer_myGtkCalendarDetailFunc() {
return (void*)(myGtkCalendarDetailFunc);
}
extern void myGtkCallback(GtkWidget* widget, gpointer data);
static void* getPointer_myGtkCallback() {
return (void*)(myGtkCallback);
}
extern void myGtkCellAllocCallback(GtkCellRenderer* renderer, GdkRectangle* cell_area, GdkRectangle* cell_background, gpointer data);
static void* getPointer_myGtkCellAllocCallback() {
return (void*)(myGtkCellAllocCallback);
}
extern void myGtkCellCallback(GtkCellRenderer* renderer, gpointer data);
static void* getPointer_myGtkCellCallback() {
return (void*)(myGtkCellCallback);
}
extern void myGtkCellLayoutDataFunc(GtkCellLayout* cell_layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkCellLayoutDataFunc() {
return (void*)(myGtkCellLayoutDataFunc);
}
extern void myGtkClipboardClearFunc(GtkClipboard* clipboard, gpointer user_data_or_owner);
static void* getPointer_myGtkClipboardClearFunc() {
return (void*)(myGtkClipboardClearFunc);
}
extern void myGtkClipboardGetFunc(GtkClipboard* clipboard, GtkSelectionData* selection_data, guint32 info, gpointer user_data_or_owner);
static void* getPointer_myGtkClipboardGetFunc() {
return (void*)(myGtkClipboardGetFunc);
}
extern void myGtkClipboardImageReceivedFunc(GtkClipboard* clipboard, GdkPixbuf* pixbuf, gpointer data);
static void* getPointer_myGtkClipboardImageReceivedFunc() {
return (void*)(myGtkClipboardImageReceivedFunc);
}
extern void myGtkClipboardReceivedFunc(GtkClipboard* clipboard, GtkSelectionData* selection_data, gpointer data);
static void* getPointer_myGtkClipboardReceivedFunc() {
return (void*)(myGtkClipboardReceivedFunc);
}
extern void myGtkClipboardRichTextReceivedFunc(GtkClipboard* clipboard, GdkAtom* format, gchar* text, guint64 length, gpointer data);
static void* getPointer_myGtkClipboardRichTextReceivedFunc() {
return (void*)(myGtkClipboardRichTextReceivedFunc);
}
extern void myGtkClipboardTargetsReceivedFunc(GtkClipboard* clipboard, gpointer atoms, gint32 n_atoms, gpointer data);
static void* getPointer_myGtkClipboardTargetsReceivedFunc() {
return (void*)(myGtkClipboardTargetsReceivedFunc);
}
extern void myGtkClipboardTextReceivedFunc(GtkClipboard* clipboard, gchar* text, gpointer data);
static void* getPointer_myGtkClipboardTextReceivedFunc() {
return (void*)(myGtkClipboardTextReceivedFunc);
}
extern void myGtkClipboardURIReceivedFunc(GtkClipboard* clipboard, gpointer uris, gpointer data);
static void* getPointer_myGtkClipboardURIReceivedFunc() {
return (void*)(myGtkClipboardURIReceivedFunc);
}
extern void myGtkColorSelectionChangePaletteFunc(gpointer colors, gint32 n_colors);
static void* getPointer_myGtkColorSelectionChangePaletteFunc() {
return (void*)(myGtkColorSelectionChangePaletteFunc);
}
extern void myGtkColorSelectionChangePaletteWithScreenFunc(GdkScreen* screen, gpointer colors, gint32 n_colors);
static void* getPointer_myGtkColorSelectionChangePaletteWithScreenFunc() {
return (void*)(myGtkColorSelectionChangePaletteWithScreenFunc);
}
extern void myGtkEntryCompletionMatchFunc(GtkEntryCompletion* completion, gchar* key, GtkTreeIter* iter, gpointer user_data);
static void* getPointer_myGtkEntryCompletionMatchFunc() {
return (void*)(myGtkEntryCompletionMatchFunc);
}
extern void myGtkFileFilterFunc(GtkFileFilterInfo* filter_info, gpointer data);
static void* getPointer_myGtkFileFilterFunc() {
return (void*)(myGtkFileFilterFunc);
}
extern void myGtkFlowBoxCreateWidgetFunc(GObject* item, gpointer user_data);
static void* getPointer_myGtkFlowBoxCreateWidgetFunc() {
return (void*)(myGtkFlowBoxCreateWidgetFunc);
}
extern void myGtkFlowBoxFilterFunc(GtkFlowBoxChild* child, gpointer user_data);
static void* getPointer_myGtkFlowBoxFilterFunc() {
return (void*)(myGtkFlowBoxFilterFunc);
}
extern void myGtkFlowBoxForeachFunc(GtkFlowBox* box, GtkFlowBoxChild* child, gpointer user_data);
static void* getPointer_myGtkFlowBoxForeachFunc() {
return (void*)(myGtkFlowBoxForeachFunc);
}
extern void myGtkFlowBoxSortFunc(GtkFlowBoxChild* child1, GtkFlowBoxChild* child2, gpointer user_data);
static void* getPointer_myGtkFlowBoxSortFunc() {
return (void*)(myGtkFlowBoxSortFunc);
}
extern void myGtkFontFilterFunc(PangoFontFamily* family, PangoFontFace* face, gpointer data);
static void* getPointer_myGtkFontFilterFunc() {
return (void*)(myGtkFontFilterFunc);
}
extern void myGtkIconViewForeachFunc(GtkIconView* icon_view, GtkTreePath* path, gpointer data);
static void* getPointer_myGtkIconViewForeachFunc() {
return (void*)(myGtkIconViewForeachFunc);
}
extern void myGtkKeySnoopFunc(GtkWidget* grab_widget, GdkEventKey* event, gpointer func_data);
static void* getPointer_myGtkKeySnoopFunc() {
return (void*)(myGtkKeySnoopFunc);
}
extern void myGtkListBoxCreateWidgetFunc(GObject* item, gpointer user_data);
static void* getPointer_myGtkListBoxCreateWidgetFunc() {
return (void*)(myGtkListBoxCreateWidgetFunc);
}
extern void myGtkListBoxFilterFunc(GtkListBoxRow* row, gpointer user_data);
static void* getPointer_myGtkListBoxFilterFunc() {
return (void*)(myGtkListBoxFilterFunc);
}
extern void myGtkListBoxForeachFunc(GtkListBox* box, GtkListBoxRow* row, gpointer user_data);
static void* getPointer_myGtkListBoxForeachFunc() {
return (void*)(myGtkListBoxForeachFunc);
}
extern void myGtkListBoxSortFunc(GtkListBoxRow* row1, GtkListBoxRow* row2, gpointer user_data);
static void* getPointer_myGtkListBoxSortFunc() {
return (void*)(myGtkListBoxSortFunc);
}
extern void myGtkListBoxUpdateHeaderFunc(GtkListBoxRow* row, GtkListBoxRow* before, gpointer user_data);
static void* getPointer_myGtkListBoxUpdateHeaderFunc() {
return (void*)(myGtkListBoxUpdateHeaderFunc);
}
extern void myGtkMenuDetachFunc(GtkWidget* attach_widget, GtkMenu* menu);
static void* getPointer_myGtkMenuDetachFunc() {
return (void*)(myGtkMenuDetachFunc);
}
extern void myGtkMenuPositionFunc(GtkMenu* menu, gpointer x, gpointer y, gpointer push_in, gpointer user_data);
static void* getPointer_myGtkMenuPositionFunc() {
return (void*)(myGtkMenuPositionFunc);
}
extern void myGtkModuleDisplayInitFunc(GdkDisplay* display);
static void* getPointer_myGtkModuleDisplayInitFunc() {
return (void*)(myGtkModuleDisplayInitFunc);
}
extern void myGtkModuleInitFunc(gint32* argc, gpointer argv);
static void* getPointer_myGtkModuleInitFunc() {
return (void*)(myGtkModuleInitFunc);
}
extern void myGtkPageSetupDoneFunc(GtkPageSetup* page_setup, gpointer data);
static void* getPointer_myGtkPageSetupDoneFunc() {
return (void*)(myGtkPageSetupDoneFunc);
}
extern void myGtkPrintSettingsFunc(gchar* key, gchar* value, gpointer user_data);
static void* getPointer_myGtkPrintSettingsFunc() {
return (void*)(myGtkPrintSettingsFunc);
}
extern void myGtkRcPropertyParser(GParamSpec* pspec, GString* rc_string, GValue* property_value);
static void* getPointer_myGtkRcPropertyParser() {
return (void*)(myGtkRcPropertyParser);
}
extern void myGtkRecentFilterFunc(GtkRecentFilterInfo* filter_info, gpointer user_data);
static void* getPointer_myGtkRecentFilterFunc() {
return (void*)(myGtkRecentFilterFunc);
}
extern void myGtkRecentSortFunc(GtkRecentInfo* a, GtkRecentInfo* b, gpointer user_data);
static void* getPointer_myGtkRecentSortFunc() {
return (void*)(myGtkRecentSortFunc);
}
extern void myGtkStylePropertyParser(gchar* string, GValue* value);
static void* getPointer_myGtkStylePropertyParser() {
return (void*)(myGtkStylePropertyParser);
}
extern void myGtkTextBufferDeserializeFunc(GtkTextBuffer* register_buffer, GtkTextBuffer* content_buffer, GtkTextIter* iter, gpointer data, guint64 length, gboolean create_tags, gpointer user_data);
static void* getPointer_myGtkTextBufferDeserializeFunc() {
return (void*)(myGtkTextBufferDeserializeFunc);
}
extern void myGtkTextBufferSerializeFunc(GtkTextBuffer* register_buffer, GtkTextBuffer* content_buffer, GtkTextIter* start, GtkTextIter* end, guint64* length, gpointer user_data);
static void* getPointer_myGtkTextBufferSerializeFunc() {
return (void*)(myGtkTextBufferSerializeFunc);
}
extern void myGtkTextCharPredicate(gunichar ch, gpointer user_data);
static void* getPointer_myGtkTextCharPredicate() {
return (void*)(myGtkTextCharPredicate);
}
extern void myGtkTextTagTableForeach(GtkTextTag* tag, gpointer data);
static void* getPointer_myGtkTextTagTableForeach() {
return (void*)(myGtkTextTagTableForeach);
}
extern void myGtkTickCallback(GtkWidget* widget, GdkFrameClock* frame_clock, gpointer user_data);
static void* getPointer_myGtkTickCallback() {
return (void*)(myGtkTickCallback);
}
extern void myGtkTranslateFunc(gchar* path, gpointer func_data);
static void* getPointer_myGtkTranslateFunc() {
return (void*)(myGtkTranslateFunc);
}
extern void myGtkTreeCellDataFunc(GtkTreeViewColumn* tree_column, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkTreeCellDataFunc() {
return (void*)(myGtkTreeCellDataFunc);
}
extern void myGtkTreeDestroyCountFunc(GtkTreeView* tree_view, GtkTreePath* path, gint32 children, gpointer user_data);
static void* getPointer_myGtkTreeDestroyCountFunc() {
return (void*)(myGtkTreeDestroyCountFunc);
}
extern void myGtkTreeIterCompareFunc(GtkTreeModel* model, GtkTreeIter* a, GtkTreeIter* b, gpointer user_data);
static void* getPointer_myGtkTreeIterCompareFunc() {
return (void*)(myGtkTreeIterCompareFunc);
}
extern void myGtkTreeModelFilterModifyFunc(GtkTreeModel* model, GtkTreeIter* iter, gpointer value, gint32 column, gpointer data);
static void* getPointer_myGtkTreeModelFilterModifyFunc() {
return (void*)(myGtkTreeModelFilterModifyFunc);
}
extern void myGtkTreeModelFilterVisibleFunc(GtkTreeModel* model, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkTreeModelFilterVisibleFunc() {
return (void*)(myGtkTreeModelFilterVisibleFunc);
}
extern void myGtkTreeModelForeachFunc(GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkTreeModelForeachFunc() {
return (void*)(myGtkTreeModelForeachFunc);
}
extern void myGtkTreeSelectionForeachFunc(GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkTreeSelectionForeachFunc() {
return (void*)(myGtkTreeSelectionForeachFunc);
}
extern void myGtkTreeSelectionFunc(GtkTreeSelection* selection, GtkTreeModel* model, GtkTreePath* path, gboolean path_currently_selected, gpointer data);
static void* getPointer_myGtkTreeSelectionFunc() {
return (void*)(myGtkTreeSelectionFunc);
}
extern void myGtkTreeViewColumnDropFunc(GtkTreeView* tree_view, GtkTreeViewColumn* column, GtkTreeViewColumn* prev_column, GtkTreeViewColumn* next_column, gpointer data);
static void* getPointer_myGtkTreeViewColumnDropFunc() {
return (void*)(myGtkTreeViewColumnDropFunc);
}
extern void myGtkTreeViewMappingFunc(GtkTreeView* tree_view, GtkTreePath* path, gpointer user_data);
static void* getPointer_myGtkTreeViewMappingFunc() {
return (void*)(myGtkTreeViewMappingFunc);
}
extern void myGtkTreeViewRowSeparatorFunc(GtkTreeModel* model, GtkTreeIter* iter, gpointer data);
static void* getPointer_myGtkTreeViewRowSeparatorFunc() {
return (void*)(myGtkTreeViewRowSeparatorFunc);
}
extern void myGtkTreeViewSearchEqualFunc(GtkTreeModel* model, gint32 column, gchar* key, GtkTreeIter* iter, gpointer search_data);
static void* getPointer_myGtkTreeViewSearchEqualFunc() {
return (void*)(myGtkTreeViewSearchEqualFunc);
}
extern void myGtkTreeViewSearchPositionFunc(GtkTreeView* tree_view, GtkWidget* search_dialog, gpointer user_data);
static void* getPointer_myGtkTreeViewSearchPositionFunc() {
return (void*)(myGtkTreeViewSearchPositionFunc);
}
*/
import "C"
import "github.com/electricface/go-gir/atk-1.0"
import "github.com/electricface/go-gir/cairo-1.0"
import "github.com/electricface/go-gir/g-2.0"
import "github.com/electricface/go-gir/gdk-3.0"
import "github.com/electricface/go-gir/gdkpixbuf-2.0"
import "github.com/electricface/go-gir/pango-1.0"
import "log"
import "unsafe"
import gi "github.com/electricface/go-gir3/gi-lite"

var _I = gi.NewInvokerCache("Gtk")
var _ unsafe.Pointer
var _ *log.Logger

func init() {
	repo := gi.DefaultRepository()
	_, err := repo.Require("Gtk", "3.0", gi.REPOSITORY_LOAD_FLAG_LAZY)
	if err != nil {
		panic(err)
	}
}

// Object AboutDialog
type AboutDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Dialog
}

func WrapAboutDialog(p unsafe.Pointer) (r AboutDialog) { r.P = p; return }

type IAboutDialog interface{ P_AboutDialog() unsafe.Pointer }

func (v AboutDialog) P_AboutDialog() unsafe.Pointer      { return v.P }
func (v AboutDialog) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AboutDialog) P_Buildable() unsafe.Pointer        { return v.P }
func AboutDialogGetType() gi.GType {
	ret := _I.GetGType(0, "AboutDialog")
	return ret
}

// gtk_about_dialog_new
//
// [ result ] trans: nothing
//
func NewAboutDialog() (result AboutDialog) {
	iv, err := _I.Get(0, "AboutDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_about_dialog_add_credit_section
//
// [ section_name ] trans: nothing
//
// [ people ] trans: nothing
//
func (v AboutDialog) AddCreditSection(section_name string, people gi.CStrArray) {
	iv, err := _I.Get(1, "AboutDialog", "add_credit_section")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_section_name := gi.CString(section_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_section_name := gi.NewStringArgument(c_section_name)
	arg_people := gi.NewPointerArgument(people.P)
	args := []gi.Argument{arg_v, arg_section_name, arg_people}
	iv.Call(args, nil, nil)
	gi.Free(c_section_name)
}

// gtk_about_dialog_get_artists
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetArtists() (result gi.CStrArray) {
	iv, err := _I.Get(2, "AboutDialog", "get_artists")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_about_dialog_get_authors
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetAuthors() (result gi.CStrArray) {
	iv, err := _I.Get(3, "AboutDialog", "get_authors")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_about_dialog_get_comments
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetComments() (result string) {
	iv, err := _I.Get(4, "AboutDialog", "get_comments")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_copyright
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetCopyright() (result string) {
	iv, err := _I.Get(5, "AboutDialog", "get_copyright")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_documenters
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetDocumenters() (result gi.CStrArray) {
	iv, err := _I.Get(6, "AboutDialog", "get_documenters")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_about_dialog_get_license
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetLicense() (result string) {
	iv, err := _I.Get(7, "AboutDialog", "get_license")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_license_type
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetLicenseType() (result LicenseEnum) {
	iv, err := _I.Get(8, "AboutDialog", "get_license_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = LicenseEnum(ret.Int())
	return
}

// gtk_about_dialog_get_logo
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetLogo() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(9, "AboutDialog", "get_logo")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_about_dialog_get_logo_icon_name
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetLogoIconName() (result string) {
	iv, err := _I.Get(10, "AboutDialog", "get_logo_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_program_name
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetProgramName() (result string) {
	iv, err := _I.Get(11, "AboutDialog", "get_program_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_translator_credits
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetTranslatorCredits() (result string) {
	iv, err := _I.Get(12, "AboutDialog", "get_translator_credits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_version
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetVersion() (result string) {
	iv, err := _I.Get(13, "AboutDialog", "get_version")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_website
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetWebsite() (result string) {
	iv, err := _I.Get(14, "AboutDialog", "get_website")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_website_label
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetWebsiteLabel() (result string) {
	iv, err := _I.Get(15, "AboutDialog", "get_website_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_about_dialog_get_wrap_license
//
// [ result ] trans: nothing
//
func (v AboutDialog) GetWrapLicense() (result bool) {
	iv, err := _I.Get(16, "AboutDialog", "get_wrap_license")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_about_dialog_set_artists
//
// [ artists ] trans: nothing
//
func (v AboutDialog) SetArtists(artists gi.CStrArray) {
	iv, err := _I.Get(17, "AboutDialog", "set_artists")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_artists := gi.NewPointerArgument(artists.P)
	args := []gi.Argument{arg_v, arg_artists}
	iv.Call(args, nil, nil)
}

// gtk_about_dialog_set_authors
//
// [ authors ] trans: nothing
//
func (v AboutDialog) SetAuthors(authors gi.CStrArray) {
	iv, err := _I.Get(18, "AboutDialog", "set_authors")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_authors := gi.NewPointerArgument(authors.P)
	args := []gi.Argument{arg_v, arg_authors}
	iv.Call(args, nil, nil)
}

// gtk_about_dialog_set_comments
//
// [ comments ] trans: nothing
//
func (v AboutDialog) SetComments(comments string) {
	iv, err := _I.Get(19, "AboutDialog", "set_comments")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_comments := gi.CString(comments)
	arg_v := gi.NewPointerArgument(v.P)
	arg_comments := gi.NewStringArgument(c_comments)
	args := []gi.Argument{arg_v, arg_comments}
	iv.Call(args, nil, nil)
	gi.Free(c_comments)
}

// gtk_about_dialog_set_copyright
//
// [ copyright ] trans: nothing
//
func (v AboutDialog) SetCopyright(copyright string) {
	iv, err := _I.Get(20, "AboutDialog", "set_copyright")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_copyright := gi.CString(copyright)
	arg_v := gi.NewPointerArgument(v.P)
	arg_copyright := gi.NewStringArgument(c_copyright)
	args := []gi.Argument{arg_v, arg_copyright}
	iv.Call(args, nil, nil)
	gi.Free(c_copyright)
}

// gtk_about_dialog_set_documenters
//
// [ documenters ] trans: nothing
//
func (v AboutDialog) SetDocumenters(documenters gi.CStrArray) {
	iv, err := _I.Get(21, "AboutDialog", "set_documenters")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_documenters := gi.NewPointerArgument(documenters.P)
	args := []gi.Argument{arg_v, arg_documenters}
	iv.Call(args, nil, nil)
}

// gtk_about_dialog_set_license
//
// [ license ] trans: nothing
//
func (v AboutDialog) SetLicense(license string) {
	iv, err := _I.Get(22, "AboutDialog", "set_license")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_license := gi.CString(license)
	arg_v := gi.NewPointerArgument(v.P)
	arg_license := gi.NewStringArgument(c_license)
	args := []gi.Argument{arg_v, arg_license}
	iv.Call(args, nil, nil)
	gi.Free(c_license)
}

// gtk_about_dialog_set_license_type
//
// [ license_type ] trans: nothing
//
func (v AboutDialog) SetLicenseType(license_type LicenseEnum) {
	iv, err := _I.Get(23, "AboutDialog", "set_license_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_license_type := gi.NewIntArgument(int(license_type))
	args := []gi.Argument{arg_v, arg_license_type}
	iv.Call(args, nil, nil)
}

// gtk_about_dialog_set_logo
//
// [ logo ] trans: nothing
//
func (v AboutDialog) SetLogo(logo gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(24, "AboutDialog", "set_logo")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if logo != nil {
		tmp = logo.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_logo := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_logo}
	iv.Call(args, nil, nil)
}

// gtk_about_dialog_set_logo_icon_name
//
// [ icon_name ] trans: nothing
//
func (v AboutDialog) SetLogoIconName(icon_name string) {
	iv, err := _I.Get(25, "AboutDialog", "set_logo_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_about_dialog_set_program_name
//
// [ name ] trans: nothing
//
func (v AboutDialog) SetProgramName(name string) {
	iv, err := _I.Get(26, "AboutDialog", "set_program_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_about_dialog_set_translator_credits
//
// [ translator_credits ] trans: nothing
//
func (v AboutDialog) SetTranslatorCredits(translator_credits string) {
	iv, err := _I.Get(27, "AboutDialog", "set_translator_credits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_translator_credits := gi.CString(translator_credits)
	arg_v := gi.NewPointerArgument(v.P)
	arg_translator_credits := gi.NewStringArgument(c_translator_credits)
	args := []gi.Argument{arg_v, arg_translator_credits}
	iv.Call(args, nil, nil)
	gi.Free(c_translator_credits)
}

// gtk_about_dialog_set_version
//
// [ version ] trans: nothing
//
func (v AboutDialog) SetVersion(version string) {
	iv, err := _I.Get(28, "AboutDialog", "set_version")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_version := gi.CString(version)
	arg_v := gi.NewPointerArgument(v.P)
	arg_version := gi.NewStringArgument(c_version)
	args := []gi.Argument{arg_v, arg_version}
	iv.Call(args, nil, nil)
	gi.Free(c_version)
}

// gtk_about_dialog_set_website
//
// [ website ] trans: nothing
//
func (v AboutDialog) SetWebsite(website string) {
	iv, err := _I.Get(29, "AboutDialog", "set_website")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_website := gi.CString(website)
	arg_v := gi.NewPointerArgument(v.P)
	arg_website := gi.NewStringArgument(c_website)
	args := []gi.Argument{arg_v, arg_website}
	iv.Call(args, nil, nil)
	gi.Free(c_website)
}

// gtk_about_dialog_set_website_label
//
// [ website_label ] trans: nothing
//
func (v AboutDialog) SetWebsiteLabel(website_label string) {
	iv, err := _I.Get(30, "AboutDialog", "set_website_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_website_label := gi.CString(website_label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_website_label := gi.NewStringArgument(c_website_label)
	args := []gi.Argument{arg_v, arg_website_label}
	iv.Call(args, nil, nil)
	gi.Free(c_website_label)
}

// gtk_about_dialog_set_wrap_license
//
// [ wrap_license ] trans: nothing
//
func (v AboutDialog) SetWrapLicense(wrap_license bool) {
	iv, err := _I.Get(31, "AboutDialog", "set_wrap_license")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wrap_license := gi.NewBoolArgument(wrap_license)
	args := []gi.Argument{arg_v, arg_wrap_license}
	iv.Call(args, nil, nil)
}

// ignore GType struct AboutDialogClass

// Struct AboutDialogPrivate
type AboutDialogPrivate struct {
	P unsafe.Pointer
}

func AboutDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(1, "AboutDialogPrivate")
	return ret
}

// Flags AccelFlags
type AccelFlags int

const (
	AccelFlagsVisible AccelFlags = 1
	AccelFlagsLocked  AccelFlags = 2
	AccelFlagsMask    AccelFlags = 7
)

func AccelFlagsGetType() gi.GType {
	ret := _I.GetGType(2, "AccelFlags")
	return ret
}

// Object AccelGroup
type AccelGroup struct {
	g.Object
}

func WrapAccelGroup(p unsafe.Pointer) (r AccelGroup) { r.P = p; return }

type IAccelGroup interface{ P_AccelGroup() unsafe.Pointer }

func (v AccelGroup) P_AccelGroup() unsafe.Pointer { return v.P }
func AccelGroupGetType() gi.GType {
	ret := _I.GetGType(3, "AccelGroup")
	return ret
}

// gtk_accel_group_new
//
// [ result ] trans: everything
//
func NewAccelGroup() (result AccelGroup) {
	iv, err := _I.Get(32, "AccelGroup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accel_group_from_accel_closure
//
// [ closure ] trans: nothing
//
// [ result ] trans: nothing
//
func AccelGroupFromAccelClosure1(closure g.Closure) (result AccelGroup) {
	iv, err := _I.Get(33, "AccelGroup", "from_accel_closure")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_closure := gi.NewPointerArgument(closure.P)
	args := []gi.Argument{arg_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accel_group_activate
//
// [ accel_quark ] trans: nothing
//
// [ acceleratable ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ result ] trans: nothing
//
func (v AccelGroup) Activate(accel_quark uint32, acceleratable g.IObject, accel_key uint32, accel_mods gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(34, "AccelGroup", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if acceleratable != nil {
		tmp = acceleratable.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_quark := gi.NewUint32Argument(accel_quark)
	arg_acceleratable := gi.NewPointerArgument(tmp)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	args := []gi.Argument{arg_v, arg_accel_quark, arg_acceleratable, arg_accel_key, arg_accel_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_group_connect
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ accel_flags ] trans: nothing
//
// [ closure ] trans: nothing
//
func (v AccelGroup) Connect(accel_key uint32, accel_mods gdk.ModifierTypeFlags, accel_flags AccelFlags, closure g.Closure) {
	iv, err := _I.Get(35, "AccelGroup", "connect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	arg_accel_flags := gi.NewIntArgument(int(accel_flags))
	arg_closure := gi.NewPointerArgument(closure.P)
	args := []gi.Argument{arg_v, arg_accel_key, arg_accel_mods, arg_accel_flags, arg_closure}
	iv.Call(args, nil, nil)
}

// gtk_accel_group_connect_by_path
//
// [ accel_path ] trans: nothing
//
// [ closure ] trans: nothing
//
func (v AccelGroup) ConnectByPath(accel_path string, closure g.Closure) {
	iv, err := _I.Get(36, "AccelGroup", "connect_by_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	arg_closure := gi.NewPointerArgument(closure.P)
	args := []gi.Argument{arg_v, arg_accel_path, arg_closure}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_accel_group_disconnect
//
// [ closure ] trans: nothing
//
// [ result ] trans: nothing
//
func (v AccelGroup) Disconnect(closure g.Closure) (result bool) {
	iv, err := _I.Get(37, "AccelGroup", "disconnect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_closure := gi.NewPointerArgument(closure.P)
	args := []gi.Argument{arg_v, arg_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_group_disconnect_key
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ result ] trans: nothing
//
func (v AccelGroup) DisconnectKey(accel_key uint32, accel_mods gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(38, "AccelGroup", "disconnect_key")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	args := []gi.Argument{arg_v, arg_accel_key, arg_accel_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_group_find
//
// [ find_func ] trans: nothing
//
// [ data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v AccelGroup) Find(find_func int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) (result AccelKey) {
	iv, err := _I.Get(39, "AccelGroup", "find")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_find_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myAccelGroupFindFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_find_func, arg_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accel_group_get_is_locked
//
// [ result ] trans: nothing
//
func (v AccelGroup) GetIsLocked() (result bool) {
	iv, err := _I.Get(40, "AccelGroup", "get_is_locked")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_group_get_modifier_mask
//
// [ result ] trans: nothing
//
func (v AccelGroup) GetModifierMask() (result gdk.ModifierTypeFlags) {
	iv, err := _I.Get(41, "AccelGroup", "get_modifier_mask")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.ModifierTypeFlags(ret.Int())
	return
}

// gtk_accel_group_lock
//
func (v AccelGroup) Lock() {
	iv, err := _I.Get(42, "AccelGroup", "lock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_accel_group_query
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ n_entries ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v AccelGroup) Query(accel_key uint32, accel_mods gdk.ModifierTypeFlags) (result unsafe.Pointer) {
	iv, err := _I.Get(43, "AccelGroup", "query")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	arg_n_entries := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_accel_key, arg_accel_mods, arg_n_entries}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_entries uint32
	_ = n_entries
	n_entries = outArgs[0].Uint32()
	result = ret.Pointer()
	return
}

// gtk_accel_group_unlock
//
func (v AccelGroup) Unlock() {
	iv, err := _I.Get(44, "AccelGroup", "unlock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

type AccelGroupActivateStruct struct {
	F_accel_group   AccelGroup
	F_acceleratable g.Object
	F_keyval        uint32
	F_modifier      gdk.ModifierTypeFlags
}

func GetPointer_myAccelGroupActivate() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkAccelGroupActivate())
}

//export myGtkAccelGroupActivate
func myGtkAccelGroupActivate(accel_group *C.GtkAccelGroup, acceleratable *C.GObject, keyval C.guint32, modifier C.GdkModifierType) {
	// TODO: not found user_data
}

// ignore GType struct AccelGroupClass

// Struct AccelGroupEntry
type AccelGroupEntry struct {
	P unsafe.Pointer
}

const SizeOfStructAccelGroupEntry = 32

func AccelGroupEntryGetType() gi.GType {
	ret := _I.GetGType(4, "AccelGroupEntry")
	return ret
}

type AccelGroupFindFuncStruct struct {
	F_key     AccelKey
	F_closure g.Closure
	F_data    unsafe.Pointer
}

func GetPointer_myAccelGroupFindFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkAccelGroupFindFunc())
}

//export myGtkAccelGroupFindFunc
func myGtkAccelGroupFindFunc(key *C.GtkAccelKey, closure *C.GClosure, data C.gpointer) {
	// TODO: not found user_data
}

// Struct AccelGroupPrivate
type AccelGroupPrivate struct {
	P unsafe.Pointer
}

func AccelGroupPrivateGetType() gi.GType {
	ret := _I.GetGType(5, "AccelGroupPrivate")
	return ret
}

// Struct AccelKey
type AccelKey struct {
	P unsafe.Pointer
}

const SizeOfStructAccelKey = 12

func AccelKeyGetType() gi.GType {
	ret := _I.GetGType(6, "AccelKey")
	return ret
}

// Object AccelLabel
type AccelLabel struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Label
}

func WrapAccelLabel(p unsafe.Pointer) (r AccelLabel) { r.P = p; return }

type IAccelLabel interface{ P_AccelLabel() unsafe.Pointer }

func (v AccelLabel) P_AccelLabel() unsafe.Pointer       { return v.P }
func (v AccelLabel) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AccelLabel) P_Buildable() unsafe.Pointer        { return v.P }
func AccelLabelGetType() gi.GType {
	ret := _I.GetGType(7, "AccelLabel")
	return ret
}

// gtk_accel_label_new
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAccelLabel(string string) (result AccelLabel) {
	iv, err := _I.Get(45, "AccelLabel", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result.P = ret.Pointer()
	return
}

// gtk_accel_label_get_accel
//
// [ accelerator_key ] trans: everything, dir: out
//
// [ accelerator_mods ] trans: everything, dir: out
//
func (v AccelLabel) GetAccel() (accelerator_key uint32, accelerator_mods gdk.ModifierTypeFlags) {
	iv, err := _I.Get(46, "AccelLabel", "get_accel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_accelerator_key := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_accelerator_mods := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_accelerator_key, arg_accelerator_mods}
	iv.Call(args, nil, &outArgs[0])
	accelerator_key = outArgs[0].Uint32()
	accelerator_mods = gdk.ModifierTypeFlags(outArgs[1].Int())
	return
}

// gtk_accel_label_get_accel_widget
//
// [ result ] trans: nothing
//
func (v AccelLabel) GetAccelWidget() (result Widget) {
	iv, err := _I.Get(47, "AccelLabel", "get_accel_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accel_label_get_accel_width
//
// [ result ] trans: nothing
//
func (v AccelLabel) GetAccelWidth() (result uint32) {
	iv, err := _I.Get(48, "AccelLabel", "get_accel_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_accel_label_refetch
//
// [ result ] trans: nothing
//
func (v AccelLabel) Refetch() (result bool) {
	iv, err := _I.Get(49, "AccelLabel", "refetch")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_label_set_accel
//
// [ accelerator_key ] trans: nothing
//
// [ accelerator_mods ] trans: nothing
//
func (v AccelLabel) SetAccel(accelerator_key uint32, accelerator_mods gdk.ModifierTypeFlags) {
	iv, err := _I.Get(50, "AccelLabel", "set_accel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accelerator_key := gi.NewUint32Argument(accelerator_key)
	arg_accelerator_mods := gi.NewIntArgument(int(accelerator_mods))
	args := []gi.Argument{arg_v, arg_accelerator_key, arg_accelerator_mods}
	iv.Call(args, nil, nil)
}

// gtk_accel_label_set_accel_closure
//
// [ accel_closure ] trans: nothing
//
func (v AccelLabel) SetAccelClosure(accel_closure g.Closure) {
	iv, err := _I.Get(51, "AccelLabel", "set_accel_closure")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_closure := gi.NewPointerArgument(accel_closure.P)
	args := []gi.Argument{arg_v, arg_accel_closure}
	iv.Call(args, nil, nil)
}

// gtk_accel_label_set_accel_widget
//
// [ accel_widget ] trans: nothing
//
func (v AccelLabel) SetAccelWidget(accel_widget IWidget) {
	iv, err := _I.Get(52, "AccelLabel", "set_accel_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_widget != nil {
		tmp = accel_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_widget}
	iv.Call(args, nil, nil)
}

// ignore GType struct AccelLabelClass

// Struct AccelLabelPrivate
type AccelLabelPrivate struct {
	P unsafe.Pointer
}

func AccelLabelPrivateGetType() gi.GType {
	ret := _I.GetGType(8, "AccelLabelPrivate")
	return ret
}

// Object AccelMap
type AccelMap struct {
	g.Object
}

func WrapAccelMap(p unsafe.Pointer) (r AccelMap) { r.P = p; return }

type IAccelMap interface{ P_AccelMap() unsafe.Pointer }

func (v AccelMap) P_AccelMap() unsafe.Pointer { return v.P }
func AccelMapGetType() gi.GType {
	ret := _I.GetGType(9, "AccelMap")
	return ret
}

// gtk_accel_map_add_entry
//
// [ accel_path ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
func AccelMapAddEntry1(accel_path string, accel_key uint32, accel_mods gdk.ModifierTypeFlags) {
	iv, err := _I.Get(53, "AccelMap", "add_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	args := []gi.Argument{arg_accel_path, arg_accel_key, arg_accel_mods}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_accel_map_add_filter
//
// [ filter_pattern ] trans: nothing
//
func AccelMapAddFilter1(filter_pattern string) {
	iv, err := _I.Get(54, "AccelMap", "add_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filter_pattern := gi.CString(filter_pattern)
	arg_filter_pattern := gi.NewStringArgument(c_filter_pattern)
	args := []gi.Argument{arg_filter_pattern}
	iv.Call(args, nil, nil)
	gi.Free(c_filter_pattern)
}

// gtk_accel_map_change_entry
//
// [ accel_path ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ replace ] trans: nothing
//
// [ result ] trans: nothing
//
func AccelMapChangeEntry1(accel_path string, accel_key uint32, accel_mods gdk.ModifierTypeFlags, replace bool) (result bool) {
	iv, err := _I.Get(55, "AccelMap", "change_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	arg_replace := gi.NewBoolArgument(replace)
	args := []gi.Argument{arg_accel_path, arg_accel_key, arg_accel_mods, arg_replace}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_accel_path)
	result = ret.Bool()
	return
}

// gtk_accel_map_foreach
//
// [ data ] trans: nothing
//
// [ foreach_func ] trans: nothing
//
func AccelMapForeach1(data unsafe.Pointer, foreach_func int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(56, "AccelMap", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_data := gi.NewPointerArgument(data)
	arg_foreach_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myAccelMapForeach()))
	args := []gi.Argument{arg_data, arg_foreach_func}
	iv.Call(args, nil, nil)
}

// gtk_accel_map_foreach_unfiltered
//
// [ data ] trans: nothing
//
// [ foreach_func ] trans: nothing
//
func AccelMapForeachUnfiltered1(data unsafe.Pointer, foreach_func int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(57, "AccelMap", "foreach_unfiltered")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_data := gi.NewPointerArgument(data)
	arg_foreach_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myAccelMapForeach()))
	args := []gi.Argument{arg_data, arg_foreach_func}
	iv.Call(args, nil, nil)
}

// gtk_accel_map_load
//
// [ file_name ] trans: nothing
//
func AccelMapLoad1(file_name string) {
	iv, err := _I.Get(59, "AccelMap", "load")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_file_name := gi.CString(file_name)
	arg_file_name := gi.NewStringArgument(c_file_name)
	args := []gi.Argument{arg_file_name}
	iv.Call(args, nil, nil)
	gi.Free(c_file_name)
}

// gtk_accel_map_load_fd
//
// [ fd ] trans: nothing
//
func AccelMapLoadFd1(fd int32) {
	iv, err := _I.Get(60, "AccelMap", "load_fd")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_fd := gi.NewInt32Argument(fd)
	args := []gi.Argument{arg_fd}
	iv.Call(args, nil, nil)
}

// gtk_accel_map_load_scanner
//
// [ scanner ] trans: nothing
//
func AccelMapLoadScanner1(scanner g.Scanner) {
	iv, err := _I.Get(61, "AccelMap", "load_scanner")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_scanner := gi.NewPointerArgument(scanner.P)
	args := []gi.Argument{arg_scanner}
	iv.Call(args, nil, nil)
}

// gtk_accel_map_lock_path
//
// [ accel_path ] trans: nothing
//
func AccelMapLockPath1(accel_path string) {
	iv, err := _I.Get(62, "AccelMap", "lock_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	args := []gi.Argument{arg_accel_path}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_accel_map_lookup_entry
//
// [ accel_path ] trans: nothing
//
// [ key ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func AccelMapLookupEntry1(accel_path string, key AccelKey) (result bool) {
	iv, err := _I.Get(63, "AccelMap", "lookup_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	arg_key := gi.NewPointerArgument(key.P)
	args := []gi.Argument{arg_accel_path, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_accel_path)
	result = ret.Bool()
	return
}

// gtk_accel_map_save
//
// [ file_name ] trans: nothing
//
func AccelMapSave1(file_name string) {
	iv, err := _I.Get(64, "AccelMap", "save")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_file_name := gi.CString(file_name)
	arg_file_name := gi.NewStringArgument(c_file_name)
	args := []gi.Argument{arg_file_name}
	iv.Call(args, nil, nil)
	gi.Free(c_file_name)
}

// gtk_accel_map_save_fd
//
// [ fd ] trans: nothing
//
func AccelMapSaveFd1(fd int32) {
	iv, err := _I.Get(65, "AccelMap", "save_fd")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_fd := gi.NewInt32Argument(fd)
	args := []gi.Argument{arg_fd}
	iv.Call(args, nil, nil)
}

// gtk_accel_map_unlock_path
//
// [ accel_path ] trans: nothing
//
func AccelMapUnlockPath1(accel_path string) {
	iv, err := _I.Get(66, "AccelMap", "unlock_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	args := []gi.Argument{arg_accel_path}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// ignore GType struct AccelMapClass

type AccelMapForeachStruct struct {
	F_data       unsafe.Pointer
	F_accel_path string
	F_accel_key  uint32
	F_accel_mods gdk.ModifierTypeFlags
	F_changed    bool
}

func GetPointer_myAccelMapForeach() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkAccelMapForeach())
}

//export myGtkAccelMapForeach
func myGtkAccelMapForeach(data C.gpointer, accel_path *C.gchar, accel_key C.guint32, accel_mods C.GdkModifierType, changed C.gboolean) {
	// TODO: not found user_data
}

// Object Accessible
type Accessible struct {
	atk.Object
}

func WrapAccessible(p unsafe.Pointer) (r Accessible) { r.P = p; return }

type IAccessible interface{ P_Accessible() unsafe.Pointer }

func (v Accessible) P_Accessible() unsafe.Pointer { return v.P }
func AccessibleGetType() gi.GType {
	ret := _I.GetGType(10, "Accessible")
	return ret
}

// Deprecated
//
// gtk_accessible_connect_widget_destroyed
//
func (v Accessible) ConnectWidgetDestroyed() {
	iv, err := _I.Get(67, "Accessible", "connect_widget_destroyed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_accessible_get_widget
//
// [ result ] trans: nothing
//
func (v Accessible) GetWidget() (result Widget) {
	iv, err := _I.Get(68, "Accessible", "get_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accessible_set_widget
//
// [ widget ] trans: nothing
//
func (v Accessible) SetWidget(widget IWidget) {
	iv, err := _I.Get(69, "Accessible", "set_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// ignore GType struct AccessibleClass

// Struct AccessiblePrivate
type AccessiblePrivate struct {
	P unsafe.Pointer
}

func AccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(11, "AccessiblePrivate")
	return ret
}

// Object Action
type Action struct {
	BuildableIfc
	g.Object
}

func WrapAction(p unsafe.Pointer) (r Action) { r.P = p; return }

type IAction interface{ P_Action() unsafe.Pointer }

func (v Action) P_Action() unsafe.Pointer    { return v.P }
func (v Action) P_Buildable() unsafe.Pointer { return v.P }
func ActionGetType() gi.GType {
	ret := _I.GetGType(12, "Action")
	return ret
}

// Deprecated
//
// gtk_action_new
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ tooltip ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewAction(name string, label string, tooltip string, stock_id string) (result Action) {
	iv, err := _I.Get(70, "Action", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	c_tooltip := gi.CString(tooltip)
	c_stock_id := gi.CString(stock_id)
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_name, arg_label, arg_tooltip, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_label)
	gi.Free(c_tooltip)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_activate
//
func (v Action) Activate() {
	iv, err := _I.Get(71, "Action", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_block_activate
//
func (v Action) BlockActivate() {
	iv, err := _I.Get(72, "Action", "block_activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_connect_accelerator
//
func (v Action) ConnectAccelerator() {
	iv, err := _I.Get(73, "Action", "connect_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_create_icon
//
// [ icon_size ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Action) CreateIcon(icon_size int32) (result Widget) {
	iv, err := _I.Get(74, "Action", "create_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_size := gi.NewInt32Argument(icon_size)
	args := []gi.Argument{arg_v, arg_icon_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_create_menu
//
// [ result ] trans: nothing
//
func (v Action) CreateMenu() (result Widget) {
	iv, err := _I.Get(75, "Action", "create_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_create_menu_item
//
// [ result ] trans: nothing
//
func (v Action) CreateMenuItem() (result Widget) {
	iv, err := _I.Get(76, "Action", "create_menu_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_create_tool_item
//
// [ result ] trans: nothing
//
func (v Action) CreateToolItem() (result Widget) {
	iv, err := _I.Get(77, "Action", "create_tool_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_disconnect_accelerator
//
func (v Action) DisconnectAccelerator() {
	iv, err := _I.Get(78, "Action", "disconnect_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_get_accel_closure
//
// [ result ] trans: nothing
//
func (v Action) GetAccelClosure() (result g.Closure) {
	iv, err := _I.Get(79, "Action", "get_accel_closure")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_get_accel_path
//
// [ result ] trans: nothing
//
func (v Action) GetAccelPath() (result string) {
	iv, err := _I.Get(80, "Action", "get_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_always_show_image
//
// [ result ] trans: nothing
//
func (v Action) GetAlwaysShowImage() (result bool) {
	iv, err := _I.Get(81, "Action", "get_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_get_gicon
//
// [ result ] trans: nothing
//
func (v Action) GetGicon() (result g.Icon) {
	iv, err := _I.Get(82, "Action", "get_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_get_icon_name
//
// [ result ] trans: nothing
//
func (v Action) GetIconName() (result string) {
	iv, err := _I.Get(83, "Action", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_is_important
//
// [ result ] trans: nothing
//
func (v Action) GetIsImportant() (result bool) {
	iv, err := _I.Get(84, "Action", "get_is_important")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_get_label
//
// [ result ] trans: nothing
//
func (v Action) GetLabel() (result string) {
	iv, err := _I.Get(85, "Action", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_name
//
// [ result ] trans: nothing
//
func (v Action) GetName() (result string) {
	iv, err := _I.Get(86, "Action", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_proxies
//
// [ result ] trans: nothing
//
func (v Action) GetProxies() (result g.SList) {
	iv, err := _I.Get(87, "Action", "get_proxies")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_get_sensitive
//
// [ result ] trans: nothing
//
func (v Action) GetSensitive() (result bool) {
	iv, err := _I.Get(88, "Action", "get_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_get_short_label
//
// [ result ] trans: nothing
//
func (v Action) GetShortLabel() (result string) {
	iv, err := _I.Get(89, "Action", "get_short_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_stock_id
//
// [ result ] trans: nothing
//
func (v Action) GetStockId() (result string) {
	iv, err := _I.Get(90, "Action", "get_stock_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_tooltip
//
// [ result ] trans: nothing
//
func (v Action) GetTooltip() (result string) {
	iv, err := _I.Get(91, "Action", "get_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_get_visible
//
// [ result ] trans: nothing
//
func (v Action) GetVisible() (result bool) {
	iv, err := _I.Get(92, "Action", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_get_visible_horizontal
//
// [ result ] trans: nothing
//
func (v Action) GetVisibleHorizontal() (result bool) {
	iv, err := _I.Get(93, "Action", "get_visible_horizontal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_get_visible_vertical
//
// [ result ] trans: nothing
//
func (v Action) GetVisibleVertical() (result bool) {
	iv, err := _I.Get(94, "Action", "get_visible_vertical")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_is_sensitive
//
// [ result ] trans: nothing
//
func (v Action) IsSensitive() (result bool) {
	iv, err := _I.Get(95, "Action", "is_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_is_visible
//
// [ result ] trans: nothing
//
func (v Action) IsVisible() (result bool) {
	iv, err := _I.Get(96, "Action", "is_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_set_accel_group
//
// [ accel_group ] trans: nothing
//
func (v Action) SetAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(97, "Action", "set_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_accel_path
//
// [ accel_path ] trans: nothing
//
func (v Action) SetAccelPath(accel_path string) {
	iv, err := _I.Get(98, "Action", "set_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	args := []gi.Argument{arg_v, arg_accel_path}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// Deprecated
//
// gtk_action_set_always_show_image
//
// [ always_show ] trans: nothing
//
func (v Action) SetAlwaysShowImage(always_show bool) {
	iv, err := _I.Get(99, "Action", "set_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_always_show := gi.NewBoolArgument(always_show)
	args := []gi.Argument{arg_v, arg_always_show}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_gicon
//
// [ icon ] trans: nothing
//
func (v Action) SetGicon(icon g.IIcon) {
	iv, err := _I.Get(100, "Action", "set_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_icon_name
//
// [ icon_name ] trans: nothing
//
func (v Action) SetIconName(icon_name string) {
	iv, err := _I.Get(101, "Action", "set_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_action_set_is_important
//
// [ is_important ] trans: nothing
//
func (v Action) SetIsImportant(is_important bool) {
	iv, err := _I.Get(102, "Action", "set_is_important")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_important := gi.NewBoolArgument(is_important)
	args := []gi.Argument{arg_v, arg_is_important}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_label
//
// [ label ] trans: nothing
//
func (v Action) SetLabel(label string) {
	iv, err := _I.Get(103, "Action", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// Deprecated
//
// gtk_action_set_sensitive
//
// [ sensitive ] trans: nothing
//
func (v Action) SetSensitive(sensitive bool) {
	iv, err := _I.Get(104, "Action", "set_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitive := gi.NewBoolArgument(sensitive)
	args := []gi.Argument{arg_v, arg_sensitive}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_short_label
//
// [ short_label ] trans: nothing
//
func (v Action) SetShortLabel(short_label string) {
	iv, err := _I.Get(105, "Action", "set_short_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_short_label := gi.CString(short_label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_short_label := gi.NewStringArgument(c_short_label)
	args := []gi.Argument{arg_v, arg_short_label}
	iv.Call(args, nil, nil)
	gi.Free(c_short_label)
}

// Deprecated
//
// gtk_action_set_stock_id
//
// [ stock_id ] trans: nothing
//
func (v Action) SetStockId(stock_id string) {
	iv, err := _I.Get(106, "Action", "set_stock_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// Deprecated
//
// gtk_action_set_tooltip
//
// [ tooltip ] trans: nothing
//
func (v Action) SetTooltip(tooltip string) {
	iv, err := _I.Get(107, "Action", "set_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_tooltip := gi.CString(tooltip)
	arg_v := gi.NewPointerArgument(v.P)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	args := []gi.Argument{arg_v, arg_tooltip}
	iv.Call(args, nil, nil)
	gi.Free(c_tooltip)
}

// Deprecated
//
// gtk_action_set_visible
//
// [ visible ] trans: nothing
//
func (v Action) SetVisible(visible bool) {
	iv, err := _I.Get(108, "Action", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_visible_horizontal
//
// [ visible_horizontal ] trans: nothing
//
func (v Action) SetVisibleHorizontal(visible_horizontal bool) {
	iv, err := _I.Get(109, "Action", "set_visible_horizontal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_horizontal := gi.NewBoolArgument(visible_horizontal)
	args := []gi.Argument{arg_v, arg_visible_horizontal}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_set_visible_vertical
//
// [ visible_vertical ] trans: nothing
//
func (v Action) SetVisibleVertical(visible_vertical bool) {
	iv, err := _I.Get(110, "Action", "set_visible_vertical")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_vertical := gi.NewBoolArgument(visible_vertical)
	args := []gi.Argument{arg_v, arg_visible_vertical}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_unblock_activate
//
func (v Action) UnblockActivate() {
	iv, err := _I.Get(111, "Action", "unblock_activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object ActionBar
type ActionBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapActionBar(p unsafe.Pointer) (r ActionBar) { r.P = p; return }

type IActionBar interface{ P_ActionBar() unsafe.Pointer }

func (v ActionBar) P_ActionBar() unsafe.Pointer        { return v.P }
func (v ActionBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ActionBar) P_Buildable() unsafe.Pointer        { return v.P }
func ActionBarGetType() gi.GType {
	ret := _I.GetGType(13, "ActionBar")
	return ret
}

// gtk_action_bar_new
//
// [ result ] trans: nothing
//
func NewActionBar() (result ActionBar) {
	iv, err := _I.Get(112, "ActionBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_action_bar_get_center_widget
//
// [ result ] trans: nothing
//
func (v ActionBar) GetCenterWidget() (result Widget) {
	iv, err := _I.Get(113, "ActionBar", "get_center_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_action_bar_pack_end
//
// [ child ] trans: nothing
//
func (v ActionBar) PackEnd(child IWidget) {
	iv, err := _I.Get(114, "ActionBar", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_action_bar_pack_start
//
// [ child ] trans: nothing
//
func (v ActionBar) PackStart(child IWidget) {
	iv, err := _I.Get(115, "ActionBar", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_action_bar_set_center_widget
//
// [ center_widget ] trans: nothing
//
func (v ActionBar) SetCenterWidget(center_widget IWidget) {
	iv, err := _I.Get(116, "ActionBar", "set_center_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if center_widget != nil {
		tmp = center_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_center_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_center_widget}
	iv.Call(args, nil, nil)
}

// ignore GType struct ActionBarClass

// Struct ActionBarPrivate
type ActionBarPrivate struct {
	P unsafe.Pointer
}

func ActionBarPrivateGetType() gi.GType {
	ret := _I.GetGType(14, "ActionBarPrivate")
	return ret
}

// ignore GType struct ActionClass

// Deprecated
//
// Struct ActionEntry
type ActionEntry struct {
	P unsafe.Pointer
}

const SizeOfStructActionEntry = 48

func ActionEntryGetType() gi.GType {
	ret := _I.GetGType(15, "ActionEntry")
	return ret
}

// Object ActionGroup
type ActionGroup struct {
	BuildableIfc
	g.Object
}

func WrapActionGroup(p unsafe.Pointer) (r ActionGroup) { r.P = p; return }

type IActionGroup interface{ P_ActionGroup() unsafe.Pointer }

func (v ActionGroup) P_ActionGroup() unsafe.Pointer { return v.P }
func (v ActionGroup) P_Buildable() unsafe.Pointer   { return v.P }
func ActionGroupGetType() gi.GType {
	ret := _I.GetGType(16, "ActionGroup")
	return ret
}

// Deprecated
//
// gtk_action_group_new
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func NewActionGroup(name string) (result ActionGroup) {
	iv, err := _I.Get(117, "ActionGroup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_group_add_action
//
// [ action ] trans: nothing
//
func (v ActionGroup) AddAction(action IAction) {
	iv, err := _I.Get(118, "ActionGroup", "add_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_add_action_with_accel
//
// [ action ] trans: nothing
//
// [ accelerator ] trans: nothing
//
func (v ActionGroup) AddActionWithAccel(action IAction, accelerator string) {
	iv, err := _I.Get(119, "ActionGroup", "add_action_with_accel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	c_accelerator := gi.CString(accelerator)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewPointerArgument(tmp)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	args := []gi.Argument{arg_v, arg_action, arg_accelerator}
	iv.Call(args, nil, nil)
	gi.Free(c_accelerator)
}

// Deprecated
//
// gtk_action_group_get_accel_group
//
// [ result ] trans: nothing
//
func (v ActionGroup) GetAccelGroup() (result AccelGroup) {
	iv, err := _I.Get(120, "ActionGroup", "get_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_group_get_action
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ActionGroup) GetAction(action_name string) (result Action) {
	iv, err := _I.Get(121, "ActionGroup", "get_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_group_get_name
//
// [ result ] trans: nothing
//
func (v ActionGroup) GetName() (result string) {
	iv, err := _I.Get(122, "ActionGroup", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_action_group_get_sensitive
//
// [ result ] trans: nothing
//
func (v ActionGroup) GetSensitive() (result bool) {
	iv, err := _I.Get(123, "ActionGroup", "get_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_group_get_visible
//
// [ result ] trans: nothing
//
func (v ActionGroup) GetVisible() (result bool) {
	iv, err := _I.Get(124, "ActionGroup", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_action_group_list_actions
//
// [ result ] trans: container
//
func (v ActionGroup) ListActions() (result g.List) {
	iv, err := _I.Get(125, "ActionGroup", "list_actions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_action_group_remove_action
//
// [ action ] trans: nothing
//
func (v ActionGroup) RemoveAction(action IAction) {
	iv, err := _I.Get(126, "ActionGroup", "remove_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_set_accel_group
//
// [ accel_group ] trans: nothing
//
func (v ActionGroup) SetAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(127, "ActionGroup", "set_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_set_sensitive
//
// [ sensitive ] trans: nothing
//
func (v ActionGroup) SetSensitive(sensitive bool) {
	iv, err := _I.Get(128, "ActionGroup", "set_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitive := gi.NewBoolArgument(sensitive)
	args := []gi.Argument{arg_v, arg_sensitive}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_set_translate_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ notify ] trans: nothing
//
func (v ActionGroup) SetTranslateFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, notify int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(129, "ActionGroup", "set_translate_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTranslateFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_notify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_notify}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_set_translation_domain
//
// [ domain ] trans: nothing
//
func (v ActionGroup) SetTranslationDomain(domain string) {
	iv, err := _I.Get(130, "ActionGroup", "set_translation_domain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_domain := gi.CString(domain)
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewStringArgument(c_domain)
	args := []gi.Argument{arg_v, arg_domain}
	iv.Call(args, nil, nil)
	gi.Free(c_domain)
}

// Deprecated
//
// gtk_action_group_set_visible
//
// [ visible ] trans: nothing
//
func (v ActionGroup) SetVisible(visible bool) {
	iv, err := _I.Get(131, "ActionGroup", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_action_group_translate_string
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ActionGroup) TranslateString(string string) (result string) {
	iv, err := _I.Get(132, "ActionGroup", "translate_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_v := gi.NewPointerArgument(v.P)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_v, arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.String().Copy()
	return
}

// ignore GType struct ActionGroupClass

// Struct ActionGroupPrivate
type ActionGroupPrivate struct {
	P unsafe.Pointer
}

func ActionGroupPrivateGetType() gi.GType {
	ret := _I.GetGType(17, "ActionGroupPrivate")
	return ret
}

// Struct ActionPrivate
type ActionPrivate struct {
	P unsafe.Pointer
}

func ActionPrivateGetType() gi.GType {
	ret := _I.GetGType(18, "ActionPrivate")
	return ret
}

// Interface Actionable
type Actionable struct {
	ActionableIfc
	P unsafe.Pointer
}
type ActionableIfc struct{}
type IActionable interface{ P_Actionable() unsafe.Pointer }

func (v Actionable) P_Actionable() unsafe.Pointer { return v.P }
func ActionableGetType() gi.GType {
	ret := _I.GetGType(19, "Actionable")
	return ret
}

// gtk_actionable_get_action_name
//
// [ result ] trans: nothing
//
func (v *ActionableIfc) GetActionName() (result string) {
	iv, err := _I.Get(133, "Actionable", "get_action_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_actionable_get_action_target_value
//
// [ result ] trans: nothing
//
func (v *ActionableIfc) GetActionTargetValue() (result g.Variant) {
	iv, err := _I.Get(134, "Actionable", "get_action_target_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_actionable_set_action_name
//
// [ action_name ] trans: nothing
//
func (v *ActionableIfc) SetActionName(action_name string) {
	iv, err := _I.Get(135, "Actionable", "set_action_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// gtk_actionable_set_action_target_value
//
// [ target_value ] trans: nothing
//
func (v *ActionableIfc) SetActionTargetValue(target_value g.Variant) {
	iv, err := _I.Get(136, "Actionable", "set_action_target_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_target_value := gi.NewPointerArgument(target_value.P)
	args := []gi.Argument{arg_v, arg_target_value}
	iv.Call(args, nil, nil)
}

// gtk_actionable_set_detailed_action_name
//
// [ detailed_action_name ] trans: nothing
//
func (v *ActionableIfc) SetDetailedActionName(detailed_action_name string) {
	iv, err := _I.Get(137, "Actionable", "set_detailed_action_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_detailed_action_name := gi.CString(detailed_action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_detailed_action_name := gi.NewStringArgument(c_detailed_action_name)
	args := []gi.Argument{arg_v, arg_detailed_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_detailed_action_name)
}

// ignore GType struct ActionableInterface

// Interface Activatable
type Activatable struct {
	ActivatableIfc
	P unsafe.Pointer
}
type ActivatableIfc struct{}
type IActivatable interface{ P_Activatable() unsafe.Pointer }

func (v Activatable) P_Activatable() unsafe.Pointer { return v.P }
func ActivatableGetType() gi.GType {
	ret := _I.GetGType(20, "Activatable")
	return ret
}

// Deprecated
//
// gtk_activatable_do_set_related_action
//
// [ action ] trans: nothing
//
func (v *ActivatableIfc) DoSetRelatedAction(action IAction) {
	iv, err := _I.Get(138, "Activatable", "do_set_related_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_activatable_get_related_action
//
// [ result ] trans: nothing
//
func (v *ActivatableIfc) GetRelatedAction() (result Action) {
	iv, err := _I.Get(139, "Activatable", "get_related_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_activatable_get_use_action_appearance
//
// [ result ] trans: nothing
//
func (v *ActivatableIfc) GetUseActionAppearance() (result bool) {
	iv, err := _I.Get(140, "Activatable", "get_use_action_appearance")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_activatable_set_related_action
//
// [ action ] trans: nothing
//
func (v *ActivatableIfc) SetRelatedAction(action IAction) {
	iv, err := _I.Get(141, "Activatable", "set_related_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_activatable_set_use_action_appearance
//
// [ use_appearance ] trans: nothing
//
func (v *ActivatableIfc) SetUseActionAppearance(use_appearance bool) {
	iv, err := _I.Get(142, "Activatable", "set_use_action_appearance")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_use_appearance := gi.NewBoolArgument(use_appearance)
	args := []gi.Argument{arg_v, arg_use_appearance}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_activatable_sync_action_properties
//
// [ action ] trans: nothing
//
func (v *ActivatableIfc) SyncActionProperties(action IAction) {
	iv, err := _I.Get(143, "Activatable", "sync_action_properties")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// ignore GType struct ActivatableIface

// Object Adjustment
type Adjustment struct {
	g.InitiallyUnowned
}

func WrapAdjustment(p unsafe.Pointer) (r Adjustment) { r.P = p; return }

type IAdjustment interface{ P_Adjustment() unsafe.Pointer }

func (v Adjustment) P_Adjustment() unsafe.Pointer { return v.P }
func AdjustmentGetType() gi.GType {
	ret := _I.GetGType(21, "Adjustment")
	return ret
}

// gtk_adjustment_new
//
// [ value ] trans: nothing
//
// [ lower ] trans: nothing
//
// [ upper ] trans: nothing
//
// [ step_increment ] trans: nothing
//
// [ page_increment ] trans: nothing
//
// [ page_size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAdjustment(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) (result Adjustment) {
	iv, err := _I.Get(144, "Adjustment", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewDoubleArgument(value)
	arg_lower := gi.NewDoubleArgument(lower)
	arg_upper := gi.NewDoubleArgument(upper)
	arg_step_increment := gi.NewDoubleArgument(step_increment)
	arg_page_increment := gi.NewDoubleArgument(page_increment)
	arg_page_size := gi.NewDoubleArgument(page_size)
	args := []gi.Argument{arg_value, arg_lower, arg_upper, arg_step_increment, arg_page_increment, arg_page_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_adjustment_changed
//
func (v Adjustment) Changed() {
	iv, err := _I.Get(145, "Adjustment", "changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_clamp_page
//
// [ lower ] trans: nothing
//
// [ upper ] trans: nothing
//
func (v Adjustment) ClampPage(lower float64, upper float64) {
	iv, err := _I.Get(146, "Adjustment", "clamp_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_lower := gi.NewDoubleArgument(lower)
	arg_upper := gi.NewDoubleArgument(upper)
	args := []gi.Argument{arg_v, arg_lower, arg_upper}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_configure
//
// [ value ] trans: nothing
//
// [ lower ] trans: nothing
//
// [ upper ] trans: nothing
//
// [ step_increment ] trans: nothing
//
// [ page_increment ] trans: nothing
//
// [ page_size ] trans: nothing
//
func (v Adjustment) Configure(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) {
	iv, err := _I.Get(147, "Adjustment", "configure")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	arg_lower := gi.NewDoubleArgument(lower)
	arg_upper := gi.NewDoubleArgument(upper)
	arg_step_increment := gi.NewDoubleArgument(step_increment)
	arg_page_increment := gi.NewDoubleArgument(page_increment)
	arg_page_size := gi.NewDoubleArgument(page_size)
	args := []gi.Argument{arg_v, arg_value, arg_lower, arg_upper, arg_step_increment, arg_page_increment, arg_page_size}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_get_lower
//
// [ result ] trans: nothing
//
func (v Adjustment) GetLower() (result float64) {
	iv, err := _I.Get(148, "Adjustment", "get_lower")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_minimum_increment
//
// [ result ] trans: nothing
//
func (v Adjustment) GetMinimumIncrement() (result float64) {
	iv, err := _I.Get(149, "Adjustment", "get_minimum_increment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_page_increment
//
// [ result ] trans: nothing
//
func (v Adjustment) GetPageIncrement() (result float64) {
	iv, err := _I.Get(150, "Adjustment", "get_page_increment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_page_size
//
// [ result ] trans: nothing
//
func (v Adjustment) GetPageSize() (result float64) {
	iv, err := _I.Get(151, "Adjustment", "get_page_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_step_increment
//
// [ result ] trans: nothing
//
func (v Adjustment) GetStepIncrement() (result float64) {
	iv, err := _I.Get(152, "Adjustment", "get_step_increment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_upper
//
// [ result ] trans: nothing
//
func (v Adjustment) GetUpper() (result float64) {
	iv, err := _I.Get(153, "Adjustment", "get_upper")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_get_value
//
// [ result ] trans: nothing
//
func (v Adjustment) GetValue() (result float64) {
	iv, err := _I.Get(154, "Adjustment", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_adjustment_set_lower
//
// [ lower ] trans: nothing
//
func (v Adjustment) SetLower(lower float64) {
	iv, err := _I.Get(155, "Adjustment", "set_lower")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_lower := gi.NewDoubleArgument(lower)
	args := []gi.Argument{arg_v, arg_lower}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_set_page_increment
//
// [ page_increment ] trans: nothing
//
func (v Adjustment) SetPageIncrement(page_increment float64) {
	iv, err := _I.Get(156, "Adjustment", "set_page_increment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_increment := gi.NewDoubleArgument(page_increment)
	args := []gi.Argument{arg_v, arg_page_increment}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_set_page_size
//
// [ page_size ] trans: nothing
//
func (v Adjustment) SetPageSize(page_size float64) {
	iv, err := _I.Get(157, "Adjustment", "set_page_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_size := gi.NewDoubleArgument(page_size)
	args := []gi.Argument{arg_v, arg_page_size}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_set_step_increment
//
// [ step_increment ] trans: nothing
//
func (v Adjustment) SetStepIncrement(step_increment float64) {
	iv, err := _I.Get(158, "Adjustment", "set_step_increment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_step_increment := gi.NewDoubleArgument(step_increment)
	args := []gi.Argument{arg_v, arg_step_increment}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_set_upper
//
// [ upper ] trans: nothing
//
func (v Adjustment) SetUpper(upper float64) {
	iv, err := _I.Get(159, "Adjustment", "set_upper")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_upper := gi.NewDoubleArgument(upper)
	args := []gi.Argument{arg_v, arg_upper}
	iv.Call(args, nil, nil)
}

// gtk_adjustment_set_value
//
// [ value ] trans: nothing
//
func (v Adjustment) SetValue(value float64) {
	iv, err := _I.Get(160, "Adjustment", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_adjustment_value_changed
//
func (v Adjustment) ValueChanged() {
	iv, err := _I.Get(161, "Adjustment", "value_changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct AdjustmentClass

// Struct AdjustmentPrivate
type AdjustmentPrivate struct {
	P unsafe.Pointer
}

func AdjustmentPrivateGetType() gi.GType {
	ret := _I.GetGType(22, "AdjustmentPrivate")
	return ret
}

// Enum Align
type AlignEnum int

const (
	AlignFill     AlignEnum = 0
	AlignStart    AlignEnum = 1
	AlignEnd      AlignEnum = 2
	AlignCenter   AlignEnum = 3
	AlignBaseline AlignEnum = 4
)

func AlignGetType() gi.GType {
	ret := _I.GetGType(23, "Align")
	return ret
}

// Object Alignment
type Alignment struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapAlignment(p unsafe.Pointer) (r Alignment) { r.P = p; return }

type IAlignment interface{ P_Alignment() unsafe.Pointer }

func (v Alignment) P_Alignment() unsafe.Pointer        { return v.P }
func (v Alignment) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Alignment) P_Buildable() unsafe.Pointer        { return v.P }
func AlignmentGetType() gi.GType {
	ret := _I.GetGType(24, "Alignment")
	return ret
}

// Deprecated
//
// gtk_alignment_new
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
// [ xscale ] trans: nothing
//
// [ yscale ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAlignment(xalign float32, yalign float32, xscale float32, yscale float32) (result Alignment) {
	iv, err := _I.Get(162, "Alignment", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	arg_xscale := gi.NewFloatArgument(xscale)
	arg_yscale := gi.NewFloatArgument(yscale)
	args := []gi.Argument{arg_xalign, arg_yalign, arg_xscale, arg_yscale}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_alignment_get_padding
//
// [ padding_top ] trans: everything, dir: out
//
// [ padding_bottom ] trans: everything, dir: out
//
// [ padding_left ] trans: everything, dir: out
//
// [ padding_right ] trans: everything, dir: out
//
func (v Alignment) GetPadding() (padding_top uint32, padding_bottom uint32, padding_left uint32, padding_right uint32) {
	iv, err := _I.Get(163, "Alignment", "get_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_padding_top := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_padding_bottom := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_padding_left := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_padding_right := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_padding_top, arg_padding_bottom, arg_padding_left, arg_padding_right}
	iv.Call(args, nil, &outArgs[0])
	padding_top = outArgs[0].Uint32()
	padding_bottom = outArgs[1].Uint32()
	padding_left = outArgs[2].Uint32()
	padding_right = outArgs[3].Uint32()
	return
}

// Deprecated
//
// gtk_alignment_set
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
// [ xscale ] trans: nothing
//
// [ yscale ] trans: nothing
//
func (v Alignment) Set(xalign float32, yalign float32, xscale float32, yscale float32) {
	iv, err := _I.Get(164, "Alignment", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	arg_xscale := gi.NewFloatArgument(xscale)
	arg_yscale := gi.NewFloatArgument(yscale)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign, arg_xscale, arg_yscale}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_alignment_set_padding
//
// [ padding_top ] trans: nothing
//
// [ padding_bottom ] trans: nothing
//
// [ padding_left ] trans: nothing
//
// [ padding_right ] trans: nothing
//
func (v Alignment) SetPadding(padding_top uint32, padding_bottom uint32, padding_left uint32, padding_right uint32) {
	iv, err := _I.Get(165, "Alignment", "set_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_padding_top := gi.NewUint32Argument(padding_top)
	arg_padding_bottom := gi.NewUint32Argument(padding_bottom)
	arg_padding_left := gi.NewUint32Argument(padding_left)
	arg_padding_right := gi.NewUint32Argument(padding_right)
	args := []gi.Argument{arg_v, arg_padding_top, arg_padding_bottom, arg_padding_left, arg_padding_right}
	iv.Call(args, nil, nil)
}

// ignore GType struct AlignmentClass

// Struct AlignmentPrivate
type AlignmentPrivate struct {
	P unsafe.Pointer
}

func AlignmentPrivateGetType() gi.GType {
	ret := _I.GetGType(25, "AlignmentPrivate")
	return ret
}

// Interface AppChooser
type AppChooser struct {
	AppChooserIfc
	P unsafe.Pointer
}
type AppChooserIfc struct{}
type IAppChooser interface{ P_AppChooser() unsafe.Pointer }

func (v AppChooser) P_AppChooser() unsafe.Pointer { return v.P }
func AppChooserGetType() gi.GType {
	ret := _I.GetGType(26, "AppChooser")
	return ret
}

// gtk_app_chooser_get_app_info
//
// [ result ] trans: everything
//
func (v *AppChooserIfc) GetAppInfo() (result g.AppInfo) {
	iv, err := _I.Get(166, "AppChooser", "get_app_info")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_get_content_type
//
// [ result ] trans: everything
//
func (v *AppChooserIfc) GetContentType() (result string) {
	iv, err := _I.Get(167, "AppChooser", "get_content_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_app_chooser_refresh
//
func (v *AppChooserIfc) Refresh() {
	iv, err := _I.Get(168, "AppChooser", "refresh")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object AppChooserButton
type AppChooserButton struct {
	atk.ImplementorIfaceIfc
	AppChooserIfc
	BuildableIfc
	CellEditableIfc
	CellLayoutIfc
	ComboBox
}

func WrapAppChooserButton(p unsafe.Pointer) (r AppChooserButton) { r.P = p; return }

type IAppChooserButton interface{ P_AppChooserButton() unsafe.Pointer }

func (v AppChooserButton) P_AppChooserButton() unsafe.Pointer { return v.P }
func (v AppChooserButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AppChooserButton) P_AppChooser() unsafe.Pointer       { return v.P }
func (v AppChooserButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v AppChooserButton) P_CellEditable() unsafe.Pointer     { return v.P }
func (v AppChooserButton) P_CellLayout() unsafe.Pointer       { return v.P }
func AppChooserButtonGetType() gi.GType {
	ret := _I.GetGType(27, "AppChooserButton")
	return ret
}

// gtk_app_chooser_button_new
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAppChooserButton(content_type string) (result AppChooserButton) {
	iv, err := _I.Get(169, "AppChooserButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_button_append_custom_item
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ icon ] trans: nothing
//
func (v AppChooserButton) AppendCustomItem(name string, label string, icon g.IIcon) {
	iv, err := _I.Get(170, "AppChooserButton", "append_custom_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_name, arg_label, arg_icon}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_label)
}

// gtk_app_chooser_button_append_separator
//
func (v AppChooserButton) AppendSeparator() {
	iv, err := _I.Get(171, "AppChooserButton", "append_separator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_button_get_heading
//
// [ result ] trans: nothing
//
func (v AppChooserButton) GetHeading() (result string) {
	iv, err := _I.Get(172, "AppChooserButton", "get_heading")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_app_chooser_button_get_show_default_item
//
// [ result ] trans: nothing
//
func (v AppChooserButton) GetShowDefaultItem() (result bool) {
	iv, err := _I.Get(173, "AppChooserButton", "get_show_default_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_button_get_show_dialog_item
//
// [ result ] trans: nothing
//
func (v AppChooserButton) GetShowDialogItem() (result bool) {
	iv, err := _I.Get(174, "AppChooserButton", "get_show_dialog_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_button_set_active_custom_item
//
// [ name ] trans: nothing
//
func (v AppChooserButton) SetActiveCustomItem(name string) {
	iv, err := _I.Get(175, "AppChooserButton", "set_active_custom_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_app_chooser_button_set_heading
//
// [ heading ] trans: nothing
//
func (v AppChooserButton) SetHeading(heading string) {
	iv, err := _I.Get(176, "AppChooserButton", "set_heading")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_heading := gi.CString(heading)
	arg_v := gi.NewPointerArgument(v.P)
	arg_heading := gi.NewStringArgument(c_heading)
	args := []gi.Argument{arg_v, arg_heading}
	iv.Call(args, nil, nil)
	gi.Free(c_heading)
}

// gtk_app_chooser_button_set_show_default_item
//
// [ setting ] trans: nothing
//
func (v AppChooserButton) SetShowDefaultItem(setting bool) {
	iv, err := _I.Get(177, "AppChooserButton", "set_show_default_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_button_set_show_dialog_item
//
// [ setting ] trans: nothing
//
func (v AppChooserButton) SetShowDialogItem(setting bool) {
	iv, err := _I.Get(178, "AppChooserButton", "set_show_dialog_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// ignore GType struct AppChooserButtonClass

// Struct AppChooserButtonPrivate
type AppChooserButtonPrivate struct {
	P unsafe.Pointer
}

func AppChooserButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(28, "AppChooserButtonPrivate")
	return ret
}

// Object AppChooserDialog
type AppChooserDialog struct {
	atk.ImplementorIfaceIfc
	AppChooserIfc
	BuildableIfc
	Dialog
}

func WrapAppChooserDialog(p unsafe.Pointer) (r AppChooserDialog) { r.P = p; return }

type IAppChooserDialog interface{ P_AppChooserDialog() unsafe.Pointer }

func (v AppChooserDialog) P_AppChooserDialog() unsafe.Pointer { return v.P }
func (v AppChooserDialog) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AppChooserDialog) P_AppChooser() unsafe.Pointer       { return v.P }
func (v AppChooserDialog) P_Buildable() unsafe.Pointer        { return v.P }
func AppChooserDialogGetType() gi.GType {
	ret := _I.GetGType(29, "AppChooserDialog")
	return ret
}

// gtk_app_chooser_dialog_new
//
// [ parent ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ file ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAppChooserDialog(parent IWindow, flags DialogFlags, file g.IFile) (result AppChooserDialog) {
	iv, err := _I.Get(179, "AppChooserDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	var tmp1 unsafe.Pointer
	if file != nil {
		tmp1 = file.P_File()
	}
	arg_parent := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_file := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_parent, arg_flags, arg_file}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_dialog_new_for_content_type
//
// [ parent ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAppChooserDialogForContentType(parent IWindow, flags DialogFlags, content_type string) (result AppChooserDialog) {
	iv, err := _I.Get(180, "AppChooserDialog", "new_for_content_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	c_content_type := gi.CString(content_type)
	arg_parent := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_parent, arg_flags, arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_dialog_get_heading
//
// [ result ] trans: nothing
//
func (v AppChooserDialog) GetHeading() (result string) {
	iv, err := _I.Get(181, "AppChooserDialog", "get_heading")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_app_chooser_dialog_get_widget
//
// [ result ] trans: nothing
//
func (v AppChooserDialog) GetWidget() (result Widget) {
	iv, err := _I.Get(182, "AppChooserDialog", "get_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_dialog_set_heading
//
// [ heading ] trans: nothing
//
func (v AppChooserDialog) SetHeading(heading string) {
	iv, err := _I.Get(183, "AppChooserDialog", "set_heading")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_heading := gi.CString(heading)
	arg_v := gi.NewPointerArgument(v.P)
	arg_heading := gi.NewStringArgument(c_heading)
	args := []gi.Argument{arg_v, arg_heading}
	iv.Call(args, nil, nil)
	gi.Free(c_heading)
}

// ignore GType struct AppChooserDialogClass

// Struct AppChooserDialogPrivate
type AppChooserDialogPrivate struct {
	P unsafe.Pointer
}

func AppChooserDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(30, "AppChooserDialogPrivate")
	return ret
}

// Object AppChooserWidget
type AppChooserWidget struct {
	atk.ImplementorIfaceIfc
	AppChooserIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapAppChooserWidget(p unsafe.Pointer) (r AppChooserWidget) { r.P = p; return }

type IAppChooserWidget interface{ P_AppChooserWidget() unsafe.Pointer }

func (v AppChooserWidget) P_AppChooserWidget() unsafe.Pointer { return v.P }
func (v AppChooserWidget) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AppChooserWidget) P_AppChooser() unsafe.Pointer       { return v.P }
func (v AppChooserWidget) P_Buildable() unsafe.Pointer        { return v.P }
func (v AppChooserWidget) P_Orientable() unsafe.Pointer       { return v.P }
func AppChooserWidgetGetType() gi.GType {
	ret := _I.GetGType(31, "AppChooserWidget")
	return ret
}

// gtk_app_chooser_widget_new
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAppChooserWidget(content_type string) (result AppChooserWidget) {
	iv, err := _I.Get(184, "AppChooserWidget", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// gtk_app_chooser_widget_get_default_text
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetDefaultText() (result string) {
	iv, err := _I.Get(185, "AppChooserWidget", "get_default_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_app_chooser_widget_get_show_all
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetShowAll() (result bool) {
	iv, err := _I.Get(186, "AppChooserWidget", "get_show_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_widget_get_show_default
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetShowDefault() (result bool) {
	iv, err := _I.Get(187, "AppChooserWidget", "get_show_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_widget_get_show_fallback
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetShowFallback() (result bool) {
	iv, err := _I.Get(188, "AppChooserWidget", "get_show_fallback")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_widget_get_show_other
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetShowOther() (result bool) {
	iv, err := _I.Get(189, "AppChooserWidget", "get_show_other")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_widget_get_show_recommended
//
// [ result ] trans: nothing
//
func (v AppChooserWidget) GetShowRecommended() (result bool) {
	iv, err := _I.Get(190, "AppChooserWidget", "get_show_recommended")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_app_chooser_widget_set_default_text
//
// [ text ] trans: nothing
//
func (v AppChooserWidget) SetDefaultText(text string) {
	iv, err := _I.Get(191, "AppChooserWidget", "set_default_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_app_chooser_widget_set_show_all
//
// [ setting ] trans: nothing
//
func (v AppChooserWidget) SetShowAll(setting bool) {
	iv, err := _I.Get(192, "AppChooserWidget", "set_show_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_widget_set_show_default
//
// [ setting ] trans: nothing
//
func (v AppChooserWidget) SetShowDefault(setting bool) {
	iv, err := _I.Get(193, "AppChooserWidget", "set_show_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_widget_set_show_fallback
//
// [ setting ] trans: nothing
//
func (v AppChooserWidget) SetShowFallback(setting bool) {
	iv, err := _I.Get(194, "AppChooserWidget", "set_show_fallback")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_widget_set_show_other
//
// [ setting ] trans: nothing
//
func (v AppChooserWidget) SetShowOther(setting bool) {
	iv, err := _I.Get(195, "AppChooserWidget", "set_show_other")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_app_chooser_widget_set_show_recommended
//
// [ setting ] trans: nothing
//
func (v AppChooserWidget) SetShowRecommended(setting bool) {
	iv, err := _I.Get(196, "AppChooserWidget", "set_show_recommended")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// ignore GType struct AppChooserWidgetClass

// Struct AppChooserWidgetPrivate
type AppChooserWidgetPrivate struct {
	P unsafe.Pointer
}

func AppChooserWidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(32, "AppChooserWidgetPrivate")
	return ret
}

// Object Application
type Application struct {
	g.ActionGroupIfc
	g.ActionMapIfc
	g.Application
}

func WrapApplication(p unsafe.Pointer) (r Application) { r.P = p; return }

type IApplication interface{ P_Application() unsafe.Pointer }

func (v Application) P_Application() unsafe.Pointer { return v.P }
func (v Application) P_ActionGroup() unsafe.Pointer { return v.P }
func (v Application) P_ActionMap() unsafe.Pointer   { return v.P }
func ApplicationGetType() gi.GType {
	ret := _I.GetGType(33, "Application")
	return ret
}

// gtk_application_new
//
// [ application_id ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewApplication(application_id string, flags g.ApplicationFlags) (result Application) {
	iv, err := _I.Get(197, "Application", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_application_id := gi.CString(application_id)
	arg_application_id := gi.NewStringArgument(c_application_id)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_application_id, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_application_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_application_add_accelerator
//
// [ accelerator ] trans: nothing
//
// [ action_name ] trans: nothing
//
// [ parameter ] trans: nothing
//
func (v Application) AddAccelerator(accelerator string, action_name string, parameter g.Variant) {
	iv, err := _I.Get(198, "Application", "add_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accelerator := gi.CString(accelerator)
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_parameter := gi.NewPointerArgument(parameter.P)
	args := []gi.Argument{arg_v, arg_accelerator, arg_action_name, arg_parameter}
	iv.Call(args, nil, nil)
	gi.Free(c_accelerator)
	gi.Free(c_action_name)
}

// gtk_application_add_window
//
// [ window ] trans: nothing
//
func (v Application) AddWindow(window IWindow) {
	iv, err := _I.Get(199, "Application", "add_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_application_get_accels_for_action
//
// [ detailed_action_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v Application) GetAccelsForAction(detailed_action_name string) (result gi.CStrArray) {
	iv, err := _I.Get(200, "Application", "get_accels_for_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_detailed_action_name := gi.CString(detailed_action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_detailed_action_name := gi.NewStringArgument(c_detailed_action_name)
	args := []gi.Argument{arg_v, arg_detailed_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_detailed_action_name)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_application_get_actions_for_accel
//
// [ accel ] trans: nothing
//
// [ result ] trans: everything
//
func (v Application) GetActionsForAccel(accel string) (result gi.CStrArray) {
	iv, err := _I.Get(201, "Application", "get_actions_for_accel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel := gi.CString(accel)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel := gi.NewStringArgument(c_accel)
	args := []gi.Argument{arg_v, arg_accel}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_accel)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_application_get_active_window
//
// [ result ] trans: nothing
//
func (v Application) GetActiveWindow() (result Window) {
	iv, err := _I.Get(202, "Application", "get_active_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_get_app_menu
//
// [ result ] trans: nothing
//
func (v Application) GetAppMenu() (result g.MenuModel) {
	iv, err := _I.Get(203, "Application", "get_app_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_get_menu_by_id
//
// [ id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) GetMenuById(id string) (result g.Menu) {
	iv, err := _I.Get(204, "Application", "get_menu_by_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	args := []gi.Argument{arg_v, arg_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_id)
	result.P = ret.Pointer()
	return
}

// gtk_application_get_menubar
//
// [ result ] trans: nothing
//
func (v Application) GetMenubar() (result g.MenuModel) {
	iv, err := _I.Get(205, "Application", "get_menubar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_get_window_by_id
//
// [ id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) GetWindowById(id uint32) (result Window) {
	iv, err := _I.Get(206, "Application", "get_window_by_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewUint32Argument(id)
	args := []gi.Argument{arg_v, arg_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_get_windows
//
// [ result ] trans: nothing
//
func (v Application) GetWindows() (result g.List) {
	iv, err := _I.Get(207, "Application", "get_windows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_inhibit
//
// [ window ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ reason ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) Inhibit(window IWindow, flags ApplicationInhibitFlags, reason string) (result uint32) {
	iv, err := _I.Get(208, "Application", "inhibit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	c_reason := gi.CString(reason)
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_reason := gi.NewStringArgument(c_reason)
	args := []gi.Argument{arg_v, arg_window, arg_flags, arg_reason}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_reason)
	result = ret.Uint32()
	return
}

// gtk_application_is_inhibited
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) IsInhibited(flags ApplicationInhibitFlags) (result bool) {
	iv, err := _I.Get(209, "Application", "is_inhibited")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_application_list_action_descriptions
//
// [ result ] trans: everything
//
func (v Application) ListActionDescriptions() (result gi.CStrArray) {
	iv, err := _I.Get(210, "Application", "list_action_descriptions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_application_prefers_app_menu
//
// [ result ] trans: nothing
//
func (v Application) PrefersAppMenu() (result bool) {
	iv, err := _I.Get(211, "Application", "prefers_app_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_application_remove_accelerator
//
// [ action_name ] trans: nothing
//
// [ parameter ] trans: nothing
//
func (v Application) RemoveAccelerator(action_name string, parameter g.Variant) {
	iv, err := _I.Get(212, "Application", "remove_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_parameter := gi.NewPointerArgument(parameter.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_parameter}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// gtk_application_remove_window
//
// [ window ] trans: nothing
//
func (v Application) RemoveWindow(window IWindow) {
	iv, err := _I.Get(213, "Application", "remove_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_application_set_accels_for_action
//
// [ detailed_action_name ] trans: nothing
//
// [ accels ] trans: nothing
//
func (v Application) SetAccelsForAction(detailed_action_name string, accels gi.CStrArray) {
	iv, err := _I.Get(214, "Application", "set_accels_for_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_detailed_action_name := gi.CString(detailed_action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_detailed_action_name := gi.NewStringArgument(c_detailed_action_name)
	arg_accels := gi.NewPointerArgument(accels.P)
	args := []gi.Argument{arg_v, arg_detailed_action_name, arg_accels}
	iv.Call(args, nil, nil)
	gi.Free(c_detailed_action_name)
}

// gtk_application_set_app_menu
//
// [ app_menu ] trans: nothing
//
func (v Application) SetAppMenu(app_menu g.IMenuModel) {
	iv, err := _I.Get(215, "Application", "set_app_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if app_menu != nil {
		tmp = app_menu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_app_menu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_app_menu}
	iv.Call(args, nil, nil)
}

// gtk_application_set_menubar
//
// [ menubar ] trans: nothing
//
func (v Application) SetMenubar(menubar g.IMenuModel) {
	iv, err := _I.Get(216, "Application", "set_menubar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menubar != nil {
		tmp = menubar.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menubar := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menubar}
	iv.Call(args, nil, nil)
}

// gtk_application_uninhibit
//
// [ cookie ] trans: nothing
//
func (v Application) Uninhibit(cookie uint32) {
	iv, err := _I.Get(217, "Application", "uninhibit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cookie := gi.NewUint32Argument(cookie)
	args := []gi.Argument{arg_v, arg_cookie}
	iv.Call(args, nil, nil)
}

// ignore GType struct ApplicationClass

// Flags ApplicationInhibitFlags
type ApplicationInhibitFlags int

const (
	ApplicationInhibitFlagsLogout  ApplicationInhibitFlags = 1
	ApplicationInhibitFlagsSwitch  ApplicationInhibitFlags = 2
	ApplicationInhibitFlagsSuspend ApplicationInhibitFlags = 4
	ApplicationInhibitFlagsIdle    ApplicationInhibitFlags = 8
)

func ApplicationInhibitFlagsGetType() gi.GType {
	ret := _I.GetGType(34, "ApplicationInhibitFlags")
	return ret
}

// Struct ApplicationPrivate
type ApplicationPrivate struct {
	P unsafe.Pointer
}

func ApplicationPrivateGetType() gi.GType {
	ret := _I.GetGType(35, "ApplicationPrivate")
	return ret
}

// Object ApplicationWindow
type ApplicationWindow struct {
	atk.ImplementorIfaceIfc
	g.ActionGroupIfc
	g.ActionMapIfc
	BuildableIfc
	Window
}

func WrapApplicationWindow(p unsafe.Pointer) (r ApplicationWindow) { r.P = p; return }

type IApplicationWindow interface{ P_ApplicationWindow() unsafe.Pointer }

func (v ApplicationWindow) P_ApplicationWindow() unsafe.Pointer { return v.P }
func (v ApplicationWindow) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v ApplicationWindow) P_ActionGroup() unsafe.Pointer       { return v.P }
func (v ApplicationWindow) P_ActionMap() unsafe.Pointer         { return v.P }
func (v ApplicationWindow) P_Buildable() unsafe.Pointer         { return v.P }
func ApplicationWindowGetType() gi.GType {
	ret := _I.GetGType(36, "ApplicationWindow")
	return ret
}

// gtk_application_window_new
//
// [ application ] trans: nothing
//
// [ result ] trans: nothing
//
func NewApplicationWindow(application IApplication) (result ApplicationWindow) {
	iv, err := _I.Get(218, "ApplicationWindow", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if application != nil {
		tmp = application.P_Application()
	}
	arg_application := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_application}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_window_get_help_overlay
//
// [ result ] trans: nothing
//
func (v ApplicationWindow) GetHelpOverlay() (result ShortcutsWindow) {
	iv, err := _I.Get(219, "ApplicationWindow", "get_help_overlay")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_application_window_get_id
//
// [ result ] trans: nothing
//
func (v ApplicationWindow) GetId() (result uint32) {
	iv, err := _I.Get(220, "ApplicationWindow", "get_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_application_window_get_show_menubar
//
// [ result ] trans: nothing
//
func (v ApplicationWindow) GetShowMenubar() (result bool) {
	iv, err := _I.Get(221, "ApplicationWindow", "get_show_menubar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_application_window_set_help_overlay
//
// [ help_overlay ] trans: nothing
//
func (v ApplicationWindow) SetHelpOverlay(help_overlay IShortcutsWindow) {
	iv, err := _I.Get(222, "ApplicationWindow", "set_help_overlay")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if help_overlay != nil {
		tmp = help_overlay.P_ShortcutsWindow()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_help_overlay := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_help_overlay}
	iv.Call(args, nil, nil)
}

// gtk_application_window_set_show_menubar
//
// [ show_menubar ] trans: nothing
//
func (v ApplicationWindow) SetShowMenubar(show_menubar bool) {
	iv, err := _I.Get(223, "ApplicationWindow", "set_show_menubar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_menubar := gi.NewBoolArgument(show_menubar)
	args := []gi.Argument{arg_v, arg_show_menubar}
	iv.Call(args, nil, nil)
}

// ignore GType struct ApplicationWindowClass

// Struct ApplicationWindowPrivate
type ApplicationWindowPrivate struct {
	P unsafe.Pointer
}

func ApplicationWindowPrivateGetType() gi.GType {
	ret := _I.GetGType(37, "ApplicationWindowPrivate")
	return ret
}

// Object Arrow
type Arrow struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Misc
}

func WrapArrow(p unsafe.Pointer) (r Arrow) { r.P = p; return }

type IArrow interface{ P_Arrow() unsafe.Pointer }

func (v Arrow) P_Arrow() unsafe.Pointer            { return v.P }
func (v Arrow) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Arrow) P_Buildable() unsafe.Pointer        { return v.P }
func ArrowGetType() gi.GType {
	ret := _I.GetGType(38, "Arrow")
	return ret
}

// Deprecated
//
// gtk_arrow_new
//
// [ arrow_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ result ] trans: nothing
//
func NewArrow(arrow_type ArrowTypeEnum, shadow_type ShadowTypeEnum) (result Arrow) {
	iv, err := _I.Get(224, "Arrow", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_arrow_type := gi.NewIntArgument(int(arrow_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	args := []gi.Argument{arg_arrow_type, arg_shadow_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_arrow_set
//
// [ arrow_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
func (v Arrow) Set(arrow_type ArrowTypeEnum, shadow_type ShadowTypeEnum) {
	iv, err := _I.Get(225, "Arrow", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_arrow_type := gi.NewIntArgument(int(arrow_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	args := []gi.Argument{arg_v, arg_arrow_type, arg_shadow_type}
	iv.Call(args, nil, nil)
}

// Object ArrowAccessible
type ArrowAccessible struct {
	atk.ComponentIfc
	atk.ImageIfc
	WidgetAccessible
}

func WrapArrowAccessible(p unsafe.Pointer) (r ArrowAccessible) { r.P = p; return }

type IArrowAccessible interface{ P_ArrowAccessible() unsafe.Pointer }

func (v ArrowAccessible) P_ArrowAccessible() unsafe.Pointer { return v.P }
func (v ArrowAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v ArrowAccessible) P_Image() unsafe.Pointer           { return v.P }
func ArrowAccessibleGetType() gi.GType {
	ret := _I.GetGType(39, "ArrowAccessible")
	return ret
}

// ignore GType struct ArrowAccessibleClass

// Struct ArrowAccessiblePrivate
type ArrowAccessiblePrivate struct {
	P unsafe.Pointer
}

func ArrowAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(40, "ArrowAccessiblePrivate")
	return ret
}

// ignore GType struct ArrowClass

// Enum ArrowPlacement
type ArrowPlacementEnum int

const (
	ArrowPlacementBoth  ArrowPlacementEnum = 0
	ArrowPlacementStart ArrowPlacementEnum = 1
	ArrowPlacementEnd   ArrowPlacementEnum = 2
)

func ArrowPlacementGetType() gi.GType {
	ret := _I.GetGType(41, "ArrowPlacement")
	return ret
}

// Struct ArrowPrivate
type ArrowPrivate struct {
	P unsafe.Pointer
}

func ArrowPrivateGetType() gi.GType {
	ret := _I.GetGType(42, "ArrowPrivate")
	return ret
}

// Enum ArrowType
type ArrowTypeEnum int

const (
	ArrowTypeUp    ArrowTypeEnum = 0
	ArrowTypeDown  ArrowTypeEnum = 1
	ArrowTypeLeft  ArrowTypeEnum = 2
	ArrowTypeRight ArrowTypeEnum = 3
	ArrowTypeNone  ArrowTypeEnum = 4
)

func ArrowTypeGetType() gi.GType {
	ret := _I.GetGType(43, "ArrowType")
	return ret
}

// Object AspectFrame
type AspectFrame struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Frame
}

func WrapAspectFrame(p unsafe.Pointer) (r AspectFrame) { r.P = p; return }

type IAspectFrame interface{ P_AspectFrame() unsafe.Pointer }

func (v AspectFrame) P_AspectFrame() unsafe.Pointer      { return v.P }
func (v AspectFrame) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v AspectFrame) P_Buildable() unsafe.Pointer        { return v.P }
func AspectFrameGetType() gi.GType {
	ret := _I.GetGType(44, "AspectFrame")
	return ret
}

// gtk_aspect_frame_new
//
// [ label ] trans: nothing
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
// [ ratio ] trans: nothing
//
// [ obey_child ] trans: nothing
//
// [ result ] trans: nothing
//
func NewAspectFrame(label string, xalign float32, yalign float32, ratio float32, obey_child bool) (result AspectFrame) {
	iv, err := _I.Get(226, "AspectFrame", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	arg_ratio := gi.NewFloatArgument(ratio)
	arg_obey_child := gi.NewBoolArgument(obey_child)
	args := []gi.Argument{arg_label, arg_xalign, arg_yalign, arg_ratio, arg_obey_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_aspect_frame_set
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
// [ ratio ] trans: nothing
//
// [ obey_child ] trans: nothing
//
func (v AspectFrame) Set(xalign float32, yalign float32, ratio float32, obey_child bool) {
	iv, err := _I.Get(227, "AspectFrame", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	arg_ratio := gi.NewFloatArgument(ratio)
	arg_obey_child := gi.NewBoolArgument(obey_child)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign, arg_ratio, arg_obey_child}
	iv.Call(args, nil, nil)
}

// ignore GType struct AspectFrameClass

// Struct AspectFramePrivate
type AspectFramePrivate struct {
	P unsafe.Pointer
}

func AspectFramePrivateGetType() gi.GType {
	ret := _I.GetGType(45, "AspectFramePrivate")
	return ret
}

// Object Assistant
type Assistant struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Window
}

func WrapAssistant(p unsafe.Pointer) (r Assistant) { r.P = p; return }

type IAssistant interface{ P_Assistant() unsafe.Pointer }

func (v Assistant) P_Assistant() unsafe.Pointer        { return v.P }
func (v Assistant) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Assistant) P_Buildable() unsafe.Pointer        { return v.P }
func AssistantGetType() gi.GType {
	ret := _I.GetGType(46, "Assistant")
	return ret
}

// gtk_assistant_new
//
// [ result ] trans: nothing
//
func NewAssistant() (result Assistant) {
	iv, err := _I.Get(228, "Assistant", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_assistant_add_action_widget
//
// [ child ] trans: nothing
//
func (v Assistant) AddActionWidget(child IWidget) {
	iv, err := _I.Get(229, "Assistant", "add_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_assistant_append_page
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) AppendPage(page IWidget) (result int32) {
	iv, err := _I.Get(230, "Assistant", "append_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_assistant_commit
//
func (v Assistant) Commit() {
	iv, err := _I.Get(231, "Assistant", "commit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_assistant_get_current_page
//
// [ result ] trans: nothing
//
func (v Assistant) GetCurrentPage() (result int32) {
	iv, err := _I.Get(232, "Assistant", "get_current_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_assistant_get_n_pages
//
// [ result ] trans: nothing
//
func (v Assistant) GetNPages() (result int32) {
	iv, err := _I.Get(233, "Assistant", "get_n_pages")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_assistant_get_nth_page
//
// [ page_num ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetNthPage(page_num int32) (result Widget) {
	iv, err := _I.Get(234, "Assistant", "get_nth_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_assistant_get_page_complete
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageComplete(page IWidget) (result bool) {
	iv, err := _I.Get(235, "Assistant", "get_page_complete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_assistant_get_page_has_padding
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageHasPadding(page IWidget) (result bool) {
	iv, err := _I.Get(236, "Assistant", "get_page_has_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_assistant_get_page_header_image
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageHeaderImage(page IWidget) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(237, "Assistant", "get_page_header_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_assistant_get_page_side_image
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageSideImage(page IWidget) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(238, "Assistant", "get_page_side_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_assistant_get_page_title
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageTitle(page IWidget) (result string) {
	iv, err := _I.Get(239, "Assistant", "get_page_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_assistant_get_page_type
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) GetPageType(page IWidget) (result AssistantPageTypeEnum) {
	iv, err := _I.Get(240, "Assistant", "get_page_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = AssistantPageTypeEnum(ret.Int())
	return
}

// gtk_assistant_insert_page
//
// [ page ] trans: nothing
//
// [ position ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) InsertPage(page IWidget, position int32) (result int32) {
	iv, err := _I.Get(241, "Assistant", "insert_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_page, arg_position}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_assistant_next_page
//
func (v Assistant) NextPage() {
	iv, err := _I.Get(242, "Assistant", "next_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_assistant_prepend_page
//
// [ page ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Assistant) PrependPage(page IWidget) (result int32) {
	iv, err := _I.Get(243, "Assistant", "prepend_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_page}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_assistant_previous_page
//
func (v Assistant) PreviousPage() {
	iv, err := _I.Get(244, "Assistant", "previous_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_assistant_remove_action_widget
//
// [ child ] trans: nothing
//
func (v Assistant) RemoveActionWidget(child IWidget) {
	iv, err := _I.Get(245, "Assistant", "remove_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_assistant_remove_page
//
// [ page_num ] trans: nothing
//
func (v Assistant) RemovePage(page_num int32) {
	iv, err := _I.Get(246, "Assistant", "remove_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	iv.Call(args, nil, nil)
}

// gtk_assistant_set_current_page
//
// [ page_num ] trans: nothing
//
func (v Assistant) SetCurrentPage(page_num int32) {
	iv, err := _I.Get(247, "Assistant", "set_current_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	iv.Call(args, nil, nil)
}

// gtk_assistant_set_forward_page_func
//
// [ page_func ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v Assistant) SetForwardPageFunc(page_func int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(248, "Assistant", "set_forward_page_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myAssistantPageFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_page_func, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_assistant_set_page_complete
//
// [ page ] trans: nothing
//
// [ complete ] trans: nothing
//
func (v Assistant) SetPageComplete(page IWidget, complete bool) {
	iv, err := _I.Get(249, "Assistant", "set_page_complete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_complete := gi.NewBoolArgument(complete)
	args := []gi.Argument{arg_v, arg_page, arg_complete}
	iv.Call(args, nil, nil)
}

// gtk_assistant_set_page_has_padding
//
// [ page ] trans: nothing
//
// [ has_padding ] trans: nothing
//
func (v Assistant) SetPageHasPadding(page IWidget, has_padding bool) {
	iv, err := _I.Get(250, "Assistant", "set_page_has_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_has_padding := gi.NewBoolArgument(has_padding)
	args := []gi.Argument{arg_v, arg_page, arg_has_padding}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_assistant_set_page_header_image
//
// [ page ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
func (v Assistant) SetPageHeaderImage(page IWidget, pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(251, "Assistant", "set_page_header_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if pixbuf != nil {
		tmp1 = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_pixbuf := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_page, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_assistant_set_page_side_image
//
// [ page ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
func (v Assistant) SetPageSideImage(page IWidget, pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(252, "Assistant", "set_page_side_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if pixbuf != nil {
		tmp1 = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_pixbuf := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_page, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// gtk_assistant_set_page_title
//
// [ page ] trans: nothing
//
// [ title ] trans: nothing
//
func (v Assistant) SetPageTitle(page IWidget, title string) {
	iv, err := _I.Get(253, "Assistant", "set_page_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_page, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_assistant_set_page_type
//
// [ page ] trans: nothing
//
// [ type1 ] trans: nothing
//
func (v Assistant) SetPageType(page IWidget, type1 AssistantPageTypeEnum) {
	iv, err := _I.Get(254, "Assistant", "set_page_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if page != nil {
		tmp = page.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page := gi.NewPointerArgument(tmp)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_page, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_assistant_update_buttons_state
//
func (v Assistant) UpdateButtonsState() {
	iv, err := _I.Get(255, "Assistant", "update_buttons_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct AssistantClass

type AssistantPageFuncStruct struct {
	F_current_page int32
	F_data         unsafe.Pointer
}

func GetPointer_myAssistantPageFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkAssistantPageFunc())
}

//export myGtkAssistantPageFunc
func myGtkAssistantPageFunc(current_page C.gint32, data C.gpointer) {
	// TODO: not found user_data
}

// Enum AssistantPageType
type AssistantPageTypeEnum int

const (
	AssistantPageTypeContent  AssistantPageTypeEnum = 0
	AssistantPageTypeIntro    AssistantPageTypeEnum = 1
	AssistantPageTypeConfirm  AssistantPageTypeEnum = 2
	AssistantPageTypeSummary  AssistantPageTypeEnum = 3
	AssistantPageTypeProgress AssistantPageTypeEnum = 4
	AssistantPageTypeCustom   AssistantPageTypeEnum = 5
)

func AssistantPageTypeGetType() gi.GType {
	ret := _I.GetGType(47, "AssistantPageType")
	return ret
}

// Struct AssistantPrivate
type AssistantPrivate struct {
	P unsafe.Pointer
}

func AssistantPrivateGetType() gi.GType {
	ret := _I.GetGType(48, "AssistantPrivate")
	return ret
}

// Flags AttachOptions
type AttachOptionsFlags int

const (
	AttachOptionsExpand AttachOptionsFlags = 1
	AttachOptionsShrink AttachOptionsFlags = 2
	AttachOptionsFill   AttachOptionsFlags = 4
)

func AttachOptionsGetType() gi.GType {
	ret := _I.GetGType(49, "AttachOptions")
	return ret
}

// Enum BaselinePosition
type BaselinePositionEnum int

const (
	BaselinePositionTop    BaselinePositionEnum = 0
	BaselinePositionCenter BaselinePositionEnum = 1
	BaselinePositionBottom BaselinePositionEnum = 2
)

func BaselinePositionGetType() gi.GType {
	ret := _I.GetGType(50, "BaselinePosition")
	return ret
}

// Object Bin
type Bin struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapBin(p unsafe.Pointer) (r Bin) { r.P = p; return }

type IBin interface{ P_Bin() unsafe.Pointer }

func (v Bin) P_Bin() unsafe.Pointer              { return v.P }
func (v Bin) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Bin) P_Buildable() unsafe.Pointer        { return v.P }
func BinGetType() gi.GType {
	ret := _I.GetGType(51, "Bin")
	return ret
}

// gtk_bin_get_child
//
// [ result ] trans: nothing
//
func (v Bin) GetChild() (result Widget) {
	iv, err := _I.Get(256, "Bin", "get_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct BinClass

// Struct BinPrivate
type BinPrivate struct {
	P unsafe.Pointer
}

func BinPrivateGetType() gi.GType {
	ret := _I.GetGType(52, "BinPrivate")
	return ret
}

// Struct BindingArg
type BindingArg struct {
	P unsafe.Pointer
}

const SizeOfStructBindingArg = 8

func BindingArgGetType() gi.GType {
	ret := _I.GetGType(53, "BindingArg")
	return ret
}

// Struct BindingEntry
type BindingEntry struct {
	P unsafe.Pointer
}

const SizeOfStructBindingEntry = 56

func BindingEntryGetType() gi.GType {
	ret := _I.GetGType(54, "BindingEntry")
	return ret
}

// gtk_binding_entry_add_signal_from_string
//
// [ binding_set ] trans: nothing
//
// [ signal_desc ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingEntryAddSignalFromString1(binding_set BindingSet, signal_desc string) (result g.TokenTypeEnum) {
	iv, err := _I.Get(257, "BindingEntry", "add_signal_from_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_signal_desc := gi.CString(signal_desc)
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_signal_desc := gi.NewStringArgument(c_signal_desc)
	args := []gi.Argument{arg_binding_set, arg_signal_desc}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_signal_desc)
	result = g.TokenTypeEnum(ret.Int())
	return
}

// gtk_binding_entry_add_signall
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ signal_name ] trans: nothing
//
// [ binding_args ] trans: nothing
//
func BindingEntryAddSignall1(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags, signal_name string, binding_args g.SList) {
	iv, err := _I.Get(258, "BindingEntry", "add_signall")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_signal_name := gi.CString(signal_name)
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	arg_signal_name := gi.NewStringArgument(c_signal_name)
	arg_binding_args := gi.NewPointerArgument(binding_args.P)
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers, arg_signal_name, arg_binding_args}
	iv.Call(args, nil, nil)
	gi.Free(c_signal_name)
}

// gtk_binding_entry_remove
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
func BindingEntryRemove1(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags) {
	iv, err := _I.Get(259, "BindingEntry", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers}
	iv.Call(args, nil, nil)
}

// gtk_binding_entry_skip
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
func BindingEntrySkip1(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags) {
	iv, err := _I.Get(260, "BindingEntry", "skip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers}
	iv.Call(args, nil, nil)
}

// Struct BindingSet
type BindingSet struct {
	P unsafe.Pointer
}

const SizeOfStructBindingSet = 64

func BindingSetGetType() gi.GType {
	ret := _I.GetGType(55, "BindingSet")
	return ret
}

// gtk_binding_set_activate
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ object ] trans: nothing
//
// [ result ] trans: nothing
//
func (v BindingSet) Activate(keyval uint32, modifiers gdk.ModifierTypeFlags, object g.IObject) (result bool) {
	iv, err := _I.Get(261, "BindingSet", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_keyval, arg_modifiers, arg_object}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_binding_set_add_path
//
// [ path_type ] trans: nothing
//
// [ path_pattern ] trans: nothing
//
// [ priority ] trans: nothing
//
func (v BindingSet) AddPath(path_type PathTypeEnum, path_pattern string, priority PathPriorityTypeEnum) {
	iv, err := _I.Get(262, "BindingSet", "add_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path_pattern := gi.CString(path_pattern)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path_type := gi.NewIntArgument(int(path_type))
	arg_path_pattern := gi.NewStringArgument(c_path_pattern)
	arg_priority := gi.NewIntArgument(int(priority))
	args := []gi.Argument{arg_v, arg_path_type, arg_path_pattern, arg_priority}
	iv.Call(args, nil, nil)
	gi.Free(c_path_pattern)
}

// gtk_binding_set_find
//
// [ set_name ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingSetFind1(set_name string) (result BindingSet) {
	iv, err := _I.Get(263, "BindingSet", "find")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_set_name := gi.CString(set_name)
	arg_set_name := gi.NewStringArgument(c_set_name)
	args := []gi.Argument{arg_set_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_set_name)
	result.P = ret.Pointer()
	return
}

// Struct BindingSignal
type BindingSignal struct {
	P unsafe.Pointer
}

const SizeOfStructBindingSignal = 32

func BindingSignalGetType() gi.GType {
	ret := _I.GetGType(56, "BindingSignal")
	return ret
}

// Object BooleanCellAccessible
type BooleanCellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.TableCellIfc
	RendererCellAccessible
}

func WrapBooleanCellAccessible(p unsafe.Pointer) (r BooleanCellAccessible) { r.P = p; return }

type IBooleanCellAccessible interface{ P_BooleanCellAccessible() unsafe.Pointer }

func (v BooleanCellAccessible) P_BooleanCellAccessible() unsafe.Pointer { return v.P }
func (v BooleanCellAccessible) P_Action() unsafe.Pointer                { return v.P }
func (v BooleanCellAccessible) P_Component() unsafe.Pointer             { return v.P }
func (v BooleanCellAccessible) P_TableCell() unsafe.Pointer             { return v.P }
func BooleanCellAccessibleGetType() gi.GType {
	ret := _I.GetGType(57, "BooleanCellAccessible")
	return ret
}

// ignore GType struct BooleanCellAccessibleClass

// Struct BooleanCellAccessiblePrivate
type BooleanCellAccessiblePrivate struct {
	P unsafe.Pointer
}

func BooleanCellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(58, "BooleanCellAccessiblePrivate")
	return ret
}

// Struct Border
type Border struct {
	P unsafe.Pointer
}

const SizeOfStructBorder = 8

func BorderGetType() gi.GType {
	ret := _I.GetGType(59, "Border")
	return ret
}

// gtk_border_new
//
// [ result ] trans: everything
//
func NewBorder() (result Border) {
	iv, err := _I.Get(264, "Border", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_border_copy
//
// [ result ] trans: everything
//
func (v Border) Copy() (result Border) {
	iv, err := _I.Get(265, "Border", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_border_free
//
func (v Border) Free() {
	iv, err := _I.Get(266, "Border", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum BorderStyle
type BorderStyleEnum int

const (
	BorderStyleNone   BorderStyleEnum = 0
	BorderStyleSolid  BorderStyleEnum = 1
	BorderStyleInset  BorderStyleEnum = 2
	BorderStyleOutset BorderStyleEnum = 3
	BorderStyleHidden BorderStyleEnum = 4
	BorderStyleDotted BorderStyleEnum = 5
	BorderStyleDashed BorderStyleEnum = 6
	BorderStyleDouble BorderStyleEnum = 7
	BorderStyleGroove BorderStyleEnum = 8
	BorderStyleRidge  BorderStyleEnum = 9
)

func BorderStyleGetType() gi.GType {
	ret := _I.GetGType(60, "BorderStyle")
	return ret
}

// Object Box
type Box struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Container
}

func WrapBox(p unsafe.Pointer) (r Box) { r.P = p; return }

type IBox interface{ P_Box() unsafe.Pointer }

func (v Box) P_Box() unsafe.Pointer              { return v.P }
func (v Box) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Box) P_Buildable() unsafe.Pointer        { return v.P }
func (v Box) P_Orientable() unsafe.Pointer       { return v.P }
func BoxGetType() gi.GType {
	ret := _I.GetGType(61, "Box")
	return ret
}

// gtk_box_new
//
// [ orientation ] trans: nothing
//
// [ spacing ] trans: nothing
//
// [ result ] trans: nothing
//
func NewBox(orientation OrientationEnum, spacing int32) (result Box) {
	iv, err := _I.Get(267, "Box", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_orientation, arg_spacing}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_box_get_baseline_position
//
// [ result ] trans: nothing
//
func (v Box) GetBaselinePosition() (result BaselinePositionEnum) {
	iv, err := _I.Get(268, "Box", "get_baseline_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = BaselinePositionEnum(ret.Int())
	return
}

// gtk_box_get_center_widget
//
// [ result ] trans: nothing
//
func (v Box) GetCenterWidget() (result Widget) {
	iv, err := _I.Get(269, "Box", "get_center_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_box_get_homogeneous
//
// [ result ] trans: nothing
//
func (v Box) GetHomogeneous() (result bool) {
	iv, err := _I.Get(270, "Box", "get_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_box_get_spacing
//
// [ result ] trans: nothing
//
func (v Box) GetSpacing() (result int32) {
	iv, err := _I.Get(271, "Box", "get_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_box_pack_end
//
// [ child ] trans: nothing
//
// [ expand ] trans: nothing
//
// [ fill ] trans: nothing
//
// [ padding ] trans: nothing
//
func (v Box) PackEnd(child IWidget, expand bool, fill bool, padding uint32) {
	iv, err := _I.Get(272, "Box", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	arg_fill := gi.NewBoolArgument(fill)
	arg_padding := gi.NewUint32Argument(padding)
	args := []gi.Argument{arg_v, arg_child, arg_expand, arg_fill, arg_padding}
	iv.Call(args, nil, nil)
}

// gtk_box_pack_start
//
// [ child ] trans: nothing
//
// [ expand ] trans: nothing
//
// [ fill ] trans: nothing
//
// [ padding ] trans: nothing
//
func (v Box) PackStart(child IWidget, expand bool, fill bool, padding uint32) {
	iv, err := _I.Get(273, "Box", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	arg_fill := gi.NewBoolArgument(fill)
	arg_padding := gi.NewUint32Argument(padding)
	args := []gi.Argument{arg_v, arg_child, arg_expand, arg_fill, arg_padding}
	iv.Call(args, nil, nil)
}

// gtk_box_query_child_packing
//
// [ child ] trans: nothing
//
// [ expand ] trans: everything, dir: out
//
// [ fill ] trans: everything, dir: out
//
// [ padding ] trans: everything, dir: out
//
// [ pack_type ] trans: everything, dir: out
//
func (v Box) QueryChildPacking(child IWidget) (expand bool, fill bool, padding uint32, pack_type PackTypeEnum) {
	iv, err := _I.Get(274, "Box", "query_child_packing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_fill := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_padding := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_pack_type := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_child, arg_expand, arg_fill, arg_padding, arg_pack_type}
	iv.Call(args, nil, &outArgs[0])
	expand = outArgs[0].Bool()
	fill = outArgs[1].Bool()
	padding = outArgs[2].Uint32()
	pack_type = PackTypeEnum(outArgs[3].Int())
	return
}

// gtk_box_reorder_child
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v Box) ReorderChild(child IWidget, position int32) {
	iv, err := _I.Get(275, "Box", "reorder_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_box_set_baseline_position
//
// [ position ] trans: nothing
//
func (v Box) SetBaselinePosition(position BaselinePositionEnum) {
	iv, err := _I.Get(276, "Box", "set_baseline_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewIntArgument(int(position))
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_box_set_center_widget
//
// [ widget ] trans: nothing
//
func (v Box) SetCenterWidget(widget IWidget) {
	iv, err := _I.Get(277, "Box", "set_center_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_box_set_child_packing
//
// [ child ] trans: nothing
//
// [ expand ] trans: nothing
//
// [ fill ] trans: nothing
//
// [ padding ] trans: nothing
//
// [ pack_type ] trans: nothing
//
func (v Box) SetChildPacking(child IWidget, expand bool, fill bool, padding uint32, pack_type PackTypeEnum) {
	iv, err := _I.Get(278, "Box", "set_child_packing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	arg_fill := gi.NewBoolArgument(fill)
	arg_padding := gi.NewUint32Argument(padding)
	arg_pack_type := gi.NewIntArgument(int(pack_type))
	args := []gi.Argument{arg_v, arg_child, arg_expand, arg_fill, arg_padding, arg_pack_type}
	iv.Call(args, nil, nil)
}

// gtk_box_set_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v Box) SetHomogeneous(homogeneous bool) {
	iv, err := _I.Get(279, "Box", "set_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_box_set_spacing
//
// [ spacing ] trans: nothing
//
func (v Box) SetSpacing(spacing int32) {
	iv, err := _I.Get(280, "Box", "set_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// ignore GType struct BoxClass

// Struct BoxPrivate
type BoxPrivate struct {
	P unsafe.Pointer
}

func BoxPrivateGetType() gi.GType {
	ret := _I.GetGType(62, "BoxPrivate")
	return ret
}

// Interface Buildable
type Buildable struct {
	BuildableIfc
	P unsafe.Pointer
}
type BuildableIfc struct{}
type IBuildable interface{ P_Buildable() unsafe.Pointer }

func (v Buildable) P_Buildable() unsafe.Pointer { return v.P }
func BuildableGetType() gi.GType {
	ret := _I.GetGType(63, "Buildable")
	return ret
}

// gtk_buildable_add_child
//
// [ builder ] trans: nothing
//
// [ child ] trans: nothing
//
// [ type1 ] trans: nothing
//
func (v *BuildableIfc) AddChild(builder IBuilder, child g.IObject, type1 string) {
	iv, err := _I.Get(281, "Buildable", "add_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	var tmp1 unsafe.Pointer
	if child != nil {
		tmp1 = child.P_Object()
	}
	c_type1 := gi.CString(type1)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_child := gi.NewPointerArgument(tmp1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_v, arg_builder, arg_child, arg_type1}
	iv.Call(args, nil, nil)
	gi.Free(c_type1)
}

// gtk_buildable_construct_child
//
// [ builder ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *BuildableIfc) ConstructChild(builder IBuilder, name string) (result g.Object) {
	iv, err := _I.Get(282, "Buildable", "construct_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_builder, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_buildable_custom_finished
//
// [ builder ] trans: nothing
//
// [ child ] trans: nothing
//
// [ tagname ] trans: nothing
//
// [ data ] trans: nothing
//
func (v *BuildableIfc) CustomFinished(builder IBuilder, child g.IObject, tagname string, data unsafe.Pointer) {
	iv, err := _I.Get(283, "Buildable", "custom_finished")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	var tmp1 unsafe.Pointer
	if child != nil {
		tmp1 = child.P_Object()
	}
	c_tagname := gi.CString(tagname)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_child := gi.NewPointerArgument(tmp1)
	arg_tagname := gi.NewStringArgument(c_tagname)
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_builder, arg_child, arg_tagname, arg_data}
	iv.Call(args, nil, nil)
	gi.Free(c_tagname)
}

// gtk_buildable_custom_tag_end
//
// [ builder ] trans: nothing
//
// [ child ] trans: nothing
//
// [ tagname ] trans: nothing
//
// [ data ] trans: nothing
//
func (v *BuildableIfc) CustomTagEnd(builder IBuilder, child g.IObject, tagname string, data unsafe.Pointer) {
	iv, err := _I.Get(284, "Buildable", "custom_tag_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	var tmp1 unsafe.Pointer
	if child != nil {
		tmp1 = child.P_Object()
	}
	c_tagname := gi.CString(tagname)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_child := gi.NewPointerArgument(tmp1)
	arg_tagname := gi.NewStringArgument(c_tagname)
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_builder, arg_child, arg_tagname, arg_data}
	iv.Call(args, nil, nil)
	gi.Free(c_tagname)
}

// gtk_buildable_custom_tag_start
//
// [ builder ] trans: nothing
//
// [ child ] trans: nothing
//
// [ tagname ] trans: nothing
//
// [ parser ] trans: nothing, dir: out
//
// [ data ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *BuildableIfc) CustomTagStart(builder IBuilder, child g.IObject, tagname string, parser g.MarkupParser) (result bool, data unsafe.Pointer) {
	iv, err := _I.Get(285, "Buildable", "custom_tag_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	var tmp1 unsafe.Pointer
	if child != nil {
		tmp1 = child.P_Object()
	}
	c_tagname := gi.CString(tagname)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_child := gi.NewPointerArgument(tmp1)
	arg_tagname := gi.NewStringArgument(c_tagname)
	arg_parser := gi.NewPointerArgument(parser.P)
	arg_data := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_builder, arg_child, arg_tagname, arg_parser, arg_data}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_tagname)
	data = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// gtk_buildable_get_internal_child
//
// [ builder ] trans: nothing
//
// [ childname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *BuildableIfc) GetInternalChild(builder IBuilder, childname string) (result g.Object) {
	iv, err := _I.Get(286, "Buildable", "get_internal_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	c_childname := gi.CString(childname)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_childname := gi.NewStringArgument(c_childname)
	args := []gi.Argument{arg_v, arg_builder, arg_childname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_childname)
	result.P = ret.Pointer()
	return
}

// gtk_buildable_get_name
//
// [ result ] trans: nothing
//
func (v *BuildableIfc) GetName() (result string) {
	iv, err := _I.Get(287, "Buildable", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_buildable_parser_finished
//
// [ builder ] trans: nothing
//
func (v *BuildableIfc) ParserFinished(builder IBuilder) {
	iv, err := _I.Get(288, "Buildable", "parser_finished")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_builder}
	iv.Call(args, nil, nil)
}

// gtk_buildable_set_buildable_property
//
// [ builder ] trans: nothing
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v *BuildableIfc) SetBuildableProperty(builder IBuilder, name string, value g.Value) {
	iv, err := _I.Get(289, "Buildable", "set_buildable_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if builder != nil {
		tmp = builder.P_Builder()
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_builder := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_builder, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_buildable_set_name
//
// [ name ] trans: nothing
//
func (v *BuildableIfc) SetName(name string) {
	iv, err := _I.Get(290, "Buildable", "set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// ignore GType struct BuildableIface

// Object Builder
type Builder struct {
	g.Object
}

func WrapBuilder(p unsafe.Pointer) (r Builder) { r.P = p; return }

type IBuilder interface{ P_Builder() unsafe.Pointer }

func (v Builder) P_Builder() unsafe.Pointer { return v.P }
func BuilderGetType() gi.GType {
	ret := _I.GetGType(64, "Builder")
	return ret
}

// gtk_builder_new
//
// [ result ] trans: everything
//
func NewBuilder() (result Builder) {
	iv, err := _I.Get(291, "Builder", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_builder_new_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func NewBuilderFromFile(filename string) (result Builder) {
	iv, err := _I.Get(292, "Builder", "new_from_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// gtk_builder_new_from_resource
//
// [ resource_path ] trans: nothing
//
// [ result ] trans: everything
//
func NewBuilderFromResource(resource_path string) (result Builder) {
	iv, err := _I.Get(293, "Builder", "new_from_resource")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_resource_path := gi.CString(resource_path)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	args := []gi.Argument{arg_resource_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_resource_path)
	result.P = ret.Pointer()
	return
}

// gtk_builder_new_from_string
//
// [ string ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func NewBuilderFromString(string string, length int64) (result Builder) {
	iv, err := _I.Get(294, "Builder", "new_from_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	arg_length := gi.NewInt64Argument(length)
	args := []gi.Argument{arg_string, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result.P = ret.Pointer()
	return
}

// gtk_builder_add_callback_symbol
//
// [ callback_name ] trans: nothing
//
// [ callback_symbol ] trans: nothing
//
func (v Builder) AddCallbackSymbol(callback_name string, callback_symbol int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(295, "Builder", "add_callback_symbol")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_callback_name := gi.CString(callback_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback_name := gi.NewStringArgument(c_callback_name)
	arg_callback_symbol := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myCallback()))
	args := []gi.Argument{arg_v, arg_callback_name, arg_callback_symbol}
	iv.Call(args, nil, nil)
	gi.Free(c_callback_name)
}

// gtk_builder_add_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddFromFile(filename string) (result uint32, err error) {
	iv, err := _I.Get(296, "Builder", "add_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_add_from_resource
//
// [ resource_path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddFromResource(resource_path string) (result uint32, err error) {
	iv, err := _I.Get(297, "Builder", "add_from_resource")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_resource_path, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_resource_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_add_from_string
//
// [ buffer ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddFromString(buffer string, length uint64) (result uint32, err error) {
	iv, err := _I.Get(298, "Builder", "add_from_string")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_buffer := gi.CString(buffer)
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewStringArgument(c_buffer)
	arg_length := gi.NewUint64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_buffer)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_add_objects_from_file
//
// [ filename ] trans: nothing
//
// [ object_ids ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddObjectsFromFile(filename string, object_ids gi.CStrArray) (result uint32, err error) {
	iv, err := _I.Get(299, "Builder", "add_objects_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_object_ids := gi.NewPointerArgument(object_ids.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_filename, arg_object_ids, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_add_objects_from_resource
//
// [ resource_path ] trans: nothing
//
// [ object_ids ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddObjectsFromResource(resource_path string, object_ids gi.CStrArray) (result uint32, err error) {
	iv, err := _I.Get(300, "Builder", "add_objects_from_resource")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	arg_object_ids := gi.NewPointerArgument(object_ids.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_resource_path, arg_object_ids, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_resource_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_add_objects_from_string
//
// [ buffer ] trans: nothing
//
// [ length ] trans: nothing
//
// [ object_ids ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) AddObjectsFromString(buffer string, length uint64, object_ids gi.CStrArray) (result uint32, err error) {
	iv, err := _I.Get(301, "Builder", "add_objects_from_string")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_buffer := gi.CString(buffer)
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewStringArgument(c_buffer)
	arg_length := gi.NewUint64Argument(length)
	arg_object_ids := gi.NewPointerArgument(object_ids.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_length, arg_object_ids, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_buffer)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_connect_signals
//
// [ user_data ] trans: nothing
//
func (v Builder) ConnectSignals(user_data unsafe.Pointer) {
	iv, err := _I.Get(302, "Builder", "connect_signals")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_builder_connect_signals_full
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Builder) ConnectSignalsFull(func1 int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(303, "Builder", "connect_signals_full")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myBuilderConnectFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_builder_expose_object
//
// [ name ] trans: nothing
//
// [ object ] trans: nothing
//
func (v Builder) ExposeObject(name string, object g.IObject) {
	iv, err := _I.Get(304, "Builder", "expose_object")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_name, arg_object}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_builder_extend_with_template
//
// [ widget ] trans: nothing
//
// [ template_type ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) ExtendWithTemplate(widget IWidget, template_type gi.GType, buffer string, length uint64) (result uint32, err error) {
	iv, err := _I.Get(305, "Builder", "extend_with_template")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_buffer := gi.CString(buffer)
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_template_type := gi.NewUintArgument(uint(template_type))
	arg_buffer := gi.NewStringArgument(c_buffer)
	arg_length := gi.NewUint64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_widget, arg_template_type, arg_buffer, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_buffer)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// gtk_builder_get_application
//
// [ result ] trans: nothing
//
func (v Builder) GetApplication() (result Application) {
	iv, err := _I.Get(306, "Builder", "get_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_builder_get_object
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) GetObject(name string) (result g.Object) {
	iv, err := _I.Get(307, "Builder", "get_object")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_builder_get_objects
//
// [ result ] trans: container
//
func (v Builder) GetObjects() (result g.SList) {
	iv, err := _I.Get(308, "Builder", "get_objects")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_builder_get_translation_domain
//
// [ result ] trans: nothing
//
func (v Builder) GetTranslationDomain() (result string) {
	iv, err := _I.Get(309, "Builder", "get_translation_domain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_builder_get_type_from_name
//
// [ type_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Builder) GetTypeFromName(type_name string) (result gi.GType) {
	iv, err := _I.Get(310, "Builder", "get_type_from_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type_name := gi.CString(type_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_type_name := gi.NewStringArgument(c_type_name)
	args := []gi.Argument{arg_v, arg_type_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type_name)
	result = gi.GType(ret.Uint())
	return
}

// gtk_builder_set_application
//
// [ application ] trans: nothing
//
func (v Builder) SetApplication(application IApplication) {
	iv, err := _I.Get(311, "Builder", "set_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if application != nil {
		tmp = application.P_Application()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_application := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_application}
	iv.Call(args, nil, nil)
}

// gtk_builder_set_translation_domain
//
// [ domain ] trans: nothing
//
func (v Builder) SetTranslationDomain(domain string) {
	iv, err := _I.Get(312, "Builder", "set_translation_domain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_domain := gi.CString(domain)
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewStringArgument(c_domain)
	args := []gi.Argument{arg_v, arg_domain}
	iv.Call(args, nil, nil)
	gi.Free(c_domain)
}

// gtk_builder_value_from_string
//
// [ pspec ] trans: nothing
//
// [ string ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Builder) ValueFromString(pspec g.IParamSpec, string string, value g.Value) (result bool, err error) {
	iv, err := _I.Get(313, "Builder", "value_from_string")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	c_string := gi.CString(string)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_string := gi.NewStringArgument(c_string)
	arg_value := gi.NewPointerArgument(value.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_pspec, arg_string, arg_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_string)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_builder_value_from_string_type
//
// [ type1 ] trans: nothing
//
// [ string ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Builder) ValueFromStringType(type1 gi.GType, string string, value g.Value) (result bool, err error) {
	iv, err := _I.Get(314, "Builder", "value_from_string_type")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_string := gi.CString(string)
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_string := gi.NewStringArgument(c_string)
	arg_value := gi.NewPointerArgument(value.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_type1, arg_string, arg_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_string)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct BuilderClass

type BuilderConnectFuncStruct struct {
	F_builder        Builder
	F_object         g.Object
	F_signal_name    string
	F_handler_name   string
	F_connect_object g.Object
	F_flags          g.ConnectFlags
}

func GetPointer_myBuilderConnectFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkBuilderConnectFunc())
}

//export myGtkBuilderConnectFunc
func myGtkBuilderConnectFunc(builder *C.GtkBuilder, object *C.GObject, signal_name *C.gchar, handler_name *C.gchar, connect_object *C.GObject, flags C.GConnectFlags, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &BuilderConnectFuncStruct{
		F_builder:        WrapBuilder(unsafe.Pointer(builder)),
		F_object:         g.WrapObject(unsafe.Pointer(object)),
		F_signal_name:    gi.GoString(unsafe.Pointer(signal_name)),
		F_handler_name:   gi.GoString(unsafe.Pointer(handler_name)),
		F_connect_object: g.WrapObject(unsafe.Pointer(connect_object)),
		F_flags:          g.ConnectFlags(flags),
	}
	fn(args)
}

// Enum BuilderError
type BuilderErrorEnum int

const (
	BuilderErrorInvalidTypeFunction  BuilderErrorEnum = 0
	BuilderErrorUnhandledTag         BuilderErrorEnum = 1
	BuilderErrorMissingAttribute     BuilderErrorEnum = 2
	BuilderErrorInvalidAttribute     BuilderErrorEnum = 3
	BuilderErrorInvalidTag           BuilderErrorEnum = 4
	BuilderErrorMissingPropertyValue BuilderErrorEnum = 5
	BuilderErrorInvalidValue         BuilderErrorEnum = 6
	BuilderErrorVersionMismatch      BuilderErrorEnum = 7
	BuilderErrorDuplicateId          BuilderErrorEnum = 8
	BuilderErrorObjectTypeRefused    BuilderErrorEnum = 9
	BuilderErrorTemplateMismatch     BuilderErrorEnum = 10
	BuilderErrorInvalidProperty      BuilderErrorEnum = 11
	BuilderErrorInvalidSignal        BuilderErrorEnum = 12
	BuilderErrorInvalidId            BuilderErrorEnum = 13
)

func BuilderErrorGetType() gi.GType {
	ret := _I.GetGType(65, "BuilderError")
	return ret
}

// Struct BuilderPrivate
type BuilderPrivate struct {
	P unsafe.Pointer
}

func BuilderPrivateGetType() gi.GType {
	ret := _I.GetGType(66, "BuilderPrivate")
	return ret
}

// Object Button
type Button struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Bin
}

func WrapButton(p unsafe.Pointer) (r Button) { r.P = p; return }

type IButton interface{ P_Button() unsafe.Pointer }

func (v Button) P_Button() unsafe.Pointer           { return v.P }
func (v Button) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Button) P_Actionable() unsafe.Pointer       { return v.P }
func (v Button) P_Activatable() unsafe.Pointer      { return v.P }
func (v Button) P_Buildable() unsafe.Pointer        { return v.P }
func ButtonGetType() gi.GType {
	ret := _I.GetGType(67, "Button")
	return ret
}

// gtk_button_new
//
// [ result ] trans: nothing
//
func NewButton() (result Button) {
	iv, err := _I.Get(315, "Button", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_button_new_from_icon_name
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewButtonFromIconName(icon_name string, size int32) (result Button) {
	iv, err := _I.Get(316, "Button", "new_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_icon_name, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_button_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewButtonFromStock(stock_id string) (result Button) {
	iv, err := _I.Get(317, "Button", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_button_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewButtonWithLabel(label string) (result Button) {
	iv, err := _I.Get(318, "Button", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_button_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewButtonWithMnemonic(label string) (result Button) {
	iv, err := _I.Get(319, "Button", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_button_clicked
//
func (v Button) Clicked() {
	iv, err := _I.Get(320, "Button", "clicked")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_enter
//
func (v Button) Enter() {
	iv, err := _I.Get(321, "Button", "enter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_get_alignment
//
// [ xalign ] trans: everything, dir: out
//
// [ yalign ] trans: everything, dir: out
//
func (v Button) GetAlignment() (xalign float32, yalign float32) {
	iv, err := _I.Get(322, "Button", "get_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_yalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, &outArgs[0])
	xalign = outArgs[0].Float()
	yalign = outArgs[1].Float()
	return
}

// gtk_button_get_always_show_image
//
// [ result ] trans: nothing
//
func (v Button) GetAlwaysShowImage() (result bool) {
	iv, err := _I.Get(323, "Button", "get_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_button_get_event_window
//
// [ result ] trans: nothing
//
func (v Button) GetEventWindow() (result gdk.Window) {
	iv, err := _I.Get(324, "Button", "get_event_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_button_get_focus_on_click
//
// [ result ] trans: nothing
//
func (v Button) GetFocusOnClick() (result bool) {
	iv, err := _I.Get(325, "Button", "get_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_button_get_image
//
// [ result ] trans: nothing
//
func (v Button) GetImage() (result Widget) {
	iv, err := _I.Get(326, "Button", "get_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_button_get_image_position
//
// [ result ] trans: nothing
//
func (v Button) GetImagePosition() (result PositionTypeEnum) {
	iv, err := _I.Get(327, "Button", "get_image_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// gtk_button_get_label
//
// [ result ] trans: nothing
//
func (v Button) GetLabel() (result string) {
	iv, err := _I.Get(328, "Button", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_button_get_relief
//
// [ result ] trans: nothing
//
func (v Button) GetRelief() (result ReliefStyleEnum) {
	iv, err := _I.Get(329, "Button", "get_relief")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ReliefStyleEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_button_get_use_stock
//
// [ result ] trans: nothing
//
func (v Button) GetUseStock() (result bool) {
	iv, err := _I.Get(330, "Button", "get_use_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_button_get_use_underline
//
// [ result ] trans: nothing
//
func (v Button) GetUseUnderline() (result bool) {
	iv, err := _I.Get(331, "Button", "get_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_button_leave
//
func (v Button) Leave() {
	iv, err := _I.Get(332, "Button", "leave")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_pressed
//
func (v Button) Pressed() {
	iv, err := _I.Get(333, "Button", "pressed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_released
//
func (v Button) Released() {
	iv, err := _I.Get(334, "Button", "released")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_set_alignment
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
func (v Button) SetAlignment(xalign float32, yalign float32) {
	iv, err := _I.Get(335, "Button", "set_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, nil)
}

// gtk_button_set_always_show_image
//
// [ always_show ] trans: nothing
//
func (v Button) SetAlwaysShowImage(always_show bool) {
	iv, err := _I.Get(336, "Button", "set_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_always_show := gi.NewBoolArgument(always_show)
	args := []gi.Argument{arg_v, arg_always_show}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_set_focus_on_click
//
// [ focus_on_click ] trans: nothing
//
func (v Button) SetFocusOnClick(focus_on_click bool) {
	iv, err := _I.Get(337, "Button", "set_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focus_on_click := gi.NewBoolArgument(focus_on_click)
	args := []gi.Argument{arg_v, arg_focus_on_click}
	iv.Call(args, nil, nil)
}

// gtk_button_set_image
//
// [ image ] trans: nothing
//
func (v Button) SetImage(image IWidget) {
	iv, err := _I.Get(338, "Button", "set_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if image != nil {
		tmp = image.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_image := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_image}
	iv.Call(args, nil, nil)
}

// gtk_button_set_image_position
//
// [ position ] trans: nothing
//
func (v Button) SetImagePosition(position PositionTypeEnum) {
	iv, err := _I.Get(339, "Button", "set_image_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewIntArgument(int(position))
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_button_set_label
//
// [ label ] trans: nothing
//
func (v Button) SetLabel(label string) {
	iv, err := _I.Get(340, "Button", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_button_set_relief
//
// [ relief ] trans: nothing
//
func (v Button) SetRelief(relief ReliefStyleEnum) {
	iv, err := _I.Get(341, "Button", "set_relief")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_relief := gi.NewIntArgument(int(relief))
	args := []gi.Argument{arg_v, arg_relief}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_button_set_use_stock
//
// [ use_stock ] trans: nothing
//
func (v Button) SetUseStock(use_stock bool) {
	iv, err := _I.Get(342, "Button", "set_use_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_stock := gi.NewBoolArgument(use_stock)
	args := []gi.Argument{arg_v, arg_use_stock}
	iv.Call(args, nil, nil)
}

// gtk_button_set_use_underline
//
// [ use_underline ] trans: nothing
//
func (v Button) SetUseUnderline(use_underline bool) {
	iv, err := _I.Get(343, "Button", "set_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_underline := gi.NewBoolArgument(use_underline)
	args := []gi.Argument{arg_v, arg_use_underline}
	iv.Call(args, nil, nil)
}

// Object ButtonAccessible
type ButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	ContainerAccessible
}

func WrapButtonAccessible(p unsafe.Pointer) (r ButtonAccessible) { r.P = p; return }

type IButtonAccessible interface{ P_ButtonAccessible() unsafe.Pointer }

func (v ButtonAccessible) P_ButtonAccessible() unsafe.Pointer { return v.P }
func (v ButtonAccessible) P_Action() unsafe.Pointer           { return v.P }
func (v ButtonAccessible) P_Component() unsafe.Pointer        { return v.P }
func (v ButtonAccessible) P_Image() unsafe.Pointer            { return v.P }
func ButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(68, "ButtonAccessible")
	return ret
}

// ignore GType struct ButtonAccessibleClass

// Struct ButtonAccessiblePrivate
type ButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func ButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(69, "ButtonAccessiblePrivate")
	return ret
}

// Object ButtonBox
type ButtonBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapButtonBox(p unsafe.Pointer) (r ButtonBox) { r.P = p; return }

type IButtonBox interface{ P_ButtonBox() unsafe.Pointer }

func (v ButtonBox) P_ButtonBox() unsafe.Pointer        { return v.P }
func (v ButtonBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ButtonBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v ButtonBox) P_Orientable() unsafe.Pointer       { return v.P }
func ButtonBoxGetType() gi.GType {
	ret := _I.GetGType(70, "ButtonBox")
	return ret
}

// gtk_button_box_new
//
// [ orientation ] trans: nothing
//
// [ result ] trans: nothing
//
func NewButtonBox(orientation OrientationEnum) (result ButtonBox) {
	iv, err := _I.Get(344, "ButtonBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_button_box_get_child_non_homogeneous
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ButtonBox) GetChildNonHomogeneous(child IWidget) (result bool) {
	iv, err := _I.Get(345, "ButtonBox", "get_child_non_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_button_box_get_child_secondary
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ButtonBox) GetChildSecondary(child IWidget) (result bool) {
	iv, err := _I.Get(346, "ButtonBox", "get_child_secondary")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_button_box_get_layout
//
// [ result ] trans: nothing
//
func (v ButtonBox) GetLayout() (result ButtonBoxStyleEnum) {
	iv, err := _I.Get(347, "ButtonBox", "get_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ButtonBoxStyleEnum(ret.Int())
	return
}

// gtk_button_box_set_child_non_homogeneous
//
// [ child ] trans: nothing
//
// [ non_homogeneous ] trans: nothing
//
func (v ButtonBox) SetChildNonHomogeneous(child IWidget, non_homogeneous bool) {
	iv, err := _I.Get(348, "ButtonBox", "set_child_non_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_non_homogeneous := gi.NewBoolArgument(non_homogeneous)
	args := []gi.Argument{arg_v, arg_child, arg_non_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_button_box_set_child_secondary
//
// [ child ] trans: nothing
//
// [ is_secondary ] trans: nothing
//
func (v ButtonBox) SetChildSecondary(child IWidget, is_secondary bool) {
	iv, err := _I.Get(349, "ButtonBox", "set_child_secondary")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_is_secondary := gi.NewBoolArgument(is_secondary)
	args := []gi.Argument{arg_v, arg_child, arg_is_secondary}
	iv.Call(args, nil, nil)
}

// gtk_button_box_set_layout
//
// [ layout_style ] trans: nothing
//
func (v ButtonBox) SetLayout(layout_style ButtonBoxStyleEnum) {
	iv, err := _I.Get(350, "ButtonBox", "set_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_layout_style := gi.NewIntArgument(int(layout_style))
	args := []gi.Argument{arg_v, arg_layout_style}
	iv.Call(args, nil, nil)
}

// ignore GType struct ButtonBoxClass

// Struct ButtonBoxPrivate
type ButtonBoxPrivate struct {
	P unsafe.Pointer
}

func ButtonBoxPrivateGetType() gi.GType {
	ret := _I.GetGType(71, "ButtonBoxPrivate")
	return ret
}

// Enum ButtonBoxStyle
type ButtonBoxStyleEnum int

const (
	ButtonBoxStyleSpread ButtonBoxStyleEnum = 1
	ButtonBoxStyleEdge   ButtonBoxStyleEnum = 2
	ButtonBoxStyleStart  ButtonBoxStyleEnum = 3
	ButtonBoxStyleEnd    ButtonBoxStyleEnum = 4
	ButtonBoxStyleCenter ButtonBoxStyleEnum = 5
	ButtonBoxStyleExpand ButtonBoxStyleEnum = 6
)

func ButtonBoxStyleGetType() gi.GType {
	ret := _I.GetGType(72, "ButtonBoxStyle")
	return ret
}

// ignore GType struct ButtonClass

// Struct ButtonPrivate
type ButtonPrivate struct {
	P unsafe.Pointer
}

func ButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(73, "ButtonPrivate")
	return ret
}

// Enum ButtonRole
type ButtonRoleEnum int

const (
	ButtonRoleNormal ButtonRoleEnum = 0
	ButtonRoleCheck  ButtonRoleEnum = 1
	ButtonRoleRadio  ButtonRoleEnum = 2
)

func ButtonRoleGetType() gi.GType {
	ret := _I.GetGType(74, "ButtonRole")
	return ret
}

// Enum ButtonsType
type ButtonsTypeEnum int

const (
	ButtonsTypeNone     ButtonsTypeEnum = 0
	ButtonsTypeOk       ButtonsTypeEnum = 1
	ButtonsTypeClose    ButtonsTypeEnum = 2
	ButtonsTypeCancel   ButtonsTypeEnum = 3
	ButtonsTypeYesNo    ButtonsTypeEnum = 4
	ButtonsTypeOkCancel ButtonsTypeEnum = 5
)

func ButtonsTypeGetType() gi.GType {
	ret := _I.GetGType(75, "ButtonsType")
	return ret
}

// Object Calendar
type Calendar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapCalendar(p unsafe.Pointer) (r Calendar) { r.P = p; return }

type ICalendar interface{ P_Calendar() unsafe.Pointer }

func (v Calendar) P_Calendar() unsafe.Pointer         { return v.P }
func (v Calendar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Calendar) P_Buildable() unsafe.Pointer        { return v.P }
func CalendarGetType() gi.GType {
	ret := _I.GetGType(76, "Calendar")
	return ret
}

// gtk_calendar_new
//
// [ result ] trans: nothing
//
func NewCalendar() (result Calendar) {
	iv, err := _I.Get(351, "Calendar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_calendar_clear_marks
//
func (v Calendar) ClearMarks() {
	iv, err := _I.Get(352, "Calendar", "clear_marks")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_calendar_get_date
//
// [ year ] trans: everything, dir: out
//
// [ month ] trans: everything, dir: out
//
// [ day ] trans: everything, dir: out
//
func (v Calendar) GetDate() (year uint32, month uint32, day uint32) {
	iv, err := _I.Get(353, "Calendar", "get_date")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_year := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_month := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_day := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_year, arg_month, arg_day}
	iv.Call(args, nil, &outArgs[0])
	year = outArgs[0].Uint32()
	month = outArgs[1].Uint32()
	day = outArgs[2].Uint32()
	return
}

// gtk_calendar_get_day_is_marked
//
// [ day ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Calendar) GetDayIsMarked(day uint32) (result bool) {
	iv, err := _I.Get(354, "Calendar", "get_day_is_marked")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_day := gi.NewUint32Argument(day)
	args := []gi.Argument{arg_v, arg_day}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_calendar_get_detail_height_rows
//
// [ result ] trans: nothing
//
func (v Calendar) GetDetailHeightRows() (result int32) {
	iv, err := _I.Get(355, "Calendar", "get_detail_height_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_calendar_get_detail_width_chars
//
// [ result ] trans: nothing
//
func (v Calendar) GetDetailWidthChars() (result int32) {
	iv, err := _I.Get(356, "Calendar", "get_detail_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_calendar_get_display_options
//
// [ result ] trans: nothing
//
func (v Calendar) GetDisplayOptions() (result CalendarDisplayOptionsFlags) {
	iv, err := _I.Get(357, "Calendar", "get_display_options")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = CalendarDisplayOptionsFlags(ret.Int())
	return
}

// gtk_calendar_mark_day
//
// [ day ] trans: nothing
//
func (v Calendar) MarkDay(day uint32) {
	iv, err := _I.Get(358, "Calendar", "mark_day")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_day := gi.NewUint32Argument(day)
	args := []gi.Argument{arg_v, arg_day}
	iv.Call(args, nil, nil)
}

// gtk_calendar_select_day
//
// [ day ] trans: nothing
//
func (v Calendar) SelectDay(day uint32) {
	iv, err := _I.Get(359, "Calendar", "select_day")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_day := gi.NewUint32Argument(day)
	args := []gi.Argument{arg_v, arg_day}
	iv.Call(args, nil, nil)
}

// gtk_calendar_select_month
//
// [ month ] trans: nothing
//
// [ year ] trans: nothing
//
func (v Calendar) SelectMonth(month uint32, year uint32) {
	iv, err := _I.Get(360, "Calendar", "select_month")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_month := gi.NewUint32Argument(month)
	arg_year := gi.NewUint32Argument(year)
	args := []gi.Argument{arg_v, arg_month, arg_year}
	iv.Call(args, nil, nil)
}

// gtk_calendar_set_detail_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v Calendar) SetDetailFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(361, "Calendar", "set_detail_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCalendarDetailFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_calendar_set_detail_height_rows
//
// [ rows ] trans: nothing
//
func (v Calendar) SetDetailHeightRows(rows int32) {
	iv, err := _I.Get(362, "Calendar", "set_detail_height_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rows := gi.NewInt32Argument(rows)
	args := []gi.Argument{arg_v, arg_rows}
	iv.Call(args, nil, nil)
}

// gtk_calendar_set_detail_width_chars
//
// [ chars ] trans: nothing
//
func (v Calendar) SetDetailWidthChars(chars int32) {
	iv, err := _I.Get(363, "Calendar", "set_detail_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_chars := gi.NewInt32Argument(chars)
	args := []gi.Argument{arg_v, arg_chars}
	iv.Call(args, nil, nil)
}

// gtk_calendar_set_display_options
//
// [ flags ] trans: nothing
//
func (v Calendar) SetDisplayOptions(flags CalendarDisplayOptionsFlags) {
	iv, err := _I.Get(364, "Calendar", "set_display_options")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// gtk_calendar_unmark_day
//
// [ day ] trans: nothing
//
func (v Calendar) UnmarkDay(day uint32) {
	iv, err := _I.Get(365, "Calendar", "unmark_day")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_day := gi.NewUint32Argument(day)
	args := []gi.Argument{arg_v, arg_day}
	iv.Call(args, nil, nil)
}

// ignore GType struct CalendarClass

type CalendarDetailFuncStruct struct {
	F_calendar Calendar
	F_year     uint32
	F_month    uint32
	F_day      uint32
}

func GetPointer_myCalendarDetailFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkCalendarDetailFunc())
}

//export myGtkCalendarDetailFunc
func myGtkCalendarDetailFunc(calendar *C.GtkCalendar, year C.guint32, month C.guint32, day C.guint32, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &CalendarDetailFuncStruct{
		F_calendar: WrapCalendar(unsafe.Pointer(calendar)),
		F_year:     uint32(year),
		F_month:    uint32(month),
		F_day:      uint32(day),
	}
	fn(args)
}

// Flags CalendarDisplayOptions
type CalendarDisplayOptionsFlags int

const (
	CalendarDisplayOptionsShowHeading     CalendarDisplayOptionsFlags = 1
	CalendarDisplayOptionsShowDayNames    CalendarDisplayOptionsFlags = 2
	CalendarDisplayOptionsNoMonthChange   CalendarDisplayOptionsFlags = 4
	CalendarDisplayOptionsShowWeekNumbers CalendarDisplayOptionsFlags = 8
	CalendarDisplayOptionsShowDetails     CalendarDisplayOptionsFlags = 32
)

func CalendarDisplayOptionsGetType() gi.GType {
	ret := _I.GetGType(77, "CalendarDisplayOptions")
	return ret
}

// Struct CalendarPrivate
type CalendarPrivate struct {
	P unsafe.Pointer
}

func CalendarPrivateGetType() gi.GType {
	ret := _I.GetGType(78, "CalendarPrivate")
	return ret
}

type CallbackStruct struct {
	F_widget Widget
	F_data   unsafe.Pointer
}

func GetPointer_myCallback() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkCallback())
}

//export myGtkCallback
func myGtkCallback(widget *C.GtkWidget, data C.gpointer) {
	// TODO: not found user_data
}

// Object CellAccessible
type CellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.TableCellIfc
	Accessible
}

func WrapCellAccessible(p unsafe.Pointer) (r CellAccessible) { r.P = p; return }

type ICellAccessible interface{ P_CellAccessible() unsafe.Pointer }

func (v CellAccessible) P_CellAccessible() unsafe.Pointer { return v.P }
func (v CellAccessible) P_Action() unsafe.Pointer         { return v.P }
func (v CellAccessible) P_Component() unsafe.Pointer      { return v.P }
func (v CellAccessible) P_TableCell() unsafe.Pointer      { return v.P }
func CellAccessibleGetType() gi.GType {
	ret := _I.GetGType(79, "CellAccessible")
	return ret
}

// ignore GType struct CellAccessibleClass

// Interface CellAccessibleParent
type CellAccessibleParent struct {
	CellAccessibleParentIfc
	P unsafe.Pointer
}
type CellAccessibleParentIfc struct{}
type ICellAccessibleParent interface{ P_CellAccessibleParent() unsafe.Pointer }

func (v CellAccessibleParent) P_CellAccessibleParent() unsafe.Pointer { return v.P }
func CellAccessibleParentGetType() gi.GType {
	ret := _I.GetGType(80, "CellAccessibleParent")
	return ret
}

// gtk_cell_accessible_parent_activate
//
// [ cell ] trans: nothing
//
func (v *CellAccessibleParentIfc) Activate(cell ICellAccessible) {
	iv, err := _I.Get(366, "CellAccessibleParent", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_edit
//
// [ cell ] trans: nothing
//
func (v *CellAccessibleParentIfc) Edit(cell ICellAccessible) {
	iv, err := _I.Get(367, "CellAccessibleParent", "edit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_expand_collapse
//
// [ cell ] trans: nothing
//
func (v *CellAccessibleParentIfc) ExpandCollapse(cell ICellAccessible) {
	iv, err := _I.Get(368, "CellAccessibleParent", "expand_collapse")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_get_cell_area
//
// [ cell ] trans: nothing
//
// [ cell_rect ] trans: nothing
//
func (v *CellAccessibleParentIfc) GetCellArea(cell ICellAccessible, cell_rect gdk.Rectangle) {
	iv, err := _I.Get(369, "CellAccessibleParent", "get_cell_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_cell_rect := gi.NewPointerArgument(cell_rect.P)
	args := []gi.Argument{arg_v, arg_cell, arg_cell_rect}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_get_cell_extents
//
// [ cell ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ coord_type ] trans: nothing
//
func (v *CellAccessibleParentIfc) GetCellExtents(cell ICellAccessible, x int32, y int32, width int32, height int32, coord_type atk.CoordTypeEnum) {
	iv, err := _I.Get(370, "CellAccessibleParent", "get_cell_extents")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_coord_type := gi.NewIntArgument(int(coord_type))
	args := []gi.Argument{arg_v, arg_cell, arg_x, arg_y, arg_width, arg_height, arg_coord_type}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_get_cell_position
//
// [ cell ] trans: nothing
//
// [ row ] trans: nothing
//
// [ column ] trans: nothing
//
func (v *CellAccessibleParentIfc) GetCellPosition(cell ICellAccessible, row int32, column int32) {
	iv, err := _I.Get(371, "CellAccessibleParent", "get_cell_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_row := gi.NewInt32Argument(row)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_cell, arg_row, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_cell_accessible_parent_get_child_index
//
// [ cell ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *CellAccessibleParentIfc) GetChildIndex(cell ICellAccessible) (result int32) {
	iv, err := _I.Get(372, "CellAccessibleParent", "get_child_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_cell_accessible_parent_get_column_header_cells
//
// [ cell ] trans: nothing
//
// [ result ] trans: everything
//
func (v *CellAccessibleParentIfc) GetColumnHeaderCells(cell ICellAccessible) (result int /*TODO_TYPE array type: 2, isZeroTerm: false*/) {
	iv, err := _I.Get(373, "CellAccessibleParent", "get_column_header_cells")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int() /*TODO*/
	return
}

// gtk_cell_accessible_parent_get_renderer_state
//
// [ cell ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *CellAccessibleParentIfc) GetRendererState(cell ICellAccessible) (result CellRendererStateFlags) {
	iv, err := _I.Get(374, "CellAccessibleParent", "get_renderer_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = CellRendererStateFlags(ret.Int())
	return
}

// gtk_cell_accessible_parent_get_row_header_cells
//
// [ cell ] trans: nothing
//
// [ result ] trans: everything
//
func (v *CellAccessibleParentIfc) GetRowHeaderCells(cell ICellAccessible) (result int /*TODO_TYPE array type: 2, isZeroTerm: false*/) {
	iv, err := _I.Get(375, "CellAccessibleParent", "get_row_header_cells")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int() /*TODO*/
	return
}

// gtk_cell_accessible_parent_grab_focus
//
// [ cell ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *CellAccessibleParentIfc) GrabFocus(cell ICellAccessible) (result bool) {
	iv, err := _I.Get(376, "CellAccessibleParent", "grab_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_accessible_parent_update_relationset
//
// [ cell ] trans: nothing
//
// [ relationset ] trans: nothing
//
func (v *CellAccessibleParentIfc) UpdateRelationset(cell ICellAccessible, relationset atk.IRelationSet) {
	iv, err := _I.Get(377, "CellAccessibleParent", "update_relationset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellAccessible()
	}
	var tmp1 unsafe.Pointer
	if relationset != nil {
		tmp1 = relationset.P_RelationSet()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_relationset := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_cell, arg_relationset}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellAccessibleParentIface

// Struct CellAccessiblePrivate
type CellAccessiblePrivate struct {
	P unsafe.Pointer
}

func CellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(81, "CellAccessiblePrivate")
	return ret
}

type CellAllocCallbackStruct struct {
	F_renderer        CellRenderer
	F_cell_area       gdk.Rectangle
	F_cell_background gdk.Rectangle
	F_data            unsafe.Pointer
}

func GetPointer_myCellAllocCallback() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkCellAllocCallback())
}

//export myGtkCellAllocCallback
func myGtkCellAllocCallback(renderer *C.GtkCellRenderer, cell_area *C.GdkRectangle, cell_background *C.GdkRectangle, data C.gpointer) {
	// TODO: not found user_data
}

// Object CellArea
type CellArea struct {
	BuildableIfc
	CellLayoutIfc
	g.InitiallyUnowned
}

func WrapCellArea(p unsafe.Pointer) (r CellArea) { r.P = p; return }

type ICellArea interface{ P_CellArea() unsafe.Pointer }

func (v CellArea) P_CellArea() unsafe.Pointer   { return v.P }
func (v CellArea) P_Buildable() unsafe.Pointer  { return v.P }
func (v CellArea) P_CellLayout() unsafe.Pointer { return v.P }
func CellAreaGetType() gi.GType {
	ret := _I.GetGType(82, "CellArea")
	return ret
}

// gtk_cell_area_activate
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ edit_only ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) Activate(context ICellAreaContext, widget IWidget, cell_area gdk.Rectangle, flags CellRendererStateFlags, edit_only bool) (result bool) {
	iv, err := _I.Get(378, "CellArea", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_edit_only := gi.NewBoolArgument(edit_only)
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_cell_area, arg_flags, arg_edit_only}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_activate_cell
//
// [ widget ] trans: nothing
//
// [ renderer ] trans: nothing
//
// [ event ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) ActivateCell(widget IWidget, renderer ICellRenderer, event gdk.Event, cell_area gdk.Rectangle, flags CellRendererStateFlags) (result bool) {
	iv, err := _I.Get(379, "CellArea", "activate_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if renderer != nil {
		tmp1 = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_renderer := gi.NewPointerArgument(tmp1)
	arg_event := gi.NewPointerArgument(event.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_widget, arg_renderer, arg_event, arg_cell_area, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_add
//
// [ renderer ] trans: nothing
//
func (v CellArea) Add(renderer ICellRenderer) {
	iv, err := _I.Get(380, "CellArea", "add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_add_focus_sibling
//
// [ renderer ] trans: nothing
//
// [ sibling ] trans: nothing
//
func (v CellArea) AddFocusSibling(renderer ICellRenderer, sibling ICellRenderer) {
	iv, err := _I.Get(381, "CellArea", "add_focus_sibling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	var tmp1 unsafe.Pointer
	if sibling != nil {
		tmp1 = sibling.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_sibling := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_renderer, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_apply_attributes
//
// [ tree_model ] trans: nothing
//
// [ iter ] trans: nothing
//
// [ is_expander ] trans: nothing
//
// [ is_expanded ] trans: nothing
//
func (v CellArea) ApplyAttributes(tree_model ITreeModel, iter TreeIter, is_expander bool, is_expanded bool) {
	iv, err := _I.Get(382, "CellArea", "apply_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tree_model != nil {
		tmp = tree_model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tree_model := gi.NewPointerArgument(tmp)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_is_expander := gi.NewBoolArgument(is_expander)
	arg_is_expanded := gi.NewBoolArgument(is_expanded)
	args := []gi.Argument{arg_v, arg_tree_model, arg_iter, arg_is_expander, arg_is_expanded}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_attribute_connect
//
// [ renderer ] trans: nothing
//
// [ attribute ] trans: nothing
//
// [ column ] trans: nothing
//
func (v CellArea) AttributeConnect(renderer ICellRenderer, attribute string, column int32) {
	iv, err := _I.Get(383, "CellArea", "attribute_connect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_renderer, arg_attribute, arg_column}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// gtk_cell_area_attribute_disconnect
//
// [ renderer ] trans: nothing
//
// [ attribute ] trans: nothing
//
func (v CellArea) AttributeDisconnect(renderer ICellRenderer, attribute string) {
	iv, err := _I.Get(384, "CellArea", "attribute_disconnect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_renderer, arg_attribute}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// gtk_cell_area_attribute_get_column
//
// [ renderer ] trans: nothing
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) AttributeGetColumn(renderer ICellRenderer, attribute string) (result int32) {
	iv, err := _I.Get(385, "CellArea", "attribute_get_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_renderer, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Int32()
	return
}

// gtk_cell_area_cell_get_property
//
// [ renderer ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v CellArea) CellGetProperty(renderer ICellRenderer, property_name string, value g.Value) {
	iv, err := _I.Get(386, "CellArea", "cell_get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_renderer, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_cell_area_cell_set_property
//
// [ renderer ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v CellArea) CellSetProperty(renderer ICellRenderer, property_name string, value g.Value) {
	iv, err := _I.Get(387, "CellArea", "cell_set_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_renderer, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_cell_area_copy_context
//
// [ context ] trans: nothing
//
// [ result ] trans: everything
//
func (v CellArea) CopyContext(context ICellAreaContext) (result CellAreaContext) {
	iv, err := _I.Get(388, "CellArea", "copy_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_create_context
//
// [ result ] trans: everything
//
func (v CellArea) CreateContext() (result CellAreaContext) {
	iv, err := _I.Get(389, "CellArea", "create_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_event
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ event ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) Event(context ICellAreaContext, widget IWidget, event gdk.Event, cell_area gdk.Rectangle, flags CellRendererStateFlags) (result int32) {
	iv, err := _I.Get(390, "CellArea", "event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_event := gi.NewPointerArgument(event.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_event, arg_cell_area, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_cell_area_focus
//
// [ direction ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) Focus(direction DirectionTypeEnum) (result bool) {
	iv, err := _I.Get(391, "CellArea", "focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_foreach
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
func (v CellArea) Foreach(callback int /*TODO_TYPE CALLBACK*/, callback_data unsafe.Pointer) {
	iv, err := _I.Get(392, "CellArea", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCellCallback()))
	arg_callback_data := gi.NewPointerArgument(callback_data)
	args := []gi.Argument{arg_v, arg_callback, arg_callback_data}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_foreach_alloc
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ background_area ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
func (v CellArea) ForeachAlloc(context ICellAreaContext, widget IWidget, cell_area gdk.Rectangle, background_area gdk.Rectangle, callback int /*TODO_TYPE CALLBACK*/, callback_data unsafe.Pointer) {
	iv, err := _I.Get(393, "CellArea", "foreach_alloc")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_background_area := gi.NewPointerArgument(background_area.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCellAllocCallback()))
	arg_callback_data := gi.NewPointerArgument(callback_data)
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_cell_area, arg_background_area, arg_callback, arg_callback_data}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_get_cell_allocation
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ renderer ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ allocation ] trans: nothing, dir: out
//
func (v CellArea) GetCellAllocation(context ICellAreaContext, widget IWidget, renderer ICellRenderer, cell_area gdk.Rectangle, allocation gdk.Rectangle) {
	iv, err := _I.Get(394, "CellArea", "get_cell_allocation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	var tmp2 unsafe.Pointer
	if renderer != nil {
		tmp2 = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_renderer := gi.NewPointerArgument(tmp2)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_renderer, arg_cell_area, arg_allocation}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_get_cell_at_position
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ alloc_area ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v CellArea) GetCellAtPosition(context ICellAreaContext, widget IWidget, cell_area gdk.Rectangle, x int32, y int32, alloc_area gdk.Rectangle) (result CellRenderer) {
	iv, err := _I.Get(395, "CellArea", "get_cell_at_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_alloc_area := gi.NewPointerArgument(alloc_area.P)
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_cell_area, arg_x, arg_y, arg_alloc_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_current_path_string
//
// [ result ] trans: nothing
//
func (v CellArea) GetCurrentPathString() (result string) {
	iv, err := _I.Get(396, "CellArea", "get_current_path_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_cell_area_get_edit_widget
//
// [ result ] trans: nothing
//
func (v CellArea) GetEditWidget() (result CellEditable) {
	iv, err := _I.Get(397, "CellArea", "get_edit_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_edited_cell
//
// [ result ] trans: nothing
//
func (v CellArea) GetEditedCell() (result CellRenderer) {
	iv, err := _I.Get(398, "CellArea", "get_edited_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_focus_cell
//
// [ result ] trans: nothing
//
func (v CellArea) GetFocusCell() (result CellRenderer) {
	iv, err := _I.Get(399, "CellArea", "get_focus_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_focus_from_sibling
//
// [ renderer ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) GetFocusFromSibling(renderer ICellRenderer) (result CellRenderer) {
	iv, err := _I.Get(400, "CellArea", "get_focus_from_sibling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_focus_siblings
//
// [ renderer ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) GetFocusSiblings(renderer ICellRenderer) (result g.List) {
	iv, err := _I.Get(401, "CellArea", "get_focus_siblings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_get_preferred_height
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v CellArea) GetPreferredHeight(context ICellAreaContext, widget IWidget) (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(402, "CellArea", "get_preferred_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_cell_area_get_preferred_height_for_width
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ width ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v CellArea) GetPreferredHeightForWidth(context ICellAreaContext, widget IWidget, width int32) (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(403, "CellArea", "get_preferred_height_for_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_width := gi.NewInt32Argument(width)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_width, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_cell_area_get_preferred_width
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v CellArea) GetPreferredWidth(context ICellAreaContext, widget IWidget) (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(404, "CellArea", "get_preferred_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_cell_area_get_preferred_width_for_height
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ height ] trans: nothing
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v CellArea) GetPreferredWidthForHeight(context ICellAreaContext, widget IWidget, height int32) (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(405, "CellArea", "get_preferred_width_for_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_height := gi.NewInt32Argument(height)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_height, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_cell_area_get_request_mode
//
// [ result ] trans: nothing
//
func (v CellArea) GetRequestMode() (result SizeRequestModeEnum) {
	iv, err := _I.Get(406, "CellArea", "get_request_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SizeRequestModeEnum(ret.Int())
	return
}

// gtk_cell_area_has_renderer
//
// [ renderer ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) HasRenderer(renderer ICellRenderer) (result bool) {
	iv, err := _I.Get(407, "CellArea", "has_renderer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_inner_cell_area
//
// [ widget ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ inner_area ] trans: nothing, dir: out
//
func (v CellArea) InnerCellArea(widget IWidget, cell_area gdk.Rectangle, inner_area gdk.Rectangle) {
	iv, err := _I.Get(408, "CellArea", "inner_cell_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_inner_area := gi.NewPointerArgument(inner_area.P)
	args := []gi.Argument{arg_v, arg_widget, arg_cell_area, arg_inner_area}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_is_activatable
//
// [ result ] trans: nothing
//
func (v CellArea) IsActivatable() (result bool) {
	iv, err := _I.Get(409, "CellArea", "is_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_is_focus_sibling
//
// [ renderer ] trans: nothing
//
// [ sibling ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellArea) IsFocusSibling(renderer ICellRenderer, sibling ICellRenderer) (result bool) {
	iv, err := _I.Get(410, "CellArea", "is_focus_sibling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	var tmp1 unsafe.Pointer
	if sibling != nil {
		tmp1 = sibling.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_sibling := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_renderer, arg_sibling}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_area_remove
//
// [ renderer ] trans: nothing
//
func (v CellArea) Remove(renderer ICellRenderer) {
	iv, err := _I.Get(411, "CellArea", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_remove_focus_sibling
//
// [ renderer ] trans: nothing
//
// [ sibling ] trans: nothing
//
func (v CellArea) RemoveFocusSibling(renderer ICellRenderer, sibling ICellRenderer) {
	iv, err := _I.Get(412, "CellArea", "remove_focus_sibling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	var tmp1 unsafe.Pointer
	if sibling != nil {
		tmp1 = sibling.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_sibling := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_renderer, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_render
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ background_area ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ paint_focus ] trans: nothing
//
func (v CellArea) Render(context ICellAreaContext, widget IWidget, cr cairo.Context, background_area gdk.Rectangle, cell_area gdk.Rectangle, flags CellRendererStateFlags, paint_focus bool) {
	iv, err := _I.Get(413, "CellArea", "render")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_CellAreaContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_background_area := gi.NewPointerArgument(background_area.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_paint_focus := gi.NewBoolArgument(paint_focus)
	args := []gi.Argument{arg_v, arg_context, arg_widget, arg_cr, arg_background_area, arg_cell_area, arg_flags, arg_paint_focus}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_request_renderer
//
// [ renderer ] trans: nothing
//
// [ orientation ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ for_size ] trans: nothing
//
// [ minimum_size ] trans: everything, dir: out
//
// [ natural_size ] trans: everything, dir: out
//
func (v CellArea) RequestRenderer(renderer ICellRenderer, orientation OrientationEnum, widget IWidget, for_size int32) (minimum_size int32, natural_size int32) {
	iv, err := _I.Get(414, "CellArea", "request_renderer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_for_size := gi.NewInt32Argument(for_size)
	arg_minimum_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_renderer, arg_orientation, arg_widget, arg_for_size, arg_minimum_size, arg_natural_size}
	iv.Call(args, nil, &outArgs[0])
	minimum_size = outArgs[0].Int32()
	natural_size = outArgs[1].Int32()
	return
}

// gtk_cell_area_set_focus_cell
//
// [ renderer ] trans: nothing
//
func (v CellArea) SetFocusCell(renderer ICellRenderer) {
	iv, err := _I.Get(415, "CellArea", "set_focus_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_renderer}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_stop_editing
//
// [ canceled ] trans: nothing
//
func (v CellArea) StopEditing(canceled bool) {
	iv, err := _I.Get(416, "CellArea", "stop_editing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_canceled := gi.NewBoolArgument(canceled)
	args := []gi.Argument{arg_v, arg_canceled}
	iv.Call(args, nil, nil)
}

// Object CellAreaBox
type CellAreaBox struct {
	BuildableIfc
	CellLayoutIfc
	OrientableIfc
	CellArea
}

func WrapCellAreaBox(p unsafe.Pointer) (r CellAreaBox) { r.P = p; return }

type ICellAreaBox interface{ P_CellAreaBox() unsafe.Pointer }

func (v CellAreaBox) P_CellAreaBox() unsafe.Pointer { return v.P }
func (v CellAreaBox) P_Buildable() unsafe.Pointer   { return v.P }
func (v CellAreaBox) P_CellLayout() unsafe.Pointer  { return v.P }
func (v CellAreaBox) P_Orientable() unsafe.Pointer  { return v.P }
func CellAreaBoxGetType() gi.GType {
	ret := _I.GetGType(83, "CellAreaBox")
	return ret
}

// gtk_cell_area_box_new
//
// [ result ] trans: nothing
//
func NewCellAreaBox() (result CellAreaBox) {
	iv, err := _I.Get(417, "CellAreaBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_box_get_spacing
//
// [ result ] trans: nothing
//
func (v CellAreaBox) GetSpacing() (result int32) {
	iv, err := _I.Get(418, "CellAreaBox", "get_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_cell_area_box_pack_end
//
// [ renderer ] trans: nothing
//
// [ expand ] trans: nothing
//
// [ align ] trans: nothing
//
// [ fixed ] trans: nothing
//
func (v CellAreaBox) PackEnd(renderer ICellRenderer, expand bool, align bool, fixed bool) {
	iv, err := _I.Get(419, "CellAreaBox", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	arg_align := gi.NewBoolArgument(align)
	arg_fixed := gi.NewBoolArgument(fixed)
	args := []gi.Argument{arg_v, arg_renderer, arg_expand, arg_align, arg_fixed}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_box_pack_start
//
// [ renderer ] trans: nothing
//
// [ expand ] trans: nothing
//
// [ align ] trans: nothing
//
// [ fixed ] trans: nothing
//
func (v CellAreaBox) PackStart(renderer ICellRenderer, expand bool, align bool, fixed bool) {
	iv, err := _I.Get(420, "CellAreaBox", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_renderer := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	arg_align := gi.NewBoolArgument(align)
	arg_fixed := gi.NewBoolArgument(fixed)
	args := []gi.Argument{arg_v, arg_renderer, arg_expand, arg_align, arg_fixed}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_box_set_spacing
//
// [ spacing ] trans: nothing
//
func (v CellAreaBox) SetSpacing(spacing int32) {
	iv, err := _I.Get(421, "CellAreaBox", "set_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellAreaBoxClass

// Struct CellAreaBoxPrivate
type CellAreaBoxPrivate struct {
	P unsafe.Pointer
}

func CellAreaBoxPrivateGetType() gi.GType {
	ret := _I.GetGType(84, "CellAreaBoxPrivate")
	return ret
}

// ignore GType struct CellAreaClass

// Object CellAreaContext
type CellAreaContext struct {
	g.Object
}

func WrapCellAreaContext(p unsafe.Pointer) (r CellAreaContext) { r.P = p; return }

type ICellAreaContext interface{ P_CellAreaContext() unsafe.Pointer }

func (v CellAreaContext) P_CellAreaContext() unsafe.Pointer { return v.P }
func CellAreaContextGetType() gi.GType {
	ret := _I.GetGType(85, "CellAreaContext")
	return ret
}

// gtk_cell_area_context_allocate
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v CellAreaContext) Allocate(width int32, height int32) {
	iv, err := _I.Get(422, "CellAreaContext", "allocate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_context_get_allocation
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v CellAreaContext) GetAllocation() (width int32, height int32) {
	iv, err := _I.Get(423, "CellAreaContext", "get_allocation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// gtk_cell_area_context_get_area
//
// [ result ] trans: nothing
//
func (v CellAreaContext) GetArea() (result CellArea) {
	iv, err := _I.Get(424, "CellAreaContext", "get_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_area_context_get_preferred_height
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v CellAreaContext) GetPreferredHeight() (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(425, "CellAreaContext", "get_preferred_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_cell_area_context_get_preferred_height_for_width
//
// [ width ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v CellAreaContext) GetPreferredHeightForWidth(width int32) (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(426, "CellAreaContext", "get_preferred_height_for_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_cell_area_context_get_preferred_width
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v CellAreaContext) GetPreferredWidth() (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(427, "CellAreaContext", "get_preferred_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_cell_area_context_get_preferred_width_for_height
//
// [ height ] trans: nothing
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v CellAreaContext) GetPreferredWidthForHeight(height int32) (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(428, "CellAreaContext", "get_preferred_width_for_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_height := gi.NewInt32Argument(height)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_height, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_cell_area_context_push_preferred_height
//
// [ minimum_height ] trans: nothing
//
// [ natural_height ] trans: nothing
//
func (v CellAreaContext) PushPreferredHeight(minimum_height int32, natural_height int32) {
	iv, err := _I.Get(429, "CellAreaContext", "push_preferred_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_height := gi.NewInt32Argument(minimum_height)
	arg_natural_height := gi.NewInt32Argument(natural_height)
	args := []gi.Argument{arg_v, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_context_push_preferred_width
//
// [ minimum_width ] trans: nothing
//
// [ natural_width ] trans: nothing
//
func (v CellAreaContext) PushPreferredWidth(minimum_width int32, natural_width int32) {
	iv, err := _I.Get(430, "CellAreaContext", "push_preferred_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_width := gi.NewInt32Argument(minimum_width)
	arg_natural_width := gi.NewInt32Argument(natural_width)
	args := []gi.Argument{arg_v, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, nil)
}

// gtk_cell_area_context_reset
//
func (v CellAreaContext) Reset() {
	iv, err := _I.Get(431, "CellAreaContext", "reset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellAreaContextClass

// Struct CellAreaContextPrivate
type CellAreaContextPrivate struct {
	P unsafe.Pointer
}

func CellAreaContextPrivateGetType() gi.GType {
	ret := _I.GetGType(86, "CellAreaContextPrivate")
	return ret
}

// Struct CellAreaPrivate
type CellAreaPrivate struct {
	P unsafe.Pointer
}

func CellAreaPrivateGetType() gi.GType {
	ret := _I.GetGType(87, "CellAreaPrivate")
	return ret
}

type CellCallbackStruct struct {
	F_renderer CellRenderer
	F_data     unsafe.Pointer
}

func GetPointer_myCellCallback() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkCellCallback())
}

//export myGtkCellCallback
func myGtkCellCallback(renderer *C.GtkCellRenderer, data C.gpointer) {
	// TODO: not found user_data
}

// Interface CellEditable
type CellEditable struct {
	CellEditableIfc
	P unsafe.Pointer
}
type CellEditableIfc struct{}
type ICellEditable interface{ P_CellEditable() unsafe.Pointer }

func (v CellEditable) P_CellEditable() unsafe.Pointer { return v.P }
func CellEditableGetType() gi.GType {
	ret := _I.GetGType(88, "CellEditable")
	return ret
}

// gtk_cell_editable_editing_done
//
func (v *CellEditableIfc) EditingDone() {
	iv, err := _I.Get(432, "CellEditable", "editing_done")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_cell_editable_remove_widget
//
func (v *CellEditableIfc) RemoveWidget() {
	iv, err := _I.Get(433, "CellEditable", "remove_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_cell_editable_start_editing
//
// [ event ] trans: nothing
//
func (v *CellEditableIfc) StartEditing(event gdk.Event) {
	iv, err := _I.Get(434, "CellEditable", "start_editing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellEditableIface

// Interface CellLayout
type CellLayout struct {
	CellLayoutIfc
	P unsafe.Pointer
}
type CellLayoutIfc struct{}
type ICellLayout interface{ P_CellLayout() unsafe.Pointer }

func (v CellLayout) P_CellLayout() unsafe.Pointer { return v.P }
func CellLayoutGetType() gi.GType {
	ret := _I.GetGType(89, "CellLayout")
	return ret
}

// gtk_cell_layout_add_attribute
//
// [ cell ] trans: nothing
//
// [ attribute ] trans: nothing
//
// [ column ] trans: nothing
//
func (v *CellLayoutIfc) AddAttribute(cell ICellRenderer, attribute string, column int32) {
	iv, err := _I.Get(435, "CellLayout", "add_attribute")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_cell, arg_attribute, arg_column}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// gtk_cell_layout_clear
//
func (v *CellLayoutIfc) Clear() {
	iv, err := _I.Get(436, "CellLayout", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_cell_layout_clear_attributes
//
// [ cell ] trans: nothing
//
func (v *CellLayoutIfc) ClearAttributes(cell ICellRenderer) {
	iv, err := _I.Get(437, "CellLayout", "clear_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_cell_layout_get_area
//
// [ result ] trans: nothing
//
func (v *CellLayoutIfc) GetArea() (result CellArea) {
	iv, err := _I.Get(438, "CellLayout", "get_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_layout_get_cells
//
// [ result ] trans: container
//
func (v *CellLayoutIfc) GetCells() (result g.List) {
	iv, err := _I.Get(439, "CellLayout", "get_cells")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_layout_pack_end
//
// [ cell ] trans: nothing
//
// [ expand ] trans: nothing
//
func (v *CellLayoutIfc) PackEnd(cell ICellRenderer, expand bool) {
	iv, err := _I.Get(440, "CellLayout", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_cell, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_cell_layout_pack_start
//
// [ cell ] trans: nothing
//
// [ expand ] trans: nothing
//
func (v *CellLayoutIfc) PackStart(cell ICellRenderer, expand bool) {
	iv, err := _I.Get(441, "CellLayout", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_cell, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_cell_layout_reorder
//
// [ cell ] trans: nothing
//
// [ position ] trans: nothing
//
func (v *CellLayoutIfc) Reorder(cell ICellRenderer, position int32) {
	iv, err := _I.Get(442, "CellLayout", "reorder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_cell, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_cell_layout_set_cell_data_func
//
// [ cell ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ func_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v *CellLayoutIfc) SetCellDataFunc(cell ICellRenderer, func1 int /*TODO_TYPE CALLBACK*/, func_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(443, "CellLayout", "set_cell_data_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cell := gi.NewPointerArgument(tmp)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCellLayoutDataFunc()))
	arg_func_data := gi.NewPointerArgument(func_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_cell, arg_func1, arg_func_data, arg_destroy}
	iv.Call(args, nil, nil)
}

type CellLayoutDataFuncStruct struct {
	F_cell_layout CellLayout
	F_cell        CellRenderer
	F_tree_model  TreeModel
	F_iter        TreeIter
	F_data        unsafe.Pointer
}

func GetPointer_myCellLayoutDataFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkCellLayoutDataFunc())
}

//export myGtkCellLayoutDataFunc
func myGtkCellLayoutDataFunc(cell_layout *C.GtkCellLayout, cell *C.GtkCellRenderer, tree_model *C.GtkTreeModel, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

// ignore GType struct CellLayoutIface

// Object CellRenderer
type CellRenderer struct {
	g.InitiallyUnowned
}

func WrapCellRenderer(p unsafe.Pointer) (r CellRenderer) { r.P = p; return }

type ICellRenderer interface{ P_CellRenderer() unsafe.Pointer }

func (v CellRenderer) P_CellRenderer() unsafe.Pointer { return v.P }
func CellRendererGetType() gi.GType {
	ret := _I.GetGType(90, "CellRenderer")
	return ret
}

// gtk_cell_renderer_activate
//
// [ event ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ path ] trans: nothing
//
// [ background_area ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellRenderer) Activate(event gdk.Event, widget IWidget, path string, background_area gdk.Rectangle, cell_area gdk.Rectangle, flags CellRendererStateFlags) (result bool) {
	iv, err := _I.Get(444, "CellRenderer", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_path := gi.NewStringArgument(c_path)
	arg_background_area := gi.NewPointerArgument(background_area.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_event, arg_widget, arg_path, arg_background_area, arg_cell_area, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_get_aligned_area
//
// [ widget ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ aligned_area ] trans: nothing, dir: out
//
func (v CellRenderer) GetAlignedArea(widget IWidget, flags CellRendererStateFlags, cell_area gdk.Rectangle, aligned_area gdk.Rectangle) {
	iv, err := _I.Get(445, "CellRenderer", "get_aligned_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_aligned_area := gi.NewPointerArgument(aligned_area.P)
	args := []gi.Argument{arg_v, arg_widget, arg_flags, arg_cell_area, arg_aligned_area}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_get_alignment
//
// [ xalign ] trans: everything, dir: out
//
// [ yalign ] trans: everything, dir: out
//
func (v CellRenderer) GetAlignment() (xalign float32, yalign float32) {
	iv, err := _I.Get(446, "CellRenderer", "get_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_yalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, &outArgs[0])
	xalign = outArgs[0].Float()
	yalign = outArgs[1].Float()
	return
}

// gtk_cell_renderer_get_fixed_size
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v CellRenderer) GetFixedSize() (width int32, height int32) {
	iv, err := _I.Get(447, "CellRenderer", "get_fixed_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_padding
//
// [ xpad ] trans: everything, dir: out
//
// [ ypad ] trans: everything, dir: out
//
func (v CellRenderer) GetPadding() (xpad int32, ypad int32) {
	iv, err := _I.Get(448, "CellRenderer", "get_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xpad := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_ypad := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xpad, arg_ypad}
	iv.Call(args, nil, &outArgs[0])
	xpad = outArgs[0].Int32()
	ypad = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_preferred_height
//
// [ widget ] trans: nothing
//
// [ minimum_size ] trans: everything, dir: out
//
// [ natural_size ] trans: everything, dir: out
//
func (v CellRenderer) GetPreferredHeight(widget IWidget) (minimum_size int32, natural_size int32) {
	iv, err := _I.Get(449, "CellRenderer", "get_preferred_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_minimum_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_widget, arg_minimum_size, arg_natural_size}
	iv.Call(args, nil, &outArgs[0])
	minimum_size = outArgs[0].Int32()
	natural_size = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_preferred_height_for_width
//
// [ widget ] trans: nothing
//
// [ width ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v CellRenderer) GetPreferredHeightForWidth(widget IWidget, width int32) (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(450, "CellRenderer", "get_preferred_height_for_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_width := gi.NewInt32Argument(width)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_widget, arg_width, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_preferred_size
//
// [ widget ] trans: nothing
//
// [ minimum_size ] trans: nothing, dir: out
//
// [ natural_size ] trans: nothing, dir: out
//
func (v CellRenderer) GetPreferredSize(widget IWidget, minimum_size Requisition, natural_size Requisition) {
	iv, err := _I.Get(451, "CellRenderer", "get_preferred_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_minimum_size := gi.NewPointerArgument(minimum_size.P)
	arg_natural_size := gi.NewPointerArgument(natural_size.P)
	args := []gi.Argument{arg_v, arg_widget, arg_minimum_size, arg_natural_size}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_get_preferred_width
//
// [ widget ] trans: nothing
//
// [ minimum_size ] trans: everything, dir: out
//
// [ natural_size ] trans: everything, dir: out
//
func (v CellRenderer) GetPreferredWidth(widget IWidget) (minimum_size int32, natural_size int32) {
	iv, err := _I.Get(452, "CellRenderer", "get_preferred_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_minimum_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_widget, arg_minimum_size, arg_natural_size}
	iv.Call(args, nil, &outArgs[0])
	minimum_size = outArgs[0].Int32()
	natural_size = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_preferred_width_for_height
//
// [ widget ] trans: nothing
//
// [ height ] trans: nothing
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v CellRenderer) GetPreferredWidthForHeight(widget IWidget, height int32) (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(453, "CellRenderer", "get_preferred_width_for_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_height := gi.NewInt32Argument(height)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_widget, arg_height, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_cell_renderer_get_request_mode
//
// [ result ] trans: nothing
//
func (v CellRenderer) GetRequestMode() (result SizeRequestModeEnum) {
	iv, err := _I.Get(454, "CellRenderer", "get_request_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SizeRequestModeEnum(ret.Int())
	return
}

// gtk_cell_renderer_get_sensitive
//
// [ result ] trans: nothing
//
func (v CellRenderer) GetSensitive() (result bool) {
	iv, err := _I.Get(455, "CellRenderer", "get_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_cell_renderer_get_size
//
// [ widget ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ x_offset ] trans: everything, dir: out
//
// [ y_offset ] trans: everything, dir: out
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v CellRenderer) GetSize(widget IWidget, cell_area gdk.Rectangle) (x_offset int32, y_offset int32, width int32, height int32) {
	iv, err := _I.Get(456, "CellRenderer", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_x_offset := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y_offset := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_widget, arg_cell_area, arg_x_offset, arg_y_offset, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	x_offset = outArgs[0].Int32()
	y_offset = outArgs[1].Int32()
	width = outArgs[2].Int32()
	height = outArgs[3].Int32()
	return
}

// gtk_cell_renderer_get_state
//
// [ widget ] trans: nothing
//
// [ cell_state ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellRenderer) GetState(widget IWidget, cell_state CellRendererStateFlags) (result StateFlags) {
	iv, err := _I.Get(457, "CellRenderer", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_cell_state := gi.NewIntArgument(int(cell_state))
	args := []gi.Argument{arg_v, arg_widget, arg_cell_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateFlags(ret.Int())
	return
}

// gtk_cell_renderer_get_visible
//
// [ result ] trans: nothing
//
func (v CellRenderer) GetVisible() (result bool) {
	iv, err := _I.Get(458, "CellRenderer", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_is_activatable
//
// [ result ] trans: nothing
//
func (v CellRenderer) IsActivatable() (result bool) {
	iv, err := _I.Get(459, "CellRenderer", "is_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_render
//
// [ cr ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ background_area ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
func (v CellRenderer) Render(cr cairo.Context, widget IWidget, background_area gdk.Rectangle, cell_area gdk.Rectangle, flags CellRendererStateFlags) {
	iv, err := _I.Get(460, "CellRenderer", "render")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_background_area := gi.NewPointerArgument(background_area.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_cr, arg_widget, arg_background_area, arg_cell_area, arg_flags}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_set_alignment
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
func (v CellRenderer) SetAlignment(xalign float32, yalign float32) {
	iv, err := _I.Get(461, "CellRenderer", "set_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_set_fixed_size
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v CellRenderer) SetFixedSize(width int32, height int32) {
	iv, err := _I.Get(462, "CellRenderer", "set_fixed_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_set_padding
//
// [ xpad ] trans: nothing
//
// [ ypad ] trans: nothing
//
func (v CellRenderer) SetPadding(xpad int32, ypad int32) {
	iv, err := _I.Get(463, "CellRenderer", "set_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xpad := gi.NewInt32Argument(xpad)
	arg_ypad := gi.NewInt32Argument(ypad)
	args := []gi.Argument{arg_v, arg_xpad, arg_ypad}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_set_sensitive
//
// [ sensitive ] trans: nothing
//
func (v CellRenderer) SetSensitive(sensitive bool) {
	iv, err := _I.Get(464, "CellRenderer", "set_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitive := gi.NewBoolArgument(sensitive)
	args := []gi.Argument{arg_v, arg_sensitive}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_set_visible
//
// [ visible ] trans: nothing
//
func (v CellRenderer) SetVisible(visible bool) {
	iv, err := _I.Get(465, "CellRenderer", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_start_editing
//
// [ event ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ path ] trans: nothing
//
// [ background_area ] trans: nothing
//
// [ cell_area ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CellRenderer) StartEditing(event gdk.Event, widget IWidget, path string, background_area gdk.Rectangle, cell_area gdk.Rectangle, flags CellRendererStateFlags) (result CellEditable) {
	iv, err := _I.Get(466, "CellRenderer", "start_editing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_path := gi.NewStringArgument(c_path)
	arg_background_area := gi.NewPointerArgument(background_area.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_event, arg_widget, arg_path, arg_background_area, arg_cell_area, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// gtk_cell_renderer_stop_editing
//
// [ canceled ] trans: nothing
//
func (v CellRenderer) StopEditing(canceled bool) {
	iv, err := _I.Get(467, "CellRenderer", "stop_editing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_canceled := gi.NewBoolArgument(canceled)
	args := []gi.Argument{arg_v, arg_canceled}
	iv.Call(args, nil, nil)
}

// Object CellRendererAccel
type CellRendererAccel struct {
	CellRendererText
}

func WrapCellRendererAccel(p unsafe.Pointer) (r CellRendererAccel) { r.P = p; return }

type ICellRendererAccel interface{ P_CellRendererAccel() unsafe.Pointer }

func (v CellRendererAccel) P_CellRendererAccel() unsafe.Pointer { return v.P }
func CellRendererAccelGetType() gi.GType {
	ret := _I.GetGType(91, "CellRendererAccel")
	return ret
}

// gtk_cell_renderer_accel_new
//
// [ result ] trans: nothing
//
func NewCellRendererAccel() (result CellRendererAccel) {
	iv, err := _I.Get(468, "CellRendererAccel", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererAccelClass

// Enum CellRendererAccelMode
type CellRendererAccelModeEnum int

const (
	CellRendererAccelModeGtk   CellRendererAccelModeEnum = 0
	CellRendererAccelModeOther CellRendererAccelModeEnum = 1
)

func CellRendererAccelModeGetType() gi.GType {
	ret := _I.GetGType(92, "CellRendererAccelMode")
	return ret
}

// Struct CellRendererAccelPrivate
type CellRendererAccelPrivate struct {
	P unsafe.Pointer
}

func CellRendererAccelPrivateGetType() gi.GType {
	ret := _I.GetGType(93, "CellRendererAccelPrivate")
	return ret
}

// ignore GType struct CellRendererClass

// Struct CellRendererClassPrivate
type CellRendererClassPrivate struct {
	P unsafe.Pointer
}

func CellRendererClassPrivateGetType() gi.GType {
	ret := _I.GetGType(94, "CellRendererClassPrivate")
	return ret
}

// Object CellRendererCombo
type CellRendererCombo struct {
	CellRendererText
}

func WrapCellRendererCombo(p unsafe.Pointer) (r CellRendererCombo) { r.P = p; return }

type ICellRendererCombo interface{ P_CellRendererCombo() unsafe.Pointer }

func (v CellRendererCombo) P_CellRendererCombo() unsafe.Pointer { return v.P }
func CellRendererComboGetType() gi.GType {
	ret := _I.GetGType(95, "CellRendererCombo")
	return ret
}

// gtk_cell_renderer_combo_new
//
// [ result ] trans: nothing
//
func NewCellRendererCombo() (result CellRendererCombo) {
	iv, err := _I.Get(469, "CellRendererCombo", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererComboClass

// Struct CellRendererComboPrivate
type CellRendererComboPrivate struct {
	P unsafe.Pointer
}

func CellRendererComboPrivateGetType() gi.GType {
	ret := _I.GetGType(96, "CellRendererComboPrivate")
	return ret
}

// Enum CellRendererMode
type CellRendererModeEnum int

const (
	CellRendererModeInert       CellRendererModeEnum = 0
	CellRendererModeActivatable CellRendererModeEnum = 1
	CellRendererModeEditable    CellRendererModeEnum = 2
)

func CellRendererModeGetType() gi.GType {
	ret := _I.GetGType(97, "CellRendererMode")
	return ret
}

// Object CellRendererPixbuf
type CellRendererPixbuf struct {
	CellRenderer
}

func WrapCellRendererPixbuf(p unsafe.Pointer) (r CellRendererPixbuf) { r.P = p; return }

type ICellRendererPixbuf interface{ P_CellRendererPixbuf() unsafe.Pointer }

func (v CellRendererPixbuf) P_CellRendererPixbuf() unsafe.Pointer { return v.P }
func CellRendererPixbufGetType() gi.GType {
	ret := _I.GetGType(98, "CellRendererPixbuf")
	return ret
}

// gtk_cell_renderer_pixbuf_new
//
// [ result ] trans: nothing
//
func NewCellRendererPixbuf() (result CellRendererPixbuf) {
	iv, err := _I.Get(470, "CellRendererPixbuf", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererPixbufClass

// Struct CellRendererPixbufPrivate
type CellRendererPixbufPrivate struct {
	P unsafe.Pointer
}

func CellRendererPixbufPrivateGetType() gi.GType {
	ret := _I.GetGType(99, "CellRendererPixbufPrivate")
	return ret
}

// Struct CellRendererPrivate
type CellRendererPrivate struct {
	P unsafe.Pointer
}

func CellRendererPrivateGetType() gi.GType {
	ret := _I.GetGType(100, "CellRendererPrivate")
	return ret
}

// Object CellRendererProgress
type CellRendererProgress struct {
	OrientableIfc
	CellRenderer
}

func WrapCellRendererProgress(p unsafe.Pointer) (r CellRendererProgress) { r.P = p; return }

type ICellRendererProgress interface{ P_CellRendererProgress() unsafe.Pointer }

func (v CellRendererProgress) P_CellRendererProgress() unsafe.Pointer { return v.P }
func (v CellRendererProgress) P_Orientable() unsafe.Pointer           { return v.P }
func CellRendererProgressGetType() gi.GType {
	ret := _I.GetGType(101, "CellRendererProgress")
	return ret
}

// gtk_cell_renderer_progress_new
//
// [ result ] trans: nothing
//
func NewCellRendererProgress() (result CellRendererProgress) {
	iv, err := _I.Get(471, "CellRendererProgress", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererProgressClass

// Struct CellRendererProgressPrivate
type CellRendererProgressPrivate struct {
	P unsafe.Pointer
}

func CellRendererProgressPrivateGetType() gi.GType {
	ret := _I.GetGType(102, "CellRendererProgressPrivate")
	return ret
}

// Object CellRendererSpin
type CellRendererSpin struct {
	CellRendererText
}

func WrapCellRendererSpin(p unsafe.Pointer) (r CellRendererSpin) { r.P = p; return }

type ICellRendererSpin interface{ P_CellRendererSpin() unsafe.Pointer }

func (v CellRendererSpin) P_CellRendererSpin() unsafe.Pointer { return v.P }
func CellRendererSpinGetType() gi.GType {
	ret := _I.GetGType(103, "CellRendererSpin")
	return ret
}

// gtk_cell_renderer_spin_new
//
// [ result ] trans: nothing
//
func NewCellRendererSpin() (result CellRendererSpin) {
	iv, err := _I.Get(472, "CellRendererSpin", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererSpinClass

// Struct CellRendererSpinPrivate
type CellRendererSpinPrivate struct {
	P unsafe.Pointer
}

func CellRendererSpinPrivateGetType() gi.GType {
	ret := _I.GetGType(104, "CellRendererSpinPrivate")
	return ret
}

// Object CellRendererSpinner
type CellRendererSpinner struct {
	CellRenderer
}

func WrapCellRendererSpinner(p unsafe.Pointer) (r CellRendererSpinner) { r.P = p; return }

type ICellRendererSpinner interface{ P_CellRendererSpinner() unsafe.Pointer }

func (v CellRendererSpinner) P_CellRendererSpinner() unsafe.Pointer { return v.P }
func CellRendererSpinnerGetType() gi.GType {
	ret := _I.GetGType(105, "CellRendererSpinner")
	return ret
}

// gtk_cell_renderer_spinner_new
//
// [ result ] trans: nothing
//
func NewCellRendererSpinner() (result CellRendererSpinner) {
	iv, err := _I.Get(473, "CellRendererSpinner", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CellRendererSpinnerClass

// Struct CellRendererSpinnerPrivate
type CellRendererSpinnerPrivate struct {
	P unsafe.Pointer
}

func CellRendererSpinnerPrivateGetType() gi.GType {
	ret := _I.GetGType(106, "CellRendererSpinnerPrivate")
	return ret
}

// Flags CellRendererState
type CellRendererStateFlags int

const (
	CellRendererStateSelected    CellRendererStateFlags = 1
	CellRendererStatePrelit      CellRendererStateFlags = 2
	CellRendererStateInsensitive CellRendererStateFlags = 4
	CellRendererStateSorted      CellRendererStateFlags = 8
	CellRendererStateFocused     CellRendererStateFlags = 16
	CellRendererStateExpandable  CellRendererStateFlags = 32
	CellRendererStateExpanded    CellRendererStateFlags = 64
)

func CellRendererStateGetType() gi.GType {
	ret := _I.GetGType(107, "CellRendererState")
	return ret
}

// Object CellRendererText
type CellRendererText struct {
	CellRenderer
}

func WrapCellRendererText(p unsafe.Pointer) (r CellRendererText) { r.P = p; return }

type ICellRendererText interface{ P_CellRendererText() unsafe.Pointer }

func (v CellRendererText) P_CellRendererText() unsafe.Pointer { return v.P }
func CellRendererTextGetType() gi.GType {
	ret := _I.GetGType(108, "CellRendererText")
	return ret
}

// gtk_cell_renderer_text_new
//
// [ result ] trans: nothing
//
func NewCellRendererText() (result CellRendererText) {
	iv, err := _I.Get(474, "CellRendererText", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_renderer_text_set_fixed_height_from_font
//
// [ number_of_rows ] trans: nothing
//
func (v CellRendererText) SetFixedHeightFromFont(number_of_rows int32) {
	iv, err := _I.Get(475, "CellRendererText", "set_fixed_height_from_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_number_of_rows := gi.NewInt32Argument(number_of_rows)
	args := []gi.Argument{arg_v, arg_number_of_rows}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellRendererTextClass

// Struct CellRendererTextPrivate
type CellRendererTextPrivate struct {
	P unsafe.Pointer
}

func CellRendererTextPrivateGetType() gi.GType {
	ret := _I.GetGType(109, "CellRendererTextPrivate")
	return ret
}

// Object CellRendererToggle
type CellRendererToggle struct {
	CellRenderer
}

func WrapCellRendererToggle(p unsafe.Pointer) (r CellRendererToggle) { r.P = p; return }

type ICellRendererToggle interface{ P_CellRendererToggle() unsafe.Pointer }

func (v CellRendererToggle) P_CellRendererToggle() unsafe.Pointer { return v.P }
func CellRendererToggleGetType() gi.GType {
	ret := _I.GetGType(110, "CellRendererToggle")
	return ret
}

// gtk_cell_renderer_toggle_new
//
// [ result ] trans: nothing
//
func NewCellRendererToggle() (result CellRendererToggle) {
	iv, err := _I.Get(476, "CellRendererToggle", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_renderer_toggle_get_activatable
//
// [ result ] trans: nothing
//
func (v CellRendererToggle) GetActivatable() (result bool) {
	iv, err := _I.Get(477, "CellRendererToggle", "get_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_toggle_get_active
//
// [ result ] trans: nothing
//
func (v CellRendererToggle) GetActive() (result bool) {
	iv, err := _I.Get(478, "CellRendererToggle", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_toggle_get_radio
//
// [ result ] trans: nothing
//
func (v CellRendererToggle) GetRadio() (result bool) {
	iv, err := _I.Get(479, "CellRendererToggle", "get_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_renderer_toggle_set_activatable
//
// [ setting ] trans: nothing
//
func (v CellRendererToggle) SetActivatable(setting bool) {
	iv, err := _I.Get(480, "CellRendererToggle", "set_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_toggle_set_active
//
// [ setting ] trans: nothing
//
func (v CellRendererToggle) SetActive(setting bool) {
	iv, err := _I.Get(481, "CellRendererToggle", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_cell_renderer_toggle_set_radio
//
// [ radio ] trans: nothing
//
func (v CellRendererToggle) SetRadio(radio bool) {
	iv, err := _I.Get(482, "CellRendererToggle", "set_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_radio := gi.NewBoolArgument(radio)
	args := []gi.Argument{arg_v, arg_radio}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellRendererToggleClass

// Struct CellRendererTogglePrivate
type CellRendererTogglePrivate struct {
	P unsafe.Pointer
}

func CellRendererTogglePrivateGetType() gi.GType {
	ret := _I.GetGType(111, "CellRendererTogglePrivate")
	return ret
}

// Object CellView
type CellView struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellLayoutIfc
	OrientableIfc
	Widget
}

func WrapCellView(p unsafe.Pointer) (r CellView) { r.P = p; return }

type ICellView interface{ P_CellView() unsafe.Pointer }

func (v CellView) P_CellView() unsafe.Pointer         { return v.P }
func (v CellView) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v CellView) P_Buildable() unsafe.Pointer        { return v.P }
func (v CellView) P_CellLayout() unsafe.Pointer       { return v.P }
func (v CellView) P_Orientable() unsafe.Pointer       { return v.P }
func CellViewGetType() gi.GType {
	ret := _I.GetGType(112, "CellView")
	return ret
}

// gtk_cell_view_new
//
// [ result ] trans: nothing
//
func NewCellView() (result CellView) {
	iv, err := _I.Get(483, "CellView", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_new_with_context
//
// [ area ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCellViewWithContext(area ICellArea, context ICellAreaContext) (result CellView) {
	iv, err := _I.Get(484, "CellView", "new_with_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	var tmp1 unsafe.Pointer
	if context != nil {
		tmp1 = context.P_CellAreaContext()
	}
	arg_area := gi.NewPointerArgument(tmp)
	arg_context := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_area, arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_new_with_markup
//
// [ markup ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCellViewWithMarkup(markup string) (result CellView) {
	iv, err := _I.Get(485, "CellView", "new_with_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_markup}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_markup)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_new_with_pixbuf
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCellViewWithPixbuf(pixbuf gdkpixbuf.IPixbuf) (result CellView) {
	iv, err := _I.Get(486, "CellView", "new_with_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_new_with_text
//
// [ text ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCellViewWithText(text string) (result CellView) {
	iv, err := _I.Get(487, "CellView", "new_with_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_text)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_get_displayed_row
//
// [ result ] trans: everything
//
func (v CellView) GetDisplayedRow() (result TreePath) {
	iv, err := _I.Get(488, "CellView", "get_displayed_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_cell_view_get_draw_sensitive
//
// [ result ] trans: nothing
//
func (v CellView) GetDrawSensitive() (result bool) {
	iv, err := _I.Get(489, "CellView", "get_draw_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_view_get_fit_model
//
// [ result ] trans: nothing
//
func (v CellView) GetFitModel() (result bool) {
	iv, err := _I.Get(490, "CellView", "get_fit_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cell_view_get_model
//
// [ result ] trans: nothing
//
func (v CellView) GetModel() (result TreeModel) {
	iv, err := _I.Get(491, "CellView", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_cell_view_get_size_of_row
//
// [ path ] trans: nothing
//
// [ requisition ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v CellView) GetSizeOfRow(path TreePath, requisition Requisition) (result bool) {
	iv, err := _I.Get(492, "CellView", "get_size_of_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_requisition := gi.NewPointerArgument(requisition.P)
	args := []gi.Argument{arg_v, arg_path, arg_requisition}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_cell_view_set_background_color
//
// [ color ] trans: nothing
//
func (v CellView) SetBackgroundColor(color gdk.Color) {
	iv, err := _I.Get(493, "CellView", "set_background_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_cell_view_set_background_rgba
//
// [ rgba ] trans: nothing
//
func (v CellView) SetBackgroundRgba(rgba gdk.RGBA) {
	iv, err := _I.Get(494, "CellView", "set_background_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_v, arg_rgba}
	iv.Call(args, nil, nil)
}

// gtk_cell_view_set_displayed_row
//
// [ path ] trans: nothing
//
func (v CellView) SetDisplayedRow(path TreePath) {
	iv, err := _I.Get(495, "CellView", "set_displayed_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_cell_view_set_draw_sensitive
//
// [ draw_sensitive ] trans: nothing
//
func (v CellView) SetDrawSensitive(draw_sensitive bool) {
	iv, err := _I.Get(496, "CellView", "set_draw_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw_sensitive := gi.NewBoolArgument(draw_sensitive)
	args := []gi.Argument{arg_v, arg_draw_sensitive}
	iv.Call(args, nil, nil)
}

// gtk_cell_view_set_fit_model
//
// [ fit_model ] trans: nothing
//
func (v CellView) SetFitModel(fit_model bool) {
	iv, err := _I.Get(497, "CellView", "set_fit_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fit_model := gi.NewBoolArgument(fit_model)
	args := []gi.Argument{arg_v, arg_fit_model}
	iv.Call(args, nil, nil)
}

// gtk_cell_view_set_model
//
// [ model ] trans: nothing
//
func (v CellView) SetModel(model ITreeModel) {
	iv, err := _I.Get(498, "CellView", "set_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_model}
	iv.Call(args, nil, nil)
}

// ignore GType struct CellViewClass

// Struct CellViewPrivate
type CellViewPrivate struct {
	P unsafe.Pointer
}

func CellViewPrivateGetType() gi.GType {
	ret := _I.GetGType(113, "CellViewPrivate")
	return ret
}

// Object CheckButton
type CheckButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToggleButton
}

func WrapCheckButton(p unsafe.Pointer) (r CheckButton) { r.P = p; return }

type ICheckButton interface{ P_CheckButton() unsafe.Pointer }

func (v CheckButton) P_CheckButton() unsafe.Pointer      { return v.P }
func (v CheckButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v CheckButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v CheckButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v CheckButton) P_Buildable() unsafe.Pointer        { return v.P }
func CheckButtonGetType() gi.GType {
	ret := _I.GetGType(114, "CheckButton")
	return ret
}

// gtk_check_button_new
//
// [ result ] trans: nothing
//
func NewCheckButton() (result CheckButton) {
	iv, err := _I.Get(499, "CheckButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_check_button_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCheckButtonWithLabel(label string) (result CheckButton) {
	iv, err := _I.Get(500, "CheckButton", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_check_button_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCheckButtonWithMnemonic(label string) (result CheckButton) {
	iv, err := _I.Get(501, "CheckButton", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// ignore GType struct CheckButtonClass

// Object CheckMenuItem
type CheckMenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	MenuItem
}

func WrapCheckMenuItem(p unsafe.Pointer) (r CheckMenuItem) { r.P = p; return }

type ICheckMenuItem interface{ P_CheckMenuItem() unsafe.Pointer }

func (v CheckMenuItem) P_CheckMenuItem() unsafe.Pointer    { return v.P }
func (v CheckMenuItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v CheckMenuItem) P_Actionable() unsafe.Pointer       { return v.P }
func (v CheckMenuItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v CheckMenuItem) P_Buildable() unsafe.Pointer        { return v.P }
func CheckMenuItemGetType() gi.GType {
	ret := _I.GetGType(115, "CheckMenuItem")
	return ret
}

// gtk_check_menu_item_new
//
// [ result ] trans: nothing
//
func NewCheckMenuItem() (result CheckMenuItem) {
	iv, err := _I.Get(502, "CheckMenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_check_menu_item_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCheckMenuItemWithLabel(label string) (result CheckMenuItem) {
	iv, err := _I.Get(503, "CheckMenuItem", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_check_menu_item_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewCheckMenuItemWithMnemonic(label string) (result CheckMenuItem) {
	iv, err := _I.Get(504, "CheckMenuItem", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_check_menu_item_get_active
//
// [ result ] trans: nothing
//
func (v CheckMenuItem) GetActive() (result bool) {
	iv, err := _I.Get(505, "CheckMenuItem", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_check_menu_item_get_draw_as_radio
//
// [ result ] trans: nothing
//
func (v CheckMenuItem) GetDrawAsRadio() (result bool) {
	iv, err := _I.Get(506, "CheckMenuItem", "get_draw_as_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_check_menu_item_get_inconsistent
//
// [ result ] trans: nothing
//
func (v CheckMenuItem) GetInconsistent() (result bool) {
	iv, err := _I.Get(507, "CheckMenuItem", "get_inconsistent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_check_menu_item_set_active
//
// [ is_active ] trans: nothing
//
func (v CheckMenuItem) SetActive(is_active bool) {
	iv, err := _I.Get(508, "CheckMenuItem", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_active := gi.NewBoolArgument(is_active)
	args := []gi.Argument{arg_v, arg_is_active}
	iv.Call(args, nil, nil)
}

// gtk_check_menu_item_set_draw_as_radio
//
// [ draw_as_radio ] trans: nothing
//
func (v CheckMenuItem) SetDrawAsRadio(draw_as_radio bool) {
	iv, err := _I.Get(509, "CheckMenuItem", "set_draw_as_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw_as_radio := gi.NewBoolArgument(draw_as_radio)
	args := []gi.Argument{arg_v, arg_draw_as_radio}
	iv.Call(args, nil, nil)
}

// gtk_check_menu_item_set_inconsistent
//
// [ setting ] trans: nothing
//
func (v CheckMenuItem) SetInconsistent(setting bool) {
	iv, err := _I.Get(510, "CheckMenuItem", "set_inconsistent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_check_menu_item_toggled
//
func (v CheckMenuItem) Toggled() {
	iv, err := _I.Get(511, "CheckMenuItem", "toggled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object CheckMenuItemAccessible
type CheckMenuItemAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.SelectionIfc
	MenuItemAccessible
}

func WrapCheckMenuItemAccessible(p unsafe.Pointer) (r CheckMenuItemAccessible) { r.P = p; return }

type ICheckMenuItemAccessible interface{ P_CheckMenuItemAccessible() unsafe.Pointer }

func (v CheckMenuItemAccessible) P_CheckMenuItemAccessible() unsafe.Pointer { return v.P }
func (v CheckMenuItemAccessible) P_Action() unsafe.Pointer                  { return v.P }
func (v CheckMenuItemAccessible) P_Component() unsafe.Pointer               { return v.P }
func (v CheckMenuItemAccessible) P_Selection() unsafe.Pointer               { return v.P }
func CheckMenuItemAccessibleGetType() gi.GType {
	ret := _I.GetGType(116, "CheckMenuItemAccessible")
	return ret
}

// ignore GType struct CheckMenuItemAccessibleClass

// Struct CheckMenuItemAccessiblePrivate
type CheckMenuItemAccessiblePrivate struct {
	P unsafe.Pointer
}

func CheckMenuItemAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(117, "CheckMenuItemAccessiblePrivate")
	return ret
}

// ignore GType struct CheckMenuItemClass

// Struct CheckMenuItemPrivate
type CheckMenuItemPrivate struct {
	P unsafe.Pointer
}

func CheckMenuItemPrivateGetType() gi.GType {
	ret := _I.GetGType(118, "CheckMenuItemPrivate")
	return ret
}

// Object Clipboard
type Clipboard struct {
	g.Object
}

func WrapClipboard(p unsafe.Pointer) (r Clipboard) { r.P = p; return }

type IClipboard interface{ P_Clipboard() unsafe.Pointer }

func (v Clipboard) P_Clipboard() unsafe.Pointer { return v.P }
func ClipboardGetType() gi.GType {
	ret := _I.GetGType(119, "Clipboard")
	return ret
}

// gtk_clipboard_get
//
// [ selection ] trans: nothing
//
// [ result ] trans: nothing
//
func ClipboardGet1(selection gdk.Atom) (result Clipboard) {
	iv, err := _I.Get(512, "Clipboard", "get")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_selection := gi.NewPointerArgument(selection.P)
	args := []gi.Argument{arg_selection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_get_default
//
// [ display ] trans: nothing
//
// [ result ] trans: nothing
//
func ClipboardGetDefault1(display gdk.IDisplay) (result Clipboard) {
	iv, err := _I.Get(513, "Clipboard", "get_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_display}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_get_for_display
//
// [ display ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ result ] trans: nothing
//
func ClipboardGetForDisplay1(display gdk.IDisplay, selection gdk.Atom) (result Clipboard) {
	iv, err := _I.Get(514, "Clipboard", "get_for_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	args := []gi.Argument{arg_display, arg_selection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_clear
//
func (v Clipboard) Clear() {
	iv, err := _I.Get(515, "Clipboard", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_get_display
//
// [ result ] trans: nothing
//
func (v Clipboard) GetDisplay() (result gdk.Display) {
	iv, err := _I.Get(516, "Clipboard", "get_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_get_owner
//
// [ result ] trans: nothing
//
func (v Clipboard) GetOwner() (result g.Object) {
	iv, err := _I.Get(517, "Clipboard", "get_owner")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_request_contents
//
// [ target ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestContents(target gdk.Atom, callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(518, "Clipboard", "request_contents")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_target, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_request_image
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestImage(callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(519, "Clipboard", "request_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardImageReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_request_rich_text
//
// [ buffer ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestRichText(buffer ITextBuffer, callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(520, "Clipboard", "request_rich_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardRichTextReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_buffer, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_request_targets
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestTargets(callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(521, "Clipboard", "request_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardTargetsReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_request_text
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestText(callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(522, "Clipboard", "request_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardTextReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_request_uris
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Clipboard) RequestUris(callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(523, "Clipboard", "request_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myClipboardURIReceivedFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_set_can_store
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
func (v Clipboard) SetCanStore(targets unsafe.Pointer, n_targets int32) {
	iv, err := _I.Get(524, "Clipboard", "set_can_store")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	args := []gi.Argument{arg_v, arg_targets, arg_n_targets}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_set_image
//
// [ pixbuf ] trans: nothing
//
func (v Clipboard) SetImage(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(525, "Clipboard", "set_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_set_text
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
func (v Clipboard) SetText(text string, len1 int32) {
	iv, err := _I.Get(526, "Clipboard", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_text, arg_len1}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_clipboard_store
//
func (v Clipboard) Store() {
	iv, err := _I.Get(527, "Clipboard", "store")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_clipboard_wait_for_contents
//
// [ target ] trans: nothing
//
// [ result ] trans: everything
//
func (v Clipboard) WaitForContents(target gdk.Atom) (result SelectionData) {
	iv, err := _I.Get(528, "Clipboard", "wait_for_contents")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	args := []gi.Argument{arg_v, arg_target}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_wait_for_image
//
// [ result ] trans: everything
//
func (v Clipboard) WaitForImage() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(529, "Clipboard", "wait_for_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_clipboard_wait_for_rich_text
//
// [ buffer ] trans: nothing
//
// [ format ] trans: nothing, dir: out
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v Clipboard) WaitForRichText(buffer ITextBuffer, format gdk.Atom) (result gi.Uint8Array) {
	iv, err := _I.Get(530, "Clipboard", "wait_for_rich_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	arg_format := gi.NewPointerArgument(format.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_format, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	length = outArgs[0].Uint64()
	result = gi.Uint8Array{P: ret.Pointer(), Len: int(length)}
	return
}

// gtk_clipboard_wait_for_targets
//
// [ targets ] trans: container, dir: out
//
// [ n_targets ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitForTargets() (result bool, targets gi.PointerArray) {
	iv, err := _I.Get(531, "Clipboard", "wait_for_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_targets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_targets, arg_n_targets}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_targets int32
	_ = n_targets
	targets.P = outArgs[0].Pointer()
	n_targets = outArgs[1].Int32()
	result = ret.Bool()
	targets.Len = int(n_targets)
	return
}

// gtk_clipboard_wait_for_text
//
// [ result ] trans: everything
//
func (v Clipboard) WaitForText() (result string) {
	iv, err := _I.Get(532, "Clipboard", "wait_for_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_clipboard_wait_for_uris
//
// [ result ] trans: everything
//
func (v Clipboard) WaitForUris() (result gi.CStrArray) {
	iv, err := _I.Get(533, "Clipboard", "wait_for_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_clipboard_wait_is_image_available
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitIsImageAvailable() (result bool) {
	iv, err := _I.Get(534, "Clipboard", "wait_is_image_available")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_clipboard_wait_is_rich_text_available
//
// [ buffer ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitIsRichTextAvailable(buffer ITextBuffer) (result bool) {
	iv, err := _I.Get(535, "Clipboard", "wait_is_rich_text_available")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_buffer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_clipboard_wait_is_target_available
//
// [ target ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitIsTargetAvailable(target gdk.Atom) (result bool) {
	iv, err := _I.Get(536, "Clipboard", "wait_is_target_available")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	args := []gi.Argument{arg_v, arg_target}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_clipboard_wait_is_text_available
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitIsTextAvailable() (result bool) {
	iv, err := _I.Get(537, "Clipboard", "wait_is_text_available")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_clipboard_wait_is_uris_available
//
// [ result ] trans: nothing
//
func (v Clipboard) WaitIsUrisAvailable() (result bool) {
	iv, err := _I.Get(538, "Clipboard", "wait_is_uris_available")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

type ClipboardClearFuncStruct struct {
	F_clipboard          Clipboard
	F_user_data_or_owner unsafe.Pointer
}

func GetPointer_myClipboardClearFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardClearFunc())
}

//export myGtkClipboardClearFunc
func myGtkClipboardClearFunc(clipboard *C.GtkClipboard, user_data_or_owner C.gpointer) {
	// TODO: not found user_data
}

type ClipboardGetFuncStruct struct {
	F_clipboard          Clipboard
	F_selection_data     SelectionData
	F_info               uint32
	F_user_data_or_owner unsafe.Pointer
}

func GetPointer_myClipboardGetFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardGetFunc())
}

//export myGtkClipboardGetFunc
func myGtkClipboardGetFunc(clipboard *C.GtkClipboard, selection_data *C.GtkSelectionData, info C.guint32, user_data_or_owner C.gpointer) {
	// TODO: not found user_data
}

type ClipboardImageReceivedFuncStruct struct {
	F_clipboard Clipboard
	F_pixbuf    gdkpixbuf.Pixbuf
	F_data      unsafe.Pointer
}

func GetPointer_myClipboardImageReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardImageReceivedFunc())
}

//export myGtkClipboardImageReceivedFunc
func myGtkClipboardImageReceivedFunc(clipboard *C.GtkClipboard, pixbuf *C.GdkPixbuf, data C.gpointer) {
	// TODO: not found user_data
}

type ClipboardReceivedFuncStruct struct {
	F_clipboard      Clipboard
	F_selection_data SelectionData
	F_data           unsafe.Pointer
}

func GetPointer_myClipboardReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardReceivedFunc())
}

//export myGtkClipboardReceivedFunc
func myGtkClipboardReceivedFunc(clipboard *C.GtkClipboard, selection_data *C.GtkSelectionData, data C.gpointer) {
	// TODO: not found user_data
}

type ClipboardRichTextReceivedFuncStruct struct {
	F_clipboard Clipboard
	F_format    gdk.Atom
	F_text      string
	F_length    uint64
	F_data      unsafe.Pointer
}

func GetPointer_myClipboardRichTextReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardRichTextReceivedFunc())
}

//export myGtkClipboardRichTextReceivedFunc
func myGtkClipboardRichTextReceivedFunc(clipboard *C.GtkClipboard, format *C.GdkAtom, text *C.gchar, length C.guint64, data C.gpointer) {
	// TODO: not found user_data
}

type ClipboardTargetsReceivedFuncStruct struct {
	F_clipboard Clipboard
	F_atoms     unsafe.Pointer /*TODO_CB tag: array, isPtr: true*/
	F_n_atoms   int32
	F_data      unsafe.Pointer
}

func GetPointer_myClipboardTargetsReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardTargetsReceivedFunc())
}

//export myGtkClipboardTargetsReceivedFunc
func myGtkClipboardTargetsReceivedFunc(clipboard *C.GtkClipboard, atoms C.gpointer, n_atoms C.gint32, data C.gpointer) {
	// TODO: not found user_data
}

type ClipboardTextReceivedFuncStruct struct {
	F_clipboard Clipboard
	F_text      string
	F_data      unsafe.Pointer
}

func GetPointer_myClipboardTextReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardTextReceivedFunc())
}

//export myGtkClipboardTextReceivedFunc
func myGtkClipboardTextReceivedFunc(clipboard *C.GtkClipboard, text *C.gchar, data C.gpointer) {
	// TODO: not found user_data
}

type ClipboardURIReceivedFuncStruct struct {
	F_clipboard Clipboard
	F_uris      unsafe.Pointer /*TODO_CB tag: array, isPtr: true*/
	F_data      unsafe.Pointer
}

func GetPointer_myClipboardURIReceivedFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkClipboardURIReceivedFunc())
}

//export myGtkClipboardURIReceivedFunc
func myGtkClipboardURIReceivedFunc(clipboard *C.GtkClipboard, uris C.gpointer, data C.gpointer) {
	// TODO: not found user_data
}

// Object ColorButton
type ColorButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ColorChooserIfc
	Button
}

func WrapColorButton(p unsafe.Pointer) (r ColorButton) { r.P = p; return }

type IColorButton interface{ P_ColorButton() unsafe.Pointer }

func (v ColorButton) P_ColorButton() unsafe.Pointer      { return v.P }
func (v ColorButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ColorButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ColorButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ColorButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v ColorButton) P_ColorChooser() unsafe.Pointer     { return v.P }
func ColorButtonGetType() gi.GType {
	ret := _I.GetGType(120, "ColorButton")
	return ret
}

// gtk_color_button_new
//
// [ result ] trans: nothing
//
func NewColorButton() (result ColorButton) {
	iv, err := _I.Get(539, "ColorButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_color_button_new_with_color
//
// [ color ] trans: nothing
//
// [ result ] trans: nothing
//
func NewColorButtonWithColor(color gdk.Color) (result ColorButton) {
	iv, err := _I.Get(540, "ColorButton", "new_with_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_color_button_new_with_rgba
//
// [ rgba ] trans: nothing
//
// [ result ] trans: nothing
//
func NewColorButtonWithRgba(rgba gdk.RGBA) (result ColorButton) {
	iv, err := _I.Get(541, "ColorButton", "new_with_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_rgba}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_color_button_get_alpha
//
// [ result ] trans: nothing
//
func (v ColorButton) GetAlpha() (result uint16) {
	iv, err := _I.Get(542, "ColorButton", "get_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// Deprecated
//
// gtk_color_button_get_color
//
// [ color ] trans: nothing, dir: out
//
func (v ColorButton) GetColor(color gdk.Color) {
	iv, err := _I.Get(543, "ColorButton", "get_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_button_get_title
//
// [ result ] trans: nothing
//
func (v ColorButton) GetTitle() (result string) {
	iv, err := _I.Get(544, "ColorButton", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_color_button_get_use_alpha
//
// [ result ] trans: nothing
//
func (v ColorButton) GetUseAlpha() (result bool) {
	iv, err := _I.Get(545, "ColorButton", "get_use_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_color_button_set_alpha
//
// [ alpha ] trans: nothing
//
func (v ColorButton) SetAlpha(alpha uint16) {
	iv, err := _I.Get(546, "ColorButton", "set_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_alpha := gi.NewUint16Argument(alpha)
	args := []gi.Argument{arg_v, arg_alpha}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_color_button_set_color
//
// [ color ] trans: nothing
//
func (v ColorButton) SetColor(color gdk.Color) {
	iv, err := _I.Get(547, "ColorButton", "set_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_button_set_title
//
// [ title ] trans: nothing
//
func (v ColorButton) SetTitle(title string) {
	iv, err := _I.Get(548, "ColorButton", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// Deprecated
//
// gtk_color_button_set_use_alpha
//
// [ use_alpha ] trans: nothing
//
func (v ColorButton) SetUseAlpha(use_alpha bool) {
	iv, err := _I.Get(549, "ColorButton", "set_use_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_alpha := gi.NewBoolArgument(use_alpha)
	args := []gi.Argument{arg_v, arg_use_alpha}
	iv.Call(args, nil, nil)
}

// ignore GType struct ColorButtonClass

// Struct ColorButtonPrivate
type ColorButtonPrivate struct {
	P unsafe.Pointer
}

func ColorButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(121, "ColorButtonPrivate")
	return ret
}

// Interface ColorChooser
type ColorChooser struct {
	ColorChooserIfc
	P unsafe.Pointer
}
type ColorChooserIfc struct{}
type IColorChooser interface{ P_ColorChooser() unsafe.Pointer }

func (v ColorChooser) P_ColorChooser() unsafe.Pointer { return v.P }
func ColorChooserGetType() gi.GType {
	ret := _I.GetGType(122, "ColorChooser")
	return ret
}

// gtk_color_chooser_add_palette
//
// [ orientation ] trans: nothing
//
// [ colors_per_line ] trans: nothing
//
// [ n_colors ] trans: nothing
//
// [ colors ] trans: nothing
//
func (v *ColorChooserIfc) AddPalette(orientation OrientationEnum, colors_per_line int32, n_colors int32, colors unsafe.Pointer) {
	iv, err := _I.Get(550, "ColorChooser", "add_palette")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_colors_per_line := gi.NewInt32Argument(colors_per_line)
	arg_n_colors := gi.NewInt32Argument(n_colors)
	arg_colors := gi.NewPointerArgument(colors)
	args := []gi.Argument{arg_v, arg_orientation, arg_colors_per_line, arg_n_colors, arg_colors}
	iv.Call(args, nil, nil)
}

// gtk_color_chooser_get_rgba
//
// [ color ] trans: nothing, dir: out
//
func (v *ColorChooserIfc) GetRgba(color gdk.RGBA) {
	iv, err := _I.Get(551, "ColorChooser", "get_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_chooser_get_use_alpha
//
// [ result ] trans: nothing
//
func (v *ColorChooserIfc) GetUseAlpha() (result bool) {
	iv, err := _I.Get(552, "ColorChooser", "get_use_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_color_chooser_set_rgba
//
// [ color ] trans: nothing
//
func (v *ColorChooserIfc) SetRgba(color gdk.RGBA) {
	iv, err := _I.Get(553, "ColorChooser", "set_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_chooser_set_use_alpha
//
// [ use_alpha ] trans: nothing
//
func (v *ColorChooserIfc) SetUseAlpha(use_alpha bool) {
	iv, err := _I.Get(554, "ColorChooser", "set_use_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_use_alpha := gi.NewBoolArgument(use_alpha)
	args := []gi.Argument{arg_v, arg_use_alpha}
	iv.Call(args, nil, nil)
}

// Object ColorChooserDialog
type ColorChooserDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ColorChooserIfc
	Dialog
}

func WrapColorChooserDialog(p unsafe.Pointer) (r ColorChooserDialog) { r.P = p; return }

type IColorChooserDialog interface{ P_ColorChooserDialog() unsafe.Pointer }

func (v ColorChooserDialog) P_ColorChooserDialog() unsafe.Pointer { return v.P }
func (v ColorChooserDialog) P_ImplementorIface() unsafe.Pointer   { return v.P }
func (v ColorChooserDialog) P_Buildable() unsafe.Pointer          { return v.P }
func (v ColorChooserDialog) P_ColorChooser() unsafe.Pointer       { return v.P }
func ColorChooserDialogGetType() gi.GType {
	ret := _I.GetGType(123, "ColorChooserDialog")
	return ret
}

// gtk_color_chooser_dialog_new
//
// [ title ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ result ] trans: nothing
//
func NewColorChooserDialog(title string, parent IWindow) (result ColorChooserDialog) {
	iv, err := _I.Get(555, "ColorChooserDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_title := gi.NewStringArgument(c_title)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_title, arg_parent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ColorChooserDialogClass

// Struct ColorChooserDialogPrivate
type ColorChooserDialogPrivate struct {
	P unsafe.Pointer
}

func ColorChooserDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(124, "ColorChooserDialogPrivate")
	return ret
}

// ignore GType struct ColorChooserInterface

// Object ColorChooserWidget
type ColorChooserWidget struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ColorChooserIfc
	OrientableIfc
	Box
}

func WrapColorChooserWidget(p unsafe.Pointer) (r ColorChooserWidget) { r.P = p; return }

type IColorChooserWidget interface{ P_ColorChooserWidget() unsafe.Pointer }

func (v ColorChooserWidget) P_ColorChooserWidget() unsafe.Pointer { return v.P }
func (v ColorChooserWidget) P_ImplementorIface() unsafe.Pointer   { return v.P }
func (v ColorChooserWidget) P_Buildable() unsafe.Pointer          { return v.P }
func (v ColorChooserWidget) P_ColorChooser() unsafe.Pointer       { return v.P }
func (v ColorChooserWidget) P_Orientable() unsafe.Pointer         { return v.P }
func ColorChooserWidgetGetType() gi.GType {
	ret := _I.GetGType(125, "ColorChooserWidget")
	return ret
}

// gtk_color_chooser_widget_new
//
// [ result ] trans: nothing
//
func NewColorChooserWidget() (result ColorChooserWidget) {
	iv, err := _I.Get(556, "ColorChooserWidget", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ColorChooserWidgetClass

// Struct ColorChooserWidgetPrivate
type ColorChooserWidgetPrivate struct {
	P unsafe.Pointer
}

func ColorChooserWidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(126, "ColorChooserWidgetPrivate")
	return ret
}

// Object ColorSelection
type ColorSelection struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapColorSelection(p unsafe.Pointer) (r ColorSelection) { r.P = p; return }

type IColorSelection interface{ P_ColorSelection() unsafe.Pointer }

func (v ColorSelection) P_ColorSelection() unsafe.Pointer   { return v.P }
func (v ColorSelection) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ColorSelection) P_Buildable() unsafe.Pointer        { return v.P }
func (v ColorSelection) P_Orientable() unsafe.Pointer       { return v.P }
func ColorSelectionGetType() gi.GType {
	ret := _I.GetGType(127, "ColorSelection")
	return ret
}

// gtk_color_selection_new
//
// [ result ] trans: nothing
//
func NewColorSelection() (result ColorSelection) {
	iv, err := _I.Get(557, "ColorSelection", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_color_selection_palette_from_string
//
// [ str ] trans: nothing
//
// [ colors ] trans: everything, dir: out
//
// [ n_colors ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func ColorSelectionPaletteFromString1(str string) (result bool, colors unsafe.Pointer) {
	iv, err := _I.Get(558, "ColorSelection", "palette_from_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_colors := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_colors := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_str, arg_colors, arg_n_colors}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	var n_colors int32
	_ = n_colors
	colors = outArgs[0].Pointer()
	n_colors = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_color_selection_palette_to_string
//
// [ colors ] trans: nothing
//
// [ n_colors ] trans: nothing
//
// [ result ] trans: everything
//
func ColorSelectionPaletteToString1(colors unsafe.Pointer, n_colors int32) (result string) {
	iv, err := _I.Get(559, "ColorSelection", "palette_to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_colors := gi.NewPointerArgument(colors)
	arg_n_colors := gi.NewInt32Argument(n_colors)
	args := []gi.Argument{arg_colors, arg_n_colors}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_color_selection_get_current_alpha
//
// [ result ] trans: nothing
//
func (v ColorSelection) GetCurrentAlpha() (result uint16) {
	iv, err := _I.Get(560, "ColorSelection", "get_current_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// Deprecated
//
// gtk_color_selection_get_current_color
//
// [ color ] trans: nothing, dir: out
//
func (v ColorSelection) GetCurrentColor(color gdk.Color) {
	iv, err := _I.Get(561, "ColorSelection", "get_current_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_get_current_rgba
//
// [ rgba ] trans: nothing, dir: out
//
func (v ColorSelection) GetCurrentRgba(rgba gdk.RGBA) {
	iv, err := _I.Get(562, "ColorSelection", "get_current_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_v, arg_rgba}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_get_has_opacity_control
//
// [ result ] trans: nothing
//
func (v ColorSelection) GetHasOpacityControl() (result bool) {
	iv, err := _I.Get(563, "ColorSelection", "get_has_opacity_control")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_color_selection_get_has_palette
//
// [ result ] trans: nothing
//
func (v ColorSelection) GetHasPalette() (result bool) {
	iv, err := _I.Get(564, "ColorSelection", "get_has_palette")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_color_selection_get_previous_alpha
//
// [ result ] trans: nothing
//
func (v ColorSelection) GetPreviousAlpha() (result uint16) {
	iv, err := _I.Get(565, "ColorSelection", "get_previous_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// Deprecated
//
// gtk_color_selection_get_previous_color
//
// [ color ] trans: nothing, dir: out
//
func (v ColorSelection) GetPreviousColor(color gdk.Color) {
	iv, err := _I.Get(566, "ColorSelection", "get_previous_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_get_previous_rgba
//
// [ rgba ] trans: nothing, dir: out
//
func (v ColorSelection) GetPreviousRgba(rgba gdk.RGBA) {
	iv, err := _I.Get(567, "ColorSelection", "get_previous_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_v, arg_rgba}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_is_adjusting
//
// [ result ] trans: nothing
//
func (v ColorSelection) IsAdjusting() (result bool) {
	iv, err := _I.Get(568, "ColorSelection", "is_adjusting")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_color_selection_set_current_alpha
//
// [ alpha ] trans: nothing
//
func (v ColorSelection) SetCurrentAlpha(alpha uint16) {
	iv, err := _I.Get(569, "ColorSelection", "set_current_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_alpha := gi.NewUint16Argument(alpha)
	args := []gi.Argument{arg_v, arg_alpha}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_color_selection_set_current_color
//
// [ color ] trans: nothing
//
func (v ColorSelection) SetCurrentColor(color gdk.Color) {
	iv, err := _I.Get(570, "ColorSelection", "set_current_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_set_current_rgba
//
// [ rgba ] trans: nothing
//
func (v ColorSelection) SetCurrentRgba(rgba gdk.RGBA) {
	iv, err := _I.Get(571, "ColorSelection", "set_current_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_v, arg_rgba}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_set_has_opacity_control
//
// [ has_opacity ] trans: nothing
//
func (v ColorSelection) SetHasOpacityControl(has_opacity bool) {
	iv, err := _I.Get(572, "ColorSelection", "set_has_opacity_control")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_opacity := gi.NewBoolArgument(has_opacity)
	args := []gi.Argument{arg_v, arg_has_opacity}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_set_has_palette
//
// [ has_palette ] trans: nothing
//
func (v ColorSelection) SetHasPalette(has_palette bool) {
	iv, err := _I.Get(573, "ColorSelection", "set_has_palette")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_palette := gi.NewBoolArgument(has_palette)
	args := []gi.Argument{arg_v, arg_has_palette}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_set_previous_alpha
//
// [ alpha ] trans: nothing
//
func (v ColorSelection) SetPreviousAlpha(alpha uint16) {
	iv, err := _I.Get(574, "ColorSelection", "set_previous_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_alpha := gi.NewUint16Argument(alpha)
	args := []gi.Argument{arg_v, arg_alpha}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_color_selection_set_previous_color
//
// [ color ] trans: nothing
//
func (v ColorSelection) SetPreviousColor(color gdk.Color) {
	iv, err := _I.Get(575, "ColorSelection", "set_previous_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_color_selection_set_previous_rgba
//
// [ rgba ] trans: nothing
//
func (v ColorSelection) SetPreviousRgba(rgba gdk.RGBA) {
	iv, err := _I.Get(576, "ColorSelection", "set_previous_rgba")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rgba := gi.NewPointerArgument(rgba.P)
	args := []gi.Argument{arg_v, arg_rgba}
	iv.Call(args, nil, nil)
}

type ColorSelectionChangePaletteFuncStruct struct {
	F_colors   unsafe.Pointer
	F_n_colors int32
}

func GetPointer_myColorSelectionChangePaletteFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkColorSelectionChangePaletteFunc())
}

//export myGtkColorSelectionChangePaletteFunc
func myGtkColorSelectionChangePaletteFunc(colors C.gpointer, n_colors C.gint32) {
	// TODO: not found user_data
}

type ColorSelectionChangePaletteWithScreenFuncStruct struct {
	F_screen   gdk.Screen
	F_colors   unsafe.Pointer
	F_n_colors int32
}

func GetPointer_myColorSelectionChangePaletteWithScreenFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkColorSelectionChangePaletteWithScreenFunc())
}

//export myGtkColorSelectionChangePaletteWithScreenFunc
func myGtkColorSelectionChangePaletteWithScreenFunc(screen *C.GdkScreen, colors C.gpointer, n_colors C.gint32) {
	// TODO: not found user_data
}

// ignore GType struct ColorSelectionClass

// Object ColorSelectionDialog
type ColorSelectionDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Dialog
}

func WrapColorSelectionDialog(p unsafe.Pointer) (r ColorSelectionDialog) { r.P = p; return }

type IColorSelectionDialog interface{ P_ColorSelectionDialog() unsafe.Pointer }

func (v ColorSelectionDialog) P_ColorSelectionDialog() unsafe.Pointer { return v.P }
func (v ColorSelectionDialog) P_ImplementorIface() unsafe.Pointer     { return v.P }
func (v ColorSelectionDialog) P_Buildable() unsafe.Pointer            { return v.P }
func ColorSelectionDialogGetType() gi.GType {
	ret := _I.GetGType(128, "ColorSelectionDialog")
	return ret
}

// gtk_color_selection_dialog_new
//
// [ title ] trans: nothing
//
// [ result ] trans: nothing
//
func NewColorSelectionDialog(title string) (result ColorSelectionDialog) {
	iv, err := _I.Get(577, "ColorSelectionDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_title}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// gtk_color_selection_dialog_get_color_selection
//
// [ result ] trans: nothing
//
func (v ColorSelectionDialog) GetColorSelection() (result Widget) {
	iv, err := _I.Get(578, "ColorSelectionDialog", "get_color_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ColorSelectionDialogClass

// Struct ColorSelectionDialogPrivate
type ColorSelectionDialogPrivate struct {
	P unsafe.Pointer
}

func ColorSelectionDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(129, "ColorSelectionDialogPrivate")
	return ret
}

// Struct ColorSelectionPrivate
type ColorSelectionPrivate struct {
	P unsafe.Pointer
}

func ColorSelectionPrivateGetType() gi.GType {
	ret := _I.GetGType(130, "ColorSelectionPrivate")
	return ret
}

// Object ComboBox
type ComboBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellEditableIfc
	CellLayoutIfc
	Bin
}

func WrapComboBox(p unsafe.Pointer) (r ComboBox) { r.P = p; return }

type IComboBox interface{ P_ComboBox() unsafe.Pointer }

func (v ComboBox) P_ComboBox() unsafe.Pointer         { return v.P }
func (v ComboBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ComboBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v ComboBox) P_CellEditable() unsafe.Pointer     { return v.P }
func (v ComboBox) P_CellLayout() unsafe.Pointer       { return v.P }
func ComboBoxGetType() gi.GType {
	ret := _I.GetGType(131, "ComboBox")
	return ret
}

// gtk_combo_box_new
//
// [ result ] trans: nothing
//
func NewComboBox() (result ComboBox) {
	iv, err := _I.Get(579, "ComboBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_new_with_area
//
// [ area ] trans: nothing
//
// [ result ] trans: nothing
//
func NewComboBoxWithArea(area ICellArea) (result ComboBox) {
	iv, err := _I.Get(580, "ComboBox", "new_with_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	arg_area := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_new_with_area_and_entry
//
// [ area ] trans: nothing
//
// [ result ] trans: nothing
//
func NewComboBoxWithAreaAndEntry(area ICellArea) (result ComboBox) {
	iv, err := _I.Get(581, "ComboBox", "new_with_area_and_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	arg_area := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_new_with_entry
//
// [ result ] trans: nothing
//
func NewComboBoxWithEntry() (result ComboBox) {
	iv, err := _I.Get(582, "ComboBox", "new_with_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_new_with_model
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewComboBoxWithModel(model ITreeModel) (result ComboBox) {
	iv, err := _I.Get(583, "ComboBox", "new_with_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_new_with_model_and_entry
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewComboBoxWithModelAndEntry(model ITreeModel) (result ComboBox) {
	iv, err := _I.Get(584, "ComboBox", "new_with_model_and_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_get_active
//
// [ result ] trans: nothing
//
func (v ComboBox) GetActive() (result int32) {
	iv, err := _I.Get(585, "ComboBox", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_combo_box_get_active_id
//
// [ result ] trans: nothing
//
func (v ComboBox) GetActiveId() (result string) {
	iv, err := _I.Get(586, "ComboBox", "get_active_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_combo_box_get_active_iter
//
// [ iter ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v ComboBox) GetActiveIter(iter TreeIter) (result bool) {
	iv, err := _I.Get(587, "ComboBox", "get_active_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_combo_box_get_add_tearoffs
//
// [ result ] trans: nothing
//
func (v ComboBox) GetAddTearoffs() (result bool) {
	iv, err := _I.Get(588, "ComboBox", "get_add_tearoffs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_combo_box_get_button_sensitivity
//
// [ result ] trans: nothing
//
func (v ComboBox) GetButtonSensitivity() (result SensitivityTypeEnum) {
	iv, err := _I.Get(589, "ComboBox", "get_button_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SensitivityTypeEnum(ret.Int())
	return
}

// gtk_combo_box_get_column_span_column
//
// [ result ] trans: nothing
//
func (v ComboBox) GetColumnSpanColumn() (result int32) {
	iv, err := _I.Get(590, "ComboBox", "get_column_span_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_combo_box_get_entry_text_column
//
// [ result ] trans: nothing
//
func (v ComboBox) GetEntryTextColumn() (result int32) {
	iv, err := _I.Get(591, "ComboBox", "get_entry_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_combo_box_get_focus_on_click
//
// [ result ] trans: nothing
//
func (v ComboBox) GetFocusOnClick() (result bool) {
	iv, err := _I.Get(592, "ComboBox", "get_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_combo_box_get_has_entry
//
// [ result ] trans: nothing
//
func (v ComboBox) GetHasEntry() (result bool) {
	iv, err := _I.Get(593, "ComboBox", "get_has_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_combo_box_get_id_column
//
// [ result ] trans: nothing
//
func (v ComboBox) GetIdColumn() (result int32) {
	iv, err := _I.Get(594, "ComboBox", "get_id_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_combo_box_get_model
//
// [ result ] trans: nothing
//
func (v ComboBox) GetModel() (result TreeModel) {
	iv, err := _I.Get(595, "ComboBox", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_get_popup_accessible
//
// [ result ] trans: nothing
//
func (v ComboBox) GetPopupAccessible() (result atk.Object) {
	iv, err := _I.Get(596, "ComboBox", "get_popup_accessible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_get_popup_fixed_width
//
// [ result ] trans: nothing
//
func (v ComboBox) GetPopupFixedWidth() (result bool) {
	iv, err := _I.Get(597, "ComboBox", "get_popup_fixed_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_combo_box_get_row_span_column
//
// [ result ] trans: nothing
//
func (v ComboBox) GetRowSpanColumn() (result int32) {
	iv, err := _I.Get(598, "ComboBox", "get_row_span_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_combo_box_get_title
//
// [ result ] trans: nothing
//
func (v ComboBox) GetTitle() (result string) {
	iv, err := _I.Get(599, "ComboBox", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_combo_box_get_wrap_width
//
// [ result ] trans: nothing
//
func (v ComboBox) GetWrapWidth() (result int32) {
	iv, err := _I.Get(600, "ComboBox", "get_wrap_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_combo_box_popdown
//
func (v ComboBox) Popdown() {
	iv, err := _I.Get(601, "ComboBox", "popdown")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_popup
//
func (v ComboBox) Popup() {
	iv, err := _I.Get(602, "ComboBox", "popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_popup_for_device
//
// [ device ] trans: nothing
//
func (v ComboBox) PopupForDevice(device gdk.IDevice) {
	iv, err := _I.Get(603, "ComboBox", "popup_for_device")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_device}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_active
//
// [ index_ ] trans: nothing
//
func (v ComboBox) SetActive(index_ int32) {
	iv, err := _I.Get(604, "ComboBox", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_active_id
//
// [ active_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ComboBox) SetActiveId(active_id string) (result bool) {
	iv, err := _I.Get(605, "ComboBox", "set_active_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_active_id := gi.CString(active_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_active_id := gi.NewStringArgument(c_active_id)
	args := []gi.Argument{arg_v, arg_active_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_active_id)
	result = ret.Bool()
	return
}

// gtk_combo_box_set_active_iter
//
// [ iter ] trans: nothing
//
func (v ComboBox) SetActiveIter(iter TreeIter) {
	iv, err := _I.Get(606, "ComboBox", "set_active_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_combo_box_set_add_tearoffs
//
// [ add_tearoffs ] trans: nothing
//
func (v ComboBox) SetAddTearoffs(add_tearoffs bool) {
	iv, err := _I.Get(607, "ComboBox", "set_add_tearoffs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_add_tearoffs := gi.NewBoolArgument(add_tearoffs)
	args := []gi.Argument{arg_v, arg_add_tearoffs}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_button_sensitivity
//
// [ sensitivity ] trans: nothing
//
func (v ComboBox) SetButtonSensitivity(sensitivity SensitivityTypeEnum) {
	iv, err := _I.Get(608, "ComboBox", "set_button_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitivity := gi.NewIntArgument(int(sensitivity))
	args := []gi.Argument{arg_v, arg_sensitivity}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_column_span_column
//
// [ column_span ] trans: nothing
//
func (v ComboBox) SetColumnSpanColumn(column_span int32) {
	iv, err := _I.Get(609, "ComboBox", "set_column_span_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column_span := gi.NewInt32Argument(column_span)
	args := []gi.Argument{arg_v, arg_column_span}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_entry_text_column
//
// [ text_column ] trans: nothing
//
func (v ComboBox) SetEntryTextColumn(text_column int32) {
	iv, err := _I.Get(610, "ComboBox", "set_entry_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_text_column := gi.NewInt32Argument(text_column)
	args := []gi.Argument{arg_v, arg_text_column}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_combo_box_set_focus_on_click
//
// [ focus_on_click ] trans: nothing
//
func (v ComboBox) SetFocusOnClick(focus_on_click bool) {
	iv, err := _I.Get(611, "ComboBox", "set_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focus_on_click := gi.NewBoolArgument(focus_on_click)
	args := []gi.Argument{arg_v, arg_focus_on_click}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_id_column
//
// [ id_column ] trans: nothing
//
func (v ComboBox) SetIdColumn(id_column int32) {
	iv, err := _I.Get(612, "ComboBox", "set_id_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_id_column := gi.NewInt32Argument(id_column)
	args := []gi.Argument{arg_v, arg_id_column}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_model
//
// [ model ] trans: nothing
//
func (v ComboBox) SetModel(model ITreeModel) {
	iv, err := _I.Get(613, "ComboBox", "set_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_model}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_popup_fixed_width
//
// [ fixed ] trans: nothing
//
func (v ComboBox) SetPopupFixedWidth(fixed bool) {
	iv, err := _I.Get(614, "ComboBox", "set_popup_fixed_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fixed := gi.NewBoolArgument(fixed)
	args := []gi.Argument{arg_v, arg_fixed}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_row_separator_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v ComboBox) SetRowSeparatorFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(615, "ComboBox", "set_row_separator_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewRowSeparatorFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_set_row_span_column
//
// [ row_span ] trans: nothing
//
func (v ComboBox) SetRowSpanColumn(row_span int32) {
	iv, err := _I.Get(616, "ComboBox", "set_row_span_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row_span := gi.NewInt32Argument(row_span)
	args := []gi.Argument{arg_v, arg_row_span}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_combo_box_set_title
//
// [ title ] trans: nothing
//
func (v ComboBox) SetTitle(title string) {
	iv, err := _I.Get(617, "ComboBox", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_combo_box_set_wrap_width
//
// [ width ] trans: nothing
//
func (v ComboBox) SetWrapWidth(width int32) {
	iv, err := _I.Get(618, "ComboBox", "set_wrap_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	args := []gi.Argument{arg_v, arg_width}
	iv.Call(args, nil, nil)
}

// Object ComboBoxAccessible
type ComboBoxAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapComboBoxAccessible(p unsafe.Pointer) (r ComboBoxAccessible) { r.P = p; return }

type IComboBoxAccessible interface{ P_ComboBoxAccessible() unsafe.Pointer }

func (v ComboBoxAccessible) P_ComboBoxAccessible() unsafe.Pointer { return v.P }
func (v ComboBoxAccessible) P_Action() unsafe.Pointer             { return v.P }
func (v ComboBoxAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v ComboBoxAccessible) P_Selection() unsafe.Pointer          { return v.P }
func ComboBoxAccessibleGetType() gi.GType {
	ret := _I.GetGType(132, "ComboBoxAccessible")
	return ret
}

// ignore GType struct ComboBoxAccessibleClass

// Struct ComboBoxAccessiblePrivate
type ComboBoxAccessiblePrivate struct {
	P unsafe.Pointer
}

func ComboBoxAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(133, "ComboBoxAccessiblePrivate")
	return ret
}

// ignore GType struct ComboBoxClass

// Struct ComboBoxPrivate
type ComboBoxPrivate struct {
	P unsafe.Pointer
}

func ComboBoxPrivateGetType() gi.GType {
	ret := _I.GetGType(134, "ComboBoxPrivate")
	return ret
}

// Object ComboBoxText
type ComboBoxText struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellEditableIfc
	CellLayoutIfc
	ComboBox
}

func WrapComboBoxText(p unsafe.Pointer) (r ComboBoxText) { r.P = p; return }

type IComboBoxText interface{ P_ComboBoxText() unsafe.Pointer }

func (v ComboBoxText) P_ComboBoxText() unsafe.Pointer     { return v.P }
func (v ComboBoxText) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ComboBoxText) P_Buildable() unsafe.Pointer        { return v.P }
func (v ComboBoxText) P_CellEditable() unsafe.Pointer     { return v.P }
func (v ComboBoxText) P_CellLayout() unsafe.Pointer       { return v.P }
func ComboBoxTextGetType() gi.GType {
	ret := _I.GetGType(135, "ComboBoxText")
	return ret
}

// gtk_combo_box_text_new
//
// [ result ] trans: nothing
//
func NewComboBoxText() (result ComboBoxText) {
	iv, err := _I.Get(619, "ComboBoxText", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_text_new_with_entry
//
// [ result ] trans: nothing
//
func NewComboBoxTextWithEntry() (result ComboBoxText) {
	iv, err := _I.Get(620, "ComboBoxText", "new_with_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_combo_box_text_append
//
// [ id ] trans: nothing
//
// [ text ] trans: nothing
//
func (v ComboBoxText) Append(id string, text string) {
	iv, err := _I.Get(621, "ComboBoxText", "append")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_id, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
	gi.Free(c_text)
}

// gtk_combo_box_text_append_text
//
// [ text ] trans: nothing
//
func (v ComboBoxText) AppendText(text string) {
	iv, err := _I.Get(622, "ComboBoxText", "append_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_combo_box_text_get_active_text
//
// [ result ] trans: everything
//
func (v ComboBoxText) GetActiveText() (result string) {
	iv, err := _I.Get(623, "ComboBoxText", "get_active_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_combo_box_text_insert
//
// [ position ] trans: nothing
//
// [ id ] trans: nothing
//
// [ text ] trans: nothing
//
func (v ComboBoxText) Insert(position int32, id string, text string) {
	iv, err := _I.Get(624, "ComboBoxText", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_id := gi.NewStringArgument(c_id)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_position, arg_id, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
	gi.Free(c_text)
}

// gtk_combo_box_text_insert_text
//
// [ position ] trans: nothing
//
// [ text ] trans: nothing
//
func (v ComboBoxText) InsertText(position int32, text string) {
	iv, err := _I.Get(625, "ComboBoxText", "insert_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_position, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_combo_box_text_prepend
//
// [ id ] trans: nothing
//
// [ text ] trans: nothing
//
func (v ComboBoxText) Prepend(id string, text string) {
	iv, err := _I.Get(626, "ComboBoxText", "prepend")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_id, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
	gi.Free(c_text)
}

// gtk_combo_box_text_prepend_text
//
// [ text ] trans: nothing
//
func (v ComboBoxText) PrependText(text string) {
	iv, err := _I.Get(627, "ComboBoxText", "prepend_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_combo_box_text_remove
//
// [ position ] trans: nothing
//
func (v ComboBoxText) Remove(position int32) {
	iv, err := _I.Get(628, "ComboBoxText", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_combo_box_text_remove_all
//
func (v ComboBoxText) RemoveAll() {
	iv, err := _I.Get(629, "ComboBoxText", "remove_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ComboBoxTextClass

// Struct ComboBoxTextPrivate
type ComboBoxTextPrivate struct {
	P unsafe.Pointer
}

func ComboBoxTextPrivateGetType() gi.GType {
	ret := _I.GetGType(136, "ComboBoxTextPrivate")
	return ret
}

// Object Container
type Container struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapContainer(p unsafe.Pointer) (r Container) { r.P = p; return }

type IContainer interface{ P_Container() unsafe.Pointer }

func (v Container) P_Container() unsafe.Pointer        { return v.P }
func (v Container) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Container) P_Buildable() unsafe.Pointer        { return v.P }
func ContainerGetType() gi.GType {
	ret := _I.GetGType(137, "Container")
	return ret
}

// gtk_container_add
//
// [ widget ] trans: nothing
//
func (v Container) Add(widget IWidget) {
	iv, err := _I.Get(630, "Container", "add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_container_check_resize
//
func (v Container) CheckResize() {
	iv, err := _I.Get(631, "Container", "check_resize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_container_child_get_property
//
// [ child ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v Container) ChildGetProperty(child IWidget, property_name string, value g.Value) {
	iv, err := _I.Get(632, "Container", "child_get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_child, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_container_child_notify
//
// [ child ] trans: nothing
//
// [ child_property ] trans: nothing
//
func (v Container) ChildNotify(child IWidget, child_property string) {
	iv, err := _I.Get(633, "Container", "child_notify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_child_property := gi.CString(child_property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_child_property := gi.NewStringArgument(c_child_property)
	args := []gi.Argument{arg_v, arg_child, arg_child_property}
	iv.Call(args, nil, nil)
	gi.Free(c_child_property)
}

// gtk_container_child_notify_by_pspec
//
// [ child ] trans: nothing
//
// [ pspec ] trans: nothing
//
func (v Container) ChildNotifyByPspec(child IWidget, pspec g.IParamSpec) {
	iv, err := _I.Get(634, "Container", "child_notify_by_pspec")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if pspec != nil {
		tmp1 = pspec.P_ParamSpec()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_pspec := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_pspec}
	iv.Call(args, nil, nil)
}

// gtk_container_child_set_property
//
// [ child ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v Container) ChildSetProperty(child IWidget, property_name string, value g.Value) {
	iv, err := _I.Get(635, "Container", "child_set_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_child, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_container_child_type
//
// [ result ] trans: nothing
//
func (v Container) ChildType() (result gi.GType) {
	iv, err := _I.Get(636, "Container", "child_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// gtk_container_forall
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
func (v Container) Forall(callback int /*TODO_TYPE CALLBACK*/, callback_data unsafe.Pointer) {
	iv, err := _I.Get(637, "Container", "forall")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCallback()))
	arg_callback_data := gi.NewPointerArgument(callback_data)
	args := []gi.Argument{arg_v, arg_callback, arg_callback_data}
	iv.Call(args, nil, nil)
}

// gtk_container_foreach
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
func (v Container) Foreach(callback int /*TODO_TYPE CALLBACK*/, callback_data unsafe.Pointer) {
	iv, err := _I.Get(638, "Container", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myCallback()))
	arg_callback_data := gi.NewPointerArgument(callback_data)
	args := []gi.Argument{arg_v, arg_callback, arg_callback_data}
	iv.Call(args, nil, nil)
}

// gtk_container_get_border_width
//
// [ result ] trans: nothing
//
func (v Container) GetBorderWidth() (result uint32) {
	iv, err := _I.Get(639, "Container", "get_border_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_container_get_children
//
// [ result ] trans: container
//
func (v Container) GetChildren() (result g.List) {
	iv, err := _I.Get(640, "Container", "get_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_container_get_focus_chain
//
// [ focusable_widgets ] trans: container, dir: out
//
// [ result ] trans: nothing
//
func (v Container) GetFocusChain() (result bool, focusable_widgets g.List) {
	iv, err := _I.Get(641, "Container", "get_focus_chain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_focusable_widgets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_focusable_widgets}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	focusable_widgets.P = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// gtk_container_get_focus_child
//
// [ result ] trans: nothing
//
func (v Container) GetFocusChild() (result Widget) {
	iv, err := _I.Get(642, "Container", "get_focus_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_container_get_focus_hadjustment
//
// [ result ] trans: nothing
//
func (v Container) GetFocusHadjustment() (result Adjustment) {
	iv, err := _I.Get(643, "Container", "get_focus_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_container_get_focus_vadjustment
//
// [ result ] trans: nothing
//
func (v Container) GetFocusVadjustment() (result Adjustment) {
	iv, err := _I.Get(644, "Container", "get_focus_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_container_get_path_for_child
//
// [ child ] trans: nothing
//
// [ result ] trans: everything
//
func (v Container) GetPathForChild(child IWidget) (result WidgetPath) {
	iv, err := _I.Get(645, "Container", "get_path_for_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_container_get_resize_mode
//
// [ result ] trans: nothing
//
func (v Container) GetResizeMode() (result ResizeModeEnum) {
	iv, err := _I.Get(646, "Container", "get_resize_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ResizeModeEnum(ret.Int())
	return
}

// gtk_container_propagate_draw
//
// [ child ] trans: nothing
//
// [ cr ] trans: nothing
//
func (v Container) PropagateDraw(child IWidget, cr cairo.Context) {
	iv, err := _I.Get(647, "Container", "propagate_draw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	args := []gi.Argument{arg_v, arg_child, arg_cr}
	iv.Call(args, nil, nil)
}

// gtk_container_remove
//
// [ widget ] trans: nothing
//
func (v Container) Remove(widget IWidget) {
	iv, err := _I.Get(648, "Container", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_container_resize_children
//
func (v Container) ResizeChildren() {
	iv, err := _I.Get(649, "Container", "resize_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_container_set_border_width
//
// [ border_width ] trans: nothing
//
func (v Container) SetBorderWidth(border_width uint32) {
	iv, err := _I.Get(650, "Container", "set_border_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_border_width := gi.NewUint32Argument(border_width)
	args := []gi.Argument{arg_v, arg_border_width}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_container_set_focus_chain
//
// [ focusable_widgets ] trans: nothing
//
func (v Container) SetFocusChain(focusable_widgets g.List) {
	iv, err := _I.Get(651, "Container", "set_focus_chain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focusable_widgets := gi.NewPointerArgument(focusable_widgets.P)
	args := []gi.Argument{arg_v, arg_focusable_widgets}
	iv.Call(args, nil, nil)
}

// gtk_container_set_focus_child
//
// [ child ] trans: nothing
//
func (v Container) SetFocusChild(child IWidget) {
	iv, err := _I.Get(652, "Container", "set_focus_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_container_set_focus_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v Container) SetFocusHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(653, "Container", "set_focus_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_container_set_focus_vadjustment
//
// [ adjustment ] trans: nothing
//
func (v Container) SetFocusVadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(654, "Container", "set_focus_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_container_set_reallocate_redraws
//
// [ needs_redraws ] trans: nothing
//
func (v Container) SetReallocateRedraws(needs_redraws bool) {
	iv, err := _I.Get(655, "Container", "set_reallocate_redraws")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_needs_redraws := gi.NewBoolArgument(needs_redraws)
	args := []gi.Argument{arg_v, arg_needs_redraws}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_container_set_resize_mode
//
// [ resize_mode ] trans: nothing
//
func (v Container) SetResizeMode(resize_mode ResizeModeEnum) {
	iv, err := _I.Get(656, "Container", "set_resize_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resize_mode := gi.NewIntArgument(int(resize_mode))
	args := []gi.Argument{arg_v, arg_resize_mode}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_container_unset_focus_chain
//
func (v Container) UnsetFocusChain() {
	iv, err := _I.Get(657, "Container", "unset_focus_chain")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object ContainerAccessible
type ContainerAccessible struct {
	atk.ComponentIfc
	WidgetAccessible
}

func WrapContainerAccessible(p unsafe.Pointer) (r ContainerAccessible) { r.P = p; return }

type IContainerAccessible interface{ P_ContainerAccessible() unsafe.Pointer }

func (v ContainerAccessible) P_ContainerAccessible() unsafe.Pointer { return v.P }
func (v ContainerAccessible) P_Component() unsafe.Pointer           { return v.P }
func ContainerAccessibleGetType() gi.GType {
	ret := _I.GetGType(138, "ContainerAccessible")
	return ret
}

// ignore GType struct ContainerAccessibleClass

// Struct ContainerAccessiblePrivate
type ContainerAccessiblePrivate struct {
	P unsafe.Pointer
}

func ContainerAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(139, "ContainerAccessiblePrivate")
	return ret
}

// Object ContainerCellAccessible
type ContainerCellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.TableCellIfc
	CellAccessible
}

func WrapContainerCellAccessible(p unsafe.Pointer) (r ContainerCellAccessible) { r.P = p; return }

type IContainerCellAccessible interface{ P_ContainerCellAccessible() unsafe.Pointer }

func (v ContainerCellAccessible) P_ContainerCellAccessible() unsafe.Pointer { return v.P }
func (v ContainerCellAccessible) P_Action() unsafe.Pointer                  { return v.P }
func (v ContainerCellAccessible) P_Component() unsafe.Pointer               { return v.P }
func (v ContainerCellAccessible) P_TableCell() unsafe.Pointer               { return v.P }
func ContainerCellAccessibleGetType() gi.GType {
	ret := _I.GetGType(140, "ContainerCellAccessible")
	return ret
}

// gtk_container_cell_accessible_new
//
// [ result ] trans: everything
//
func NewContainerCellAccessible() (result ContainerCellAccessible) {
	iv, err := _I.Get(658, "ContainerCellAccessible", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_container_cell_accessible_add_child
//
// [ child ] trans: nothing
//
func (v ContainerCellAccessible) AddChild(child ICellAccessible) {
	iv, err := _I.Get(659, "ContainerCellAccessible", "add_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_container_cell_accessible_get_children
//
// [ result ] trans: nothing
//
func (v ContainerCellAccessible) GetChildren() (result g.List) {
	iv, err := _I.Get(660, "ContainerCellAccessible", "get_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_container_cell_accessible_remove_child
//
// [ child ] trans: nothing
//
func (v ContainerCellAccessible) RemoveChild(child ICellAccessible) {
	iv, err := _I.Get(661, "ContainerCellAccessible", "remove_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_CellAccessible()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// ignore GType struct ContainerCellAccessibleClass

// Struct ContainerCellAccessiblePrivate
type ContainerCellAccessiblePrivate struct {
	P unsafe.Pointer
}

func ContainerCellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(141, "ContainerCellAccessiblePrivate")
	return ret
}

// ignore GType struct ContainerClass

// Struct ContainerPrivate
type ContainerPrivate struct {
	P unsafe.Pointer
}

func ContainerPrivateGetType() gi.GType {
	ret := _I.GetGType(142, "ContainerPrivate")
	return ret
}

// Enum CornerType
type CornerTypeEnum int

const (
	CornerTypeTopLeft     CornerTypeEnum = 0
	CornerTypeBottomLeft  CornerTypeEnum = 1
	CornerTypeTopRight    CornerTypeEnum = 2
	CornerTypeBottomRight CornerTypeEnum = 3
)

func CornerTypeGetType() gi.GType {
	ret := _I.GetGType(143, "CornerType")
	return ret
}

// Object CssProvider
type CssProvider struct {
	StyleProviderIfc
	g.Object
}

func WrapCssProvider(p unsafe.Pointer) (r CssProvider) { r.P = p; return }

type ICssProvider interface{ P_CssProvider() unsafe.Pointer }

func (v CssProvider) P_CssProvider() unsafe.Pointer   { return v.P }
func (v CssProvider) P_StyleProvider() unsafe.Pointer { return v.P }
func CssProviderGetType() gi.GType {
	ret := _I.GetGType(144, "CssProvider")
	return ret
}

// gtk_css_provider_new
//
// [ result ] trans: everything
//
func NewCssProvider() (result CssProvider) {
	iv, err := _I.Get(662, "CssProvider", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_css_provider_get_named
//
// [ name ] trans: nothing
//
// [ variant ] trans: nothing
//
// [ result ] trans: nothing
//
func CssProviderGetNamed1(name string, variant string) (result CssProvider) {
	iv, err := _I.Get(664, "CssProvider", "get_named")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_variant := gi.CString(variant)
	arg_name := gi.NewStringArgument(c_name)
	arg_variant := gi.NewStringArgument(c_variant)
	args := []gi.Argument{arg_name, arg_variant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_variant)
	result.P = ret.Pointer()
	return
}

// gtk_css_provider_load_from_data
//
// [ data ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CssProvider) LoadFromData(data gi.Uint8Array, length int64) (result bool, err error) {
	iv, err := _I.Get(665, "CssProvider", "load_from_data")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewPointerArgument(data.P)
	arg_length := gi.NewInt64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_css_provider_load_from_file
//
// [ file ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CssProvider) LoadFromFile(file g.IFile) (result bool, err error) {
	iv, err := _I.Get(666, "CssProvider", "load_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_file := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_css_provider_load_from_path
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v CssProvider) LoadFromPath(path string) (result bool, err error) {
	iv, err := _I.Get(667, "CssProvider", "load_from_path")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_css_provider_load_from_resource
//
// [ resource_path ] trans: nothing
//
func (v CssProvider) LoadFromResource(resource_path string) {
	iv, err := _I.Get(668, "CssProvider", "load_from_resource")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	args := []gi.Argument{arg_v, arg_resource_path}
	iv.Call(args, nil, nil)
	gi.Free(c_resource_path)
}

// gtk_css_provider_to_string
//
// [ result ] trans: everything
//
func (v CssProvider) ToString() (result string) {
	iv, err := _I.Get(669, "CssProvider", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct CssProviderClass

// Enum CssProviderError
type CssProviderErrorEnum int

const (
	CssProviderErrorFailed       CssProviderErrorEnum = 0
	CssProviderErrorSyntax       CssProviderErrorEnum = 1
	CssProviderErrorImport       CssProviderErrorEnum = 2
	CssProviderErrorName         CssProviderErrorEnum = 3
	CssProviderErrorDeprecated   CssProviderErrorEnum = 4
	CssProviderErrorUnknownValue CssProviderErrorEnum = 5
)

func CssProviderErrorGetType() gi.GType {
	ret := _I.GetGType(145, "CssProviderError")
	return ret
}

// Struct CssProviderPrivate
type CssProviderPrivate struct {
	P unsafe.Pointer
}

func CssProviderPrivateGetType() gi.GType {
	ret := _I.GetGType(146, "CssProviderPrivate")
	return ret
}

// Struct CssSection
type CssSection struct {
	P unsafe.Pointer
}

func CssSectionGetType() gi.GType {
	ret := _I.GetGType(147, "CssSection")
	return ret
}

// gtk_css_section_get_end_line
//
// [ result ] trans: nothing
//
func (v CssSection) GetEndLine() (result uint32) {
	iv, err := _I.Get(670, "CssSection", "get_end_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_css_section_get_end_position
//
// [ result ] trans: nothing
//
func (v CssSection) GetEndPosition() (result uint32) {
	iv, err := _I.Get(671, "CssSection", "get_end_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_css_section_get_file
//
// [ result ] trans: nothing
//
func (v CssSection) GetFile() (result g.File) {
	iv, err := _I.Get(672, "CssSection", "get_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_css_section_get_parent
//
// [ result ] trans: nothing
//
func (v CssSection) GetParent() (result CssSection) {
	iv, err := _I.Get(673, "CssSection", "get_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_css_section_get_section_type
//
// [ result ] trans: nothing
//
func (v CssSection) GetSectionType() (result CssSectionTypeEnum) {
	iv, err := _I.Get(674, "CssSection", "get_section_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = CssSectionTypeEnum(ret.Int())
	return
}

// gtk_css_section_get_start_line
//
// [ result ] trans: nothing
//
func (v CssSection) GetStartLine() (result uint32) {
	iv, err := _I.Get(675, "CssSection", "get_start_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_css_section_get_start_position
//
// [ result ] trans: nothing
//
func (v CssSection) GetStartPosition() (result uint32) {
	iv, err := _I.Get(676, "CssSection", "get_start_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_css_section_ref
//
// [ result ] trans: everything
//
func (v CssSection) Ref() (result CssSection) {
	iv, err := _I.Get(677, "CssSection", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_css_section_unref
//
func (v CssSection) Unref() {
	iv, err := _I.Get(678, "CssSection", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum CssSectionType
type CssSectionTypeEnum int

const (
	CssSectionTypeDocument        CssSectionTypeEnum = 0
	CssSectionTypeImport          CssSectionTypeEnum = 1
	CssSectionTypeColorDefinition CssSectionTypeEnum = 2
	CssSectionTypeBindingSet      CssSectionTypeEnum = 3
	CssSectionTypeRuleset         CssSectionTypeEnum = 4
	CssSectionTypeSelector        CssSectionTypeEnum = 5
	CssSectionTypeDeclaration     CssSectionTypeEnum = 6
	CssSectionTypeValue           CssSectionTypeEnum = 7
	CssSectionTypeKeyframes       CssSectionTypeEnum = 8
)

func CssSectionTypeGetType() gi.GType {
	ret := _I.GetGType(148, "CssSectionType")
	return ret
}

// Flags DebugFlag
type DebugFlagFlags int

const (
	DebugFlagMisc         DebugFlagFlags = 1
	DebugFlagPlugsocket   DebugFlagFlags = 2
	DebugFlagText         DebugFlagFlags = 4
	DebugFlagTree         DebugFlagFlags = 8
	DebugFlagUpdates      DebugFlagFlags = 16
	DebugFlagKeybindings  DebugFlagFlags = 32
	DebugFlagMultihead    DebugFlagFlags = 64
	DebugFlagModules      DebugFlagFlags = 128
	DebugFlagGeometry     DebugFlagFlags = 256
	DebugFlagIcontheme    DebugFlagFlags = 512
	DebugFlagPrinting     DebugFlagFlags = 1024
	DebugFlagBuilder      DebugFlagFlags = 2048
	DebugFlagSizeRequest  DebugFlagFlags = 4096
	DebugFlagNoCssCache   DebugFlagFlags = 8192
	DebugFlagBaselines    DebugFlagFlags = 16384
	DebugFlagPixelCache   DebugFlagFlags = 32768
	DebugFlagNoPixelCache DebugFlagFlags = 65536
	DebugFlagInteractive  DebugFlagFlags = 131072
	DebugFlagTouchscreen  DebugFlagFlags = 262144
	DebugFlagActions      DebugFlagFlags = 524288
	DebugFlagResize       DebugFlagFlags = 1048576
	DebugFlagLayout       DebugFlagFlags = 2097152
)

func DebugFlagGetType() gi.GType {
	ret := _I.GetGType(149, "DebugFlag")
	return ret
}

// Enum DeleteType
type DeleteTypeEnum int

const (
	DeleteTypeChars           DeleteTypeEnum = 0
	DeleteTypeWordEnds        DeleteTypeEnum = 1
	DeleteTypeWords           DeleteTypeEnum = 2
	DeleteTypeDisplayLines    DeleteTypeEnum = 3
	DeleteTypeDisplayLineEnds DeleteTypeEnum = 4
	DeleteTypeParagraphEnds   DeleteTypeEnum = 5
	DeleteTypeParagraphs      DeleteTypeEnum = 6
	DeleteTypeWhitespace      DeleteTypeEnum = 7
)

func DeleteTypeGetType() gi.GType {
	ret := _I.GetGType(150, "DeleteType")
	return ret
}

// Flags DestDefaults
type DestDefaultsFlags int

const (
	DestDefaultsMotion    DestDefaultsFlags = 1
	DestDefaultsHighlight DestDefaultsFlags = 2
	DestDefaultsDrop      DestDefaultsFlags = 4
	DestDefaultsAll       DestDefaultsFlags = 7
)

func DestDefaultsGetType() gi.GType {
	ret := _I.GetGType(151, "DestDefaults")
	return ret
}

// Object Dialog
type Dialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Window
}

func WrapDialog(p unsafe.Pointer) (r Dialog) { r.P = p; return }

type IDialog interface{ P_Dialog() unsafe.Pointer }

func (v Dialog) P_Dialog() unsafe.Pointer           { return v.P }
func (v Dialog) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Dialog) P_Buildable() unsafe.Pointer        { return v.P }
func DialogGetType() gi.GType {
	ret := _I.GetGType(152, "Dialog")
	return ret
}

// gtk_dialog_new
//
// [ result ] trans: nothing
//
func NewDialog() (result Dialog) {
	iv, err := _I.Get(679, "Dialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_dialog_add_action_widget
//
// [ child ] trans: nothing
//
// [ response_id ] trans: nothing
//
func (v Dialog) AddActionWidget(child IWidget, response_id int32) {
	iv, err := _I.Get(680, "Dialog", "add_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_child, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_dialog_add_button
//
// [ button_text ] trans: nothing
//
// [ response_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Dialog) AddButton(button_text string, response_id int32) (result Widget) {
	iv, err := _I.Get(681, "Dialog", "add_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_button_text := gi.CString(button_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_button_text := gi.NewStringArgument(c_button_text)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_button_text, arg_response_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_button_text)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_dialog_get_action_area
//
// [ result ] trans: nothing
//
func (v Dialog) GetActionArea() (result Widget) {
	iv, err := _I.Get(682, "Dialog", "get_action_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_dialog_get_content_area
//
// [ result ] trans: nothing
//
func (v Dialog) GetContentArea() (result Box) {
	iv, err := _I.Get(683, "Dialog", "get_content_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_dialog_get_header_bar
//
// [ result ] trans: nothing
//
func (v Dialog) GetHeaderBar() (result Widget) {
	iv, err := _I.Get(684, "Dialog", "get_header_bar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_dialog_get_response_for_widget
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Dialog) GetResponseForWidget(widget IWidget) (result int32) {
	iv, err := _I.Get(685, "Dialog", "get_response_for_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_dialog_get_widget_for_response
//
// [ response_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Dialog) GetWidgetForResponse(response_id int32) (result Widget) {
	iv, err := _I.Get(686, "Dialog", "get_widget_for_response")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_response_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_dialog_response
//
// [ response_id ] trans: nothing
//
func (v Dialog) Response(response_id int32) {
	iv, err := _I.Get(687, "Dialog", "response")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_dialog_run
//
// [ result ] trans: nothing
//
func (v Dialog) Run() (result int32) {
	iv, err := _I.Get(688, "Dialog", "run")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_dialog_set_alternative_button_order_from_array
//
// [ n_params ] trans: nothing
//
// [ new_order ] trans: nothing
//
func (v Dialog) SetAlternativeButtonOrderFromArray(n_params int32, new_order gi.Int32Array) {
	iv, err := _I.Get(689, "Dialog", "set_alternative_button_order_from_array")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_params := gi.NewInt32Argument(n_params)
	arg_new_order := gi.NewPointerArgument(new_order.P)
	args := []gi.Argument{arg_v, arg_n_params, arg_new_order}
	iv.Call(args, nil, nil)
}

// gtk_dialog_set_default_response
//
// [ response_id ] trans: nothing
//
func (v Dialog) SetDefaultResponse(response_id int32) {
	iv, err := _I.Get(690, "Dialog", "set_default_response")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_dialog_set_response_sensitive
//
// [ response_id ] trans: nothing
//
// [ setting ] trans: nothing
//
func (v Dialog) SetResponseSensitive(response_id int32, setting bool) {
	iv, err := _I.Get(691, "Dialog", "set_response_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_response_id, arg_setting}
	iv.Call(args, nil, nil)
}

// ignore GType struct DialogClass

// Flags DialogFlags
type DialogFlags int

const (
	DialogFlagsModal             DialogFlags = 1
	DialogFlagsDestroyWithParent DialogFlags = 2
	DialogFlagsUseHeaderBar      DialogFlags = 4
)

func DialogFlagsGetType() gi.GType {
	ret := _I.GetGType(153, "DialogFlags")
	return ret
}

// Struct DialogPrivate
type DialogPrivate struct {
	P unsafe.Pointer
}

func DialogPrivateGetType() gi.GType {
	ret := _I.GetGType(154, "DialogPrivate")
	return ret
}

// Enum DirectionType
type DirectionTypeEnum int

const (
	DirectionTypeTabForward  DirectionTypeEnum = 0
	DirectionTypeTabBackward DirectionTypeEnum = 1
	DirectionTypeUp          DirectionTypeEnum = 2
	DirectionTypeDown        DirectionTypeEnum = 3
	DirectionTypeLeft        DirectionTypeEnum = 4
	DirectionTypeRight       DirectionTypeEnum = 5
)

func DirectionTypeGetType() gi.GType {
	ret := _I.GetGType(155, "DirectionType")
	return ret
}

// Enum DragResult
type DragResultEnum int

const (
	DragResultSuccess        DragResultEnum = 0
	DragResultNoTarget       DragResultEnum = 1
	DragResultUserCancelled  DragResultEnum = 2
	DragResultTimeoutExpired DragResultEnum = 3
	DragResultGrabBroken     DragResultEnum = 4
	DragResultError          DragResultEnum = 5
)

func DragResultGetType() gi.GType {
	ret := _I.GetGType(156, "DragResult")
	return ret
}

// Object DrawingArea
type DrawingArea struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapDrawingArea(p unsafe.Pointer) (r DrawingArea) { r.P = p; return }

type IDrawingArea interface{ P_DrawingArea() unsafe.Pointer }

func (v DrawingArea) P_DrawingArea() unsafe.Pointer      { return v.P }
func (v DrawingArea) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v DrawingArea) P_Buildable() unsafe.Pointer        { return v.P }
func DrawingAreaGetType() gi.GType {
	ret := _I.GetGType(157, "DrawingArea")
	return ret
}

// gtk_drawing_area_new
//
// [ result ] trans: nothing
//
func NewDrawingArea() (result DrawingArea) {
	iv, err := _I.Get(692, "DrawingArea", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DrawingAreaClass

// Interface Editable
type Editable struct {
	EditableIfc
	P unsafe.Pointer
}
type EditableIfc struct{}
type IEditable interface{ P_Editable() unsafe.Pointer }

func (v Editable) P_Editable() unsafe.Pointer { return v.P }
func EditableGetType() gi.GType {
	ret := _I.GetGType(158, "Editable")
	return ret
}

// gtk_editable_copy_clipboard
//
func (v *EditableIfc) CopyClipboard() {
	iv, err := _I.Get(693, "Editable", "copy_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_editable_cut_clipboard
//
func (v *EditableIfc) CutClipboard() {
	iv, err := _I.Get(694, "Editable", "cut_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_editable_delete_selection
//
func (v *EditableIfc) DeleteSelection() {
	iv, err := _I.Get(695, "Editable", "delete_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_editable_delete_text
//
// [ start_pos ] trans: nothing
//
// [ end_pos ] trans: nothing
//
func (v *EditableIfc) DeleteText(start_pos int32, end_pos int32) {
	iv, err := _I.Get(696, "Editable", "delete_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_start_pos := gi.NewInt32Argument(start_pos)
	arg_end_pos := gi.NewInt32Argument(end_pos)
	args := []gi.Argument{arg_v, arg_start_pos, arg_end_pos}
	iv.Call(args, nil, nil)
}

// gtk_editable_get_chars
//
// [ start_pos ] trans: nothing
//
// [ end_pos ] trans: nothing
//
// [ result ] trans: everything
//
func (v *EditableIfc) GetChars(start_pos int32, end_pos int32) (result string) {
	iv, err := _I.Get(697, "Editable", "get_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_start_pos := gi.NewInt32Argument(start_pos)
	arg_end_pos := gi.NewInt32Argument(end_pos)
	args := []gi.Argument{arg_v, arg_start_pos, arg_end_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_editable_get_editable
//
// [ result ] trans: nothing
//
func (v *EditableIfc) GetEditable() (result bool) {
	iv, err := _I.Get(698, "Editable", "get_editable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_editable_get_position
//
// [ result ] trans: nothing
//
func (v *EditableIfc) GetPosition() (result int32) {
	iv, err := _I.Get(699, "Editable", "get_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_editable_get_selection_bounds
//
// [ start_pos ] trans: everything, dir: out
//
// [ end_pos ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *EditableIfc) GetSelectionBounds() (result bool, start_pos int32, end_pos int32) {
	iv, err := _I.Get(700, "Editable", "get_selection_bounds")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_start_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_end_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_start_pos, arg_end_pos}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	start_pos = outArgs[0].Int32()
	end_pos = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_editable_insert_text
//
// [ new_text ] trans: nothing
//
// [ new_text_length ] trans: nothing
//
// [ position ] trans: everything, dir: inout
//
func (v *EditableIfc) InsertText(new_text string, new_text_length int32, position int /*TODO:TYPE*/) {
	iv, err := _I.Get(701, "Editable", "insert_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_new_text := gi.CString(new_text)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_new_text := gi.NewStringArgument(c_new_text)
	arg_new_text_length := gi.NewInt32Argument(new_text_length)
	args := []gi.Argument{arg_v, arg_new_text, arg_new_text_length}
	iv.Call(args, nil, &outArgs[0])
	gi.Free(c_new_text)
}

// gtk_editable_paste_clipboard
//
func (v *EditableIfc) PasteClipboard() {
	iv, err := _I.Get(702, "Editable", "paste_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_editable_select_region
//
// [ start_pos ] trans: nothing
//
// [ end_pos ] trans: nothing
//
func (v *EditableIfc) SelectRegion(start_pos int32, end_pos int32) {
	iv, err := _I.Get(703, "Editable", "select_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_start_pos := gi.NewInt32Argument(start_pos)
	arg_end_pos := gi.NewInt32Argument(end_pos)
	args := []gi.Argument{arg_v, arg_start_pos, arg_end_pos}
	iv.Call(args, nil, nil)
}

// gtk_editable_set_editable
//
// [ is_editable ] trans: nothing
//
func (v *EditableIfc) SetEditable(is_editable bool) {
	iv, err := _I.Get(704, "Editable", "set_editable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_is_editable := gi.NewBoolArgument(is_editable)
	args := []gi.Argument{arg_v, arg_is_editable}
	iv.Call(args, nil, nil)
}

// gtk_editable_set_position
//
// [ position ] trans: nothing
//
func (v *EditableIfc) SetPosition(position int32) {
	iv, err := _I.Get(705, "Editable", "set_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// ignore GType struct EditableInterface

// Object Entry
type Entry struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellEditableIfc
	EditableIfc
	Widget
}

func WrapEntry(p unsafe.Pointer) (r Entry) { r.P = p; return }

type IEntry interface{ P_Entry() unsafe.Pointer }

func (v Entry) P_Entry() unsafe.Pointer            { return v.P }
func (v Entry) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Entry) P_Buildable() unsafe.Pointer        { return v.P }
func (v Entry) P_CellEditable() unsafe.Pointer     { return v.P }
func (v Entry) P_Editable() unsafe.Pointer         { return v.P }
func EntryGetType() gi.GType {
	ret := _I.GetGType(159, "Entry")
	return ret
}

// gtk_entry_new
//
// [ result ] trans: nothing
//
func NewEntry() (result Entry) {
	iv, err := _I.Get(706, "Entry", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_new_with_buffer
//
// [ buffer ] trans: nothing
//
// [ result ] trans: nothing
//
func NewEntryWithBuffer(buffer IEntryBuffer) (result Entry) {
	iv, err := _I.Get(707, "Entry", "new_with_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_EntryBuffer()
	}
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_buffer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_activates_default
//
// [ result ] trans: nothing
//
func (v Entry) GetActivatesDefault() (result bool) {
	iv, err := _I.Get(708, "Entry", "get_activates_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_get_alignment
//
// [ result ] trans: nothing
//
func (v Entry) GetAlignment() (result float32) {
	iv, err := _I.Get(709, "Entry", "get_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_entry_get_attributes
//
// [ result ] trans: nothing
//
func (v Entry) GetAttributes() (result pango.AttrList) {
	iv, err := _I.Get(710, "Entry", "get_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_buffer
//
// [ result ] trans: nothing
//
func (v Entry) GetBuffer() (result EntryBuffer) {
	iv, err := _I.Get(711, "Entry", "get_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_completion
//
// [ result ] trans: nothing
//
func (v Entry) GetCompletion() (result EntryCompletion) {
	iv, err := _I.Get(712, "Entry", "get_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_current_icon_drag_source
//
// [ result ] trans: nothing
//
func (v Entry) GetCurrentIconDragSource() (result int32) {
	iv, err := _I.Get(713, "Entry", "get_current_icon_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_get_cursor_hadjustment
//
// [ result ] trans: nothing
//
func (v Entry) GetCursorHadjustment() (result Adjustment) {
	iv, err := _I.Get(714, "Entry", "get_cursor_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_has_frame
//
// [ result ] trans: nothing
//
func (v Entry) GetHasFrame() (result bool) {
	iv, err := _I.Get(715, "Entry", "get_has_frame")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_get_icon_activatable
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconActivatable(icon_pos EntryIconPositionEnum) (result bool) {
	iv, err := _I.Get(716, "Entry", "get_icon_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_get_icon_area
//
// [ icon_pos ] trans: nothing
//
// [ icon_area ] trans: nothing, dir: out
//
func (v Entry) GetIconArea(icon_pos EntryIconPositionEnum, icon_area gdk.Rectangle) {
	iv, err := _I.Get(717, "Entry", "get_icon_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_icon_area := gi.NewPointerArgument(icon_area.P)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_icon_area}
	iv.Call(args, nil, nil)
}

// gtk_entry_get_icon_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconAtPos(x int32, y int32) (result int32) {
	iv, err := _I.Get(718, "Entry", "get_icon_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_get_icon_gicon
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconGicon(icon_pos EntryIconPositionEnum) (result g.Icon) {
	iv, err := _I.Get(719, "Entry", "get_icon_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_icon_name
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconName(icon_pos EntryIconPositionEnum) (result string) {
	iv, err := _I.Get(720, "Entry", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_get_icon_pixbuf
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconPixbuf(icon_pos EntryIconPositionEnum) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(721, "Entry", "get_icon_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_icon_sensitive
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconSensitive(icon_pos EntryIconPositionEnum) (result bool) {
	iv, err := _I.Get(722, "Entry", "get_icon_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_entry_get_icon_stock
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconStock(icon_pos EntryIconPositionEnum) (result string) {
	iv, err := _I.Get(723, "Entry", "get_icon_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_get_icon_storage_type
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) GetIconStorageType(icon_pos EntryIconPositionEnum) (result ImageTypeEnum) {
	iv, err := _I.Get(724, "Entry", "get_icon_storage_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ImageTypeEnum(ret.Int())
	return
}

// gtk_entry_get_icon_tooltip_markup
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: everything
//
func (v Entry) GetIconTooltipMarkup(icon_pos EntryIconPositionEnum) (result string) {
	iv, err := _I.Get(725, "Entry", "get_icon_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_entry_get_icon_tooltip_text
//
// [ icon_pos ] trans: nothing
//
// [ result ] trans: everything
//
func (v Entry) GetIconTooltipText(icon_pos EntryIconPositionEnum) (result string) {
	iv, err := _I.Get(726, "Entry", "get_icon_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	args := []gi.Argument{arg_v, arg_icon_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_entry_get_inner_border
//
// [ result ] trans: nothing
//
func (v Entry) GetInnerBorder() (result Border) {
	iv, err := _I.Get(727, "Entry", "get_inner_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_input_hints
//
// [ result ] trans: nothing
//
func (v Entry) GetInputHints() (result InputHintsFlags) {
	iv, err := _I.Get(728, "Entry", "get_input_hints")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = InputHintsFlags(ret.Int())
	return
}

// gtk_entry_get_input_purpose
//
// [ result ] trans: nothing
//
func (v Entry) GetInputPurpose() (result InputPurposeEnum) {
	iv, err := _I.Get(729, "Entry", "get_input_purpose")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = InputPurposeEnum(ret.Int())
	return
}

// gtk_entry_get_invisible_char
//
// [ result ] trans: nothing
//
func (v Entry) GetInvisibleChar() (result rune) {
	iv, err := _I.Get(730, "Entry", "get_invisible_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = rune(ret.Uint32())
	return
}

// gtk_entry_get_layout
//
// [ result ] trans: nothing
//
func (v Entry) GetLayout() (result pango.Layout) {
	iv, err := _I.Get(731, "Entry", "get_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_layout_offsets
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
func (v Entry) GetLayoutOffsets() (x int32, y int32) {
	iv, err := _I.Get(732, "Entry", "get_layout_offsets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	iv.Call(args, nil, &outArgs[0])
	x = outArgs[0].Int32()
	y = outArgs[1].Int32()
	return
}

// gtk_entry_get_max_length
//
// [ result ] trans: nothing
//
func (v Entry) GetMaxLength() (result int32) {
	iv, err := _I.Get(733, "Entry", "get_max_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_get_max_width_chars
//
// [ result ] trans: nothing
//
func (v Entry) GetMaxWidthChars() (result int32) {
	iv, err := _I.Get(734, "Entry", "get_max_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_get_overwrite_mode
//
// [ result ] trans: nothing
//
func (v Entry) GetOverwriteMode() (result bool) {
	iv, err := _I.Get(735, "Entry", "get_overwrite_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_get_placeholder_text
//
// [ result ] trans: nothing
//
func (v Entry) GetPlaceholderText() (result string) {
	iv, err := _I.Get(736, "Entry", "get_placeholder_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_get_progress_fraction
//
// [ result ] trans: nothing
//
func (v Entry) GetProgressFraction() (result float64) {
	iv, err := _I.Get(737, "Entry", "get_progress_fraction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_entry_get_progress_pulse_step
//
// [ result ] trans: nothing
//
func (v Entry) GetProgressPulseStep() (result float64) {
	iv, err := _I.Get(738, "Entry", "get_progress_pulse_step")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_entry_get_tabs
//
// [ result ] trans: nothing
//
func (v Entry) GetTabs() (result pango.TabArray) {
	iv, err := _I.Get(739, "Entry", "get_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_get_text
//
// [ result ] trans: nothing
//
func (v Entry) GetText() (result string) {
	iv, err := _I.Get(740, "Entry", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_get_text_area
//
// [ text_area ] trans: nothing, dir: out
//
func (v Entry) GetTextArea(text_area gdk.Rectangle) {
	iv, err := _I.Get(741, "Entry", "get_text_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_text_area := gi.NewPointerArgument(text_area.P)
	args := []gi.Argument{arg_v, arg_text_area}
	iv.Call(args, nil, nil)
}

// gtk_entry_get_text_length
//
// [ result ] trans: nothing
//
func (v Entry) GetTextLength() (result uint16) {
	iv, err := _I.Get(742, "Entry", "get_text_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// gtk_entry_get_visibility
//
// [ result ] trans: nothing
//
func (v Entry) GetVisibility() (result bool) {
	iv, err := _I.Get(743, "Entry", "get_visibility")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_get_width_chars
//
// [ result ] trans: nothing
//
func (v Entry) GetWidthChars() (result int32) {
	iv, err := _I.Get(744, "Entry", "get_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_grab_focus_without_selecting
//
func (v Entry) GrabFocusWithoutSelecting() {
	iv, err := _I.Get(745, "Entry", "grab_focus_without_selecting")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_entry_im_context_filter_keypress
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) ImContextFilterKeypress(event gdk.EventKey) (result bool) {
	iv, err := _I.Get(746, "Entry", "im_context_filter_keypress")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_layout_index_to_text_index
//
// [ layout_index ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) LayoutIndexToTextIndex(layout_index int32) (result int32) {
	iv, err := _I.Get(747, "Entry", "layout_index_to_text_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_layout_index := gi.NewInt32Argument(layout_index)
	args := []gi.Argument{arg_v, arg_layout_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_progress_pulse
//
func (v Entry) ProgressPulse() {
	iv, err := _I.Get(748, "Entry", "progress_pulse")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_entry_reset_im_context
//
func (v Entry) ResetImContext() {
	iv, err := _I.Get(749, "Entry", "reset_im_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_activates_default
//
// [ setting ] trans: nothing
//
func (v Entry) SetActivatesDefault(setting bool) {
	iv, err := _I.Get(750, "Entry", "set_activates_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_alignment
//
// [ xalign ] trans: nothing
//
func (v Entry) SetAlignment(xalign float32) {
	iv, err := _I.Get(751, "Entry", "set_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	args := []gi.Argument{arg_v, arg_xalign}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_attributes
//
// [ attrs ] trans: nothing
//
func (v Entry) SetAttributes(attrs pango.AttrList) {
	iv, err := _I.Get(752, "Entry", "set_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attrs := gi.NewPointerArgument(attrs.P)
	args := []gi.Argument{arg_v, arg_attrs}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_buffer
//
// [ buffer ] trans: nothing
//
func (v Entry) SetBuffer(buffer IEntryBuffer) {
	iv, err := _I.Get(753, "Entry", "set_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_EntryBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_buffer}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_completion
//
// [ completion ] trans: nothing
//
func (v Entry) SetCompletion(completion IEntryCompletion) {
	iv, err := _I.Get(754, "Entry", "set_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if completion != nil {
		tmp = completion.P_EntryCompletion()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_completion := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_completion}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_cursor_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v Entry) SetCursorHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(755, "Entry", "set_cursor_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_has_frame
//
// [ setting ] trans: nothing
//
func (v Entry) SetHasFrame(setting bool) {
	iv, err := _I.Get(756, "Entry", "set_has_frame")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_icon_activatable
//
// [ icon_pos ] trans: nothing
//
// [ activatable ] trans: nothing
//
func (v Entry) SetIconActivatable(icon_pos EntryIconPositionEnum, activatable bool) {
	iv, err := _I.Get(757, "Entry", "set_icon_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_activatable := gi.NewBoolArgument(activatable)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_activatable}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_icon_drag_source
//
// [ icon_pos ] trans: nothing
//
// [ target_list ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v Entry) SetIconDragSource(icon_pos EntryIconPositionEnum, target_list TargetList, actions gdk.DragActionFlags) {
	iv, err := _I.Get(758, "Entry", "set_icon_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_target_list := gi.NewPointerArgument(target_list.P)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_icon_pos, arg_target_list, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_icon_from_gicon
//
// [ icon_pos ] trans: nothing
//
// [ icon ] trans: nothing
//
func (v Entry) SetIconFromGicon(icon_pos EntryIconPositionEnum, icon g.IIcon) {
	iv, err := _I.Get(759, "Entry", "set_icon_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_icon}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_icon_from_icon_name
//
// [ icon_pos ] trans: nothing
//
// [ icon_name ] trans: nothing
//
func (v Entry) SetIconFromIconName(icon_pos EntryIconPositionEnum, icon_name string) {
	iv, err := _I.Get(760, "Entry", "set_icon_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_entry_set_icon_from_pixbuf
//
// [ icon_pos ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
func (v Entry) SetIconFromPixbuf(icon_pos EntryIconPositionEnum, pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(761, "Entry", "set_icon_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_entry_set_icon_from_stock
//
// [ icon_pos ] trans: nothing
//
// [ stock_id ] trans: nothing
//
func (v Entry) SetIconFromStock(icon_pos EntryIconPositionEnum, stock_id string) {
	iv, err := _I.Get(762, "Entry", "set_icon_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_stock_id}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_entry_set_icon_sensitive
//
// [ icon_pos ] trans: nothing
//
// [ sensitive ] trans: nothing
//
func (v Entry) SetIconSensitive(icon_pos EntryIconPositionEnum, sensitive bool) {
	iv, err := _I.Get(763, "Entry", "set_icon_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_sensitive := gi.NewBoolArgument(sensitive)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_sensitive}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_icon_tooltip_markup
//
// [ icon_pos ] trans: nothing
//
// [ tooltip ] trans: nothing
//
func (v Entry) SetIconTooltipMarkup(icon_pos EntryIconPositionEnum, tooltip string) {
	iv, err := _I.Get(764, "Entry", "set_icon_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_tooltip := gi.CString(tooltip)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_tooltip}
	iv.Call(args, nil, nil)
	gi.Free(c_tooltip)
}

// gtk_entry_set_icon_tooltip_text
//
// [ icon_pos ] trans: nothing
//
// [ tooltip ] trans: nothing
//
func (v Entry) SetIconTooltipText(icon_pos EntryIconPositionEnum, tooltip string) {
	iv, err := _I.Get(765, "Entry", "set_icon_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_tooltip := gi.CString(tooltip)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_pos := gi.NewIntArgument(int(icon_pos))
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	args := []gi.Argument{arg_v, arg_icon_pos, arg_tooltip}
	iv.Call(args, nil, nil)
	gi.Free(c_tooltip)
}

// Deprecated
//
// gtk_entry_set_inner_border
//
// [ border ] trans: nothing
//
func (v Entry) SetInnerBorder(border Border) {
	iv, err := _I.Get(766, "Entry", "set_inner_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_border := gi.NewPointerArgument(border.P)
	args := []gi.Argument{arg_v, arg_border}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_input_hints
//
// [ hints ] trans: nothing
//
func (v Entry) SetInputHints(hints InputHintsFlags) {
	iv, err := _I.Get(767, "Entry", "set_input_hints")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hints := gi.NewIntArgument(int(hints))
	args := []gi.Argument{arg_v, arg_hints}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_input_purpose
//
// [ purpose ] trans: nothing
//
func (v Entry) SetInputPurpose(purpose InputPurposeEnum) {
	iv, err := _I.Get(768, "Entry", "set_input_purpose")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_purpose := gi.NewIntArgument(int(purpose))
	args := []gi.Argument{arg_v, arg_purpose}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_invisible_char
//
// [ ch ] trans: nothing
//
func (v Entry) SetInvisibleChar(ch rune) {
	iv, err := _I.Get(769, "Entry", "set_invisible_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ch := gi.NewUint32Argument(uint32(ch))
	args := []gi.Argument{arg_v, arg_ch}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_max_length
//
// [ max ] trans: nothing
//
func (v Entry) SetMaxLength(max int32) {
	iv, err := _I.Get(770, "Entry", "set_max_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_max := gi.NewInt32Argument(max)
	args := []gi.Argument{arg_v, arg_max}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_max_width_chars
//
// [ n_chars ] trans: nothing
//
func (v Entry) SetMaxWidthChars(n_chars int32) {
	iv, err := _I.Get(771, "Entry", "set_max_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_n_chars}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_overwrite_mode
//
// [ overwrite ] trans: nothing
//
func (v Entry) SetOverwriteMode(overwrite bool) {
	iv, err := _I.Get(772, "Entry", "set_overwrite_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_overwrite := gi.NewBoolArgument(overwrite)
	args := []gi.Argument{arg_v, arg_overwrite}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_placeholder_text
//
// [ text ] trans: nothing
//
func (v Entry) SetPlaceholderText(text string) {
	iv, err := _I.Get(773, "Entry", "set_placeholder_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_entry_set_progress_fraction
//
// [ fraction ] trans: nothing
//
func (v Entry) SetProgressFraction(fraction float64) {
	iv, err := _I.Get(774, "Entry", "set_progress_fraction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fraction := gi.NewDoubleArgument(fraction)
	args := []gi.Argument{arg_v, arg_fraction}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_progress_pulse_step
//
// [ fraction ] trans: nothing
//
func (v Entry) SetProgressPulseStep(fraction float64) {
	iv, err := _I.Get(775, "Entry", "set_progress_pulse_step")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fraction := gi.NewDoubleArgument(fraction)
	args := []gi.Argument{arg_v, arg_fraction}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_tabs
//
// [ tabs ] trans: nothing
//
func (v Entry) SetTabs(tabs pango.TabArray) {
	iv, err := _I.Get(776, "Entry", "set_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tabs := gi.NewPointerArgument(tabs.P)
	args := []gi.Argument{arg_v, arg_tabs}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_text
//
// [ text ] trans: nothing
//
func (v Entry) SetText(text string) {
	iv, err := _I.Get(777, "Entry", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_entry_set_visibility
//
// [ visible ] trans: nothing
//
func (v Entry) SetVisibility(visible bool) {
	iv, err := _I.Get(778, "Entry", "set_visibility")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// gtk_entry_set_width_chars
//
// [ n_chars ] trans: nothing
//
func (v Entry) SetWidthChars(n_chars int32) {
	iv, err := _I.Get(779, "Entry", "set_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_n_chars}
	iv.Call(args, nil, nil)
}

// gtk_entry_text_index_to_layout_index
//
// [ text_index ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Entry) TextIndexToLayoutIndex(text_index int32) (result int32) {
	iv, err := _I.Get(780, "Entry", "text_index_to_layout_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_text_index := gi.NewInt32Argument(text_index)
	args := []gi.Argument{arg_v, arg_text_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_unset_invisible_char
//
func (v Entry) UnsetInvisibleChar() {
	iv, err := _I.Get(781, "Entry", "unset_invisible_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object EntryAccessible
type EntryAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.EditableTextIfc
	atk.TextIfc
	WidgetAccessible
}

func WrapEntryAccessible(p unsafe.Pointer) (r EntryAccessible) { r.P = p; return }

type IEntryAccessible interface{ P_EntryAccessible() unsafe.Pointer }

func (v EntryAccessible) P_EntryAccessible() unsafe.Pointer { return v.P }
func (v EntryAccessible) P_Action() unsafe.Pointer          { return v.P }
func (v EntryAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v EntryAccessible) P_EditableText() unsafe.Pointer    { return v.P }
func (v EntryAccessible) P_Text() unsafe.Pointer            { return v.P }
func EntryAccessibleGetType() gi.GType {
	ret := _I.GetGType(160, "EntryAccessible")
	return ret
}

// ignore GType struct EntryAccessibleClass

// Struct EntryAccessiblePrivate
type EntryAccessiblePrivate struct {
	P unsafe.Pointer
}

func EntryAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(161, "EntryAccessiblePrivate")
	return ret
}

// Object EntryBuffer
type EntryBuffer struct {
	g.Object
}

func WrapEntryBuffer(p unsafe.Pointer) (r EntryBuffer) { r.P = p; return }

type IEntryBuffer interface{ P_EntryBuffer() unsafe.Pointer }

func (v EntryBuffer) P_EntryBuffer() unsafe.Pointer { return v.P }
func EntryBufferGetType() gi.GType {
	ret := _I.GetGType(162, "EntryBuffer")
	return ret
}

// gtk_entry_buffer_new
//
// [ initial_chars ] trans: nothing
//
// [ n_initial_chars ] trans: nothing
//
// [ result ] trans: everything
//
func NewEntryBuffer(initial_chars string, n_initial_chars int32) (result EntryBuffer) {
	iv, err := _I.Get(782, "EntryBuffer", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_initial_chars := gi.CString(initial_chars)
	arg_initial_chars := gi.NewStringArgument(c_initial_chars)
	arg_n_initial_chars := gi.NewInt32Argument(n_initial_chars)
	args := []gi.Argument{arg_initial_chars, arg_n_initial_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_initial_chars)
	result.P = ret.Pointer()
	return
}

// gtk_entry_buffer_delete_text
//
// [ position ] trans: nothing
//
// [ n_chars ] trans: nothing
//
// [ result ] trans: nothing
//
func (v EntryBuffer) DeleteText(position uint32, n_chars int32) (result uint32) {
	iv, err := _I.Get(783, "EntryBuffer", "delete_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_position, arg_n_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_entry_buffer_emit_deleted_text
//
// [ position ] trans: nothing
//
// [ n_chars ] trans: nothing
//
func (v EntryBuffer) EmitDeletedText(position uint32, n_chars uint32) {
	iv, err := _I.Get(784, "EntryBuffer", "emit_deleted_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_n_chars := gi.NewUint32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_position, arg_n_chars}
	iv.Call(args, nil, nil)
}

// gtk_entry_buffer_emit_inserted_text
//
// [ position ] trans: nothing
//
// [ chars ] trans: nothing
//
// [ n_chars ] trans: nothing
//
func (v EntryBuffer) EmitInsertedText(position uint32, chars string, n_chars uint32) {
	iv, err := _I.Get(785, "EntryBuffer", "emit_inserted_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_chars := gi.CString(chars)
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_chars := gi.NewStringArgument(c_chars)
	arg_n_chars := gi.NewUint32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_position, arg_chars, arg_n_chars}
	iv.Call(args, nil, nil)
	gi.Free(c_chars)
}

// gtk_entry_buffer_get_bytes
//
// [ result ] trans: nothing
//
func (v EntryBuffer) GetBytes() (result uint64) {
	iv, err := _I.Get(786, "EntryBuffer", "get_bytes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// gtk_entry_buffer_get_length
//
// [ result ] trans: nothing
//
func (v EntryBuffer) GetLength() (result uint32) {
	iv, err := _I.Get(787, "EntryBuffer", "get_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_entry_buffer_get_max_length
//
// [ result ] trans: nothing
//
func (v EntryBuffer) GetMaxLength() (result int32) {
	iv, err := _I.Get(788, "EntryBuffer", "get_max_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_buffer_get_text
//
// [ result ] trans: nothing
//
func (v EntryBuffer) GetText() (result string) {
	iv, err := _I.Get(789, "EntryBuffer", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_buffer_insert_text
//
// [ position ] trans: nothing
//
// [ chars ] trans: nothing
//
// [ n_chars ] trans: nothing
//
// [ result ] trans: nothing
//
func (v EntryBuffer) InsertText(position uint32, chars string, n_chars int32) (result uint32) {
	iv, err := _I.Get(790, "EntryBuffer", "insert_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_chars := gi.CString(chars)
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_chars := gi.NewStringArgument(c_chars)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_position, arg_chars, arg_n_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_chars)
	result = ret.Uint32()
	return
}

// gtk_entry_buffer_set_max_length
//
// [ max_length ] trans: nothing
//
func (v EntryBuffer) SetMaxLength(max_length int32) {
	iv, err := _I.Get(791, "EntryBuffer", "set_max_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_max_length := gi.NewInt32Argument(max_length)
	args := []gi.Argument{arg_v, arg_max_length}
	iv.Call(args, nil, nil)
}

// gtk_entry_buffer_set_text
//
// [ chars ] trans: nothing
//
// [ n_chars ] trans: nothing
//
func (v EntryBuffer) SetText(chars string, n_chars int32) {
	iv, err := _I.Get(792, "EntryBuffer", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_chars := gi.CString(chars)
	arg_v := gi.NewPointerArgument(v.P)
	arg_chars := gi.NewStringArgument(c_chars)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_chars, arg_n_chars}
	iv.Call(args, nil, nil)
	gi.Free(c_chars)
}

// ignore GType struct EntryBufferClass

// Struct EntryBufferPrivate
type EntryBufferPrivate struct {
	P unsafe.Pointer
}

func EntryBufferPrivateGetType() gi.GType {
	ret := _I.GetGType(163, "EntryBufferPrivate")
	return ret
}

// ignore GType struct EntryClass

// Object EntryCompletion
type EntryCompletion struct {
	BuildableIfc
	CellLayoutIfc
	g.Object
}

func WrapEntryCompletion(p unsafe.Pointer) (r EntryCompletion) { r.P = p; return }

type IEntryCompletion interface{ P_EntryCompletion() unsafe.Pointer }

func (v EntryCompletion) P_EntryCompletion() unsafe.Pointer { return v.P }
func (v EntryCompletion) P_Buildable() unsafe.Pointer       { return v.P }
func (v EntryCompletion) P_CellLayout() unsafe.Pointer      { return v.P }
func EntryCompletionGetType() gi.GType {
	ret := _I.GetGType(164, "EntryCompletion")
	return ret
}

// gtk_entry_completion_new
//
// [ result ] trans: everything
//
func NewEntryCompletion() (result EntryCompletion) {
	iv, err := _I.Get(793, "EntryCompletion", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_completion_new_with_area
//
// [ area ] trans: nothing
//
// [ result ] trans: everything
//
func NewEntryCompletionWithArea(area ICellArea) (result EntryCompletion) {
	iv, err := _I.Get(794, "EntryCompletion", "new_with_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	arg_area := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_completion_complete
//
func (v EntryCompletion) Complete() {
	iv, err := _I.Get(795, "EntryCompletion", "complete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_compute_prefix
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v EntryCompletion) ComputePrefix(key string) (result string) {
	iv, err := _I.Get(796, "EntryCompletion", "compute_prefix")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Take()
	return
}

// gtk_entry_completion_delete_action
//
// [ index_ ] trans: nothing
//
func (v EntryCompletion) DeleteAction(index_ int32) {
	iv, err := _I.Get(797, "EntryCompletion", "delete_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_get_completion_prefix
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetCompletionPrefix() (result string) {
	iv, err := _I.Get(798, "EntryCompletion", "get_completion_prefix")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_entry_completion_get_entry
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetEntry() (result Widget) {
	iv, err := _I.Get(799, "EntryCompletion", "get_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_completion_get_inline_completion
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetInlineCompletion() (result bool) {
	iv, err := _I.Get(800, "EntryCompletion", "get_inline_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_completion_get_inline_selection
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetInlineSelection() (result bool) {
	iv, err := _I.Get(801, "EntryCompletion", "get_inline_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_completion_get_minimum_key_length
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetMinimumKeyLength() (result int32) {
	iv, err := _I.Get(802, "EntryCompletion", "get_minimum_key_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_completion_get_model
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetModel() (result TreeModel) {
	iv, err := _I.Get(803, "EntryCompletion", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_entry_completion_get_popup_completion
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetPopupCompletion() (result bool) {
	iv, err := _I.Get(804, "EntryCompletion", "get_popup_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_completion_get_popup_set_width
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetPopupSetWidth() (result bool) {
	iv, err := _I.Get(805, "EntryCompletion", "get_popup_set_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_completion_get_popup_single_match
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetPopupSingleMatch() (result bool) {
	iv, err := _I.Get(806, "EntryCompletion", "get_popup_single_match")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_entry_completion_get_text_column
//
// [ result ] trans: nothing
//
func (v EntryCompletion) GetTextColumn() (result int32) {
	iv, err := _I.Get(807, "EntryCompletion", "get_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_entry_completion_insert_action_markup
//
// [ index_ ] trans: nothing
//
// [ markup ] trans: nothing
//
func (v EntryCompletion) InsertActionMarkup(index_ int32, markup string) {
	iv, err := _I.Get(808, "EntryCompletion", "insert_action_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_index_, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_entry_completion_insert_action_text
//
// [ index_ ] trans: nothing
//
// [ text ] trans: nothing
//
func (v EntryCompletion) InsertActionText(index_ int32, text string) {
	iv, err := _I.Get(809, "EntryCompletion", "insert_action_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_index_, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_entry_completion_insert_prefix
//
func (v EntryCompletion) InsertPrefix() {
	iv, err := _I.Get(810, "EntryCompletion", "insert_prefix")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_inline_completion
//
// [ inline_completion ] trans: nothing
//
func (v EntryCompletion) SetInlineCompletion(inline_completion bool) {
	iv, err := _I.Get(811, "EntryCompletion", "set_inline_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_inline_completion := gi.NewBoolArgument(inline_completion)
	args := []gi.Argument{arg_v, arg_inline_completion}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_inline_selection
//
// [ inline_selection ] trans: nothing
//
func (v EntryCompletion) SetInlineSelection(inline_selection bool) {
	iv, err := _I.Get(812, "EntryCompletion", "set_inline_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_inline_selection := gi.NewBoolArgument(inline_selection)
	args := []gi.Argument{arg_v, arg_inline_selection}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_match_func
//
// [ func1 ] trans: nothing
//
// [ func_data ] trans: nothing
//
// [ func_notify ] trans: nothing
//
func (v EntryCompletion) SetMatchFunc(func1 int /*TODO_TYPE CALLBACK*/, func_data unsafe.Pointer, func_notify int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(813, "EntryCompletion", "set_match_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myEntryCompletionMatchFunc()))
	arg_func_data := gi.NewPointerArgument(func_data)
	arg_func_notify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_func_data, arg_func_notify}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_minimum_key_length
//
// [ length ] trans: nothing
//
func (v EntryCompletion) SetMinimumKeyLength(length int32) {
	iv, err := _I.Get(814, "EntryCompletion", "set_minimum_key_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewInt32Argument(length)
	args := []gi.Argument{arg_v, arg_length}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_model
//
// [ model ] trans: nothing
//
func (v EntryCompletion) SetModel(model ITreeModel) {
	iv, err := _I.Get(815, "EntryCompletion", "set_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_model}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_popup_completion
//
// [ popup_completion ] trans: nothing
//
func (v EntryCompletion) SetPopupCompletion(popup_completion bool) {
	iv, err := _I.Get(816, "EntryCompletion", "set_popup_completion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_popup_completion := gi.NewBoolArgument(popup_completion)
	args := []gi.Argument{arg_v, arg_popup_completion}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_popup_set_width
//
// [ popup_set_width ] trans: nothing
//
func (v EntryCompletion) SetPopupSetWidth(popup_set_width bool) {
	iv, err := _I.Get(817, "EntryCompletion", "set_popup_set_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_popup_set_width := gi.NewBoolArgument(popup_set_width)
	args := []gi.Argument{arg_v, arg_popup_set_width}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_popup_single_match
//
// [ popup_single_match ] trans: nothing
//
func (v EntryCompletion) SetPopupSingleMatch(popup_single_match bool) {
	iv, err := _I.Get(818, "EntryCompletion", "set_popup_single_match")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_popup_single_match := gi.NewBoolArgument(popup_single_match)
	args := []gi.Argument{arg_v, arg_popup_single_match}
	iv.Call(args, nil, nil)
}

// gtk_entry_completion_set_text_column
//
// [ column ] trans: nothing
//
func (v EntryCompletion) SetTextColumn(column int32) {
	iv, err := _I.Get(819, "EntryCompletion", "set_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// ignore GType struct EntryCompletionClass

type EntryCompletionMatchFuncStruct struct {
	F_completion EntryCompletion
	F_key        string
	F_iter       TreeIter
}

func GetPointer_myEntryCompletionMatchFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkEntryCompletionMatchFunc())
}

//export myGtkEntryCompletionMatchFunc
func myGtkEntryCompletionMatchFunc(completion *C.GtkEntryCompletion, key *C.gchar, iter *C.GtkTreeIter, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &EntryCompletionMatchFuncStruct{
		F_completion: WrapEntryCompletion(unsafe.Pointer(completion)),
		F_key:        gi.GoString(unsafe.Pointer(key)),
		F_iter:       TreeIter{P: unsafe.Pointer(iter)},
	}
	fn(args)
}

// Struct EntryCompletionPrivate
type EntryCompletionPrivate struct {
	P unsafe.Pointer
}

func EntryCompletionPrivateGetType() gi.GType {
	ret := _I.GetGType(165, "EntryCompletionPrivate")
	return ret
}

// Object EntryIconAccessible
type EntryIconAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.Object
}

func WrapEntryIconAccessible(p unsafe.Pointer) (r EntryIconAccessible) { r.P = p; return }

type IEntryIconAccessible interface{ P_EntryIconAccessible() unsafe.Pointer }

func (v EntryIconAccessible) P_EntryIconAccessible() unsafe.Pointer { return v.P }
func (v EntryIconAccessible) P_Action() unsafe.Pointer              { return v.P }
func (v EntryIconAccessible) P_Component() unsafe.Pointer           { return v.P }
func EntryIconAccessibleGetType() gi.GType {
	ret := _I.GetGType(166, "EntryIconAccessible")
	return ret
}

// Enum EntryIconPosition
type EntryIconPositionEnum int

const (
	EntryIconPositionPrimary   EntryIconPositionEnum = 0
	EntryIconPositionSecondary EntryIconPositionEnum = 1
)

func EntryIconPositionGetType() gi.GType {
	ret := _I.GetGType(167, "EntryIconPosition")
	return ret
}

// Struct EntryPrivate
type EntryPrivate struct {
	P unsafe.Pointer
}

func EntryPrivateGetType() gi.GType {
	ret := _I.GetGType(168, "EntryPrivate")
	return ret
}

// Object EventBox
type EventBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapEventBox(p unsafe.Pointer) (r EventBox) { r.P = p; return }

type IEventBox interface{ P_EventBox() unsafe.Pointer }

func (v EventBox) P_EventBox() unsafe.Pointer         { return v.P }
func (v EventBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v EventBox) P_Buildable() unsafe.Pointer        { return v.P }
func EventBoxGetType() gi.GType {
	ret := _I.GetGType(169, "EventBox")
	return ret
}

// gtk_event_box_new
//
// [ result ] trans: nothing
//
func NewEventBox() (result EventBox) {
	iv, err := _I.Get(820, "EventBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_event_box_get_above_child
//
// [ result ] trans: nothing
//
func (v EventBox) GetAboveChild() (result bool) {
	iv, err := _I.Get(821, "EventBox", "get_above_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_event_box_get_visible_window
//
// [ result ] trans: nothing
//
func (v EventBox) GetVisibleWindow() (result bool) {
	iv, err := _I.Get(822, "EventBox", "get_visible_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_event_box_set_above_child
//
// [ above_child ] trans: nothing
//
func (v EventBox) SetAboveChild(above_child bool) {
	iv, err := _I.Get(823, "EventBox", "set_above_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_above_child := gi.NewBoolArgument(above_child)
	args := []gi.Argument{arg_v, arg_above_child}
	iv.Call(args, nil, nil)
}

// gtk_event_box_set_visible_window
//
// [ visible_window ] trans: nothing
//
func (v EventBox) SetVisibleWindow(visible_window bool) {
	iv, err := _I.Get(824, "EventBox", "set_visible_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_window := gi.NewBoolArgument(visible_window)
	args := []gi.Argument{arg_v, arg_visible_window}
	iv.Call(args, nil, nil)
}

// ignore GType struct EventBoxClass

// Struct EventBoxPrivate
type EventBoxPrivate struct {
	P unsafe.Pointer
}

func EventBoxPrivateGetType() gi.GType {
	ret := _I.GetGType(170, "EventBoxPrivate")
	return ret
}

// Object EventController
type EventController struct {
	g.Object
}

func WrapEventController(p unsafe.Pointer) (r EventController) { r.P = p; return }

type IEventController interface{ P_EventController() unsafe.Pointer }

func (v EventController) P_EventController() unsafe.Pointer { return v.P }
func EventControllerGetType() gi.GType {
	ret := _I.GetGType(171, "EventController")
	return ret
}

// gtk_event_controller_get_propagation_phase
//
// [ result ] trans: nothing
//
func (v EventController) GetPropagationPhase() (result PropagationPhaseEnum) {
	iv, err := _I.Get(825, "EventController", "get_propagation_phase")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PropagationPhaseEnum(ret.Int())
	return
}

// gtk_event_controller_get_widget
//
// [ result ] trans: nothing
//
func (v EventController) GetWidget() (result Widget) {
	iv, err := _I.Get(826, "EventController", "get_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_event_controller_handle_event
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v EventController) HandleEvent(event gdk.Event) (result bool) {
	iv, err := _I.Get(827, "EventController", "handle_event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_event_controller_reset
//
func (v EventController) Reset() {
	iv, err := _I.Get(828, "EventController", "reset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_event_controller_set_propagation_phase
//
// [ phase ] trans: nothing
//
func (v EventController) SetPropagationPhase(phase PropagationPhaseEnum) {
	iv, err := _I.Get(829, "EventController", "set_propagation_phase")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_phase := gi.NewIntArgument(int(phase))
	args := []gi.Argument{arg_v, arg_phase}
	iv.Call(args, nil, nil)
}

// ignore GType struct EventControllerClass

// Object EventControllerKey
type EventControllerKey struct {
	EventController
}

func WrapEventControllerKey(p unsafe.Pointer) (r EventControllerKey) { r.P = p; return }

type IEventControllerKey interface{ P_EventControllerKey() unsafe.Pointer }

func (v EventControllerKey) P_EventControllerKey() unsafe.Pointer { return v.P }
func EventControllerKeyGetType() gi.GType {
	ret := _I.GetGType(172, "EventControllerKey")
	return ret
}

// gtk_event_controller_key_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewEventControllerKey(widget IWidget) (result EventControllerKey) {
	iv, err := _I.Get(830, "EventControllerKey", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_event_controller_key_forward
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func (v EventControllerKey) Forward(widget IWidget) (result bool) {
	iv, err := _I.Get(831, "EventControllerKey", "forward")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_event_controller_key_get_group
//
// [ result ] trans: nothing
//
func (v EventControllerKey) GetGroup() (result uint32) {
	iv, err := _I.Get(832, "EventControllerKey", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_event_controller_key_get_im_context
//
// [ result ] trans: nothing
//
func (v EventControllerKey) GetImContext() (result IMContext) {
	iv, err := _I.Get(833, "EventControllerKey", "get_im_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_event_controller_key_set_im_context
//
// [ im_context ] trans: nothing
//
func (v EventControllerKey) SetImContext(im_context IIMContext) {
	iv, err := _I.Get(834, "EventControllerKey", "set_im_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if im_context != nil {
		tmp = im_context.P_IMContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_im_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_im_context}
	iv.Call(args, nil, nil)
}

// ignore GType struct EventControllerKeyClass

// Object EventControllerMotion
type EventControllerMotion struct {
	EventController
}

func WrapEventControllerMotion(p unsafe.Pointer) (r EventControllerMotion) { r.P = p; return }

type IEventControllerMotion interface{ P_EventControllerMotion() unsafe.Pointer }

func (v EventControllerMotion) P_EventControllerMotion() unsafe.Pointer { return v.P }
func EventControllerMotionGetType() gi.GType {
	ret := _I.GetGType(173, "EventControllerMotion")
	return ret
}

// gtk_event_controller_motion_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewEventControllerMotion(widget IWidget) (result EventControllerMotion) {
	iv, err := _I.Get(835, "EventControllerMotion", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct EventControllerMotionClass

// Object EventControllerScroll
type EventControllerScroll struct {
	EventController
}

func WrapEventControllerScroll(p unsafe.Pointer) (r EventControllerScroll) { r.P = p; return }

type IEventControllerScroll interface{ P_EventControllerScroll() unsafe.Pointer }

func (v EventControllerScroll) P_EventControllerScroll() unsafe.Pointer { return v.P }
func EventControllerScrollGetType() gi.GType {
	ret := _I.GetGType(174, "EventControllerScroll")
	return ret
}

// gtk_event_controller_scroll_new
//
// [ widget ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewEventControllerScroll(widget IWidget, flags EventControllerScrollFlags) (result EventControllerScroll) {
	iv, err := _I.Get(836, "EventControllerScroll", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_widget, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_event_controller_scroll_get_flags
//
// [ result ] trans: nothing
//
func (v EventControllerScroll) GetFlags() (result EventControllerScrollFlags) {
	iv, err := _I.Get(837, "EventControllerScroll", "get_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = EventControllerScrollFlags(ret.Int())
	return
}

// gtk_event_controller_scroll_set_flags
//
// [ flags ] trans: nothing
//
func (v EventControllerScroll) SetFlags(flags EventControllerScrollFlags) {
	iv, err := _I.Get(838, "EventControllerScroll", "set_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// ignore GType struct EventControllerScrollClass

// Flags EventControllerScrollFlags
type EventControllerScrollFlags int

const (
	EventControllerScrollFlagsNone       EventControllerScrollFlags = 0
	EventControllerScrollFlagsVertical   EventControllerScrollFlags = 1
	EventControllerScrollFlagsHorizontal EventControllerScrollFlags = 2
	EventControllerScrollFlagsDiscrete   EventControllerScrollFlags = 4
	EventControllerScrollFlagsKinetic    EventControllerScrollFlags = 8
	EventControllerScrollFlagsBothAxes   EventControllerScrollFlags = 3
)

func EventControllerScrollFlagsGetType() gi.GType {
	ret := _I.GetGType(175, "EventControllerScrollFlags")
	return ret
}

// Enum EventSequenceState
type EventSequenceStateEnum int

const (
	EventSequenceStateNone    EventSequenceStateEnum = 0
	EventSequenceStateClaimed EventSequenceStateEnum = 1
	EventSequenceStateDenied  EventSequenceStateEnum = 2
)

func EventSequenceStateGetType() gi.GType {
	ret := _I.GetGType(176, "EventSequenceState")
	return ret
}

// Object Expander
type Expander struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapExpander(p unsafe.Pointer) (r Expander) { r.P = p; return }

type IExpander interface{ P_Expander() unsafe.Pointer }

func (v Expander) P_Expander() unsafe.Pointer         { return v.P }
func (v Expander) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Expander) P_Buildable() unsafe.Pointer        { return v.P }
func ExpanderGetType() gi.GType {
	ret := _I.GetGType(177, "Expander")
	return ret
}

// gtk_expander_new
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewExpander(label string) (result Expander) {
	iv, err := _I.Get(839, "Expander", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_expander_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewExpanderWithMnemonic(label string) (result Expander) {
	iv, err := _I.Get(840, "Expander", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_expander_get_expanded
//
// [ result ] trans: nothing
//
func (v Expander) GetExpanded() (result bool) {
	iv, err := _I.Get(841, "Expander", "get_expanded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_expander_get_label
//
// [ result ] trans: nothing
//
func (v Expander) GetLabel() (result string) {
	iv, err := _I.Get(842, "Expander", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_expander_get_label_fill
//
// [ result ] trans: nothing
//
func (v Expander) GetLabelFill() (result bool) {
	iv, err := _I.Get(843, "Expander", "get_label_fill")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_expander_get_label_widget
//
// [ result ] trans: nothing
//
func (v Expander) GetLabelWidget() (result Widget) {
	iv, err := _I.Get(844, "Expander", "get_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_expander_get_resize_toplevel
//
// [ result ] trans: nothing
//
func (v Expander) GetResizeToplevel() (result bool) {
	iv, err := _I.Get(845, "Expander", "get_resize_toplevel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_expander_get_spacing
//
// [ result ] trans: nothing
//
func (v Expander) GetSpacing() (result int32) {
	iv, err := _I.Get(846, "Expander", "get_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_expander_get_use_markup
//
// [ result ] trans: nothing
//
func (v Expander) GetUseMarkup() (result bool) {
	iv, err := _I.Get(847, "Expander", "get_use_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_expander_get_use_underline
//
// [ result ] trans: nothing
//
func (v Expander) GetUseUnderline() (result bool) {
	iv, err := _I.Get(848, "Expander", "get_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_expander_set_expanded
//
// [ expanded ] trans: nothing
//
func (v Expander) SetExpanded(expanded bool) {
	iv, err := _I.Get(849, "Expander", "set_expanded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expanded := gi.NewBoolArgument(expanded)
	args := []gi.Argument{arg_v, arg_expanded}
	iv.Call(args, nil, nil)
}

// gtk_expander_set_label
//
// [ label ] trans: nothing
//
func (v Expander) SetLabel(label string) {
	iv, err := _I.Get(850, "Expander", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_expander_set_label_fill
//
// [ label_fill ] trans: nothing
//
func (v Expander) SetLabelFill(label_fill bool) {
	iv, err := _I.Get(851, "Expander", "set_label_fill")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label_fill := gi.NewBoolArgument(label_fill)
	args := []gi.Argument{arg_v, arg_label_fill}
	iv.Call(args, nil, nil)
}

// gtk_expander_set_label_widget
//
// [ label_widget ] trans: nothing
//
func (v Expander) SetLabelWidget(label_widget IWidget) {
	iv, err := _I.Get(852, "Expander", "set_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label_widget != nil {
		tmp = label_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label_widget}
	iv.Call(args, nil, nil)
}

// gtk_expander_set_resize_toplevel
//
// [ resize_toplevel ] trans: nothing
//
func (v Expander) SetResizeToplevel(resize_toplevel bool) {
	iv, err := _I.Get(853, "Expander", "set_resize_toplevel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resize_toplevel := gi.NewBoolArgument(resize_toplevel)
	args := []gi.Argument{arg_v, arg_resize_toplevel}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_expander_set_spacing
//
// [ spacing ] trans: nothing
//
func (v Expander) SetSpacing(spacing int32) {
	iv, err := _I.Get(854, "Expander", "set_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_expander_set_use_markup
//
// [ use_markup ] trans: nothing
//
func (v Expander) SetUseMarkup(use_markup bool) {
	iv, err := _I.Get(855, "Expander", "set_use_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_markup := gi.NewBoolArgument(use_markup)
	args := []gi.Argument{arg_v, arg_use_markup}
	iv.Call(args, nil, nil)
}

// gtk_expander_set_use_underline
//
// [ use_underline ] trans: nothing
//
func (v Expander) SetUseUnderline(use_underline bool) {
	iv, err := _I.Get(856, "Expander", "set_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_underline := gi.NewBoolArgument(use_underline)
	args := []gi.Argument{arg_v, arg_use_underline}
	iv.Call(args, nil, nil)
}

// Object ExpanderAccessible
type ExpanderAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	ContainerAccessible
}

func WrapExpanderAccessible(p unsafe.Pointer) (r ExpanderAccessible) { r.P = p; return }

type IExpanderAccessible interface{ P_ExpanderAccessible() unsafe.Pointer }

func (v ExpanderAccessible) P_ExpanderAccessible() unsafe.Pointer { return v.P }
func (v ExpanderAccessible) P_Action() unsafe.Pointer             { return v.P }
func (v ExpanderAccessible) P_Component() unsafe.Pointer          { return v.P }
func ExpanderAccessibleGetType() gi.GType {
	ret := _I.GetGType(178, "ExpanderAccessible")
	return ret
}

// ignore GType struct ExpanderAccessibleClass

// Struct ExpanderAccessiblePrivate
type ExpanderAccessiblePrivate struct {
	P unsafe.Pointer
}

func ExpanderAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(179, "ExpanderAccessiblePrivate")
	return ret
}

// ignore GType struct ExpanderClass

// Struct ExpanderPrivate
type ExpanderPrivate struct {
	P unsafe.Pointer
}

func ExpanderPrivateGetType() gi.GType {
	ret := _I.GetGType(180, "ExpanderPrivate")
	return ret
}

// Enum ExpanderStyle
type ExpanderStyleEnum int

const (
	ExpanderStyleCollapsed     ExpanderStyleEnum = 0
	ExpanderStyleSemiCollapsed ExpanderStyleEnum = 1
	ExpanderStyleSemiExpanded  ExpanderStyleEnum = 2
	ExpanderStyleExpanded      ExpanderStyleEnum = 3
)

func ExpanderStyleGetType() gi.GType {
	ret := _I.GetGType(181, "ExpanderStyle")
	return ret
}

// Interface FileChooser
type FileChooser struct {
	FileChooserIfc
	P unsafe.Pointer
}
type FileChooserIfc struct{}
type IFileChooser interface{ P_FileChooser() unsafe.Pointer }

func (v FileChooser) P_FileChooser() unsafe.Pointer { return v.P }
func FileChooserGetType() gi.GType {
	ret := _I.GetGType(182, "FileChooser")
	return ret
}

// gtk_file_chooser_add_choice
//
// [ id ] trans: nothing
//
// [ label ] trans: nothing
//
// [ options ] trans: nothing
//
// [ option_labels ] trans: nothing
//
func (v *FileChooserIfc) AddChoice(id string, label string, options gi.CStrArray, option_labels gi.CStrArray) {
	iv, err := _I.Get(857, "FileChooser", "add_choice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_id := gi.NewStringArgument(c_id)
	arg_label := gi.NewStringArgument(c_label)
	arg_options := gi.NewPointerArgument(options.P)
	arg_option_labels := gi.NewPointerArgument(option_labels.P)
	args := []gi.Argument{arg_v, arg_id, arg_label, arg_options, arg_option_labels}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
	gi.Free(c_label)
}

// gtk_file_chooser_add_filter
//
// [ filter ] trans: everything
//
func (v *FileChooserIfc) AddFilter(filter IFileFilter) {
	iv, err := _I.Get(858, "FileChooser", "add_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_FileFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_add_shortcut_folder
//
// [ folder ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) AddShortcutFolder(folder string) (result bool, err error) {
	iv, err := _I.Get(859, "FileChooser", "add_shortcut_folder")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_folder := gi.CString(folder)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_folder := gi.NewStringArgument(c_folder)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_folder, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_folder)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_add_shortcut_folder_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) AddShortcutFolderUri(uri string) (result bool, err error) {
	iv, err := _I.Get(860, "FileChooser", "add_shortcut_folder_uri")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_action
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetAction() (result FileChooserActionEnum) {
	iv, err := _I.Get(861, "FileChooser", "get_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = FileChooserActionEnum(ret.Int())
	return
}

// gtk_file_chooser_get_choice
//
// [ id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetChoice(id string) (result string) {
	iv, err := _I.Get(862, "FileChooser", "get_choice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_id := gi.NewStringArgument(c_id)
	args := []gi.Argument{arg_v, arg_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_id)
	result = ret.String().Copy()
	return
}

// gtk_file_chooser_get_create_folders
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetCreateFolders() (result bool) {
	iv, err := _I.Get(863, "FileChooser", "get_create_folders")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_current_folder
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetCurrentFolder() (result string) {
	iv, err := _I.Get(864, "FileChooser", "get_current_folder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_current_folder_file
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetCurrentFolderFile() (result g.File) {
	iv, err := _I.Get(865, "FileChooser", "get_current_folder_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_current_folder_uri
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetCurrentFolderUri() (result string) {
	iv, err := _I.Get(866, "FileChooser", "get_current_folder_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_current_name
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetCurrentName() (result string) {
	iv, err := _I.Get(867, "FileChooser", "get_current_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_do_overwrite_confirmation
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetDoOverwriteConfirmation() (result bool) {
	iv, err := _I.Get(868, "FileChooser", "get_do_overwrite_confirmation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_extra_widget
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetExtraWidget() (result Widget) {
	iv, err := _I.Get(869, "FileChooser", "get_extra_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_file
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetFile() (result g.File) {
	iv, err := _I.Get(870, "FileChooser", "get_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_filename
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetFilename() (result string) {
	iv, err := _I.Get(871, "FileChooser", "get_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_filenames
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetFilenames() (result g.SList) {
	iv, err := _I.Get(872, "FileChooser", "get_filenames")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_files
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetFiles() (result g.SList) {
	iv, err := _I.Get(873, "FileChooser", "get_files")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_filter
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetFilter() (result FileFilter) {
	iv, err := _I.Get(874, "FileChooser", "get_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_local_only
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetLocalOnly() (result bool) {
	iv, err := _I.Get(875, "FileChooser", "get_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_preview_file
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetPreviewFile() (result g.File) {
	iv, err := _I.Get(876, "FileChooser", "get_preview_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_preview_filename
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetPreviewFilename() (result string) {
	iv, err := _I.Get(877, "FileChooser", "get_preview_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_preview_uri
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetPreviewUri() (result string) {
	iv, err := _I.Get(878, "FileChooser", "get_preview_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_preview_widget
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetPreviewWidget() (result Widget) {
	iv, err := _I.Get(879, "FileChooser", "get_preview_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_preview_widget_active
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetPreviewWidgetActive() (result bool) {
	iv, err := _I.Get(880, "FileChooser", "get_preview_widget_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_select_multiple
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetSelectMultiple() (result bool) {
	iv, err := _I.Get(881, "FileChooser", "get_select_multiple")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_show_hidden
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetShowHidden() (result bool) {
	iv, err := _I.Get(882, "FileChooser", "get_show_hidden")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_get_uri
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetUri() (result string) {
	iv, err := _I.Get(883, "FileChooser", "get_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_file_chooser_get_uris
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) GetUris() (result g.SList) {
	iv, err := _I.Get(884, "FileChooser", "get_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_get_use_preview_label
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) GetUsePreviewLabel() (result bool) {
	iv, err := _I.Get(885, "FileChooser", "get_use_preview_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_list_filters
//
// [ result ] trans: container
//
func (v *FileChooserIfc) ListFilters() (result g.SList) {
	iv, err := _I.Get(886, "FileChooser", "list_filters")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_list_shortcut_folder_uris
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) ListShortcutFolderUris() (result g.SList) {
	iv, err := _I.Get(887, "FileChooser", "list_shortcut_folder_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_list_shortcut_folders
//
// [ result ] trans: everything
//
func (v *FileChooserIfc) ListShortcutFolders() (result g.SList) {
	iv, err := _I.Get(888, "FileChooser", "list_shortcut_folders")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_remove_choice
//
// [ id ] trans: nothing
//
func (v *FileChooserIfc) RemoveChoice(id string) {
	iv, err := _I.Get(889, "FileChooser", "remove_choice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_id := gi.NewStringArgument(c_id)
	args := []gi.Argument{arg_v, arg_id}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
}

// gtk_file_chooser_remove_filter
//
// [ filter ] trans: nothing
//
func (v *FileChooserIfc) RemoveFilter(filter IFileFilter) {
	iv, err := _I.Get(890, "FileChooser", "remove_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_FileFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_remove_shortcut_folder
//
// [ folder ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) RemoveShortcutFolder(folder string) (result bool, err error) {
	iv, err := _I.Get(891, "FileChooser", "remove_shortcut_folder")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_folder := gi.CString(folder)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_folder := gi.NewStringArgument(c_folder)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_folder, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_folder)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_remove_shortcut_folder_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) RemoveShortcutFolderUri(uri string) (result bool, err error) {
	iv, err := _I.Get(892, "FileChooser", "remove_shortcut_folder_uri")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_select_all
//
func (v *FileChooserIfc) SelectAll() {
	iv, err := _I.Get(893, "FileChooser", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_select_file
//
// [ file ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SelectFile(file g.IFile) (result bool, err error) {
	iv, err := _I.Get(894, "FileChooser", "select_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_file := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_select_filename
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SelectFilename(filename string) (result bool) {
	iv, err := _I.Get(895, "FileChooser", "select_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// gtk_file_chooser_select_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SelectUri(uri string) (result bool) {
	iv, err := _I.Get(896, "FileChooser", "select_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_action
//
// [ action ] trans: nothing
//
func (v *FileChooserIfc) SetAction(action FileChooserActionEnum) {
	iv, err := _I.Get(897, "FileChooser", "set_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action := gi.NewIntArgument(int(action))
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_choice
//
// [ id ] trans: nothing
//
// [ option ] trans: nothing
//
func (v *FileChooserIfc) SetChoice(id string, option string) {
	iv, err := _I.Get(898, "FileChooser", "set_choice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	c_option := gi.CString(option)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_id := gi.NewStringArgument(c_id)
	arg_option := gi.NewStringArgument(c_option)
	args := []gi.Argument{arg_v, arg_id, arg_option}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
	gi.Free(c_option)
}

// gtk_file_chooser_set_create_folders
//
// [ create_folders ] trans: nothing
//
func (v *FileChooserIfc) SetCreateFolders(create_folders bool) {
	iv, err := _I.Get(899, "FileChooser", "set_create_folders")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_create_folders := gi.NewBoolArgument(create_folders)
	args := []gi.Argument{arg_v, arg_create_folders}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_current_folder
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetCurrentFolder(filename string) (result bool) {
	iv, err := _I.Get(900, "FileChooser", "set_current_folder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_current_folder_file
//
// [ file ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetCurrentFolderFile(file g.IFile) (result bool, err error) {
	iv, err := _I.Get(901, "FileChooser", "set_current_folder_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_file := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_current_folder_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetCurrentFolderUri(uri string) (result bool) {
	iv, err := _I.Get(902, "FileChooser", "set_current_folder_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_current_name
//
// [ name ] trans: nothing
//
func (v *FileChooserIfc) SetCurrentName(name string) {
	iv, err := _I.Get(903, "FileChooser", "set_current_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_file_chooser_set_do_overwrite_confirmation
//
// [ do_overwrite_confirmation ] trans: nothing
//
func (v *FileChooserIfc) SetDoOverwriteConfirmation(do_overwrite_confirmation bool) {
	iv, err := _I.Get(904, "FileChooser", "set_do_overwrite_confirmation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_do_overwrite_confirmation := gi.NewBoolArgument(do_overwrite_confirmation)
	args := []gi.Argument{arg_v, arg_do_overwrite_confirmation}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_extra_widget
//
// [ extra_widget ] trans: nothing
//
func (v *FileChooserIfc) SetExtraWidget(extra_widget IWidget) {
	iv, err := _I.Get(905, "FileChooser", "set_extra_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if extra_widget != nil {
		tmp = extra_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_extra_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_extra_widget}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_file
//
// [ file ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetFile(file g.IFile) (result bool, err error) {
	iv, err := _I.Get(906, "FileChooser", "set_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_file := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_filename
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetFilename(filename string) (result bool) {
	iv, err := _I.Get(907, "FileChooser", "set_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_filter
//
// [ filter ] trans: nothing
//
func (v *FileChooserIfc) SetFilter(filter IFileFilter) {
	iv, err := _I.Get(908, "FileChooser", "set_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_FileFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_local_only
//
// [ local_only ] trans: nothing
//
func (v *FileChooserIfc) SetLocalOnly(local_only bool) {
	iv, err := _I.Get(909, "FileChooser", "set_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_local_only := gi.NewBoolArgument(local_only)
	args := []gi.Argument{arg_v, arg_local_only}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_preview_widget
//
// [ preview_widget ] trans: nothing
//
func (v *FileChooserIfc) SetPreviewWidget(preview_widget IWidget) {
	iv, err := _I.Get(910, "FileChooser", "set_preview_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if preview_widget != nil {
		tmp = preview_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_preview_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_preview_widget}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_preview_widget_active
//
// [ active ] trans: nothing
//
func (v *FileChooserIfc) SetPreviewWidgetActive(active bool) {
	iv, err := _I.Get(911, "FileChooser", "set_preview_widget_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_active := gi.NewBoolArgument(active)
	args := []gi.Argument{arg_v, arg_active}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_select_multiple
//
// [ select_multiple ] trans: nothing
//
func (v *FileChooserIfc) SetSelectMultiple(select_multiple bool) {
	iv, err := _I.Get(912, "FileChooser", "set_select_multiple")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_select_multiple := gi.NewBoolArgument(select_multiple)
	args := []gi.Argument{arg_v, arg_select_multiple}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_show_hidden
//
// [ show_hidden ] trans: nothing
//
func (v *FileChooserIfc) SetShowHidden(show_hidden bool) {
	iv, err := _I.Get(913, "FileChooser", "set_show_hidden")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_hidden := gi.NewBoolArgument(show_hidden)
	args := []gi.Argument{arg_v, arg_show_hidden}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_set_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileChooserIfc) SetUri(uri string) (result bool) {
	iv, err := _I.Get(914, "FileChooser", "set_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_file_chooser_set_use_preview_label
//
// [ use_label ] trans: nothing
//
func (v *FileChooserIfc) SetUsePreviewLabel(use_label bool) {
	iv, err := _I.Get(915, "FileChooser", "set_use_preview_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_use_label := gi.NewBoolArgument(use_label)
	args := []gi.Argument{arg_v, arg_use_label}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_unselect_all
//
func (v *FileChooserIfc) UnselectAll() {
	iv, err := _I.Get(916, "FileChooser", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_unselect_file
//
// [ file ] trans: nothing
//
func (v *FileChooserIfc) UnselectFile(file g.IFile) {
	iv, err := _I.Get(917, "FileChooser", "unselect_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_file := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_file}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_unselect_filename
//
// [ filename ] trans: nothing
//
func (v *FileChooserIfc) UnselectFilename(filename string) {
	iv, err := _I.Get(918, "FileChooser", "unselect_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// gtk_file_chooser_unselect_uri
//
// [ uri ] trans: nothing
//
func (v *FileChooserIfc) UnselectUri(uri string) {
	iv, err := _I.Get(919, "FileChooser", "unselect_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// Enum FileChooserAction
type FileChooserActionEnum int

const (
	FileChooserActionOpen         FileChooserActionEnum = 0
	FileChooserActionSave         FileChooserActionEnum = 1
	FileChooserActionSelectFolder FileChooserActionEnum = 2
	FileChooserActionCreateFolder FileChooserActionEnum = 3
)

func FileChooserActionGetType() gi.GType {
	ret := _I.GetGType(183, "FileChooserAction")
	return ret
}

// Object FileChooserButton
type FileChooserButton struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	FileChooserIfc
	OrientableIfc
	Box
}

func WrapFileChooserButton(p unsafe.Pointer) (r FileChooserButton) { r.P = p; return }

type IFileChooserButton interface{ P_FileChooserButton() unsafe.Pointer }

func (v FileChooserButton) P_FileChooserButton() unsafe.Pointer { return v.P }
func (v FileChooserButton) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v FileChooserButton) P_Buildable() unsafe.Pointer         { return v.P }
func (v FileChooserButton) P_FileChooser() unsafe.Pointer       { return v.P }
func (v FileChooserButton) P_Orientable() unsafe.Pointer        { return v.P }
func FileChooserButtonGetType() gi.GType {
	ret := _I.GetGType(184, "FileChooserButton")
	return ret
}

// gtk_file_chooser_button_new
//
// [ title ] trans: nothing
//
// [ action ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFileChooserButton(title string, action FileChooserActionEnum) (result FileChooserButton) {
	iv, err := _I.Get(920, "FileChooserButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_title := gi.NewStringArgument(c_title)
	arg_action := gi.NewIntArgument(int(action))
	args := []gi.Argument{arg_title, arg_action}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_button_new_with_dialog
//
// [ dialog ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFileChooserButtonWithDialog(dialog IDialog) (result FileChooserButton) {
	iv, err := _I.Get(921, "FileChooserButton", "new_with_dialog")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if dialog != nil {
		tmp = dialog.P_Dialog()
	}
	arg_dialog := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_dialog}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_file_chooser_button_get_focus_on_click
//
// [ result ] trans: nothing
//
func (v FileChooserButton) GetFocusOnClick() (result bool) {
	iv, err := _I.Get(922, "FileChooserButton", "get_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_button_get_title
//
// [ result ] trans: nothing
//
func (v FileChooserButton) GetTitle() (result string) {
	iv, err := _I.Get(923, "FileChooserButton", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_file_chooser_button_get_width_chars
//
// [ result ] trans: nothing
//
func (v FileChooserButton) GetWidthChars() (result int32) {
	iv, err := _I.Get(924, "FileChooserButton", "get_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_file_chooser_button_set_focus_on_click
//
// [ focus_on_click ] trans: nothing
//
func (v FileChooserButton) SetFocusOnClick(focus_on_click bool) {
	iv, err := _I.Get(925, "FileChooserButton", "set_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focus_on_click := gi.NewBoolArgument(focus_on_click)
	args := []gi.Argument{arg_v, arg_focus_on_click}
	iv.Call(args, nil, nil)
}

// gtk_file_chooser_button_set_title
//
// [ title ] trans: nothing
//
func (v FileChooserButton) SetTitle(title string) {
	iv, err := _I.Get(926, "FileChooserButton", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_file_chooser_button_set_width_chars
//
// [ n_chars ] trans: nothing
//
func (v FileChooserButton) SetWidthChars(n_chars int32) {
	iv, err := _I.Get(927, "FileChooserButton", "set_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_n_chars}
	iv.Call(args, nil, nil)
}

// ignore GType struct FileChooserButtonClass

// Struct FileChooserButtonPrivate
type FileChooserButtonPrivate struct {
	P unsafe.Pointer
}

func FileChooserButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(185, "FileChooserButtonPrivate")
	return ret
}

// Enum FileChooserConfirmation
type FileChooserConfirmationEnum int

const (
	FileChooserConfirmationConfirm        FileChooserConfirmationEnum = 0
	FileChooserConfirmationAcceptFilename FileChooserConfirmationEnum = 1
	FileChooserConfirmationSelectAgain    FileChooserConfirmationEnum = 2
)

func FileChooserConfirmationGetType() gi.GType {
	ret := _I.GetGType(186, "FileChooserConfirmation")
	return ret
}

// Object FileChooserDialog
type FileChooserDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	FileChooserIfc
	Dialog
}

func WrapFileChooserDialog(p unsafe.Pointer) (r FileChooserDialog) { r.P = p; return }

type IFileChooserDialog interface{ P_FileChooserDialog() unsafe.Pointer }

func (v FileChooserDialog) P_FileChooserDialog() unsafe.Pointer { return v.P }
func (v FileChooserDialog) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v FileChooserDialog) P_Buildable() unsafe.Pointer         { return v.P }
func (v FileChooserDialog) P_FileChooser() unsafe.Pointer       { return v.P }
func FileChooserDialogGetType() gi.GType {
	ret := _I.GetGType(187, "FileChooserDialog")
	return ret
}

// ignore GType struct FileChooserDialogClass

// Struct FileChooserDialogPrivate
type FileChooserDialogPrivate struct {
	P unsafe.Pointer
}

func FileChooserDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(188, "FileChooserDialogPrivate")
	return ret
}

// Enum FileChooserError
type FileChooserErrorEnum int

const (
	FileChooserErrorNonexistent        FileChooserErrorEnum = 0
	FileChooserErrorBadFilename        FileChooserErrorEnum = 1
	FileChooserErrorAlreadyExists      FileChooserErrorEnum = 2
	FileChooserErrorIncompleteHostname FileChooserErrorEnum = 3
)

func FileChooserErrorGetType() gi.GType {
	ret := _I.GetGType(189, "FileChooserError")
	return ret
}

// Object FileChooserNative
type FileChooserNative struct {
	FileChooserIfc
	NativeDialog
}

func WrapFileChooserNative(p unsafe.Pointer) (r FileChooserNative) { r.P = p; return }

type IFileChooserNative interface{ P_FileChooserNative() unsafe.Pointer }

func (v FileChooserNative) P_FileChooserNative() unsafe.Pointer { return v.P }
func (v FileChooserNative) P_FileChooser() unsafe.Pointer       { return v.P }
func FileChooserNativeGetType() gi.GType {
	ret := _I.GetGType(190, "FileChooserNative")
	return ret
}

// gtk_file_chooser_native_new
//
// [ title ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ action ] trans: nothing
//
// [ accept_label ] trans: nothing
//
// [ cancel_label ] trans: nothing
//
// [ result ] trans: everything
//
func NewFileChooserNative(title string, parent IWindow, action FileChooserActionEnum, accept_label string, cancel_label string) (result FileChooserNative) {
	iv, err := _I.Get(928, "FileChooserNative", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	c_accept_label := gi.CString(accept_label)
	c_cancel_label := gi.CString(cancel_label)
	arg_title := gi.NewStringArgument(c_title)
	arg_parent := gi.NewPointerArgument(tmp)
	arg_action := gi.NewIntArgument(int(action))
	arg_accept_label := gi.NewStringArgument(c_accept_label)
	arg_cancel_label := gi.NewStringArgument(c_cancel_label)
	args := []gi.Argument{arg_title, arg_parent, arg_action, arg_accept_label, arg_cancel_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	gi.Free(c_accept_label)
	gi.Free(c_cancel_label)
	result.P = ret.Pointer()
	return
}

// gtk_file_chooser_native_get_accept_label
//
// [ result ] trans: nothing
//
func (v FileChooserNative) GetAcceptLabel() (result string) {
	iv, err := _I.Get(929, "FileChooserNative", "get_accept_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_file_chooser_native_get_cancel_label
//
// [ result ] trans: nothing
//
func (v FileChooserNative) GetCancelLabel() (result string) {
	iv, err := _I.Get(930, "FileChooserNative", "get_cancel_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_file_chooser_native_set_accept_label
//
// [ accept_label ] trans: nothing
//
func (v FileChooserNative) SetAcceptLabel(accept_label string) {
	iv, err := _I.Get(931, "FileChooserNative", "set_accept_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accept_label := gi.CString(accept_label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accept_label := gi.NewStringArgument(c_accept_label)
	args := []gi.Argument{arg_v, arg_accept_label}
	iv.Call(args, nil, nil)
	gi.Free(c_accept_label)
}

// gtk_file_chooser_native_set_cancel_label
//
// [ cancel_label ] trans: nothing
//
func (v FileChooserNative) SetCancelLabel(cancel_label string) {
	iv, err := _I.Get(932, "FileChooserNative", "set_cancel_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_cancel_label := gi.CString(cancel_label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancel_label := gi.NewStringArgument(c_cancel_label)
	args := []gi.Argument{arg_v, arg_cancel_label}
	iv.Call(args, nil, nil)
	gi.Free(c_cancel_label)
}

// ignore GType struct FileChooserNativeClass

// Object FileChooserWidget
type FileChooserWidget struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	FileChooserIfc
	OrientableIfc
	Box
}

func WrapFileChooserWidget(p unsafe.Pointer) (r FileChooserWidget) { r.P = p; return }

type IFileChooserWidget interface{ P_FileChooserWidget() unsafe.Pointer }

func (v FileChooserWidget) P_FileChooserWidget() unsafe.Pointer { return v.P }
func (v FileChooserWidget) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v FileChooserWidget) P_Buildable() unsafe.Pointer         { return v.P }
func (v FileChooserWidget) P_FileChooser() unsafe.Pointer       { return v.P }
func (v FileChooserWidget) P_Orientable() unsafe.Pointer        { return v.P }
func FileChooserWidgetGetType() gi.GType {
	ret := _I.GetGType(191, "FileChooserWidget")
	return ret
}

// gtk_file_chooser_widget_new
//
// [ action ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFileChooserWidget(action FileChooserActionEnum) (result FileChooserWidget) {
	iv, err := _I.Get(933, "FileChooserWidget", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_action := gi.NewIntArgument(int(action))
	args := []gi.Argument{arg_action}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct FileChooserWidgetClass

// Struct FileChooserWidgetPrivate
type FileChooserWidgetPrivate struct {
	P unsafe.Pointer
}

func FileChooserWidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(192, "FileChooserWidgetPrivate")
	return ret
}

// Object FileFilter
type FileFilter struct {
	BuildableIfc
	g.InitiallyUnowned
}

func WrapFileFilter(p unsafe.Pointer) (r FileFilter) { r.P = p; return }

type IFileFilter interface{ P_FileFilter() unsafe.Pointer }

func (v FileFilter) P_FileFilter() unsafe.Pointer { return v.P }
func (v FileFilter) P_Buildable() unsafe.Pointer  { return v.P }
func FileFilterGetType() gi.GType {
	ret := _I.GetGType(193, "FileFilter")
	return ret
}

// gtk_file_filter_new
//
// [ result ] trans: nothing
//
func NewFileFilter() (result FileFilter) {
	iv, err := _I.Get(934, "FileFilter", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_filter_new_from_gvariant
//
// [ variant ] trans: nothing
//
// [ result ] trans: everything
//
func NewFileFilterFromGvariant(variant g.Variant) (result FileFilter) {
	iv, err := _I.Get(935, "FileFilter", "new_from_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_variant := gi.NewPointerArgument(variant.P)
	args := []gi.Argument{arg_variant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_file_filter_add_custom
//
// [ needed ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ notify ] trans: nothing
//
func (v FileFilter) AddCustom(needed FileFilterFlags, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, notify int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(936, "FileFilter", "add_custom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_needed := gi.NewIntArgument(int(needed))
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFileFilterFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_notify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_needed, arg_func1, arg_data, arg_notify}
	iv.Call(args, nil, nil)
}

// gtk_file_filter_add_mime_type
//
// [ mime_type ] trans: nothing
//
func (v FileFilter) AddMimeType(mime_type string) {
	iv, err := _I.Get(937, "FileFilter", "add_mime_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mime_type := gi.CString(mime_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	args := []gi.Argument{arg_v, arg_mime_type}
	iv.Call(args, nil, nil)
	gi.Free(c_mime_type)
}

// gtk_file_filter_add_pattern
//
// [ pattern ] trans: nothing
//
func (v FileFilter) AddPattern(pattern string) {
	iv, err := _I.Get(938, "FileFilter", "add_pattern")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_pattern := gi.CString(pattern)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pattern := gi.NewStringArgument(c_pattern)
	args := []gi.Argument{arg_v, arg_pattern}
	iv.Call(args, nil, nil)
	gi.Free(c_pattern)
}

// gtk_file_filter_add_pixbuf_formats
//
func (v FileFilter) AddPixbufFormats() {
	iv, err := _I.Get(939, "FileFilter", "add_pixbuf_formats")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_file_filter_filter
//
// [ filter_info ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileFilter) Filter(filter_info FileFilterInfo) (result bool) {
	iv, err := _I.Get(940, "FileFilter", "filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_info := gi.NewPointerArgument(filter_info.P)
	args := []gi.Argument{arg_v, arg_filter_info}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_filter_get_name
//
// [ result ] trans: nothing
//
func (v FileFilter) GetName() (result string) {
	iv, err := _I.Get(941, "FileFilter", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_file_filter_get_needed
//
// [ result ] trans: nothing
//
func (v FileFilter) GetNeeded() (result FileFilterFlags) {
	iv, err := _I.Get(942, "FileFilter", "get_needed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = FileFilterFlags(ret.Int())
	return
}

// gtk_file_filter_set_name
//
// [ name ] trans: nothing
//
func (v FileFilter) SetName(name string) {
	iv, err := _I.Get(943, "FileFilter", "set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_file_filter_to_gvariant
//
// [ result ] trans: nothing
//
func (v FileFilter) ToGvariant() (result g.Variant) {
	iv, err := _I.Get(944, "FileFilter", "to_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Flags FileFilterFlags
type FileFilterFlags int

const (
	FileFilterFlagsFilename    FileFilterFlags = 1
	FileFilterFlagsUri         FileFilterFlags = 2
	FileFilterFlagsDisplayName FileFilterFlags = 4
	FileFilterFlagsMimeType    FileFilterFlags = 8
)

func FileFilterFlagsGetType() gi.GType {
	ret := _I.GetGType(194, "FileFilterFlags")
	return ret
}

type FileFilterFuncStruct struct {
	F_filter_info FileFilterInfo
	F_data        unsafe.Pointer
}

func GetPointer_myFileFilterFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFileFilterFunc())
}

//export myGtkFileFilterFunc
func myGtkFileFilterFunc(filter_info *C.GtkFileFilterInfo, data C.gpointer) {
	// TODO: not found user_data
}

// Struct FileFilterInfo
type FileFilterInfo struct {
	P unsafe.Pointer
}

const SizeOfStructFileFilterInfo = 40

func FileFilterInfoGetType() gi.GType {
	ret := _I.GetGType(195, "FileFilterInfo")
	return ret
}

// Object Fixed
type Fixed struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapFixed(p unsafe.Pointer) (r Fixed) { r.P = p; return }

type IFixed interface{ P_Fixed() unsafe.Pointer }

func (v Fixed) P_Fixed() unsafe.Pointer            { return v.P }
func (v Fixed) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Fixed) P_Buildable() unsafe.Pointer        { return v.P }
func FixedGetType() gi.GType {
	ret := _I.GetGType(196, "Fixed")
	return ret
}

// gtk_fixed_new
//
// [ result ] trans: nothing
//
func NewFixed() (result Fixed) {
	iv, err := _I.Get(945, "Fixed", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_fixed_move
//
// [ widget ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func (v Fixed) Move(widget IWidget, x int32, y int32) {
	iv, err := _I.Get(946, "Fixed", "move")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_widget, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// gtk_fixed_put
//
// [ widget ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func (v Fixed) Put(widget IWidget, x int32, y int32) {
	iv, err := _I.Get(947, "Fixed", "put")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_widget, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// Struct FixedChild
type FixedChild struct {
	P unsafe.Pointer
}

const SizeOfStructFixedChild = 16

func FixedChildGetType() gi.GType {
	ret := _I.GetGType(197, "FixedChild")
	return ret
}

// ignore GType struct FixedClass

// Struct FixedPrivate
type FixedPrivate struct {
	P unsafe.Pointer
}

func FixedPrivateGetType() gi.GType {
	ret := _I.GetGType(198, "FixedPrivate")
	return ret
}

// Object FlowBox
type FlowBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Container
}

func WrapFlowBox(p unsafe.Pointer) (r FlowBox) { r.P = p; return }

type IFlowBox interface{ P_FlowBox() unsafe.Pointer }

func (v FlowBox) P_FlowBox() unsafe.Pointer          { return v.P }
func (v FlowBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v FlowBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v FlowBox) P_Orientable() unsafe.Pointer       { return v.P }
func FlowBoxGetType() gi.GType {
	ret := _I.GetGType(199, "FlowBox")
	return ret
}

// gtk_flow_box_new
//
// [ result ] trans: nothing
//
func NewFlowBox() (result FlowBox) {
	iv, err := _I.Get(948, "FlowBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_flow_box_bind_model
//
// [ model ] trans: nothing
//
// [ create_widget_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_free_func ] trans: nothing
//
func (v FlowBox) BindModel(model g.IListModel, create_widget_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, user_data_free_func int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(949, "FlowBox", "bind_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_ListModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	arg_create_widget_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFlowBoxCreateWidgetFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_user_data_free_func := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_model, arg_create_widget_func, arg_user_data, arg_user_data_free_func}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_get_activate_on_single_click
//
// [ result ] trans: nothing
//
func (v FlowBox) GetActivateOnSingleClick() (result bool) {
	iv, err := _I.Get(950, "FlowBox", "get_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_flow_box_get_child_at_index
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FlowBox) GetChildAtIndex(idx int32) (result FlowBoxChild) {
	iv, err := _I.Get(951, "FlowBox", "get_child_at_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_flow_box_get_child_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FlowBox) GetChildAtPos(x int32, y int32) (result FlowBoxChild) {
	iv, err := _I.Get(952, "FlowBox", "get_child_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_flow_box_get_column_spacing
//
// [ result ] trans: nothing
//
func (v FlowBox) GetColumnSpacing() (result uint32) {
	iv, err := _I.Get(953, "FlowBox", "get_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_flow_box_get_homogeneous
//
// [ result ] trans: nothing
//
func (v FlowBox) GetHomogeneous() (result bool) {
	iv, err := _I.Get(954, "FlowBox", "get_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_flow_box_get_max_children_per_line
//
// [ result ] trans: nothing
//
func (v FlowBox) GetMaxChildrenPerLine() (result uint32) {
	iv, err := _I.Get(955, "FlowBox", "get_max_children_per_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_flow_box_get_min_children_per_line
//
// [ result ] trans: nothing
//
func (v FlowBox) GetMinChildrenPerLine() (result uint32) {
	iv, err := _I.Get(956, "FlowBox", "get_min_children_per_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_flow_box_get_row_spacing
//
// [ result ] trans: nothing
//
func (v FlowBox) GetRowSpacing() (result uint32) {
	iv, err := _I.Get(957, "FlowBox", "get_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_flow_box_get_selected_children
//
// [ result ] trans: container
//
func (v FlowBox) GetSelectedChildren() (result g.List) {
	iv, err := _I.Get(958, "FlowBox", "get_selected_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_flow_box_get_selection_mode
//
// [ result ] trans: nothing
//
func (v FlowBox) GetSelectionMode() (result SelectionModeEnum) {
	iv, err := _I.Get(959, "FlowBox", "get_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SelectionModeEnum(ret.Int())
	return
}

// gtk_flow_box_insert
//
// [ widget ] trans: nothing
//
// [ position ] trans: nothing
//
func (v FlowBox) Insert(widget IWidget, position int32) {
	iv, err := _I.Get(960, "FlowBox", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_widget, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_invalidate_filter
//
func (v FlowBox) InvalidateFilter() {
	iv, err := _I.Get(961, "FlowBox", "invalidate_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_invalidate_sort
//
func (v FlowBox) InvalidateSort() {
	iv, err := _I.Get(962, "FlowBox", "invalidate_sort")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_select_all
//
func (v FlowBox) SelectAll() {
	iv, err := _I.Get(963, "FlowBox", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_select_child
//
// [ child ] trans: nothing
//
func (v FlowBox) SelectChild(child IFlowBoxChild) {
	iv, err := _I.Get(964, "FlowBox", "select_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_FlowBoxChild()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_selected_foreach
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v FlowBox) SelectedForeach(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(965, "FlowBox", "selected_foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFlowBoxForeachFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_activate_on_single_click
//
// [ single ] trans: nothing
//
func (v FlowBox) SetActivateOnSingleClick(single bool) {
	iv, err := _I.Get(966, "FlowBox", "set_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_single := gi.NewBoolArgument(single)
	args := []gi.Argument{arg_v, arg_single}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_column_spacing
//
// [ spacing ] trans: nothing
//
func (v FlowBox) SetColumnSpacing(spacing uint32) {
	iv, err := _I.Get(967, "FlowBox", "set_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_filter_func
//
// [ filter_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v FlowBox) SetFilterFunc(filter_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(968, "FlowBox", "set_filter_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFlowBoxFilterFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_filter_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v FlowBox) SetHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(969, "FlowBox", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v FlowBox) SetHomogeneous(homogeneous bool) {
	iv, err := _I.Get(970, "FlowBox", "set_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_max_children_per_line
//
// [ n_children ] trans: nothing
//
func (v FlowBox) SetMaxChildrenPerLine(n_children uint32) {
	iv, err := _I.Get(971, "FlowBox", "set_max_children_per_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_children := gi.NewUint32Argument(n_children)
	args := []gi.Argument{arg_v, arg_n_children}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_min_children_per_line
//
// [ n_children ] trans: nothing
//
func (v FlowBox) SetMinChildrenPerLine(n_children uint32) {
	iv, err := _I.Get(972, "FlowBox", "set_min_children_per_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_children := gi.NewUint32Argument(n_children)
	args := []gi.Argument{arg_v, arg_n_children}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_row_spacing
//
// [ spacing ] trans: nothing
//
func (v FlowBox) SetRowSpacing(spacing uint32) {
	iv, err := _I.Get(973, "FlowBox", "set_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_selection_mode
//
// [ mode ] trans: nothing
//
func (v FlowBox) SetSelectionMode(mode SelectionModeEnum) {
	iv, err := _I.Get(974, "FlowBox", "set_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_sort_func
//
// [ sort_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v FlowBox) SetSortFunc(sort_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(975, "FlowBox", "set_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sort_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFlowBoxSortFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_sort_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_set_vadjustment
//
// [ adjustment ] trans: nothing
//
func (v FlowBox) SetVadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(976, "FlowBox", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_unselect_all
//
func (v FlowBox) UnselectAll() {
	iv, err := _I.Get(977, "FlowBox", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_unselect_child
//
// [ child ] trans: nothing
//
func (v FlowBox) UnselectChild(child IFlowBoxChild) {
	iv, err := _I.Get(978, "FlowBox", "unselect_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_FlowBoxChild()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// Object FlowBoxAccessible
type FlowBoxAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapFlowBoxAccessible(p unsafe.Pointer) (r FlowBoxAccessible) { r.P = p; return }

type IFlowBoxAccessible interface{ P_FlowBoxAccessible() unsafe.Pointer }

func (v FlowBoxAccessible) P_FlowBoxAccessible() unsafe.Pointer { return v.P }
func (v FlowBoxAccessible) P_Component() unsafe.Pointer         { return v.P }
func (v FlowBoxAccessible) P_Selection() unsafe.Pointer         { return v.P }
func FlowBoxAccessibleGetType() gi.GType {
	ret := _I.GetGType(200, "FlowBoxAccessible")
	return ret
}

// ignore GType struct FlowBoxAccessibleClass

// Struct FlowBoxAccessiblePrivate
type FlowBoxAccessiblePrivate struct {
	P unsafe.Pointer
}

func FlowBoxAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(201, "FlowBoxAccessiblePrivate")
	return ret
}

// Object FlowBoxChild
type FlowBoxChild struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapFlowBoxChild(p unsafe.Pointer) (r FlowBoxChild) { r.P = p; return }

type IFlowBoxChild interface{ P_FlowBoxChild() unsafe.Pointer }

func (v FlowBoxChild) P_FlowBoxChild() unsafe.Pointer     { return v.P }
func (v FlowBoxChild) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v FlowBoxChild) P_Buildable() unsafe.Pointer        { return v.P }
func FlowBoxChildGetType() gi.GType {
	ret := _I.GetGType(202, "FlowBoxChild")
	return ret
}

// gtk_flow_box_child_new
//
// [ result ] trans: nothing
//
func NewFlowBoxChild() (result FlowBoxChild) {
	iv, err := _I.Get(979, "FlowBoxChild", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_flow_box_child_changed
//
func (v FlowBoxChild) Changed() {
	iv, err := _I.Get(980, "FlowBoxChild", "changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_flow_box_child_get_index
//
// [ result ] trans: nothing
//
func (v FlowBoxChild) GetIndex() (result int32) {
	iv, err := _I.Get(981, "FlowBoxChild", "get_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_flow_box_child_is_selected
//
// [ result ] trans: nothing
//
func (v FlowBoxChild) IsSelected() (result bool) {
	iv, err := _I.Get(982, "FlowBoxChild", "is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Object FlowBoxChildAccessible
type FlowBoxChildAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapFlowBoxChildAccessible(p unsafe.Pointer) (r FlowBoxChildAccessible) { r.P = p; return }

type IFlowBoxChildAccessible interface{ P_FlowBoxChildAccessible() unsafe.Pointer }

func (v FlowBoxChildAccessible) P_FlowBoxChildAccessible() unsafe.Pointer { return v.P }
func (v FlowBoxChildAccessible) P_Component() unsafe.Pointer              { return v.P }
func FlowBoxChildAccessibleGetType() gi.GType {
	ret := _I.GetGType(203, "FlowBoxChildAccessible")
	return ret
}

// ignore GType struct FlowBoxChildAccessibleClass

// ignore GType struct FlowBoxChildClass

// ignore GType struct FlowBoxClass

type FlowBoxCreateWidgetFuncStruct struct {
	F_item g.Object
}

func GetPointer_myFlowBoxCreateWidgetFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFlowBoxCreateWidgetFunc())
}

//export myGtkFlowBoxCreateWidgetFunc
func myGtkFlowBoxCreateWidgetFunc(item *C.GObject, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &FlowBoxCreateWidgetFuncStruct{
		F_item: g.WrapObject(unsafe.Pointer(item)),
	}
	fn(args)
}

type FlowBoxFilterFuncStruct struct {
	F_child FlowBoxChild
}

func GetPointer_myFlowBoxFilterFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFlowBoxFilterFunc())
}

//export myGtkFlowBoxFilterFunc
func myGtkFlowBoxFilterFunc(child *C.GtkFlowBoxChild, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &FlowBoxFilterFuncStruct{
		F_child: WrapFlowBoxChild(unsafe.Pointer(child)),
	}
	fn(args)
}

type FlowBoxForeachFuncStruct struct {
	F_box   FlowBox
	F_child FlowBoxChild
}

func GetPointer_myFlowBoxForeachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFlowBoxForeachFunc())
}

//export myGtkFlowBoxForeachFunc
func myGtkFlowBoxForeachFunc(box *C.GtkFlowBox, child *C.GtkFlowBoxChild, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &FlowBoxForeachFuncStruct{
		F_box:   WrapFlowBox(unsafe.Pointer(box)),
		F_child: WrapFlowBoxChild(unsafe.Pointer(child)),
	}
	fn(args)
}

type FlowBoxSortFuncStruct struct {
	F_child1 FlowBoxChild
	F_child2 FlowBoxChild
}

func GetPointer_myFlowBoxSortFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFlowBoxSortFunc())
}

//export myGtkFlowBoxSortFunc
func myGtkFlowBoxSortFunc(child1 *C.GtkFlowBoxChild, child2 *C.GtkFlowBoxChild, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &FlowBoxSortFuncStruct{
		F_child1: WrapFlowBoxChild(unsafe.Pointer(child1)),
		F_child2: WrapFlowBoxChild(unsafe.Pointer(child2)),
	}
	fn(args)
}

// Object FontButton
type FontButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	FontChooserIfc
	Button
}

func WrapFontButton(p unsafe.Pointer) (r FontButton) { r.P = p; return }

type IFontButton interface{ P_FontButton() unsafe.Pointer }

func (v FontButton) P_FontButton() unsafe.Pointer       { return v.P }
func (v FontButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v FontButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v FontButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v FontButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v FontButton) P_FontChooser() unsafe.Pointer      { return v.P }
func FontButtonGetType() gi.GType {
	ret := _I.GetGType(204, "FontButton")
	return ret
}

// gtk_font_button_new
//
// [ result ] trans: nothing
//
func NewFontButton() (result FontButton) {
	iv, err := _I.Get(983, "FontButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_font_button_new_with_font
//
// [ fontname ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFontButtonWithFont(fontname string) (result FontButton) {
	iv, err := _I.Get(984, "FontButton", "new_with_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fontname := gi.CString(fontname)
	arg_fontname := gi.NewStringArgument(c_fontname)
	args := []gi.Argument{arg_fontname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_fontname)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_button_get_font_name
//
// [ result ] trans: nothing
//
func (v FontButton) GetFontName() (result string) {
	iv, err := _I.Get(985, "FontButton", "get_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_font_button_get_show_size
//
// [ result ] trans: nothing
//
func (v FontButton) GetShowSize() (result bool) {
	iv, err := _I.Get(986, "FontButton", "get_show_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_font_button_get_show_style
//
// [ result ] trans: nothing
//
func (v FontButton) GetShowStyle() (result bool) {
	iv, err := _I.Get(987, "FontButton", "get_show_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_font_button_get_title
//
// [ result ] trans: nothing
//
func (v FontButton) GetTitle() (result string) {
	iv, err := _I.Get(988, "FontButton", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_font_button_get_use_font
//
// [ result ] trans: nothing
//
func (v FontButton) GetUseFont() (result bool) {
	iv, err := _I.Get(989, "FontButton", "get_use_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_font_button_get_use_size
//
// [ result ] trans: nothing
//
func (v FontButton) GetUseSize() (result bool) {
	iv, err := _I.Get(990, "FontButton", "get_use_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_font_button_set_font_name
//
// [ fontname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FontButton) SetFontName(fontname string) (result bool) {
	iv, err := _I.Get(991, "FontButton", "set_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fontname := gi.CString(fontname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_fontname := gi.NewStringArgument(c_fontname)
	args := []gi.Argument{arg_v, arg_fontname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_fontname)
	result = ret.Bool()
	return
}

// gtk_font_button_set_show_size
//
// [ show_size ] trans: nothing
//
func (v FontButton) SetShowSize(show_size bool) {
	iv, err := _I.Get(992, "FontButton", "set_show_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_size := gi.NewBoolArgument(show_size)
	args := []gi.Argument{arg_v, arg_show_size}
	iv.Call(args, nil, nil)
}

// gtk_font_button_set_show_style
//
// [ show_style ] trans: nothing
//
func (v FontButton) SetShowStyle(show_style bool) {
	iv, err := _I.Get(993, "FontButton", "set_show_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_style := gi.NewBoolArgument(show_style)
	args := []gi.Argument{arg_v, arg_show_style}
	iv.Call(args, nil, nil)
}

// gtk_font_button_set_title
//
// [ title ] trans: nothing
//
func (v FontButton) SetTitle(title string) {
	iv, err := _I.Get(994, "FontButton", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_font_button_set_use_font
//
// [ use_font ] trans: nothing
//
func (v FontButton) SetUseFont(use_font bool) {
	iv, err := _I.Get(995, "FontButton", "set_use_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_font := gi.NewBoolArgument(use_font)
	args := []gi.Argument{arg_v, arg_use_font}
	iv.Call(args, nil, nil)
}

// gtk_font_button_set_use_size
//
// [ use_size ] trans: nothing
//
func (v FontButton) SetUseSize(use_size bool) {
	iv, err := _I.Get(996, "FontButton", "set_use_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_size := gi.NewBoolArgument(use_size)
	args := []gi.Argument{arg_v, arg_use_size}
	iv.Call(args, nil, nil)
}

// ignore GType struct FontButtonClass

// Struct FontButtonPrivate
type FontButtonPrivate struct {
	P unsafe.Pointer
}

func FontButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(205, "FontButtonPrivate")
	return ret
}

// Interface FontChooser
type FontChooser struct {
	FontChooserIfc
	P unsafe.Pointer
}
type FontChooserIfc struct{}
type IFontChooser interface{ P_FontChooser() unsafe.Pointer }

func (v FontChooser) P_FontChooser() unsafe.Pointer { return v.P }
func FontChooserGetType() gi.GType {
	ret := _I.GetGType(206, "FontChooser")
	return ret
}

// gtk_font_chooser_get_font
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetFont() (result string) {
	iv, err := _I.Get(997, "FontChooser", "get_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_font_chooser_get_font_desc
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetFontDesc() (result pango.FontDescription) {
	iv, err := _I.Get(998, "FontChooser", "get_font_desc")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_font_chooser_get_font_face
//
// [ result ] trans: nothing
//
func (v *FontChooserIfc) GetFontFace() (result pango.FontFace) {
	iv, err := _I.Get(999, "FontChooser", "get_font_face")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_font_chooser_get_font_family
//
// [ result ] trans: nothing
//
func (v *FontChooserIfc) GetFontFamily() (result pango.FontFamily) {
	iv, err := _I.Get(1000, "FontChooser", "get_font_family")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_font_chooser_get_font_features
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetFontFeatures() (result string) {
	iv, err := _I.Get(1001, "FontChooser", "get_font_features")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_font_chooser_get_font_map
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetFontMap() (result pango.FontMap) {
	iv, err := _I.Get(1002, "FontChooser", "get_font_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_font_chooser_get_font_size
//
// [ result ] trans: nothing
//
func (v *FontChooserIfc) GetFontSize() (result int32) {
	iv, err := _I.Get(1003, "FontChooser", "get_font_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_font_chooser_get_language
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetLanguage() (result string) {
	iv, err := _I.Get(1004, "FontChooser", "get_language")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_font_chooser_get_level
//
// [ result ] trans: nothing
//
func (v *FontChooserIfc) GetLevel() (result FontChooserLevelFlags) {
	iv, err := _I.Get(1005, "FontChooser", "get_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = FontChooserLevelFlags(ret.Int())
	return
}

// gtk_font_chooser_get_preview_text
//
// [ result ] trans: everything
//
func (v *FontChooserIfc) GetPreviewText() (result string) {
	iv, err := _I.Get(1006, "FontChooser", "get_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_font_chooser_get_show_preview_entry
//
// [ result ] trans: nothing
//
func (v *FontChooserIfc) GetShowPreviewEntry() (result bool) {
	iv, err := _I.Get(1007, "FontChooser", "get_show_preview_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_font_chooser_set_filter_func
//
// [ filter ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v *FontChooserIfc) SetFilterFunc(filter int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1008, "FontChooser", "set_filter_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myFontFilterFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_filter, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_font_chooser_set_font
//
// [ fontname ] trans: nothing
//
func (v *FontChooserIfc) SetFont(fontname string) {
	iv, err := _I.Get(1009, "FontChooser", "set_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fontname := gi.CString(fontname)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_fontname := gi.NewStringArgument(c_fontname)
	args := []gi.Argument{arg_v, arg_fontname}
	iv.Call(args, nil, nil)
	gi.Free(c_fontname)
}

// gtk_font_chooser_set_font_desc
//
// [ font_desc ] trans: nothing
//
func (v *FontChooserIfc) SetFontDesc(font_desc pango.FontDescription) {
	iv, err := _I.Get(1010, "FontChooser", "set_font_desc")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_font_desc := gi.NewPointerArgument(font_desc.P)
	args := []gi.Argument{arg_v, arg_font_desc}
	iv.Call(args, nil, nil)
}

// gtk_font_chooser_set_font_map
//
// [ fontmap ] trans: nothing
//
func (v *FontChooserIfc) SetFontMap(fontmap pango.IFontMap) {
	iv, err := _I.Get(1011, "FontChooser", "set_font_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if fontmap != nil {
		tmp = fontmap.P_FontMap()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_fontmap := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_fontmap}
	iv.Call(args, nil, nil)
}

// gtk_font_chooser_set_language
//
// [ language ] trans: nothing
//
func (v *FontChooserIfc) SetLanguage(language string) {
	iv, err := _I.Get(1012, "FontChooser", "set_language")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_language := gi.CString(language)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_language := gi.NewStringArgument(c_language)
	args := []gi.Argument{arg_v, arg_language}
	iv.Call(args, nil, nil)
	gi.Free(c_language)
}

// gtk_font_chooser_set_level
//
// [ level ] trans: nothing
//
func (v *FontChooserIfc) SetLevel(level FontChooserLevelFlags) {
	iv, err := _I.Get(1013, "FontChooser", "set_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_level := gi.NewIntArgument(int(level))
	args := []gi.Argument{arg_v, arg_level}
	iv.Call(args, nil, nil)
}

// gtk_font_chooser_set_preview_text
//
// [ text ] trans: nothing
//
func (v *FontChooserIfc) SetPreviewText(text string) {
	iv, err := _I.Get(1014, "FontChooser", "set_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_font_chooser_set_show_preview_entry
//
// [ show_preview_entry ] trans: nothing
//
func (v *FontChooserIfc) SetShowPreviewEntry(show_preview_entry bool) {
	iv, err := _I.Get(1015, "FontChooser", "set_show_preview_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_preview_entry := gi.NewBoolArgument(show_preview_entry)
	args := []gi.Argument{arg_v, arg_show_preview_entry}
	iv.Call(args, nil, nil)
}

// Object FontChooserDialog
type FontChooserDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	FontChooserIfc
	Dialog
}

func WrapFontChooserDialog(p unsafe.Pointer) (r FontChooserDialog) { r.P = p; return }

type IFontChooserDialog interface{ P_FontChooserDialog() unsafe.Pointer }

func (v FontChooserDialog) P_FontChooserDialog() unsafe.Pointer { return v.P }
func (v FontChooserDialog) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v FontChooserDialog) P_Buildable() unsafe.Pointer         { return v.P }
func (v FontChooserDialog) P_FontChooser() unsafe.Pointer       { return v.P }
func FontChooserDialogGetType() gi.GType {
	ret := _I.GetGType(207, "FontChooserDialog")
	return ret
}

// gtk_font_chooser_dialog_new
//
// [ title ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFontChooserDialog(title string, parent IWindow) (result FontChooserDialog) {
	iv, err := _I.Get(1016, "FontChooserDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_title := gi.NewStringArgument(c_title)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_title, arg_parent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// ignore GType struct FontChooserDialogClass

// Struct FontChooserDialogPrivate
type FontChooserDialogPrivate struct {
	P unsafe.Pointer
}

func FontChooserDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(208, "FontChooserDialogPrivate")
	return ret
}

// ignore GType struct FontChooserIface

// Flags FontChooserLevel
type FontChooserLevelFlags int

const (
	FontChooserLevelFamily     FontChooserLevelFlags = 0
	FontChooserLevelStyle      FontChooserLevelFlags = 1
	FontChooserLevelSize       FontChooserLevelFlags = 2
	FontChooserLevelVariations FontChooserLevelFlags = 4
	FontChooserLevelFeatures   FontChooserLevelFlags = 8
)

func FontChooserLevelGetType() gi.GType {
	ret := _I.GetGType(209, "FontChooserLevel")
	return ret
}

// Object FontChooserWidget
type FontChooserWidget struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	FontChooserIfc
	OrientableIfc
	Box
}

func WrapFontChooserWidget(p unsafe.Pointer) (r FontChooserWidget) { r.P = p; return }

type IFontChooserWidget interface{ P_FontChooserWidget() unsafe.Pointer }

func (v FontChooserWidget) P_FontChooserWidget() unsafe.Pointer { return v.P }
func (v FontChooserWidget) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v FontChooserWidget) P_Buildable() unsafe.Pointer         { return v.P }
func (v FontChooserWidget) P_FontChooser() unsafe.Pointer       { return v.P }
func (v FontChooserWidget) P_Orientable() unsafe.Pointer        { return v.P }
func FontChooserWidgetGetType() gi.GType {
	ret := _I.GetGType(210, "FontChooserWidget")
	return ret
}

// gtk_font_chooser_widget_new
//
// [ result ] trans: nothing
//
func NewFontChooserWidget() (result FontChooserWidget) {
	iv, err := _I.Get(1017, "FontChooserWidget", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct FontChooserWidgetClass

// Struct FontChooserWidgetPrivate
type FontChooserWidgetPrivate struct {
	P unsafe.Pointer
}

func FontChooserWidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(211, "FontChooserWidgetPrivate")
	return ret
}

type FontFilterFuncStruct struct {
	F_family pango.FontFamily
	F_face   pango.FontFace
	F_data   unsafe.Pointer
}

func GetPointer_myFontFilterFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkFontFilterFunc())
}

//export myGtkFontFilterFunc
func myGtkFontFilterFunc(family *C.PangoFontFamily, face *C.PangoFontFace, data C.gpointer) {
	// TODO: not found user_data
}

// Object FontSelection
type FontSelection struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapFontSelection(p unsafe.Pointer) (r FontSelection) { r.P = p; return }

type IFontSelection interface{ P_FontSelection() unsafe.Pointer }

func (v FontSelection) P_FontSelection() unsafe.Pointer    { return v.P }
func (v FontSelection) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v FontSelection) P_Buildable() unsafe.Pointer        { return v.P }
func (v FontSelection) P_Orientable() unsafe.Pointer       { return v.P }
func FontSelectionGetType() gi.GType {
	ret := _I.GetGType(212, "FontSelection")
	return ret
}

// Deprecated
//
// gtk_font_selection_new
//
// [ result ] trans: nothing
//
func NewFontSelection() (result FontSelection) {
	iv, err := _I.Get(1018, "FontSelection", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_face
//
// [ result ] trans: nothing
//
func (v FontSelection) GetFace() (result pango.FontFace) {
	iv, err := _I.Get(1019, "FontSelection", "get_face")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_face_list
//
// [ result ] trans: nothing
//
func (v FontSelection) GetFaceList() (result Widget) {
	iv, err := _I.Get(1020, "FontSelection", "get_face_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_family
//
// [ result ] trans: nothing
//
func (v FontSelection) GetFamily() (result pango.FontFamily) {
	iv, err := _I.Get(1021, "FontSelection", "get_family")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_family_list
//
// [ result ] trans: nothing
//
func (v FontSelection) GetFamilyList() (result Widget) {
	iv, err := _I.Get(1022, "FontSelection", "get_family_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_font_name
//
// [ result ] trans: everything
//
func (v FontSelection) GetFontName() (result string) {
	iv, err := _I.Get(1023, "FontSelection", "get_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_font_selection_get_preview_entry
//
// [ result ] trans: nothing
//
func (v FontSelection) GetPreviewEntry() (result Widget) {
	iv, err := _I.Get(1024, "FontSelection", "get_preview_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_preview_text
//
// [ result ] trans: nothing
//
func (v FontSelection) GetPreviewText() (result string) {
	iv, err := _I.Get(1025, "FontSelection", "get_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_font_selection_get_size
//
// [ result ] trans: nothing
//
func (v FontSelection) GetSize() (result int32) {
	iv, err := _I.Get(1026, "FontSelection", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_font_selection_get_size_entry
//
// [ result ] trans: nothing
//
func (v FontSelection) GetSizeEntry() (result Widget) {
	iv, err := _I.Get(1027, "FontSelection", "get_size_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_get_size_list
//
// [ result ] trans: nothing
//
func (v FontSelection) GetSizeList() (result Widget) {
	iv, err := _I.Get(1028, "FontSelection", "get_size_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_set_font_name
//
// [ fontname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FontSelection) SetFontName(fontname string) (result bool) {
	iv, err := _I.Get(1029, "FontSelection", "set_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fontname := gi.CString(fontname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_fontname := gi.NewStringArgument(c_fontname)
	args := []gi.Argument{arg_v, arg_fontname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_fontname)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_font_selection_set_preview_text
//
// [ text ] trans: nothing
//
func (v FontSelection) SetPreviewText(text string) {
	iv, err := _I.Get(1030, "FontSelection", "set_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// ignore GType struct FontSelectionClass

// Object FontSelectionDialog
type FontSelectionDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Dialog
}

func WrapFontSelectionDialog(p unsafe.Pointer) (r FontSelectionDialog) { r.P = p; return }

type IFontSelectionDialog interface{ P_FontSelectionDialog() unsafe.Pointer }

func (v FontSelectionDialog) P_FontSelectionDialog() unsafe.Pointer { return v.P }
func (v FontSelectionDialog) P_ImplementorIface() unsafe.Pointer    { return v.P }
func (v FontSelectionDialog) P_Buildable() unsafe.Pointer           { return v.P }
func FontSelectionDialogGetType() gi.GType {
	ret := _I.GetGType(213, "FontSelectionDialog")
	return ret
}

// Deprecated
//
// gtk_font_selection_dialog_new
//
// [ title ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFontSelectionDialog(title string) (result FontSelectionDialog) {
	iv, err := _I.Get(1031, "FontSelectionDialog", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_title}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_get_cancel_button
//
// [ result ] trans: nothing
//
func (v FontSelectionDialog) GetCancelButton() (result Widget) {
	iv, err := _I.Get(1032, "FontSelectionDialog", "get_cancel_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_get_font_name
//
// [ result ] trans: everything
//
func (v FontSelectionDialog) GetFontName() (result string) {
	iv, err := _I.Get(1033, "FontSelectionDialog", "get_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_get_font_selection
//
// [ result ] trans: nothing
//
func (v FontSelectionDialog) GetFontSelection() (result Widget) {
	iv, err := _I.Get(1034, "FontSelectionDialog", "get_font_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_get_ok_button
//
// [ result ] trans: nothing
//
func (v FontSelectionDialog) GetOkButton() (result Widget) {
	iv, err := _I.Get(1035, "FontSelectionDialog", "get_ok_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_get_preview_text
//
// [ result ] trans: nothing
//
func (v FontSelectionDialog) GetPreviewText() (result string) {
	iv, err := _I.Get(1036, "FontSelectionDialog", "get_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_set_font_name
//
// [ fontname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FontSelectionDialog) SetFontName(fontname string) (result bool) {
	iv, err := _I.Get(1037, "FontSelectionDialog", "set_font_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fontname := gi.CString(fontname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_fontname := gi.NewStringArgument(c_fontname)
	args := []gi.Argument{arg_v, arg_fontname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_fontname)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_font_selection_dialog_set_preview_text
//
// [ text ] trans: nothing
//
func (v FontSelectionDialog) SetPreviewText(text string) {
	iv, err := _I.Get(1038, "FontSelectionDialog", "set_preview_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// ignore GType struct FontSelectionDialogClass

// Struct FontSelectionDialogPrivate
type FontSelectionDialogPrivate struct {
	P unsafe.Pointer
}

func FontSelectionDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(214, "FontSelectionDialogPrivate")
	return ret
}

// Struct FontSelectionPrivate
type FontSelectionPrivate struct {
	P unsafe.Pointer
}

func FontSelectionPrivateGetType() gi.GType {
	ret := _I.GetGType(215, "FontSelectionPrivate")
	return ret
}

// Object Frame
type Frame struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapFrame(p unsafe.Pointer) (r Frame) { r.P = p; return }

type IFrame interface{ P_Frame() unsafe.Pointer }

func (v Frame) P_Frame() unsafe.Pointer            { return v.P }
func (v Frame) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Frame) P_Buildable() unsafe.Pointer        { return v.P }
func FrameGetType() gi.GType {
	ret := _I.GetGType(216, "Frame")
	return ret
}

// gtk_frame_new
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewFrame(label string) (result Frame) {
	iv, err := _I.Get(1039, "Frame", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_frame_get_label
//
// [ result ] trans: nothing
//
func (v Frame) GetLabel() (result string) {
	iv, err := _I.Get(1040, "Frame", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_frame_get_label_align
//
// [ xalign ] trans: everything, dir: out
//
// [ yalign ] trans: everything, dir: out
//
func (v Frame) GetLabelAlign() (xalign float32, yalign float32) {
	iv, err := _I.Get(1041, "Frame", "get_label_align")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_yalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, &outArgs[0])
	xalign = outArgs[0].Float()
	yalign = outArgs[1].Float()
	return
}

// gtk_frame_get_label_widget
//
// [ result ] trans: nothing
//
func (v Frame) GetLabelWidget() (result Widget) {
	iv, err := _I.Get(1042, "Frame", "get_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_frame_get_shadow_type
//
// [ result ] trans: nothing
//
func (v Frame) GetShadowType() (result ShadowTypeEnum) {
	iv, err := _I.Get(1043, "Frame", "get_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ShadowTypeEnum(ret.Int())
	return
}

// gtk_frame_set_label
//
// [ label ] trans: nothing
//
func (v Frame) SetLabel(label string) {
	iv, err := _I.Get(1044, "Frame", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_frame_set_label_align
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
func (v Frame) SetLabelAlign(xalign float32, yalign float32) {
	iv, err := _I.Get(1045, "Frame", "set_label_align")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, nil)
}

// gtk_frame_set_label_widget
//
// [ label_widget ] trans: nothing
//
func (v Frame) SetLabelWidget(label_widget IWidget) {
	iv, err := _I.Get(1046, "Frame", "set_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label_widget != nil {
		tmp = label_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label_widget}
	iv.Call(args, nil, nil)
}

// gtk_frame_set_shadow_type
//
// [ type1 ] trans: nothing
//
func (v Frame) SetShadowType(type1 ShadowTypeEnum) {
	iv, err := _I.Get(1047, "Frame", "set_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// Object FrameAccessible
type FrameAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapFrameAccessible(p unsafe.Pointer) (r FrameAccessible) { r.P = p; return }

type IFrameAccessible interface{ P_FrameAccessible() unsafe.Pointer }

func (v FrameAccessible) P_FrameAccessible() unsafe.Pointer { return v.P }
func (v FrameAccessible) P_Component() unsafe.Pointer       { return v.P }
func FrameAccessibleGetType() gi.GType {
	ret := _I.GetGType(217, "FrameAccessible")
	return ret
}

// ignore GType struct FrameAccessibleClass

// Struct FrameAccessiblePrivate
type FrameAccessiblePrivate struct {
	P unsafe.Pointer
}

func FrameAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(218, "FrameAccessiblePrivate")
	return ret
}

// ignore GType struct FrameClass

// Struct FramePrivate
type FramePrivate struct {
	P unsafe.Pointer
}

func FramePrivateGetType() gi.GType {
	ret := _I.GetGType(219, "FramePrivate")
	return ret
}

// Object GLArea
type GLArea struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapGLArea(p unsafe.Pointer) (r GLArea) { r.P = p; return }

type IGLArea interface{ P_GLArea() unsafe.Pointer }

func (v GLArea) P_GLArea() unsafe.Pointer           { return v.P }
func (v GLArea) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v GLArea) P_Buildable() unsafe.Pointer        { return v.P }
func GLAreaGetType() gi.GType {
	ret := _I.GetGType(220, "GLArea")
	return ret
}

// gtk_gl_area_new
//
// [ result ] trans: nothing
//
func NewGLArea() (result GLArea) {
	iv, err := _I.Get(1048, "GLArea", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gl_area_attach_buffers
//
func (v GLArea) AttachBuffers() {
	iv, err := _I.Get(1049, "GLArea", "attach_buffers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_get_auto_render
//
// [ result ] trans: nothing
//
func (v GLArea) GetAutoRender() (result bool) {
	iv, err := _I.Get(1050, "GLArea", "get_auto_render")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gl_area_get_context
//
// [ result ] trans: nothing
//
func (v GLArea) GetContext() (result gdk.GLContext) {
	iv, err := _I.Get(1051, "GLArea", "get_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gl_area_get_error
//
// [ result ] trans: nothing
//
func (v GLArea) GetError() (result g.Error) {
	iv, err := _I.Get(1052, "GLArea", "get_error")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gl_area_get_has_alpha
//
// [ result ] trans: nothing
//
func (v GLArea) GetHasAlpha() (result bool) {
	iv, err := _I.Get(1053, "GLArea", "get_has_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gl_area_get_has_depth_buffer
//
// [ result ] trans: nothing
//
func (v GLArea) GetHasDepthBuffer() (result bool) {
	iv, err := _I.Get(1054, "GLArea", "get_has_depth_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gl_area_get_has_stencil_buffer
//
// [ result ] trans: nothing
//
func (v GLArea) GetHasStencilBuffer() (result bool) {
	iv, err := _I.Get(1055, "GLArea", "get_has_stencil_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gl_area_get_required_version
//
// [ major ] trans: everything, dir: out
//
// [ minor ] trans: everything, dir: out
//
func (v GLArea) GetRequiredVersion() (major int32, minor int32) {
	iv, err := _I.Get(1056, "GLArea", "get_required_version")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_major := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_minor := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_major, arg_minor}
	iv.Call(args, nil, &outArgs[0])
	major = outArgs[0].Int32()
	minor = outArgs[1].Int32()
	return
}

// gtk_gl_area_get_use_es
//
// [ result ] trans: nothing
//
func (v GLArea) GetUseEs() (result bool) {
	iv, err := _I.Get(1057, "GLArea", "get_use_es")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gl_area_make_current
//
func (v GLArea) MakeCurrent() {
	iv, err := _I.Get(1058, "GLArea", "make_current")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_queue_render
//
func (v GLArea) QueueRender() {
	iv, err := _I.Get(1059, "GLArea", "queue_render")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_auto_render
//
// [ auto_render ] trans: nothing
//
func (v GLArea) SetAutoRender(auto_render bool) {
	iv, err := _I.Get(1060, "GLArea", "set_auto_render")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_auto_render := gi.NewBoolArgument(auto_render)
	args := []gi.Argument{arg_v, arg_auto_render}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_error
//
// [ error ] trans: nothing
//
func (v GLArea) SetError(error g.Error) {
	iv, err := _I.Get(1061, "GLArea", "set_error")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_v, arg_error}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_has_alpha
//
// [ has_alpha ] trans: nothing
//
func (v GLArea) SetHasAlpha(has_alpha bool) {
	iv, err := _I.Get(1062, "GLArea", "set_has_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_alpha := gi.NewBoolArgument(has_alpha)
	args := []gi.Argument{arg_v, arg_has_alpha}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_has_depth_buffer
//
// [ has_depth_buffer ] trans: nothing
//
func (v GLArea) SetHasDepthBuffer(has_depth_buffer bool) {
	iv, err := _I.Get(1063, "GLArea", "set_has_depth_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_depth_buffer := gi.NewBoolArgument(has_depth_buffer)
	args := []gi.Argument{arg_v, arg_has_depth_buffer}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_has_stencil_buffer
//
// [ has_stencil_buffer ] trans: nothing
//
func (v GLArea) SetHasStencilBuffer(has_stencil_buffer bool) {
	iv, err := _I.Get(1064, "GLArea", "set_has_stencil_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_stencil_buffer := gi.NewBoolArgument(has_stencil_buffer)
	args := []gi.Argument{arg_v, arg_has_stencil_buffer}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_required_version
//
// [ major ] trans: nothing
//
// [ minor ] trans: nothing
//
func (v GLArea) SetRequiredVersion(major int32, minor int32) {
	iv, err := _I.Get(1065, "GLArea", "set_required_version")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_major := gi.NewInt32Argument(major)
	arg_minor := gi.NewInt32Argument(minor)
	args := []gi.Argument{arg_v, arg_major, arg_minor}
	iv.Call(args, nil, nil)
}

// gtk_gl_area_set_use_es
//
// [ use_es ] trans: nothing
//
func (v GLArea) SetUseEs(use_es bool) {
	iv, err := _I.Get(1066, "GLArea", "set_use_es")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_es := gi.NewBoolArgument(use_es)
	args := []gi.Argument{arg_v, arg_use_es}
	iv.Call(args, nil, nil)
}

// ignore GType struct GLAreaClass

// Object Gesture
type Gesture struct {
	EventController
}

func WrapGesture(p unsafe.Pointer) (r Gesture) { r.P = p; return }

type IGesture interface{ P_Gesture() unsafe.Pointer }

func (v Gesture) P_Gesture() unsafe.Pointer { return v.P }
func GestureGetType() gi.GType {
	ret := _I.GetGType(221, "Gesture")
	return ret
}

// gtk_gesture_get_bounding_box
//
// [ rect ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Gesture) GetBoundingBox(rect gdk.Rectangle) (result bool) {
	iv, err := _I.Get(1067, "Gesture", "get_bounding_box")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_get_bounding_box_center
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Gesture) GetBoundingBoxCenter() (result bool, x float64, y float64) {
	iv, err := _I.Get(1068, "Gesture", "get_bounding_box_center")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	x = outArgs[0].Double()
	y = outArgs[1].Double()
	result = ret.Bool()
	return
}

// gtk_gesture_get_device
//
// [ result ] trans: nothing
//
func (v Gesture) GetDevice() (result gdk.Device) {
	iv, err := _I.Get(1069, "Gesture", "get_device")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_get_group
//
// [ result ] trans: container
//
func (v Gesture) GetGroup() (result g.List) {
	iv, err := _I.Get(1070, "Gesture", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_get_last_event
//
// [ sequence ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) GetLastEvent(sequence gdk.EventSequence) (result gdk.Event) {
	iv, err := _I.Get(1071, "Gesture", "get_last_event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sequence := gi.NewPointerArgument(sequence.P)
	args := []gi.Argument{arg_v, arg_sequence}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_get_last_updated_sequence
//
// [ result ] trans: nothing
//
func (v Gesture) GetLastUpdatedSequence() (result gdk.EventSequence) {
	iv, err := _I.Get(1072, "Gesture", "get_last_updated_sequence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_get_point
//
// [ sequence ] trans: nothing
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Gesture) GetPoint(sequence gdk.EventSequence) (result bool, x float64, y float64) {
	iv, err := _I.Get(1073, "Gesture", "get_point")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_sequence := gi.NewPointerArgument(sequence.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_sequence, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	x = outArgs[0].Double()
	y = outArgs[1].Double()
	result = ret.Bool()
	return
}

// gtk_gesture_get_sequence_state
//
// [ sequence ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) GetSequenceState(sequence gdk.EventSequence) (result EventSequenceStateEnum) {
	iv, err := _I.Get(1074, "Gesture", "get_sequence_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sequence := gi.NewPointerArgument(sequence.P)
	args := []gi.Argument{arg_v, arg_sequence}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = EventSequenceStateEnum(ret.Int())
	return
}

// gtk_gesture_get_sequences
//
// [ result ] trans: container
//
func (v Gesture) GetSequences() (result g.List) {
	iv, err := _I.Get(1075, "Gesture", "get_sequences")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_get_window
//
// [ result ] trans: nothing
//
func (v Gesture) GetWindow() (result gdk.Window) {
	iv, err := _I.Get(1076, "Gesture", "get_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_group
//
// [ gesture ] trans: nothing
//
func (v Gesture) Group(gesture IGesture) {
	iv, err := _I.Get(1077, "Gesture", "group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if gesture != nil {
		tmp = gesture.P_Gesture()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_gesture := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_gesture}
	iv.Call(args, nil, nil)
}

// gtk_gesture_handles_sequence
//
// [ sequence ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) HandlesSequence(sequence gdk.EventSequence) (result bool) {
	iv, err := _I.Get(1078, "Gesture", "handles_sequence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sequence := gi.NewPointerArgument(sequence.P)
	args := []gi.Argument{arg_v, arg_sequence}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_is_active
//
// [ result ] trans: nothing
//
func (v Gesture) IsActive() (result bool) {
	iv, err := _I.Get(1079, "Gesture", "is_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_is_grouped_with
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) IsGroupedWith(other IGesture) (result bool) {
	iv, err := _I.Get(1080, "Gesture", "is_grouped_with")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if other != nil {
		tmp = other.P_Gesture()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_is_recognized
//
// [ result ] trans: nothing
//
func (v Gesture) IsRecognized() (result bool) {
	iv, err := _I.Get(1081, "Gesture", "is_recognized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_set_sequence_state
//
// [ sequence ] trans: nothing
//
// [ state ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) SetSequenceState(sequence gdk.EventSequence, state EventSequenceStateEnum) (result bool) {
	iv, err := _I.Get(1082, "Gesture", "set_sequence_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sequence := gi.NewPointerArgument(sequence.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_sequence, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_set_state
//
// [ state ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Gesture) SetState(state EventSequenceStateEnum) (result bool) {
	iv, err := _I.Get(1083, "Gesture", "set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_set_window
//
// [ window ] trans: nothing
//
func (v Gesture) SetWindow(window gdk.IWindow) {
	iv, err := _I.Get(1084, "Gesture", "set_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_gesture_ungroup
//
func (v Gesture) Ungroup() {
	iv, err := _I.Get(1085, "Gesture", "ungroup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct GestureClass

// Object GestureDrag
type GestureDrag struct {
	GestureSingle
}

func WrapGestureDrag(p unsafe.Pointer) (r GestureDrag) { r.P = p; return }

type IGestureDrag interface{ P_GestureDrag() unsafe.Pointer }

func (v GestureDrag) P_GestureDrag() unsafe.Pointer { return v.P }
func GestureDragGetType() gi.GType {
	ret := _I.GetGType(222, "GestureDrag")
	return ret
}

// gtk_gesture_drag_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureDrag(widget IWidget) (result GestureDrag) {
	iv, err := _I.Get(1086, "GestureDrag", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_drag_get_offset
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v GestureDrag) GetOffset() (result bool, x float64, y float64) {
	iv, err := _I.Get(1087, "GestureDrag", "get_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	x = outArgs[0].Double()
	y = outArgs[1].Double()
	result = ret.Bool()
	return
}

// gtk_gesture_drag_get_start_point
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v GestureDrag) GetStartPoint() (result bool, x float64, y float64) {
	iv, err := _I.Get(1088, "GestureDrag", "get_start_point")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	x = outArgs[0].Double()
	y = outArgs[1].Double()
	result = ret.Bool()
	return
}

// ignore GType struct GestureDragClass

// Object GestureLongPress
type GestureLongPress struct {
	GestureSingle
}

func WrapGestureLongPress(p unsafe.Pointer) (r GestureLongPress) { r.P = p; return }

type IGestureLongPress interface{ P_GestureLongPress() unsafe.Pointer }

func (v GestureLongPress) P_GestureLongPress() unsafe.Pointer { return v.P }
func GestureLongPressGetType() gi.GType {
	ret := _I.GetGType(223, "GestureLongPress")
	return ret
}

// gtk_gesture_long_press_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureLongPress(widget IWidget) (result GestureLongPress) {
	iv, err := _I.Get(1089, "GestureLongPress", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct GestureLongPressClass

// Object GestureMultiPress
type GestureMultiPress struct {
	GestureSingle
}

func WrapGestureMultiPress(p unsafe.Pointer) (r GestureMultiPress) { r.P = p; return }

type IGestureMultiPress interface{ P_GestureMultiPress() unsafe.Pointer }

func (v GestureMultiPress) P_GestureMultiPress() unsafe.Pointer { return v.P }
func GestureMultiPressGetType() gi.GType {
	ret := _I.GetGType(224, "GestureMultiPress")
	return ret
}

// gtk_gesture_multi_press_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureMultiPress(widget IWidget) (result GestureMultiPress) {
	iv, err := _I.Get(1090, "GestureMultiPress", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_multi_press_get_area
//
// [ rect ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v GestureMultiPress) GetArea(rect gdk.Rectangle) (result bool) {
	iv, err := _I.Get(1091, "GestureMultiPress", "get_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_multi_press_set_area
//
// [ rect ] trans: nothing
//
func (v GestureMultiPress) SetArea(rect gdk.Rectangle) {
	iv, err := _I.Get(1092, "GestureMultiPress", "set_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	iv.Call(args, nil, nil)
}

// ignore GType struct GestureMultiPressClass

// Object GesturePan
type GesturePan struct {
	GestureDrag
}

func WrapGesturePan(p unsafe.Pointer) (r GesturePan) { r.P = p; return }

type IGesturePan interface{ P_GesturePan() unsafe.Pointer }

func (v GesturePan) P_GesturePan() unsafe.Pointer { return v.P }
func GesturePanGetType() gi.GType {
	ret := _I.GetGType(225, "GesturePan")
	return ret
}

// gtk_gesture_pan_new
//
// [ widget ] trans: nothing
//
// [ orientation ] trans: nothing
//
// [ result ] trans: everything
//
func NewGesturePan(widget IWidget, orientation OrientationEnum) (result GesturePan) {
	iv, err := _I.Get(1093, "GesturePan", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_widget, arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_pan_get_orientation
//
// [ result ] trans: nothing
//
func (v GesturePan) GetOrientation() (result OrientationEnum) {
	iv, err := _I.Get(1094, "GesturePan", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_gesture_pan_set_orientation
//
// [ orientation ] trans: nothing
//
func (v GesturePan) SetOrientation(orientation OrientationEnum) {
	iv, err := _I.Get(1095, "GesturePan", "set_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	iv.Call(args, nil, nil)
}

// ignore GType struct GesturePanClass

// Object GestureRotate
type GestureRotate struct {
	Gesture
}

func WrapGestureRotate(p unsafe.Pointer) (r GestureRotate) { r.P = p; return }

type IGestureRotate interface{ P_GestureRotate() unsafe.Pointer }

func (v GestureRotate) P_GestureRotate() unsafe.Pointer { return v.P }
func GestureRotateGetType() gi.GType {
	ret := _I.GetGType(226, "GestureRotate")
	return ret
}

// gtk_gesture_rotate_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureRotate(widget IWidget) (result GestureRotate) {
	iv, err := _I.Get(1096, "GestureRotate", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_rotate_get_angle_delta
//
// [ result ] trans: nothing
//
func (v GestureRotate) GetAngleDelta() (result float64) {
	iv, err := _I.Get(1097, "GestureRotate", "get_angle_delta")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// ignore GType struct GestureRotateClass

// Object GestureSingle
type GestureSingle struct {
	Gesture
}

func WrapGestureSingle(p unsafe.Pointer) (r GestureSingle) { r.P = p; return }

type IGestureSingle interface{ P_GestureSingle() unsafe.Pointer }

func (v GestureSingle) P_GestureSingle() unsafe.Pointer { return v.P }
func GestureSingleGetType() gi.GType {
	ret := _I.GetGType(227, "GestureSingle")
	return ret
}

// gtk_gesture_single_get_button
//
// [ result ] trans: nothing
//
func (v GestureSingle) GetButton() (result uint32) {
	iv, err := _I.Get(1098, "GestureSingle", "get_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_gesture_single_get_current_button
//
// [ result ] trans: nothing
//
func (v GestureSingle) GetCurrentButton() (result uint32) {
	iv, err := _I.Get(1099, "GestureSingle", "get_current_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_gesture_single_get_current_sequence
//
// [ result ] trans: everything
//
func (v GestureSingle) GetCurrentSequence() (result gdk.EventSequence) {
	iv, err := _I.Get(1100, "GestureSingle", "get_current_sequence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_single_get_exclusive
//
// [ result ] trans: nothing
//
func (v GestureSingle) GetExclusive() (result bool) {
	iv, err := _I.Get(1101, "GestureSingle", "get_exclusive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_single_get_touch_only
//
// [ result ] trans: nothing
//
func (v GestureSingle) GetTouchOnly() (result bool) {
	iv, err := _I.Get(1102, "GestureSingle", "get_touch_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_gesture_single_set_button
//
// [ button ] trans: nothing
//
func (v GestureSingle) SetButton(button uint32) {
	iv, err := _I.Get(1103, "GestureSingle", "set_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_button := gi.NewUint32Argument(button)
	args := []gi.Argument{arg_v, arg_button}
	iv.Call(args, nil, nil)
}

// gtk_gesture_single_set_exclusive
//
// [ exclusive ] trans: nothing
//
func (v GestureSingle) SetExclusive(exclusive bool) {
	iv, err := _I.Get(1104, "GestureSingle", "set_exclusive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_exclusive := gi.NewBoolArgument(exclusive)
	args := []gi.Argument{arg_v, arg_exclusive}
	iv.Call(args, nil, nil)
}

// gtk_gesture_single_set_touch_only
//
// [ touch_only ] trans: nothing
//
func (v GestureSingle) SetTouchOnly(touch_only bool) {
	iv, err := _I.Get(1105, "GestureSingle", "set_touch_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_touch_only := gi.NewBoolArgument(touch_only)
	args := []gi.Argument{arg_v, arg_touch_only}
	iv.Call(args, nil, nil)
}

// ignore GType struct GestureSingleClass

// Object GestureStylus
type GestureStylus struct {
	GestureSingle
}

func WrapGestureStylus(p unsafe.Pointer) (r GestureStylus) { r.P = p; return }

type IGestureStylus interface{ P_GestureStylus() unsafe.Pointer }

func (v GestureStylus) P_GestureStylus() unsafe.Pointer { return v.P }
func GestureStylusGetType() gi.GType {
	ret := _I.GetGType(228, "GestureStylus")
	return ret
}

// gtk_gesture_stylus_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureStylus(widget IWidget) (result GestureStylus) {
	iv, err := _I.Get(1106, "GestureStylus", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_stylus_get_axes
//
// [ axes ] trans: nothing
//
// [ values ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v GestureStylus) GetAxes(axes unsafe.Pointer) (result bool, values gi.DoubleArray) {
	iv, err := _I.Get(1107, "GestureStylus", "get_axes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_axes := gi.NewPointerArgument(axes)
	arg_values := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_axes, arg_values}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	values.P = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// gtk_gesture_stylus_get_axis
//
// [ axis ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v GestureStylus) GetAxis(axis gdk.AxisUseEnum) (result bool, value float64) {
	iv, err := _I.Get(1108, "GestureStylus", "get_axis")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_axis := gi.NewIntArgument(int(axis))
	arg_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_axis, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	value = outArgs[0].Double()
	result = ret.Bool()
	return
}

// gtk_gesture_stylus_get_device_tool
//
// [ result ] trans: nothing
//
func (v GestureStylus) GetDeviceTool() (result gdk.DeviceTool) {
	iv, err := _I.Get(1109, "GestureStylus", "get_device_tool")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct GestureStylusClass

// Object GestureSwipe
type GestureSwipe struct {
	GestureSingle
}

func WrapGestureSwipe(p unsafe.Pointer) (r GestureSwipe) { r.P = p; return }

type IGestureSwipe interface{ P_GestureSwipe() unsafe.Pointer }

func (v GestureSwipe) P_GestureSwipe() unsafe.Pointer { return v.P }
func GestureSwipeGetType() gi.GType {
	ret := _I.GetGType(229, "GestureSwipe")
	return ret
}

// gtk_gesture_swipe_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureSwipe(widget IWidget) (result GestureSwipe) {
	iv, err := _I.Get(1110, "GestureSwipe", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_swipe_get_velocity
//
// [ velocity_x ] trans: everything, dir: out
//
// [ velocity_y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v GestureSwipe) GetVelocity() (result bool, velocity_x float64, velocity_y float64) {
	iv, err := _I.Get(1111, "GestureSwipe", "get_velocity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_velocity_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_velocity_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_velocity_x, arg_velocity_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	velocity_x = outArgs[0].Double()
	velocity_y = outArgs[1].Double()
	result = ret.Bool()
	return
}

// ignore GType struct GestureSwipeClass

// Object GestureZoom
type GestureZoom struct {
	Gesture
}

func WrapGestureZoom(p unsafe.Pointer) (r GestureZoom) { r.P = p; return }

type IGestureZoom interface{ P_GestureZoom() unsafe.Pointer }

func (v GestureZoom) P_GestureZoom() unsafe.Pointer { return v.P }
func GestureZoomGetType() gi.GType {
	ret := _I.GetGType(230, "GestureZoom")
	return ret
}

// gtk_gesture_zoom_new
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func NewGestureZoom(widget IWidget) (result GestureZoom) {
	iv, err := _I.Get(1112, "GestureZoom", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_gesture_zoom_get_scale_delta
//
// [ result ] trans: nothing
//
func (v GestureZoom) GetScaleDelta() (result float64) {
	iv, err := _I.Get(1113, "GestureZoom", "get_scale_delta")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// ignore GType struct GestureZoomClass

// Struct Gradient
type Gradient struct {
	P unsafe.Pointer
}

func GradientGetType() gi.GType {
	ret := _I.GetGType(231, "Gradient")
	return ret
}

// Deprecated
//
// gtk_gradient_new_linear
//
// [ x0 ] trans: nothing
//
// [ y0 ] trans: nothing
//
// [ x1 ] trans: nothing
//
// [ y1 ] trans: nothing
//
// [ result ] trans: everything
//
func NewGradientLinear(x0 float64, y0 float64, x1 float64, y1 float64) (result Gradient) {
	iv, err := _I.Get(1114, "Gradient", "new_linear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_x0 := gi.NewDoubleArgument(x0)
	arg_y0 := gi.NewDoubleArgument(y0)
	arg_x1 := gi.NewDoubleArgument(x1)
	arg_y1 := gi.NewDoubleArgument(y1)
	args := []gi.Argument{arg_x0, arg_y0, arg_x1, arg_y1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_gradient_new_radial
//
// [ x0 ] trans: nothing
//
// [ y0 ] trans: nothing
//
// [ radius0 ] trans: nothing
//
// [ x1 ] trans: nothing
//
// [ y1 ] trans: nothing
//
// [ radius1 ] trans: nothing
//
// [ result ] trans: everything
//
func NewGradientRadial(x0 float64, y0 float64, radius0 float64, x1 float64, y1 float64, radius1 float64) (result Gradient) {
	iv, err := _I.Get(1115, "Gradient", "new_radial")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_x0 := gi.NewDoubleArgument(x0)
	arg_y0 := gi.NewDoubleArgument(y0)
	arg_radius0 := gi.NewDoubleArgument(radius0)
	arg_x1 := gi.NewDoubleArgument(x1)
	arg_y1 := gi.NewDoubleArgument(y1)
	arg_radius1 := gi.NewDoubleArgument(radius1)
	args := []gi.Argument{arg_x0, arg_y0, arg_radius0, arg_x1, arg_y1, arg_radius1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_gradient_add_color_stop
//
// [ offset ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Gradient) AddColorStop(offset float64, color SymbolicColor) {
	iv, err := _I.Get(1116, "Gradient", "add_color_stop")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_offset := gi.NewDoubleArgument(offset)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_offset, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_gradient_ref
//
// [ result ] trans: everything
//
func (v Gradient) Ref() (result Gradient) {
	iv, err := _I.Get(1117, "Gradient", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_gradient_resolve
//
// [ props ] trans: nothing
//
// [ resolved_gradient ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Gradient) Resolve(props IStyleProperties) (result bool, resolved_gradient cairo.Pattern) {
	iv, err := _I.Get(1118, "Gradient", "resolve")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if props != nil {
		tmp = props.P_StyleProperties()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_props := gi.NewPointerArgument(tmp)
	arg_resolved_gradient := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_props, arg_resolved_gradient}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	resolved_gradient.P = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// gtk_gradient_resolve_for_context
//
// [ context ] trans: nothing
//
// [ result ] trans: everything
//
func (v Gradient) ResolveForContext(context IStyleContext) (result cairo.Pattern) {
	iv, err := _I.Get(1119, "Gradient", "resolve_for_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_gradient_to_string
//
// [ result ] trans: everything
//
func (v Gradient) ToString() (result string) {
	iv, err := _I.Get(1120, "Gradient", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_gradient_unref
//
func (v Gradient) Unref() {
	iv, err := _I.Get(1121, "Gradient", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object Grid
type Grid struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Container
}

func WrapGrid(p unsafe.Pointer) (r Grid) { r.P = p; return }

type IGrid interface{ P_Grid() unsafe.Pointer }

func (v Grid) P_Grid() unsafe.Pointer             { return v.P }
func (v Grid) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Grid) P_Buildable() unsafe.Pointer        { return v.P }
func (v Grid) P_Orientable() unsafe.Pointer       { return v.P }
func GridGetType() gi.GType {
	ret := _I.GetGType(232, "Grid")
	return ret
}

// gtk_grid_new
//
// [ result ] trans: nothing
//
func NewGrid() (result Grid) {
	iv, err := _I.Get(1122, "Grid", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_grid_attach
//
// [ child ] trans: nothing
//
// [ left ] trans: nothing
//
// [ top ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Grid) Attach(child IWidget, left int32, top int32, width int32, height int32) {
	iv, err := _I.Get(1123, "Grid", "attach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_left := gi.NewInt32Argument(left)
	arg_top := gi.NewInt32Argument(top)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_child, arg_left, arg_top, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_grid_attach_next_to
//
// [ child ] trans: nothing
//
// [ sibling ] trans: nothing
//
// [ side ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Grid) AttachNextTo(child IWidget, sibling IWidget, side PositionTypeEnum, width int32, height int32) {
	iv, err := _I.Get(1124, "Grid", "attach_next_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if sibling != nil {
		tmp1 = sibling.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_sibling := gi.NewPointerArgument(tmp1)
	arg_side := gi.NewIntArgument(int(side))
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_child, arg_sibling, arg_side, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_grid_get_baseline_row
//
// [ result ] trans: nothing
//
func (v Grid) GetBaselineRow() (result int32) {
	iv, err := _I.Get(1125, "Grid", "get_baseline_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_grid_get_child_at
//
// [ left ] trans: nothing
//
// [ top ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Grid) GetChildAt(left int32, top int32) (result Widget) {
	iv, err := _I.Get(1126, "Grid", "get_child_at")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_left := gi.NewInt32Argument(left)
	arg_top := gi.NewInt32Argument(top)
	args := []gi.Argument{arg_v, arg_left, arg_top}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_grid_get_column_homogeneous
//
// [ result ] trans: nothing
//
func (v Grid) GetColumnHomogeneous() (result bool) {
	iv, err := _I.Get(1127, "Grid", "get_column_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_grid_get_column_spacing
//
// [ result ] trans: nothing
//
func (v Grid) GetColumnSpacing() (result uint32) {
	iv, err := _I.Get(1128, "Grid", "get_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_grid_get_row_baseline_position
//
// [ row ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Grid) GetRowBaselinePosition(row int32) (result BaselinePositionEnum) {
	iv, err := _I.Get(1129, "Grid", "get_row_baseline_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewInt32Argument(row)
	args := []gi.Argument{arg_v, arg_row}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = BaselinePositionEnum(ret.Int())
	return
}

// gtk_grid_get_row_homogeneous
//
// [ result ] trans: nothing
//
func (v Grid) GetRowHomogeneous() (result bool) {
	iv, err := _I.Get(1130, "Grid", "get_row_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_grid_get_row_spacing
//
// [ result ] trans: nothing
//
func (v Grid) GetRowSpacing() (result uint32) {
	iv, err := _I.Get(1131, "Grid", "get_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_grid_insert_column
//
// [ position ] trans: nothing
//
func (v Grid) InsertColumn(position int32) {
	iv, err := _I.Get(1132, "Grid", "insert_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_grid_insert_next_to
//
// [ sibling ] trans: nothing
//
// [ side ] trans: nothing
//
func (v Grid) InsertNextTo(sibling IWidget, side PositionTypeEnum) {
	iv, err := _I.Get(1133, "Grid", "insert_next_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if sibling != nil {
		tmp = sibling.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sibling := gi.NewPointerArgument(tmp)
	arg_side := gi.NewIntArgument(int(side))
	args := []gi.Argument{arg_v, arg_sibling, arg_side}
	iv.Call(args, nil, nil)
}

// gtk_grid_insert_row
//
// [ position ] trans: nothing
//
func (v Grid) InsertRow(position int32) {
	iv, err := _I.Get(1134, "Grid", "insert_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_grid_remove_column
//
// [ position ] trans: nothing
//
func (v Grid) RemoveColumn(position int32) {
	iv, err := _I.Get(1135, "Grid", "remove_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_grid_remove_row
//
// [ position ] trans: nothing
//
func (v Grid) RemoveRow(position int32) {
	iv, err := _I.Get(1136, "Grid", "remove_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_baseline_row
//
// [ row ] trans: nothing
//
func (v Grid) SetBaselineRow(row int32) {
	iv, err := _I.Get(1137, "Grid", "set_baseline_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewInt32Argument(row)
	args := []gi.Argument{arg_v, arg_row}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_column_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v Grid) SetColumnHomogeneous(homogeneous bool) {
	iv, err := _I.Get(1138, "Grid", "set_column_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_column_spacing
//
// [ spacing ] trans: nothing
//
func (v Grid) SetColumnSpacing(spacing uint32) {
	iv, err := _I.Get(1139, "Grid", "set_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_row_baseline_position
//
// [ row ] trans: nothing
//
// [ pos ] trans: nothing
//
func (v Grid) SetRowBaselinePosition(row int32, pos BaselinePositionEnum) {
	iv, err := _I.Get(1140, "Grid", "set_row_baseline_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewInt32Argument(row)
	arg_pos := gi.NewIntArgument(int(pos))
	args := []gi.Argument{arg_v, arg_row, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_row_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v Grid) SetRowHomogeneous(homogeneous bool) {
	iv, err := _I.Get(1141, "Grid", "set_row_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_grid_set_row_spacing
//
// [ spacing ] trans: nothing
//
func (v Grid) SetRowSpacing(spacing uint32) {
	iv, err := _I.Get(1142, "Grid", "set_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// ignore GType struct GridClass

// Struct GridPrivate
type GridPrivate struct {
	P unsafe.Pointer
}

func GridPrivateGetType() gi.GType {
	ret := _I.GetGType(233, "GridPrivate")
	return ret
}

// Object HBox
type HBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapHBox(p unsafe.Pointer) (r HBox) { r.P = p; return }

type IHBox interface{ P_HBox() unsafe.Pointer }

func (v HBox) P_HBox() unsafe.Pointer             { return v.P }
func (v HBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v HBox) P_Orientable() unsafe.Pointer       { return v.P }
func HBoxGetType() gi.GType {
	ret := _I.GetGType(234, "HBox")
	return ret
}

// Deprecated
//
// gtk_hbox_new
//
// [ homogeneous ] trans: nothing
//
// [ spacing ] trans: nothing
//
// [ result ] trans: nothing
//
func NewHBox(homogeneous bool, spacing int32) (result HBox) {
	iv, err := _I.Get(1143, "HBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_homogeneous, arg_spacing}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HBoxClass

// Object HButtonBox
type HButtonBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	ButtonBox
}

func WrapHButtonBox(p unsafe.Pointer) (r HButtonBox) { r.P = p; return }

type IHButtonBox interface{ P_HButtonBox() unsafe.Pointer }

func (v HButtonBox) P_HButtonBox() unsafe.Pointer       { return v.P }
func (v HButtonBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HButtonBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v HButtonBox) P_Orientable() unsafe.Pointer       { return v.P }
func HButtonBoxGetType() gi.GType {
	ret := _I.GetGType(235, "HButtonBox")
	return ret
}

// Deprecated
//
// gtk_hbutton_box_new
//
// [ result ] trans: nothing
//
func NewHButtonBox() (result HButtonBox) {
	iv, err := _I.Get(1144, "HButtonBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HButtonBoxClass

// Object HPaned
type HPaned struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Paned
}

func WrapHPaned(p unsafe.Pointer) (r HPaned) { r.P = p; return }

type IHPaned interface{ P_HPaned() unsafe.Pointer }

func (v HPaned) P_HPaned() unsafe.Pointer           { return v.P }
func (v HPaned) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HPaned) P_Buildable() unsafe.Pointer        { return v.P }
func (v HPaned) P_Orientable() unsafe.Pointer       { return v.P }
func HPanedGetType() gi.GType {
	ret := _I.GetGType(236, "HPaned")
	return ret
}

// Deprecated
//
// gtk_hpaned_new
//
// [ result ] trans: nothing
//
func NewHPaned() (result HPaned) {
	iv, err := _I.Get(1145, "HPaned", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HPanedClass

// Object HSV
type HSV struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapHSV(p unsafe.Pointer) (r HSV) { r.P = p; return }

type IHSV interface{ P_HSV() unsafe.Pointer }

func (v HSV) P_HSV() unsafe.Pointer              { return v.P }
func (v HSV) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HSV) P_Buildable() unsafe.Pointer        { return v.P }
func HSVGetType() gi.GType {
	ret := _I.GetGType(237, "HSV")
	return ret
}

// gtk_hsv_new
//
// [ result ] trans: nothing
//
func NewHSV() (result HSV) {
	iv, err := _I.Get(1146, "HSV", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_hsv_to_rgb
//
// [ h ] trans: nothing
//
// [ s ] trans: nothing
//
// [ v ] trans: nothing
//
// [ r ] trans: everything, dir: out
//
// [ g ] trans: everything, dir: out
//
// [ b ] trans: everything, dir: out
//
func HSVToRgb1(h float64, s float64, v float64) (r float64, g float64, b float64) {
	iv, err := _I.Get(1147, "HSV", "to_rgb")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_h := gi.NewDoubleArgument(h)
	arg_s := gi.NewDoubleArgument(s)
	arg_v := gi.NewDoubleArgument(v)
	arg_r := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_g := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_b := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_h, arg_s, arg_v, arg_r, arg_g, arg_b}
	iv.Call(args, nil, &outArgs[0])
	r = outArgs[0].Double()
	g = outArgs[1].Double()
	b = outArgs[2].Double()
	return
}

// gtk_hsv_get_color
//
// [ h ] trans: everything, dir: out
//
// [ s ] trans: everything, dir: out
//
// [ v1 ] trans: everything, dir: out
//
func (v HSV) GetColor() (h float64, s float64, v1 float64) {
	iv, err := _I.Get(1148, "HSV", "get_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_h := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_s := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_v1 := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_h, arg_s, arg_v1}
	iv.Call(args, nil, &outArgs[0])
	h = outArgs[0].Double()
	s = outArgs[1].Double()
	v1 = outArgs[2].Double()
	return
}

// gtk_hsv_get_metrics
//
// [ size ] trans: everything, dir: out
//
// [ ring_width ] trans: everything, dir: out
//
func (v HSV) GetMetrics() (size int32, ring_width int32) {
	iv, err := _I.Get(1149, "HSV", "get_metrics")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_ring_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_size, arg_ring_width}
	iv.Call(args, nil, &outArgs[0])
	size = outArgs[0].Int32()
	ring_width = outArgs[1].Int32()
	return
}

// gtk_hsv_is_adjusting
//
// [ result ] trans: nothing
//
func (v HSV) IsAdjusting() (result bool) {
	iv, err := _I.Get(1150, "HSV", "is_adjusting")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_hsv_set_color
//
// [ h ] trans: nothing
//
// [ s ] trans: nothing
//
// [ v1 ] trans: nothing
//
func (v HSV) SetColor(h float64, s float64, v1 float64) {
	iv, err := _I.Get(1151, "HSV", "set_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_h := gi.NewDoubleArgument(h)
	arg_s := gi.NewDoubleArgument(s)
	arg_v1 := gi.NewDoubleArgument(v1)
	args := []gi.Argument{arg_v, arg_h, arg_s, arg_v1}
	iv.Call(args, nil, nil)
}

// gtk_hsv_set_metrics
//
// [ size ] trans: nothing
//
// [ ring_width ] trans: nothing
//
func (v HSV) SetMetrics(size int32, ring_width int32) {
	iv, err := _I.Get(1152, "HSV", "set_metrics")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewInt32Argument(size)
	arg_ring_width := gi.NewInt32Argument(ring_width)
	args := []gi.Argument{arg_v, arg_size, arg_ring_width}
	iv.Call(args, nil, nil)
}

// ignore GType struct HSVClass

// Struct HSVPrivate
type HSVPrivate struct {
	P unsafe.Pointer
}

func HSVPrivateGetType() gi.GType {
	ret := _I.GetGType(238, "HSVPrivate")
	return ret
}

// Object HScale
type HScale struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Scale
}

func WrapHScale(p unsafe.Pointer) (r HScale) { r.P = p; return }

type IHScale interface{ P_HScale() unsafe.Pointer }

func (v HScale) P_HScale() unsafe.Pointer           { return v.P }
func (v HScale) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HScale) P_Buildable() unsafe.Pointer        { return v.P }
func (v HScale) P_Orientable() unsafe.Pointer       { return v.P }
func HScaleGetType() gi.GType {
	ret := _I.GetGType(239, "HScale")
	return ret
}

// Deprecated
//
// gtk_hscale_new
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewHScale(adjustment IAdjustment) (result HScale) {
	iv, err := _I.Get(1153, "HScale", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_hscale_new_with_range
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
// [ step ] trans: nothing
//
// [ result ] trans: nothing
//
func NewHScaleWithRange(min float64, max float64, step float64) (result HScale) {
	iv, err := _I.Get(1154, "HScale", "new_with_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	arg_step := gi.NewDoubleArgument(step)
	args := []gi.Argument{arg_min, arg_max, arg_step}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HScaleClass

// Object HScrollbar
type HScrollbar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Scrollbar
}

func WrapHScrollbar(p unsafe.Pointer) (r HScrollbar) { r.P = p; return }

type IHScrollbar interface{ P_HScrollbar() unsafe.Pointer }

func (v HScrollbar) P_HScrollbar() unsafe.Pointer       { return v.P }
func (v HScrollbar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HScrollbar) P_Buildable() unsafe.Pointer        { return v.P }
func (v HScrollbar) P_Orientable() unsafe.Pointer       { return v.P }
func HScrollbarGetType() gi.GType {
	ret := _I.GetGType(240, "HScrollbar")
	return ret
}

// Deprecated
//
// gtk_hscrollbar_new
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewHScrollbar(adjustment IAdjustment) (result HScrollbar) {
	iv, err := _I.Get(1155, "HScrollbar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HScrollbarClass

// Object HSeparator
type HSeparator struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Separator
}

func WrapHSeparator(p unsafe.Pointer) (r HSeparator) { r.P = p; return }

type IHSeparator interface{ P_HSeparator() unsafe.Pointer }

func (v HSeparator) P_HSeparator() unsafe.Pointer       { return v.P }
func (v HSeparator) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HSeparator) P_Buildable() unsafe.Pointer        { return v.P }
func (v HSeparator) P_Orientable() unsafe.Pointer       { return v.P }
func HSeparatorGetType() gi.GType {
	ret := _I.GetGType(241, "HSeparator")
	return ret
}

// Deprecated
//
// gtk_hseparator_new
//
// [ result ] trans: nothing
//
func NewHSeparator() (result HSeparator) {
	iv, err := _I.Get(1156, "HSeparator", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct HSeparatorClass

// Object HandleBox
type HandleBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapHandleBox(p unsafe.Pointer) (r HandleBox) { r.P = p; return }

type IHandleBox interface{ P_HandleBox() unsafe.Pointer }

func (v HandleBox) P_HandleBox() unsafe.Pointer        { return v.P }
func (v HandleBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HandleBox) P_Buildable() unsafe.Pointer        { return v.P }
func HandleBoxGetType() gi.GType {
	ret := _I.GetGType(242, "HandleBox")
	return ret
}

// Deprecated
//
// gtk_handle_box_new
//
// [ result ] trans: nothing
//
func NewHandleBox() (result HandleBox) {
	iv, err := _I.Get(1157, "HandleBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_handle_box_get_child_detached
//
// [ result ] trans: nothing
//
func (v HandleBox) GetChildDetached() (result bool) {
	iv, err := _I.Get(1158, "HandleBox", "get_child_detached")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_handle_box_get_handle_position
//
// [ result ] trans: nothing
//
func (v HandleBox) GetHandlePosition() (result PositionTypeEnum) {
	iv, err := _I.Get(1159, "HandleBox", "get_handle_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_handle_box_get_shadow_type
//
// [ result ] trans: nothing
//
func (v HandleBox) GetShadowType() (result ShadowTypeEnum) {
	iv, err := _I.Get(1160, "HandleBox", "get_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ShadowTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_handle_box_get_snap_edge
//
// [ result ] trans: nothing
//
func (v HandleBox) GetSnapEdge() (result PositionTypeEnum) {
	iv, err := _I.Get(1161, "HandleBox", "get_snap_edge")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_handle_box_set_handle_position
//
// [ position ] trans: nothing
//
func (v HandleBox) SetHandlePosition(position PositionTypeEnum) {
	iv, err := _I.Get(1162, "HandleBox", "set_handle_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewIntArgument(int(position))
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_handle_box_set_shadow_type
//
// [ type1 ] trans: nothing
//
func (v HandleBox) SetShadowType(type1 ShadowTypeEnum) {
	iv, err := _I.Get(1163, "HandleBox", "set_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_handle_box_set_snap_edge
//
// [ edge ] trans: nothing
//
func (v HandleBox) SetSnapEdge(edge PositionTypeEnum) {
	iv, err := _I.Get(1164, "HandleBox", "set_snap_edge")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_edge := gi.NewIntArgument(int(edge))
	args := []gi.Argument{arg_v, arg_edge}
	iv.Call(args, nil, nil)
}

// ignore GType struct HandleBoxClass

// Struct HandleBoxPrivate
type HandleBoxPrivate struct {
	P unsafe.Pointer
}

func HandleBoxPrivateGetType() gi.GType {
	ret := _I.GetGType(243, "HandleBoxPrivate")
	return ret
}

// Object HeaderBar
type HeaderBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapHeaderBar(p unsafe.Pointer) (r HeaderBar) { r.P = p; return }

type IHeaderBar interface{ P_HeaderBar() unsafe.Pointer }

func (v HeaderBar) P_HeaderBar() unsafe.Pointer        { return v.P }
func (v HeaderBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v HeaderBar) P_Buildable() unsafe.Pointer        { return v.P }
func HeaderBarGetType() gi.GType {
	ret := _I.GetGType(244, "HeaderBar")
	return ret
}

// gtk_header_bar_new
//
// [ result ] trans: nothing
//
func NewHeaderBar() (result HeaderBar) {
	iv, err := _I.Get(1165, "HeaderBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_header_bar_get_custom_title
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetCustomTitle() (result Widget) {
	iv, err := _I.Get(1166, "HeaderBar", "get_custom_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_header_bar_get_decoration_layout
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetDecorationLayout() (result string) {
	iv, err := _I.Get(1167, "HeaderBar", "get_decoration_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_header_bar_get_has_subtitle
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetHasSubtitle() (result bool) {
	iv, err := _I.Get(1168, "HeaderBar", "get_has_subtitle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_header_bar_get_show_close_button
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetShowCloseButton() (result bool) {
	iv, err := _I.Get(1169, "HeaderBar", "get_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_header_bar_get_subtitle
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetSubtitle() (result string) {
	iv, err := _I.Get(1170, "HeaderBar", "get_subtitle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_header_bar_get_title
//
// [ result ] trans: nothing
//
func (v HeaderBar) GetTitle() (result string) {
	iv, err := _I.Get(1171, "HeaderBar", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_header_bar_pack_end
//
// [ child ] trans: nothing
//
func (v HeaderBar) PackEnd(child IWidget) {
	iv, err := _I.Get(1172, "HeaderBar", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_header_bar_pack_start
//
// [ child ] trans: nothing
//
func (v HeaderBar) PackStart(child IWidget) {
	iv, err := _I.Get(1173, "HeaderBar", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_header_bar_set_custom_title
//
// [ title_widget ] trans: nothing
//
func (v HeaderBar) SetCustomTitle(title_widget IWidget) {
	iv, err := _I.Get(1174, "HeaderBar", "set_custom_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if title_widget != nil {
		tmp = title_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_title_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_title_widget}
	iv.Call(args, nil, nil)
}

// gtk_header_bar_set_decoration_layout
//
// [ layout ] trans: nothing
//
func (v HeaderBar) SetDecorationLayout(layout string) {
	iv, err := _I.Get(1175, "HeaderBar", "set_decoration_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_layout := gi.CString(layout)
	arg_v := gi.NewPointerArgument(v.P)
	arg_layout := gi.NewStringArgument(c_layout)
	args := []gi.Argument{arg_v, arg_layout}
	iv.Call(args, nil, nil)
	gi.Free(c_layout)
}

// gtk_header_bar_set_has_subtitle
//
// [ setting ] trans: nothing
//
func (v HeaderBar) SetHasSubtitle(setting bool) {
	iv, err := _I.Get(1176, "HeaderBar", "set_has_subtitle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_header_bar_set_show_close_button
//
// [ setting ] trans: nothing
//
func (v HeaderBar) SetShowCloseButton(setting bool) {
	iv, err := _I.Get(1177, "HeaderBar", "set_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_header_bar_set_subtitle
//
// [ subtitle ] trans: nothing
//
func (v HeaderBar) SetSubtitle(subtitle string) {
	iv, err := _I.Get(1178, "HeaderBar", "set_subtitle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_subtitle := gi.CString(subtitle)
	arg_v := gi.NewPointerArgument(v.P)
	arg_subtitle := gi.NewStringArgument(c_subtitle)
	args := []gi.Argument{arg_v, arg_subtitle}
	iv.Call(args, nil, nil)
	gi.Free(c_subtitle)
}

// gtk_header_bar_set_title
//
// [ title ] trans: nothing
//
func (v HeaderBar) SetTitle(title string) {
	iv, err := _I.Get(1179, "HeaderBar", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// ignore GType struct HeaderBarClass

// Struct HeaderBarPrivate
type HeaderBarPrivate struct {
	P unsafe.Pointer
}

func HeaderBarPrivateGetType() gi.GType {
	ret := _I.GetGType(245, "HeaderBarPrivate")
	return ret
}

// Object IMContext
type IMContext struct {
	g.Object
}

func WrapIMContext(p unsafe.Pointer) (r IMContext) { r.P = p; return }

type IIMContext interface{ P_IMContext() unsafe.Pointer }

func (v IMContext) P_IMContext() unsafe.Pointer { return v.P }
func IMContextGetType() gi.GType {
	ret := _I.GetGType(246, "IMContext")
	return ret
}

// gtk_im_context_delete_surrounding
//
// [ offset ] trans: nothing
//
// [ n_chars ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IMContext) DeleteSurrounding(offset int32, n_chars int32) (result bool) {
	iv, err := _I.Get(1180, "IMContext", "delete_surrounding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_offset := gi.NewInt32Argument(offset)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_offset, arg_n_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_im_context_filter_keypress
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IMContext) FilterKeypress(event gdk.EventKey) (result bool) {
	iv, err := _I.Get(1181, "IMContext", "filter_keypress")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_im_context_focus_in
//
func (v IMContext) FocusIn() {
	iv, err := _I.Get(1182, "IMContext", "focus_in")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_im_context_focus_out
//
func (v IMContext) FocusOut() {
	iv, err := _I.Get(1183, "IMContext", "focus_out")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_im_context_get_preedit_string
//
// [ str ] trans: everything, dir: out
//
// [ attrs ] trans: everything, dir: out
//
// [ cursor_pos ] trans: everything, dir: out
//
func (v IMContext) GetPreeditString() (str string, attrs pango.AttrList, cursor_pos int32) {
	iv, err := _I.Get(1184, "IMContext", "get_preedit_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_attrs := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_cursor_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_str, arg_attrs, arg_cursor_pos}
	iv.Call(args, nil, &outArgs[0])
	str = outArgs[0].String().Take()
	attrs.P = outArgs[1].Pointer()
	cursor_pos = outArgs[2].Int32()
	return
}

// gtk_im_context_get_surrounding
//
// [ text ] trans: everything, dir: out
//
// [ cursor_index ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v IMContext) GetSurrounding() (result bool, text string, cursor_index int32) {
	iv, err := _I.Get(1185, "IMContext", "get_surrounding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cursor_index := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_text, arg_cursor_index}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	text = outArgs[0].String().Take()
	cursor_index = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_im_context_reset
//
func (v IMContext) Reset() {
	iv, err := _I.Get(1186, "IMContext", "reset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_im_context_set_client_window
//
// [ window ] trans: nothing
//
func (v IMContext) SetClientWindow(window gdk.IWindow) {
	iv, err := _I.Get(1187, "IMContext", "set_client_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_im_context_set_cursor_location
//
// [ area ] trans: nothing
//
func (v IMContext) SetCursorLocation(area gdk.Rectangle) {
	iv, err := _I.Get(1188, "IMContext", "set_cursor_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_area := gi.NewPointerArgument(area.P)
	args := []gi.Argument{arg_v, arg_area}
	iv.Call(args, nil, nil)
}

// gtk_im_context_set_surrounding
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ cursor_index ] trans: nothing
//
func (v IMContext) SetSurrounding(text string, len1 int32, cursor_index int32) {
	iv, err := _I.Get(1189, "IMContext", "set_surrounding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	arg_cursor_index := gi.NewInt32Argument(cursor_index)
	args := []gi.Argument{arg_v, arg_text, arg_len1, arg_cursor_index}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_im_context_set_use_preedit
//
// [ use_preedit ] trans: nothing
//
func (v IMContext) SetUsePreedit(use_preedit bool) {
	iv, err := _I.Get(1190, "IMContext", "set_use_preedit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_preedit := gi.NewBoolArgument(use_preedit)
	args := []gi.Argument{arg_v, arg_use_preedit}
	iv.Call(args, nil, nil)
}

// ignore GType struct IMContextClass

// Struct IMContextInfo
type IMContextInfo struct {
	P unsafe.Pointer
}

const SizeOfStructIMContextInfo = 40

func IMContextInfoGetType() gi.GType {
	ret := _I.GetGType(247, "IMContextInfo")
	return ret
}

// Object IMContextSimple
type IMContextSimple struct {
	IMContext
}

func WrapIMContextSimple(p unsafe.Pointer) (r IMContextSimple) { r.P = p; return }

type IIMContextSimple interface{ P_IMContextSimple() unsafe.Pointer }

func (v IMContextSimple) P_IMContextSimple() unsafe.Pointer { return v.P }
func IMContextSimpleGetType() gi.GType {
	ret := _I.GetGType(248, "IMContextSimple")
	return ret
}

// gtk_im_context_simple_new
//
// [ result ] trans: everything
//
func NewIMContextSimple() (result IMContextSimple) {
	iv, err := _I.Get(1191, "IMContextSimple", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_im_context_simple_add_compose_file
//
// [ compose_file ] trans: nothing
//
func (v IMContextSimple) AddComposeFile(compose_file string) {
	iv, err := _I.Get(1192, "IMContextSimple", "add_compose_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_compose_file := gi.CString(compose_file)
	arg_v := gi.NewPointerArgument(v.P)
	arg_compose_file := gi.NewStringArgument(c_compose_file)
	args := []gi.Argument{arg_v, arg_compose_file}
	iv.Call(args, nil, nil)
	gi.Free(c_compose_file)
}

// ignore GType struct IMContextSimpleClass

// Struct IMContextSimplePrivate
type IMContextSimplePrivate struct {
	P unsafe.Pointer
}

func IMContextSimplePrivateGetType() gi.GType {
	ret := _I.GetGType(249, "IMContextSimplePrivate")
	return ret
}

// Object IMMulticontext
type IMMulticontext struct {
	IMContext
}

func WrapIMMulticontext(p unsafe.Pointer) (r IMMulticontext) { r.P = p; return }

type IIMMulticontext interface{ P_IMMulticontext() unsafe.Pointer }

func (v IMMulticontext) P_IMMulticontext() unsafe.Pointer { return v.P }
func IMMulticontextGetType() gi.GType {
	ret := _I.GetGType(250, "IMMulticontext")
	return ret
}

// gtk_im_multicontext_new
//
// [ result ] trans: everything
//
func NewIMMulticontext() (result IMMulticontext) {
	iv, err := _I.Get(1193, "IMMulticontext", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_im_multicontext_append_menuitems
//
// [ menushell ] trans: nothing
//
func (v IMMulticontext) AppendMenuitems(menushell IMenuShell) {
	iv, err := _I.Get(1194, "IMMulticontext", "append_menuitems")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menushell != nil {
		tmp = menushell.P_MenuShell()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menushell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menushell}
	iv.Call(args, nil, nil)
}

// gtk_im_multicontext_get_context_id
//
// [ result ] trans: nothing
//
func (v IMMulticontext) GetContextId() (result string) {
	iv, err := _I.Get(1195, "IMMulticontext", "get_context_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_im_multicontext_set_context_id
//
// [ context_id ] trans: nothing
//
func (v IMMulticontext) SetContextId(context_id string) {
	iv, err := _I.Get(1196, "IMMulticontext", "set_context_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_context_id := gi.CString(context_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_id := gi.NewStringArgument(c_context_id)
	args := []gi.Argument{arg_v, arg_context_id}
	iv.Call(args, nil, nil)
	gi.Free(c_context_id)
}

// ignore GType struct IMMulticontextClass

// Struct IMMulticontextPrivate
type IMMulticontextPrivate struct {
	P unsafe.Pointer
}

func IMMulticontextPrivateGetType() gi.GType {
	ret := _I.GetGType(251, "IMMulticontextPrivate")
	return ret
}

// Deprecated
//
// Enum IMPreeditStyle
type IMPreeditStyleEnum int

const (
	IMPreeditStyleNothing  IMPreeditStyleEnum = 0
	IMPreeditStyleCallback IMPreeditStyleEnum = 1
	IMPreeditStyleNone     IMPreeditStyleEnum = 2
)

func IMPreeditStyleGetType() gi.GType {
	ret := _I.GetGType(252, "IMPreeditStyle")
	return ret
}

// Deprecated
//
// Enum IMStatusStyle
type IMStatusStyleEnum int

const (
	IMStatusStyleNothing  IMStatusStyleEnum = 0
	IMStatusStyleCallback IMStatusStyleEnum = 1
	IMStatusStyleNone     IMStatusStyleEnum = 2
)

func IMStatusStyleGetType() gi.GType {
	ret := _I.GetGType(253, "IMStatusStyle")
	return ret
}

// Object IconFactory
type IconFactory struct {
	BuildableIfc
	g.Object
}

func WrapIconFactory(p unsafe.Pointer) (r IconFactory) { r.P = p; return }

type IIconFactory interface{ P_IconFactory() unsafe.Pointer }

func (v IconFactory) P_IconFactory() unsafe.Pointer { return v.P }
func (v IconFactory) P_Buildable() unsafe.Pointer   { return v.P }
func IconFactoryGetType() gi.GType {
	ret := _I.GetGType(254, "IconFactory")
	return ret
}

// Deprecated
//
// gtk_icon_factory_new
//
// [ result ] trans: everything
//
func NewIconFactory() (result IconFactory) {
	iv, err := _I.Get(1197, "IconFactory", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_factory_lookup_default
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func IconFactoryLookupDefault1(stock_id string) (result IconSet) {
	iv, err := _I.Get(1198, "IconFactory", "lookup_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_factory_add
//
// [ stock_id ] trans: nothing
//
// [ icon_set ] trans: nothing
//
func (v IconFactory) Add(stock_id string, icon_set IconSet) {
	iv, err := _I.Get(1199, "IconFactory", "add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_icon_set := gi.NewPointerArgument(icon_set.P)
	args := []gi.Argument{arg_v, arg_stock_id, arg_icon_set}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// Deprecated
//
// gtk_icon_factory_add_default
//
func (v IconFactory) AddDefault() {
	iv, err := _I.Get(1200, "IconFactory", "add_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_factory_lookup
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IconFactory) Lookup(stock_id string) (result IconSet) {
	iv, err := _I.Get(1201, "IconFactory", "lookup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_factory_remove_default
//
func (v IconFactory) RemoveDefault() {
	iv, err := _I.Get(1202, "IconFactory", "remove_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct IconFactoryClass

// Struct IconFactoryPrivate
type IconFactoryPrivate struct {
	P unsafe.Pointer
}

func IconFactoryPrivateGetType() gi.GType {
	ret := _I.GetGType(255, "IconFactoryPrivate")
	return ret
}

// Object IconInfo
type IconInfo struct {
	g.Object
}

func WrapIconInfo(p unsafe.Pointer) (r IconInfo) { r.P = p; return }

type IIconInfo interface{ P_IconInfo() unsafe.Pointer }

func (v IconInfo) P_IconInfo() unsafe.Pointer { return v.P }
func IconInfoGetType() gi.GType {
	ret := _I.GetGType(256, "IconInfo")
	return ret
}

// gtk_icon_info_new_for_pixbuf
//
// [ icon_theme ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: everything
//
func NewIconInfoForPixbuf(icon_theme IIconTheme, pixbuf gdkpixbuf.IPixbuf) (result IconInfo) {
	iv, err := _I.Get(1203, "IconInfo", "new_for_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon_theme != nil {
		tmp = icon_theme.P_IconTheme()
	}
	var tmp1 unsafe.Pointer
	if pixbuf != nil {
		tmp1 = pixbuf.P_Pixbuf()
	}
	arg_icon_theme := gi.NewPointerArgument(tmp)
	arg_pixbuf := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_icon_theme, arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_info_get_attach_points
//
// [ points ] trans: everything, dir: out
//
// [ n_points ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v IconInfo) GetAttachPoints() (result bool, points unsafe.Pointer) {
	iv, err := _I.Get(1204, "IconInfo", "get_attach_points")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_points := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_points := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_points, arg_n_points}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_points int32
	_ = n_points
	points = outArgs[0].Pointer()
	n_points = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_icon_info_get_base_scale
//
// [ result ] trans: nothing
//
func (v IconInfo) GetBaseScale() (result int32) {
	iv, err := _I.Get(1205, "IconInfo", "get_base_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_info_get_base_size
//
// [ result ] trans: nothing
//
func (v IconInfo) GetBaseSize() (result int32) {
	iv, err := _I.Get(1206, "IconInfo", "get_base_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_icon_info_get_builtin_pixbuf
//
// [ result ] trans: nothing
//
func (v IconInfo) GetBuiltinPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1207, "IconInfo", "get_builtin_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_info_get_display_name
//
// [ result ] trans: nothing
//
func (v IconInfo) GetDisplayName() (result string) {
	iv, err := _I.Get(1208, "IconInfo", "get_display_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_icon_info_get_embedded_rect
//
// [ rectangle ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v IconInfo) GetEmbeddedRect(rectangle gdk.Rectangle) (result bool) {
	iv, err := _I.Get(1209, "IconInfo", "get_embedded_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rectangle := gi.NewPointerArgument(rectangle.P)
	args := []gi.Argument{arg_v, arg_rectangle}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_info_get_filename
//
// [ result ] trans: nothing
//
func (v IconInfo) GetFilename() (result string) {
	iv, err := _I.Get(1210, "IconInfo", "get_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_icon_info_is_symbolic
//
// [ result ] trans: nothing
//
func (v IconInfo) IsSymbolic() (result bool) {
	iv, err := _I.Get(1211, "IconInfo", "is_symbolic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_info_load_icon
//
// [ result ] trans: everything
//
func (v IconInfo) LoadIcon() (result gdkpixbuf.Pixbuf, err error) {
	iv, err := _I.Get(1212, "IconInfo", "load_icon")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_icon_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v IconInfo) LoadIconAsync(cancellable g.ICancellable, callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(1213, "IconInfo", "load_icon_async")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myAsyncReadyCallback()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_icon_info_load_icon_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconInfo) LoadIconFinish(res g.IAsyncResult) (result gdkpixbuf.Pixbuf, err error) {
	iv, err := _I.Get(1214, "IconInfo", "load_icon_finish")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_surface
//
// [ for_window ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSurface(for_window gdk.IWindow) (result cairo.Surface, err error) {
	iv, err := _I.Get(1215, "IconInfo", "load_surface")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if for_window != nil {
		tmp = for_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_for_window := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_for_window, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_symbolic
//
// [ fg ] trans: nothing
//
// [ success_color ] trans: nothing
//
// [ warning_color ] trans: nothing
//
// [ error_color ] trans: nothing
//
// [ was_symbolic ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSymbolic(fg gdk.RGBA, success_color gdk.RGBA, warning_color gdk.RGBA, error_color gdk.RGBA) (result gdkpixbuf.Pixbuf, was_symbolic bool, err error) {
	iv, err := _I.Get(1216, "IconInfo", "load_symbolic")
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_fg := gi.NewPointerArgument(fg.P)
	arg_success_color := gi.NewPointerArgument(success_color.P)
	arg_warning_color := gi.NewPointerArgument(warning_color.P)
	arg_error_color := gi.NewPointerArgument(error_color.P)
	arg_was_symbolic := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_fg, arg_success_color, arg_warning_color, arg_error_color, arg_was_symbolic, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	was_symbolic = outArgs[0].Bool()
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_symbolic_async
//
// [ fg ] trans: nothing
//
// [ success_color ] trans: nothing
//
// [ warning_color ] trans: nothing
//
// [ error_color ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v IconInfo) LoadSymbolicAsync(fg gdk.RGBA, success_color gdk.RGBA, warning_color gdk.RGBA, error_color gdk.RGBA, cancellable g.ICancellable, callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(1217, "IconInfo", "load_symbolic_async")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fg := gi.NewPointerArgument(fg.P)
	arg_success_color := gi.NewPointerArgument(success_color.P)
	arg_warning_color := gi.NewPointerArgument(warning_color.P)
	arg_error_color := gi.NewPointerArgument(error_color.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myAsyncReadyCallback()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_fg, arg_success_color, arg_warning_color, arg_error_color, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_icon_info_load_symbolic_finish
//
// [ res ] trans: nothing
//
// [ was_symbolic ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSymbolicFinish(res g.IAsyncResult) (result gdkpixbuf.Pixbuf, was_symbolic bool, err error) {
	iv, err := _I.Get(1218, "IconInfo", "load_symbolic_finish")
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_was_symbolic := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_res, arg_was_symbolic, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	was_symbolic = outArgs[0].Bool()
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_symbolic_for_context
//
// [ context ] trans: nothing
//
// [ was_symbolic ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSymbolicForContext(context IStyleContext) (result gdkpixbuf.Pixbuf, was_symbolic bool, err error) {
	iv, err := _I.Get(1219, "IconInfo", "load_symbolic_for_context")
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_was_symbolic := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_context, arg_was_symbolic, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	was_symbolic = outArgs[0].Bool()
	result.P = ret.Pointer()
	return
}

// gtk_icon_info_load_symbolic_for_context_async
//
// [ context ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v IconInfo) LoadSymbolicForContextAsync(context IStyleContext, cancellable g.ICancellable, callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(1220, "IconInfo", "load_symbolic_for_context_async")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myAsyncReadyCallback()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_context, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_icon_info_load_symbolic_for_context_finish
//
// [ res ] trans: nothing
//
// [ was_symbolic ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSymbolicForContextFinish(res g.IAsyncResult) (result gdkpixbuf.Pixbuf, was_symbolic bool, err error) {
	iv, err := _I.Get(1221, "IconInfo", "load_symbolic_for_context_finish")
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_was_symbolic := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_res, arg_was_symbolic, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	was_symbolic = outArgs[0].Bool()
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_info_load_symbolic_for_style
//
// [ style ] trans: nothing
//
// [ state ] trans: nothing
//
// [ was_symbolic ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v IconInfo) LoadSymbolicForStyle(style IStyle, state StateTypeEnum) (result gdkpixbuf.Pixbuf, was_symbolic bool, err error) {
	iv, err := _I.Get(1222, "IconInfo", "load_symbolic_for_style")
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewPointerArgument(tmp)
	arg_state := gi.NewIntArgument(int(state))
	arg_was_symbolic := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_style, arg_state, arg_was_symbolic, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	was_symbolic = outArgs[0].Bool()
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_info_set_raw_coordinates
//
// [ raw_coordinates ] trans: nothing
//
func (v IconInfo) SetRawCoordinates(raw_coordinates bool) {
	iv, err := _I.Get(1223, "IconInfo", "set_raw_coordinates")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_raw_coordinates := gi.NewBoolArgument(raw_coordinates)
	args := []gi.Argument{arg_v, arg_raw_coordinates}
	iv.Call(args, nil, nil)
}

// ignore GType struct IconInfoClass

// Flags IconLookupFlags
type IconLookupFlags int

const (
	IconLookupFlagsNoSvg           IconLookupFlags = 1
	IconLookupFlagsForceSvg        IconLookupFlags = 2
	IconLookupFlagsUseBuiltin      IconLookupFlags = 4
	IconLookupFlagsGenericFallback IconLookupFlags = 8
	IconLookupFlagsForceSize       IconLookupFlags = 16
	IconLookupFlagsForceRegular    IconLookupFlags = 32
	IconLookupFlagsForceSymbolic   IconLookupFlags = 64
	IconLookupFlagsDirLtr          IconLookupFlags = 128
	IconLookupFlagsDirRtl          IconLookupFlags = 256
)

func IconLookupFlagsGetType() gi.GType {
	ret := _I.GetGType(257, "IconLookupFlags")
	return ret
}

// Struct IconSet
type IconSet struct {
	P unsafe.Pointer
}

func IconSetGetType() gi.GType {
	ret := _I.GetGType(258, "IconSet")
	return ret
}

// Deprecated
//
// gtk_icon_set_new
//
// [ result ] trans: everything
//
func NewIconSet() (result IconSet) {
	iv, err := _I.Get(1224, "IconSet", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_new_from_pixbuf
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: everything
//
func NewIconSetFromPixbuf(pixbuf gdkpixbuf.IPixbuf) (result IconSet) {
	iv, err := _I.Get(1225, "IconSet", "new_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_add_source
//
// [ source ] trans: nothing
//
func (v IconSet) AddSource(source IconSource) {
	iv, err := _I.Get(1226, "IconSet", "add_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source := gi.NewPointerArgument(source.P)
	args := []gi.Argument{arg_v, arg_source}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_set_copy
//
// [ result ] trans: everything
//
func (v IconSet) Copy() (result IconSet) {
	iv, err := _I.Get(1227, "IconSet", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_get_sizes
//
// [ sizes ] trans: everything, dir: out
//
// [ n_sizes ] trans: everything, dir: out
//
func (v IconSet) GetSizes() (sizes gi.Int32Array) {
	iv, err := _I.Get(1228, "IconSet", "get_sizes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_sizes := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_sizes := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_sizes, arg_n_sizes}
	iv.Call(args, nil, &outArgs[0])
	var n_sizes int32
	_ = n_sizes
	sizes.P = outArgs[0].Pointer()
	n_sizes = outArgs[1].Int32()
	sizes.Len = int(n_sizes)
	return
}

// Deprecated
//
// gtk_icon_set_ref
//
// [ result ] trans: everything
//
func (v IconSet) Ref() (result IconSet) {
	iv, err := _I.Get(1229, "IconSet", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_render_icon
//
// [ style ] trans: nothing
//
// [ direction ] trans: nothing
//
// [ state ] trans: nothing
//
// [ size ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconSet) RenderIcon(style IStyle, direction TextDirectionEnum, state StateTypeEnum, size int32, widget IWidget, detail string) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1230, "IconSet", "render_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewPointerArgument(tmp)
	arg_direction := gi.NewIntArgument(int(direction))
	arg_state := gi.NewIntArgument(int(state))
	arg_size := gi.NewInt32Argument(size)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	args := []gi.Argument{arg_v, arg_style, arg_direction, arg_state, arg_size, arg_widget, arg_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_detail)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_render_icon_pixbuf
//
// [ context ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconSet) RenderIconPixbuf(context IStyleContext, size int32) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1231, "IconSet", "render_icon_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_context, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_render_icon_surface
//
// [ context ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ for_window ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconSet) RenderIconSurface(context IStyleContext, size int32, scale int32, for_window gdk.IWindow) (result cairo.Surface) {
	iv, err := _I.Get(1232, "IconSet", "render_icon_surface")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	var tmp1 unsafe.Pointer
	if for_window != nil {
		tmp1 = for_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_for_window := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_context, arg_size, arg_scale, arg_for_window}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_set_unref
//
func (v IconSet) Unref() {
	iv, err := _I.Get(1233, "IconSet", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum IconSize
type IconSizeEnum int

const (
	IconSizeInvalid      IconSizeEnum = 0
	IconSizeMenu         IconSizeEnum = 1
	IconSizeSmallToolbar IconSizeEnum = 2
	IconSizeLargeToolbar IconSizeEnum = 3
	IconSizeButton       IconSizeEnum = 4
	IconSizeDnd          IconSizeEnum = 5
	IconSizeDialog       IconSizeEnum = 6
)

func IconSizeGetType() gi.GType {
	ret := _I.GetGType(259, "IconSize")
	return ret
}

// Struct IconSource
type IconSource struct {
	P unsafe.Pointer
}

func IconSourceGetType() gi.GType {
	ret := _I.GetGType(260, "IconSource")
	return ret
}

// Deprecated
//
// gtk_icon_source_new
//
// [ result ] trans: everything
//
func NewIconSource() (result IconSource) {
	iv, err := _I.Get(1234, "IconSource", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_source_copy
//
// [ result ] trans: everything
//
func (v IconSource) Copy() (result IconSource) {
	iv, err := _I.Get(1235, "IconSource", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_source_free
//
func (v IconSource) Free() {
	iv, err := _I.Get(1236, "IconSource", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_get_direction
//
// [ result ] trans: nothing
//
func (v IconSource) GetDirection() (result TextDirectionEnum) {
	iv, err := _I.Get(1237, "IconSource", "get_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TextDirectionEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_icon_source_get_direction_wildcarded
//
// [ result ] trans: nothing
//
func (v IconSource) GetDirectionWildcarded() (result bool) {
	iv, err := _I.Get(1238, "IconSource", "get_direction_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_icon_source_get_filename
//
// [ result ] trans: nothing
//
func (v IconSource) GetFilename() (result string) {
	iv, err := _I.Get(1239, "IconSource", "get_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_icon_source_get_icon_name
//
// [ result ] trans: nothing
//
func (v IconSource) GetIconName() (result string) {
	iv, err := _I.Get(1240, "IconSource", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_icon_source_get_pixbuf
//
// [ result ] trans: nothing
//
func (v IconSource) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1241, "IconSource", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_source_get_size
//
// [ result ] trans: nothing
//
func (v IconSource) GetSize() (result int32) {
	iv, err := _I.Get(1242, "IconSource", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_icon_source_get_size_wildcarded
//
// [ result ] trans: nothing
//
func (v IconSource) GetSizeWildcarded() (result bool) {
	iv, err := _I.Get(1243, "IconSource", "get_size_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_icon_source_get_state
//
// [ result ] trans: nothing
//
func (v IconSource) GetState() (result StateTypeEnum) {
	iv, err := _I.Get(1244, "IconSource", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_icon_source_get_state_wildcarded
//
// [ result ] trans: nothing
//
func (v IconSource) GetStateWildcarded() (result bool) {
	iv, err := _I.Get(1245, "IconSource", "get_state_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_icon_source_set_direction
//
// [ direction ] trans: nothing
//
func (v IconSource) SetDirection(direction TextDirectionEnum) {
	iv, err := _I.Get(1246, "IconSource", "set_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_direction_wildcarded
//
// [ setting ] trans: nothing
//
func (v IconSource) SetDirectionWildcarded(setting bool) {
	iv, err := _I.Get(1247, "IconSource", "set_direction_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_filename
//
// [ filename ] trans: nothing
//
func (v IconSource) SetFilename(filename string) {
	iv, err := _I.Get(1248, "IconSource", "set_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// Deprecated
//
// gtk_icon_source_set_icon_name
//
// [ icon_name ] trans: nothing
//
func (v IconSource) SetIconName(icon_name string) {
	iv, err := _I.Get(1249, "IconSource", "set_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_icon_source_set_pixbuf
//
// [ pixbuf ] trans: nothing
//
func (v IconSource) SetPixbuf(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(1250, "IconSource", "set_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_size
//
// [ size ] trans: nothing
//
func (v IconSource) SetSize(size int32) {
	iv, err := _I.Get(1251, "IconSource", "set_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_size_wildcarded
//
// [ setting ] trans: nothing
//
func (v IconSource) SetSizeWildcarded(setting bool) {
	iv, err := _I.Get(1252, "IconSource", "set_size_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_state
//
// [ state ] trans: nothing
//
func (v IconSource) SetState(state StateTypeEnum) {
	iv, err := _I.Get(1253, "IconSource", "set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_icon_source_set_state_wildcarded
//
// [ setting ] trans: nothing
//
func (v IconSource) SetStateWildcarded(setting bool) {
	iv, err := _I.Get(1254, "IconSource", "set_state_wildcarded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// Object IconTheme
type IconTheme struct {
	g.Object
}

func WrapIconTheme(p unsafe.Pointer) (r IconTheme) { r.P = p; return }

type IIconTheme interface{ P_IconTheme() unsafe.Pointer }

func (v IconTheme) P_IconTheme() unsafe.Pointer { return v.P }
func IconThemeGetType() gi.GType {
	ret := _I.GetGType(261, "IconTheme")
	return ret
}

// gtk_icon_theme_new
//
// [ result ] trans: everything
//
func NewIconTheme() (result IconTheme) {
	iv, err := _I.Get(1255, "IconTheme", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_theme_add_builtin_icon
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
func IconThemeAddBuiltinIcon1(icon_name string, size int32, pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(1256, "IconTheme", "add_builtin_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_icon_name, arg_size, arg_pixbuf}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_icon_theme_get_for_screen
//
// [ screen ] trans: nothing
//
// [ result ] trans: nothing
//
func IconThemeGetForScreen1(screen gdk.IScreen) (result IconTheme) {
	iv, err := _I.Get(1258, "IconTheme", "get_for_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_screen}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_add_resource_path
//
// [ path ] trans: nothing
//
func (v IconTheme) AddResourcePath(path string) {
	iv, err := _I.Get(1259, "IconTheme", "add_resource_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// gtk_icon_theme_append_search_path
//
// [ path ] trans: nothing
//
func (v IconTheme) AppendSearchPath(path string) {
	iv, err := _I.Get(1260, "IconTheme", "append_search_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// gtk_icon_theme_choose_icon
//
// [ icon_names ] trans: nothing
//
// [ size ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) ChooseIcon(icon_names gi.CStrArray, size int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1261, "IconTheme", "choose_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_names := gi.NewPointerArgument(icon_names.P)
	arg_size := gi.NewInt32Argument(size)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon_names, arg_size, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_choose_icon_for_scale
//
// [ icon_names ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) ChooseIconForScale(icon_names gi.CStrArray, size int32, scale int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1262, "IconTheme", "choose_icon_for_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_names := gi.NewPointerArgument(icon_names.P)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon_names, arg_size, arg_scale, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_get_example_icon_name
//
// [ result ] trans: everything
//
func (v IconTheme) GetExampleIconName() (result string) {
	iv, err := _I.Get(1263, "IconTheme", "get_example_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_icon_theme_get_icon_sizes
//
// [ icon_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) GetIconSizes(icon_name string) (result gi.Int32Array) {
	iv, err := _I.Get(1264, "IconTheme", "get_icon_sizes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result = gi.Int32Array{P: ret.Pointer(), Len: int(0)}
	return
}

// gtk_icon_theme_get_search_path
//
// [ path ] trans: everything, dir: out
//
// [ n_elements ] trans: everything, dir: out
//
func (v IconTheme) GetSearchPath() (path gi.CStrArray) {
	iv, err := _I.Get(1265, "IconTheme", "get_search_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_elements := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_path, arg_n_elements}
	iv.Call(args, nil, &outArgs[0])
	var n_elements int32
	_ = n_elements
	path.P = outArgs[0].Pointer()
	n_elements = outArgs[1].Int32()
	return
}

// gtk_icon_theme_has_icon
//
// [ icon_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IconTheme) HasIcon(icon_name string) (result bool) {
	iv, err := _I.Get(1266, "IconTheme", "has_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result = ret.Bool()
	return
}

// gtk_icon_theme_list_contexts
//
// [ result ] trans: everything
//
func (v IconTheme) ListContexts() (result g.List) {
	iv, err := _I.Get(1267, "IconTheme", "list_contexts")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_list_icons
//
// [ context ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) ListIcons(context string) (result g.List) {
	iv, err := _I.Get(1268, "IconTheme", "list_icons")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_context := gi.CString(context)
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewStringArgument(c_context)
	args := []gi.Argument{arg_v, arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_context)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_load_icon
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LoadIcon(icon_name string, size int32, flags IconLookupFlags) (result gdkpixbuf.Pixbuf, err error) {
	iv, err := _I.Get(1269, "IconTheme", "load_icon")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_icon_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_load_icon_for_scale
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LoadIconForScale(icon_name string, size int32, scale int32, flags IconLookupFlags) (result gdkpixbuf.Pixbuf, err error) {
	iv, err := _I.Get(1270, "IconTheme", "load_icon_for_scale")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size, arg_scale, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_icon_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_load_surface
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ for_window ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LoadSurface(icon_name string, size int32, scale int32, for_window gdk.IWindow, flags IconLookupFlags) (result cairo.Surface, err error) {
	iv, err := _I.Get(1271, "IconTheme", "load_surface")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_icon_name := gi.CString(icon_name)
	var tmp unsafe.Pointer
	if for_window != nil {
		tmp = for_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_for_window := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size, arg_scale, arg_for_window, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_icon_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_lookup_by_gicon
//
// [ icon ] trans: nothing
//
// [ size ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LookupByGicon(icon g.IIcon, size int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1272, "IconTheme", "lookup_by_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon, arg_size, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_lookup_by_gicon_for_scale
//
// [ icon ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LookupByGiconForScale(icon g.IIcon, size int32, scale int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1273, "IconTheme", "lookup_by_gicon_for_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon, arg_size, arg_scale, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_lookup_icon
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LookupIcon(icon_name string, size int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1274, "IconTheme", "lookup_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_lookup_icon_for_scale
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ scale ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconTheme) LookupIconForScale(icon_name string, size int32, scale int32, flags IconLookupFlags) (result IconInfo) {
	iv, err := _I.Get(1275, "IconTheme", "lookup_icon_for_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	arg_scale := gi.NewInt32Argument(scale)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size, arg_scale, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result.P = ret.Pointer()
	return
}

// gtk_icon_theme_prepend_search_path
//
// [ path ] trans: nothing
//
func (v IconTheme) PrependSearchPath(path string) {
	iv, err := _I.Get(1276, "IconTheme", "prepend_search_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// gtk_icon_theme_rescan_if_needed
//
// [ result ] trans: nothing
//
func (v IconTheme) RescanIfNeeded() (result bool) {
	iv, err := _I.Get(1277, "IconTheme", "rescan_if_needed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_theme_set_custom_theme
//
// [ theme_name ] trans: nothing
//
func (v IconTheme) SetCustomTheme(theme_name string) {
	iv, err := _I.Get(1278, "IconTheme", "set_custom_theme")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_theme_name := gi.CString(theme_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_theme_name := gi.NewStringArgument(c_theme_name)
	args := []gi.Argument{arg_v, arg_theme_name}
	iv.Call(args, nil, nil)
	gi.Free(c_theme_name)
}

// gtk_icon_theme_set_screen
//
// [ screen ] trans: nothing
//
func (v IconTheme) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(1279, "IconTheme", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// gtk_icon_theme_set_search_path
//
// [ path ] trans: nothing
//
// [ n_elements ] trans: nothing
//
func (v IconTheme) SetSearchPath(path gi.CStrArray, n_elements int32) {
	iv, err := _I.Get(1280, "IconTheme", "set_search_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_n_elements := gi.NewInt32Argument(n_elements)
	args := []gi.Argument{arg_v, arg_path, arg_n_elements}
	iv.Call(args, nil, nil)
}

// ignore GType struct IconThemeClass

// Enum IconThemeError
type IconThemeErrorEnum int

const (
	IconThemeErrorNotFound IconThemeErrorEnum = 0
	IconThemeErrorFailed   IconThemeErrorEnum = 1
)

func IconThemeErrorGetType() gi.GType {
	ret := _I.GetGType(262, "IconThemeError")
	return ret
}

// Struct IconThemePrivate
type IconThemePrivate struct {
	P unsafe.Pointer
}

func IconThemePrivateGetType() gi.GType {
	ret := _I.GetGType(263, "IconThemePrivate")
	return ret
}

// Object IconView
type IconView struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellLayoutIfc
	ScrollableIfc
	Container
}

func WrapIconView(p unsafe.Pointer) (r IconView) { r.P = p; return }

type IIconView interface{ P_IconView() unsafe.Pointer }

func (v IconView) P_IconView() unsafe.Pointer         { return v.P }
func (v IconView) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v IconView) P_Buildable() unsafe.Pointer        { return v.P }
func (v IconView) P_CellLayout() unsafe.Pointer       { return v.P }
func (v IconView) P_Scrollable() unsafe.Pointer       { return v.P }
func IconViewGetType() gi.GType {
	ret := _I.GetGType(264, "IconView")
	return ret
}

// gtk_icon_view_new
//
// [ result ] trans: nothing
//
func NewIconView() (result IconView) {
	iv, err := _I.Get(1281, "IconView", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_new_with_area
//
// [ area ] trans: nothing
//
// [ result ] trans: nothing
//
func NewIconViewWithArea(area ICellArea) (result IconView) {
	iv, err := _I.Get(1282, "IconView", "new_with_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	arg_area := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_new_with_model
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewIconViewWithModel(model ITreeModel) (result IconView) {
	iv, err := _I.Get(1283, "IconView", "new_with_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_convert_widget_to_bin_window_coords
//
// [ wx ] trans: nothing
//
// [ wy ] trans: nothing
//
// [ bx ] trans: everything, dir: out
//
// [ by ] trans: everything, dir: out
//
func (v IconView) ConvertWidgetToBinWindowCoords(wx int32, wy int32) (bx int32, by int32) {
	iv, err := _I.Get(1284, "IconView", "convert_widget_to_bin_window_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_wx := gi.NewInt32Argument(wx)
	arg_wy := gi.NewInt32Argument(wy)
	arg_bx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_by := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_wx, arg_wy, arg_bx, arg_by}
	iv.Call(args, nil, &outArgs[0])
	bx = outArgs[0].Int32()
	by = outArgs[1].Int32()
	return
}

// gtk_icon_view_create_drag_icon
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconView) CreateDragIcon(path TreePath) (result cairo.Surface) {
	iv, err := _I.Get(1285, "IconView", "create_drag_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_enable_model_drag_dest
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v IconView) EnableModelDragDest(targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(1286, "IconView", "enable_model_drag_dest")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_enable_model_drag_source
//
// [ start_button_mask ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v IconView) EnableModelDragSource(start_button_mask gdk.ModifierTypeFlags, targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(1287, "IconView", "enable_model_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_button_mask := gi.NewIntArgument(int(start_button_mask))
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_start_button_mask, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_get_activate_on_single_click
//
// [ result ] trans: nothing
//
func (v IconView) GetActivateOnSingleClick() (result bool) {
	iv, err := _I.Get(1288, "IconView", "get_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_view_get_cell_rect
//
// [ path ] trans: nothing
//
// [ cell ] trans: nothing
//
// [ rect ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetCellRect(path TreePath, cell ICellRenderer, rect gdk.Rectangle) (result bool) {
	iv, err := _I.Get(1289, "IconView", "get_cell_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_cell := gi.NewPointerArgument(tmp)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_path, arg_cell, arg_rect}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_view_get_column_spacing
//
// [ result ] trans: nothing
//
func (v IconView) GetColumnSpacing() (result int32) {
	iv, err := _I.Get(1290, "IconView", "get_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_columns
//
// [ result ] trans: nothing
//
func (v IconView) GetColumns() (result int32) {
	iv, err := _I.Get(1291, "IconView", "get_columns")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_cursor
//
// [ path ] trans: everything, dir: out
//
// [ cell ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetCursor() (result bool, path TreePath, cell CellRenderer) {
	iv, err := _I.Get(1292, "IconView", "get_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cell := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_path, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	cell.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_icon_view_get_dest_item_at_pos
//
// [ drag_x ] trans: nothing
//
// [ drag_y ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ pos ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetDestItemAtPos(drag_x int32, drag_y int32) (result bool, path TreePath, pos IconViewDropPositionEnum) {
	iv, err := _I.Get(1293, "IconView", "get_dest_item_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_drag_x := gi.NewInt32Argument(drag_x)
	arg_drag_y := gi.NewInt32Argument(drag_y)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_drag_x, arg_drag_y, arg_path, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	pos = IconViewDropPositionEnum(outArgs[1].Int())
	result = ret.Bool()
	return
}

// gtk_icon_view_get_drag_dest_item
//
// [ path ] trans: everything, dir: out
//
// [ pos ] trans: everything, dir: out
//
func (v IconView) GetDragDestItem() (path TreePath, pos IconViewDropPositionEnum) {
	iv, err := _I.Get(1294, "IconView", "get_drag_dest_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_path, arg_pos}
	iv.Call(args, nil, &outArgs[0])
	path.P = outArgs[0].Pointer()
	pos = IconViewDropPositionEnum(outArgs[1].Int())
	return
}

// gtk_icon_view_get_item_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ cell ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetItemAtPos(x int32, y int32) (result bool, path TreePath, cell CellRenderer) {
	iv, err := _I.Get(1295, "IconView", "get_item_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cell := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y, arg_path, arg_cell}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	cell.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_icon_view_get_item_column
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IconView) GetItemColumn(path TreePath) (result int32) {
	iv, err := _I.Get(1296, "IconView", "get_item_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_item_orientation
//
// [ result ] trans: nothing
//
func (v IconView) GetItemOrientation() (result OrientationEnum) {
	iv, err := _I.Get(1297, "IconView", "get_item_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_icon_view_get_item_padding
//
// [ result ] trans: nothing
//
func (v IconView) GetItemPadding() (result int32) {
	iv, err := _I.Get(1298, "IconView", "get_item_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_item_row
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IconView) GetItemRow(path TreePath) (result int32) {
	iv, err := _I.Get(1299, "IconView", "get_item_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_item_width
//
// [ result ] trans: nothing
//
func (v IconView) GetItemWidth() (result int32) {
	iv, err := _I.Get(1300, "IconView", "get_item_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_margin
//
// [ result ] trans: nothing
//
func (v IconView) GetMargin() (result int32) {
	iv, err := _I.Get(1301, "IconView", "get_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_markup_column
//
// [ result ] trans: nothing
//
func (v IconView) GetMarkupColumn() (result int32) {
	iv, err := _I.Get(1302, "IconView", "get_markup_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_model
//
// [ result ] trans: nothing
//
func (v IconView) GetModel() (result TreeModel) {
	iv, err := _I.Get(1303, "IconView", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_get_path_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: everything
//
func (v IconView) GetPathAtPos(x int32, y int32) (result TreePath) {
	iv, err := _I.Get(1304, "IconView", "get_path_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_get_pixbuf_column
//
// [ result ] trans: nothing
//
func (v IconView) GetPixbufColumn() (result int32) {
	iv, err := _I.Get(1305, "IconView", "get_pixbuf_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_reorderable
//
// [ result ] trans: nothing
//
func (v IconView) GetReorderable() (result bool) {
	iv, err := _I.Get(1306, "IconView", "get_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_view_get_row_spacing
//
// [ result ] trans: nothing
//
func (v IconView) GetRowSpacing() (result int32) {
	iv, err := _I.Get(1307, "IconView", "get_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_selected_items
//
// [ result ] trans: everything
//
func (v IconView) GetSelectedItems() (result g.List) {
	iv, err := _I.Get(1308, "IconView", "get_selected_items")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_icon_view_get_selection_mode
//
// [ result ] trans: nothing
//
func (v IconView) GetSelectionMode() (result SelectionModeEnum) {
	iv, err := _I.Get(1309, "IconView", "get_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SelectionModeEnum(ret.Int())
	return
}

// gtk_icon_view_get_spacing
//
// [ result ] trans: nothing
//
func (v IconView) GetSpacing() (result int32) {
	iv, err := _I.Get(1310, "IconView", "get_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_text_column
//
// [ result ] trans: nothing
//
func (v IconView) GetTextColumn() (result int32) {
	iv, err := _I.Get(1311, "IconView", "get_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_tooltip_column
//
// [ result ] trans: nothing
//
func (v IconView) GetTooltipColumn() (result int32) {
	iv, err := _I.Get(1312, "IconView", "get_tooltip_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_icon_view_get_tooltip_context
//
// [ x ] trans: everything, dir: inout
//
// [ y ] trans: everything, dir: inout
//
// [ keyboard_tip ] trans: nothing
//
// [ model ] trans: nothing, dir: out
//
// [ path ] trans: everything, dir: out
//
// [ iter ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetTooltipContext(x int /*TODO:TYPE*/, y int /*TODO:TYPE*/, keyboard_tip bool, iter TreeIter) (result bool, model TreeModel, path TreePath) {
	iv, err := _I.Get(1313, "IconView", "get_tooltip_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyboard_tip := gi.NewBoolArgument(keyboard_tip)
	arg_model := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_keyboard_tip, arg_model, arg_path, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	model.P = outArgs[0].Pointer()
	path.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_icon_view_get_visible_range
//
// [ start_path ] trans: everything, dir: out
//
// [ end_path ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v IconView) GetVisibleRange() (result bool, start_path TreePath, end_path TreePath) {
	iv, err := _I.Get(1314, "IconView", "get_visible_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_end_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_start_path, arg_end_path}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	start_path.P = outArgs[0].Pointer()
	end_path.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_icon_view_item_activated
//
// [ path ] trans: nothing
//
func (v IconView) ItemActivated(path TreePath) {
	iv, err := _I.Get(1315, "IconView", "item_activated")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_path_is_selected
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IconView) PathIsSelected(path TreePath) (result bool) {
	iv, err := _I.Get(1316, "IconView", "path_is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_icon_view_scroll_to_path
//
// [ path ] trans: nothing
//
// [ use_align ] trans: nothing
//
// [ row_align ] trans: nothing
//
// [ col_align ] trans: nothing
//
func (v IconView) ScrollToPath(path TreePath, use_align bool, row_align float32, col_align float32) {
	iv, err := _I.Get(1317, "IconView", "scroll_to_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_use_align := gi.NewBoolArgument(use_align)
	arg_row_align := gi.NewFloatArgument(row_align)
	arg_col_align := gi.NewFloatArgument(col_align)
	args := []gi.Argument{arg_v, arg_path, arg_use_align, arg_row_align, arg_col_align}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_select_all
//
func (v IconView) SelectAll() {
	iv, err := _I.Get(1318, "IconView", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_select_path
//
// [ path ] trans: nothing
//
func (v IconView) SelectPath(path TreePath) {
	iv, err := _I.Get(1319, "IconView", "select_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_selected_foreach
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v IconView) SelectedForeach(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(1320, "IconView", "selected_foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myIconViewForeachFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_activate_on_single_click
//
// [ single ] trans: nothing
//
func (v IconView) SetActivateOnSingleClick(single bool) {
	iv, err := _I.Get(1321, "IconView", "set_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_single := gi.NewBoolArgument(single)
	args := []gi.Argument{arg_v, arg_single}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_column_spacing
//
// [ column_spacing ] trans: nothing
//
func (v IconView) SetColumnSpacing(column_spacing int32) {
	iv, err := _I.Get(1322, "IconView", "set_column_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column_spacing := gi.NewInt32Argument(column_spacing)
	args := []gi.Argument{arg_v, arg_column_spacing}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_columns
//
// [ columns ] trans: nothing
//
func (v IconView) SetColumns(columns int32) {
	iv, err := _I.Get(1323, "IconView", "set_columns")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_columns := gi.NewInt32Argument(columns)
	args := []gi.Argument{arg_v, arg_columns}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_cursor
//
// [ path ] trans: nothing
//
// [ cell ] trans: nothing
//
// [ start_editing ] trans: nothing
//
func (v IconView) SetCursor(path TreePath, cell ICellRenderer, start_editing bool) {
	iv, err := _I.Get(1324, "IconView", "set_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_cell := gi.NewPointerArgument(tmp)
	arg_start_editing := gi.NewBoolArgument(start_editing)
	args := []gi.Argument{arg_v, arg_path, arg_cell, arg_start_editing}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_drag_dest_item
//
// [ path ] trans: nothing
//
// [ pos ] trans: nothing
//
func (v IconView) SetDragDestItem(path TreePath, pos IconViewDropPositionEnum) {
	iv, err := _I.Get(1325, "IconView", "set_drag_dest_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_pos := gi.NewIntArgument(int(pos))
	args := []gi.Argument{arg_v, arg_path, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_item_orientation
//
// [ orientation ] trans: nothing
//
func (v IconView) SetItemOrientation(orientation OrientationEnum) {
	iv, err := _I.Get(1326, "IconView", "set_item_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_item_padding
//
// [ item_padding ] trans: nothing
//
func (v IconView) SetItemPadding(item_padding int32) {
	iv, err := _I.Get(1327, "IconView", "set_item_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_padding := gi.NewInt32Argument(item_padding)
	args := []gi.Argument{arg_v, arg_item_padding}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_item_width
//
// [ item_width ] trans: nothing
//
func (v IconView) SetItemWidth(item_width int32) {
	iv, err := _I.Get(1328, "IconView", "set_item_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_width := gi.NewInt32Argument(item_width)
	args := []gi.Argument{arg_v, arg_item_width}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_margin
//
// [ margin ] trans: nothing
//
func (v IconView) SetMargin(margin int32) {
	iv, err := _I.Get(1329, "IconView", "set_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_markup_column
//
// [ column ] trans: nothing
//
func (v IconView) SetMarkupColumn(column int32) {
	iv, err := _I.Get(1330, "IconView", "set_markup_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_model
//
// [ model ] trans: nothing
//
func (v IconView) SetModel(model ITreeModel) {
	iv, err := _I.Get(1331, "IconView", "set_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_model}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_pixbuf_column
//
// [ column ] trans: nothing
//
func (v IconView) SetPixbufColumn(column int32) {
	iv, err := _I.Get(1332, "IconView", "set_pixbuf_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_reorderable
//
// [ reorderable ] trans: nothing
//
func (v IconView) SetReorderable(reorderable bool) {
	iv, err := _I.Get(1333, "IconView", "set_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reorderable := gi.NewBoolArgument(reorderable)
	args := []gi.Argument{arg_v, arg_reorderable}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_row_spacing
//
// [ row_spacing ] trans: nothing
//
func (v IconView) SetRowSpacing(row_spacing int32) {
	iv, err := _I.Get(1334, "IconView", "set_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row_spacing := gi.NewInt32Argument(row_spacing)
	args := []gi.Argument{arg_v, arg_row_spacing}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_selection_mode
//
// [ mode ] trans: nothing
//
func (v IconView) SetSelectionMode(mode SelectionModeEnum) {
	iv, err := _I.Get(1335, "IconView", "set_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_spacing
//
// [ spacing ] trans: nothing
//
func (v IconView) SetSpacing(spacing int32) {
	iv, err := _I.Get(1336, "IconView", "set_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_text_column
//
// [ column ] trans: nothing
//
func (v IconView) SetTextColumn(column int32) {
	iv, err := _I.Get(1337, "IconView", "set_text_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_tooltip_cell
//
// [ tooltip ] trans: nothing
//
// [ path ] trans: nothing
//
// [ cell ] trans: nothing
//
func (v IconView) SetTooltipCell(tooltip ITooltip, path TreePath, cell ICellRenderer) {
	iv, err := _I.Get(1338, "IconView", "set_tooltip_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tooltip != nil {
		tmp = tooltip.P_Tooltip()
	}
	var tmp1 unsafe.Pointer
	if cell != nil {
		tmp1 = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tooltip := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	arg_cell := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_tooltip, arg_path, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_tooltip_column
//
// [ column ] trans: nothing
//
func (v IconView) SetTooltipColumn(column int32) {
	iv, err := _I.Get(1339, "IconView", "set_tooltip_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_set_tooltip_item
//
// [ tooltip ] trans: nothing
//
// [ path ] trans: nothing
//
func (v IconView) SetTooltipItem(tooltip ITooltip, path TreePath) {
	iv, err := _I.Get(1340, "IconView", "set_tooltip_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tooltip != nil {
		tmp = tooltip.P_Tooltip()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tooltip := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_tooltip, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_unselect_all
//
func (v IconView) UnselectAll() {
	iv, err := _I.Get(1341, "IconView", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_unselect_path
//
// [ path ] trans: nothing
//
func (v IconView) UnselectPath(path TreePath) {
	iv, err := _I.Get(1342, "IconView", "unselect_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_unset_model_drag_dest
//
func (v IconView) UnsetModelDragDest() {
	iv, err := _I.Get(1343, "IconView", "unset_model_drag_dest")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_icon_view_unset_model_drag_source
//
func (v IconView) UnsetModelDragSource() {
	iv, err := _I.Get(1344, "IconView", "unset_model_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object IconViewAccessible
type IconViewAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapIconViewAccessible(p unsafe.Pointer) (r IconViewAccessible) { r.P = p; return }

type IIconViewAccessible interface{ P_IconViewAccessible() unsafe.Pointer }

func (v IconViewAccessible) P_IconViewAccessible() unsafe.Pointer { return v.P }
func (v IconViewAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v IconViewAccessible) P_Selection() unsafe.Pointer          { return v.P }
func IconViewAccessibleGetType() gi.GType {
	ret := _I.GetGType(265, "IconViewAccessible")
	return ret
}

// ignore GType struct IconViewAccessibleClass

// Struct IconViewAccessiblePrivate
type IconViewAccessiblePrivate struct {
	P unsafe.Pointer
}

func IconViewAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(266, "IconViewAccessiblePrivate")
	return ret
}

// ignore GType struct IconViewClass

// Enum IconViewDropPosition
type IconViewDropPositionEnum int

const (
	IconViewDropPositionNoDrop    IconViewDropPositionEnum = 0
	IconViewDropPositionDropInto  IconViewDropPositionEnum = 1
	IconViewDropPositionDropLeft  IconViewDropPositionEnum = 2
	IconViewDropPositionDropRight IconViewDropPositionEnum = 3
	IconViewDropPositionDropAbove IconViewDropPositionEnum = 4
	IconViewDropPositionDropBelow IconViewDropPositionEnum = 5
)

func IconViewDropPositionGetType() gi.GType {
	ret := _I.GetGType(267, "IconViewDropPosition")
	return ret
}

type IconViewForeachFuncStruct struct {
	F_icon_view IconView
	F_path      TreePath
	F_data      unsafe.Pointer
}

func GetPointer_myIconViewForeachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkIconViewForeachFunc())
}

//export myGtkIconViewForeachFunc
func myGtkIconViewForeachFunc(icon_view *C.GtkIconView, path *C.GtkTreePath, data C.gpointer) {
	// TODO: not found user_data
}

// Struct IconViewPrivate
type IconViewPrivate struct {
	P unsafe.Pointer
}

func IconViewPrivateGetType() gi.GType {
	ret := _I.GetGType(268, "IconViewPrivate")
	return ret
}

// Object Image
type Image struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Misc
}

func WrapImage(p unsafe.Pointer) (r Image) { r.P = p; return }

type IImage interface{ P_Image() unsafe.Pointer }

func (v Image) P_Image() unsafe.Pointer            { return v.P }
func (v Image) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Image) P_Buildable() unsafe.Pointer        { return v.P }
func ImageGetType() gi.GType {
	ret := _I.GetGType(269, "Image")
	return ret
}

// gtk_image_new
//
// [ result ] trans: nothing
//
func NewImage() (result Image) {
	iv, err := _I.Get(1345, "Image", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_animation
//
// [ animation ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromAnimation(animation gdkpixbuf.IPixbufAnimation) (result Image) {
	iv, err := _I.Get(1346, "Image", "new_from_animation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if animation != nil {
		tmp = animation.P_PixbufAnimation()
	}
	arg_animation := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_animation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromFile(filename string) (result Image) {
	iv, err := _I.Get(1347, "Image", "new_from_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_gicon
//
// [ icon ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromGicon(icon g.IIcon, size int32) (result Image) {
	iv, err := _I.Get(1348, "Image", "new_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_icon, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_icon_name
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromIconName(icon_name string, size int32) (result Image) {
	iv, err := _I.Get(1349, "Image", "new_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_icon_name, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_new_from_icon_set
//
// [ icon_set ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromIconSet(icon_set IconSet, size int32) (result Image) {
	iv, err := _I.Get(1350, "Image", "new_from_icon_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_icon_set := gi.NewPointerArgument(icon_set.P)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_icon_set, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_pixbuf
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromPixbuf(pixbuf gdkpixbuf.IPixbuf) (result Image) {
	iv, err := _I.Get(1351, "Image", "new_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_resource
//
// [ resource_path ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromResource(resource_path string) (result Image) {
	iv, err := _I.Get(1352, "Image", "new_from_resource")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_resource_path := gi.CString(resource_path)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	args := []gi.Argument{arg_resource_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_resource_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromStock(stock_id string, size int32) (result Image) {
	iv, err := _I.Get(1353, "Image", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_stock_id, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_image_new_from_surface
//
// [ surface ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageFromSurface(surface cairo.Surface) (result Image) {
	iv, err := _I.Get(1354, "Image", "new_from_surface")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_surface := gi.NewPointerArgument(surface.P)
	args := []gi.Argument{arg_surface}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_clear
//
func (v Image) Clear() {
	iv, err := _I.Get(1355, "Image", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_image_get_animation
//
// [ result ] trans: nothing
//
func (v Image) GetAnimation() (result gdkpixbuf.PixbufAnimation) {
	iv, err := _I.Get(1356, "Image", "get_animation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_get_gicon
//
// [ gicon ] trans: nothing, dir: out
//
// [ size ] trans: everything, dir: out
//
func (v Image) GetGicon() (gicon g.Icon, size int32) {
	iv, err := _I.Get(1357, "Image", "get_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_gicon := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_gicon, arg_size}
	iv.Call(args, nil, &outArgs[0])
	gicon.P = outArgs[0].Pointer()
	size = outArgs[1].Int32()
	return
}

// gtk_image_get_icon_name
//
// [ icon_name ] trans: nothing, dir: out
//
// [ size ] trans: everything, dir: out
//
func (v Image) GetIconName() (icon_name string, size int32) {
	iv, err := _I.Get(1358, "Image", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_icon_name, arg_size}
	iv.Call(args, nil, &outArgs[0])
	icon_name = outArgs[0].String().Copy()
	size = outArgs[1].Int32()
	return
}

// Deprecated
//
// gtk_image_get_icon_set
//
// [ icon_set ] trans: nothing, dir: out
//
// [ size ] trans: everything, dir: out
//
func (v Image) GetIconSet() (icon_set IconSet, size int32) {
	iv, err := _I.Get(1359, "Image", "get_icon_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_set := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_icon_set, arg_size}
	iv.Call(args, nil, &outArgs[0])
	icon_set.P = outArgs[0].Pointer()
	size = outArgs[1].Int32()
	return
}

// gtk_image_get_pixbuf
//
// [ result ] trans: nothing
//
func (v Image) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1360, "Image", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_image_get_pixel_size
//
// [ result ] trans: nothing
//
func (v Image) GetPixelSize() (result int32) {
	iv, err := _I.Get(1361, "Image", "get_pixel_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_image_get_stock
//
// [ stock_id ] trans: nothing, dir: out
//
// [ size ] trans: everything, dir: out
//
func (v Image) GetStock() (stock_id string, size int32) {
	iv, err := _I.Get(1362, "Image", "get_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_stock_id, arg_size}
	iv.Call(args, nil, &outArgs[0])
	stock_id = outArgs[0].String().Copy()
	size = outArgs[1].Int32()
	return
}

// gtk_image_get_storage_type
//
// [ result ] trans: nothing
//
func (v Image) GetStorageType() (result ImageTypeEnum) {
	iv, err := _I.Get(1363, "Image", "get_storage_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ImageTypeEnum(ret.Int())
	return
}

// gtk_image_set_from_animation
//
// [ animation ] trans: nothing
//
func (v Image) SetFromAnimation(animation gdkpixbuf.IPixbufAnimation) {
	iv, err := _I.Get(1364, "Image", "set_from_animation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if animation != nil {
		tmp = animation.P_PixbufAnimation()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_animation := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_animation}
	iv.Call(args, nil, nil)
}

// gtk_image_set_from_file
//
// [ filename ] trans: nothing
//
func (v Image) SetFromFile(filename string) {
	iv, err := _I.Get(1365, "Image", "set_from_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// gtk_image_set_from_gicon
//
// [ icon ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Image) SetFromGicon(icon g.IIcon, size int32) {
	iv, err := _I.Get(1366, "Image", "set_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_icon, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_image_set_from_icon_name
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Image) SetFromIconName(icon_name string, size int32) {
	iv, err := _I.Get(1367, "Image", "set_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_icon_name, arg_size}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_image_set_from_icon_set
//
// [ icon_set ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Image) SetFromIconSet(icon_set IconSet, size int32) {
	iv, err := _I.Get(1368, "Image", "set_from_icon_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_set := gi.NewPointerArgument(icon_set.P)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_icon_set, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_image_set_from_pixbuf
//
// [ pixbuf ] trans: nothing
//
func (v Image) SetFromPixbuf(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(1369, "Image", "set_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// gtk_image_set_from_resource
//
// [ resource_path ] trans: nothing
//
func (v Image) SetFromResource(resource_path string) {
	iv, err := _I.Get(1370, "Image", "set_from_resource")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	args := []gi.Argument{arg_v, arg_resource_path}
	iv.Call(args, nil, nil)
	gi.Free(c_resource_path)
}

// Deprecated
//
// gtk_image_set_from_stock
//
// [ stock_id ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Image) SetFromStock(stock_id string, size int32) {
	iv, err := _I.Get(1371, "Image", "set_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_stock_id, arg_size}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_image_set_from_surface
//
// [ surface ] trans: nothing
//
func (v Image) SetFromSurface(surface cairo.Surface) {
	iv, err := _I.Get(1372, "Image", "set_from_surface")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_surface := gi.NewPointerArgument(surface.P)
	args := []gi.Argument{arg_v, arg_surface}
	iv.Call(args, nil, nil)
}

// gtk_image_set_pixel_size
//
// [ pixel_size ] trans: nothing
//
func (v Image) SetPixelSize(pixel_size int32) {
	iv, err := _I.Get(1373, "Image", "set_pixel_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixel_size := gi.NewInt32Argument(pixel_size)
	args := []gi.Argument{arg_v, arg_pixel_size}
	iv.Call(args, nil, nil)
}

// Object ImageAccessible
type ImageAccessible struct {
	atk.ComponentIfc
	atk.ImageIfc
	WidgetAccessible
}

func WrapImageAccessible(p unsafe.Pointer) (r ImageAccessible) { r.P = p; return }

type IImageAccessible interface{ P_ImageAccessible() unsafe.Pointer }

func (v ImageAccessible) P_ImageAccessible() unsafe.Pointer { return v.P }
func (v ImageAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v ImageAccessible) P_Image() unsafe.Pointer           { return v.P }
func ImageAccessibleGetType() gi.GType {
	ret := _I.GetGType(270, "ImageAccessible")
	return ret
}

// ignore GType struct ImageAccessibleClass

// Struct ImageAccessiblePrivate
type ImageAccessiblePrivate struct {
	P unsafe.Pointer
}

func ImageAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(271, "ImageAccessiblePrivate")
	return ret
}

// Object ImageCellAccessible
type ImageCellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	atk.TableCellIfc
	RendererCellAccessible
}

func WrapImageCellAccessible(p unsafe.Pointer) (r ImageCellAccessible) { r.P = p; return }

type IImageCellAccessible interface{ P_ImageCellAccessible() unsafe.Pointer }

func (v ImageCellAccessible) P_ImageCellAccessible() unsafe.Pointer { return v.P }
func (v ImageCellAccessible) P_Action() unsafe.Pointer              { return v.P }
func (v ImageCellAccessible) P_Component() unsafe.Pointer           { return v.P }
func (v ImageCellAccessible) P_Image() unsafe.Pointer               { return v.P }
func (v ImageCellAccessible) P_TableCell() unsafe.Pointer           { return v.P }
func ImageCellAccessibleGetType() gi.GType {
	ret := _I.GetGType(272, "ImageCellAccessible")
	return ret
}

// ignore GType struct ImageCellAccessibleClass

// Struct ImageCellAccessiblePrivate
type ImageCellAccessiblePrivate struct {
	P unsafe.Pointer
}

func ImageCellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(273, "ImageCellAccessiblePrivate")
	return ret
}

// ignore GType struct ImageClass

// Object ImageMenuItem
type ImageMenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	MenuItem
}

func WrapImageMenuItem(p unsafe.Pointer) (r ImageMenuItem) { r.P = p; return }

type IImageMenuItem interface{ P_ImageMenuItem() unsafe.Pointer }

func (v ImageMenuItem) P_ImageMenuItem() unsafe.Pointer    { return v.P }
func (v ImageMenuItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ImageMenuItem) P_Actionable() unsafe.Pointer       { return v.P }
func (v ImageMenuItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v ImageMenuItem) P_Buildable() unsafe.Pointer        { return v.P }
func ImageMenuItemGetType() gi.GType {
	ret := _I.GetGType(274, "ImageMenuItem")
	return ret
}

// Deprecated
//
// gtk_image_menu_item_new
//
// [ result ] trans: nothing
//
func NewImageMenuItem() (result ImageMenuItem) {
	iv, err := _I.Get(1374, "ImageMenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_menu_item_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ accel_group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageMenuItemFromStock(stock_id string, accel_group IAccelGroup) (result ImageMenuItem) {
	iv, err := _I.Get(1375, "ImageMenuItem", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_stock_id, arg_accel_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_menu_item_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageMenuItemWithLabel(label string) (result ImageMenuItem) {
	iv, err := _I.Get(1376, "ImageMenuItem", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_menu_item_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewImageMenuItemWithMnemonic(label string) (result ImageMenuItem) {
	iv, err := _I.Get(1377, "ImageMenuItem", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_menu_item_get_always_show_image
//
// [ result ] trans: nothing
//
func (v ImageMenuItem) GetAlwaysShowImage() (result bool) {
	iv, err := _I.Get(1378, "ImageMenuItem", "get_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_image_menu_item_get_image
//
// [ result ] trans: nothing
//
func (v ImageMenuItem) GetImage() (result Widget) {
	iv, err := _I.Get(1379, "ImageMenuItem", "get_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_image_menu_item_get_use_stock
//
// [ result ] trans: nothing
//
func (v ImageMenuItem) GetUseStock() (result bool) {
	iv, err := _I.Get(1380, "ImageMenuItem", "get_use_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_image_menu_item_set_accel_group
//
// [ accel_group ] trans: nothing
//
func (v ImageMenuItem) SetAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(1381, "ImageMenuItem", "set_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_image_menu_item_set_always_show_image
//
// [ always_show ] trans: nothing
//
func (v ImageMenuItem) SetAlwaysShowImage(always_show bool) {
	iv, err := _I.Get(1382, "ImageMenuItem", "set_always_show_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_always_show := gi.NewBoolArgument(always_show)
	args := []gi.Argument{arg_v, arg_always_show}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_image_menu_item_set_image
//
// [ image ] trans: nothing
//
func (v ImageMenuItem) SetImage(image IWidget) {
	iv, err := _I.Get(1383, "ImageMenuItem", "set_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if image != nil {
		tmp = image.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_image := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_image}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_image_menu_item_set_use_stock
//
// [ use_stock ] trans: nothing
//
func (v ImageMenuItem) SetUseStock(use_stock bool) {
	iv, err := _I.Get(1384, "ImageMenuItem", "set_use_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_stock := gi.NewBoolArgument(use_stock)
	args := []gi.Argument{arg_v, arg_use_stock}
	iv.Call(args, nil, nil)
}

// ignore GType struct ImageMenuItemClass

// Struct ImageMenuItemPrivate
type ImageMenuItemPrivate struct {
	P unsafe.Pointer
}

func ImageMenuItemPrivateGetType() gi.GType {
	ret := _I.GetGType(275, "ImageMenuItemPrivate")
	return ret
}

// Struct ImagePrivate
type ImagePrivate struct {
	P unsafe.Pointer
}

func ImagePrivateGetType() gi.GType {
	ret := _I.GetGType(276, "ImagePrivate")
	return ret
}

// Enum ImageType
type ImageTypeEnum int

const (
	ImageTypeEmpty     ImageTypeEnum = 0
	ImageTypePixbuf    ImageTypeEnum = 1
	ImageTypeStock     ImageTypeEnum = 2
	ImageTypeIconSet   ImageTypeEnum = 3
	ImageTypeAnimation ImageTypeEnum = 4
	ImageTypeIconName  ImageTypeEnum = 5
	ImageTypeGicon     ImageTypeEnum = 6
	ImageTypeSurface   ImageTypeEnum = 7
)

func ImageTypeGetType() gi.GType {
	ret := _I.GetGType(277, "ImageType")
	return ret
}

// Object InfoBar
type InfoBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapInfoBar(p unsafe.Pointer) (r InfoBar) { r.P = p; return }

type IInfoBar interface{ P_InfoBar() unsafe.Pointer }

func (v InfoBar) P_InfoBar() unsafe.Pointer          { return v.P }
func (v InfoBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v InfoBar) P_Buildable() unsafe.Pointer        { return v.P }
func (v InfoBar) P_Orientable() unsafe.Pointer       { return v.P }
func InfoBarGetType() gi.GType {
	ret := _I.GetGType(278, "InfoBar")
	return ret
}

// gtk_info_bar_new
//
// [ result ] trans: nothing
//
func NewInfoBar() (result InfoBar) {
	iv, err := _I.Get(1385, "InfoBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_info_bar_add_action_widget
//
// [ child ] trans: nothing
//
// [ response_id ] trans: nothing
//
func (v InfoBar) AddActionWidget(child IWidget, response_id int32) {
	iv, err := _I.Get(1386, "InfoBar", "add_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_child, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_add_button
//
// [ button_text ] trans: nothing
//
// [ response_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InfoBar) AddButton(button_text string, response_id int32) (result Button) {
	iv, err := _I.Get(1387, "InfoBar", "add_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_button_text := gi.CString(button_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_button_text := gi.NewStringArgument(c_button_text)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_button_text, arg_response_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_button_text)
	result.P = ret.Pointer()
	return
}

// gtk_info_bar_get_action_area
//
// [ result ] trans: nothing
//
func (v InfoBar) GetActionArea() (result Widget) {
	iv, err := _I.Get(1388, "InfoBar", "get_action_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_info_bar_get_content_area
//
// [ result ] trans: nothing
//
func (v InfoBar) GetContentArea() (result Widget) {
	iv, err := _I.Get(1389, "InfoBar", "get_content_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_info_bar_get_message_type
//
// [ result ] trans: nothing
//
func (v InfoBar) GetMessageType() (result MessageTypeEnum) {
	iv, err := _I.Get(1390, "InfoBar", "get_message_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = MessageTypeEnum(ret.Int())
	return
}

// gtk_info_bar_get_revealed
//
// [ result ] trans: nothing
//
func (v InfoBar) GetRevealed() (result bool) {
	iv, err := _I.Get(1391, "InfoBar", "get_revealed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_info_bar_get_show_close_button
//
// [ result ] trans: nothing
//
func (v InfoBar) GetShowCloseButton() (result bool) {
	iv, err := _I.Get(1392, "InfoBar", "get_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_info_bar_response
//
// [ response_id ] trans: nothing
//
func (v InfoBar) Response(response_id int32) {
	iv, err := _I.Get(1393, "InfoBar", "response")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_set_default_response
//
// [ response_id ] trans: nothing
//
func (v InfoBar) SetDefaultResponse(response_id int32) {
	iv, err := _I.Get(1394, "InfoBar", "set_default_response")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	args := []gi.Argument{arg_v, arg_response_id}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_set_message_type
//
// [ message_type ] trans: nothing
//
func (v InfoBar) SetMessageType(message_type MessageTypeEnum) {
	iv, err := _I.Get(1395, "InfoBar", "set_message_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_message_type := gi.NewIntArgument(int(message_type))
	args := []gi.Argument{arg_v, arg_message_type}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_set_response_sensitive
//
// [ response_id ] trans: nothing
//
// [ setting ] trans: nothing
//
func (v InfoBar) SetResponseSensitive(response_id int32, setting bool) {
	iv, err := _I.Get(1396, "InfoBar", "set_response_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_response_id := gi.NewInt32Argument(response_id)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_response_id, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_set_revealed
//
// [ revealed ] trans: nothing
//
func (v InfoBar) SetRevealed(revealed bool) {
	iv, err := _I.Get(1397, "InfoBar", "set_revealed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_revealed := gi.NewBoolArgument(revealed)
	args := []gi.Argument{arg_v, arg_revealed}
	iv.Call(args, nil, nil)
}

// gtk_info_bar_set_show_close_button
//
// [ setting ] trans: nothing
//
func (v InfoBar) SetShowCloseButton(setting bool) {
	iv, err := _I.Get(1398, "InfoBar", "set_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// ignore GType struct InfoBarClass

// Struct InfoBarPrivate
type InfoBarPrivate struct {
	P unsafe.Pointer
}

func InfoBarPrivateGetType() gi.GType {
	ret := _I.GetGType(279, "InfoBarPrivate")
	return ret
}

// Flags InputHints
type InputHintsFlags int

const (
	InputHintsNone               InputHintsFlags = 0
	InputHintsSpellcheck         InputHintsFlags = 1
	InputHintsNoSpellcheck       InputHintsFlags = 2
	InputHintsWordCompletion     InputHintsFlags = 4
	InputHintsLowercase          InputHintsFlags = 8
	InputHintsUppercaseChars     InputHintsFlags = 16
	InputHintsUppercaseWords     InputHintsFlags = 32
	InputHintsUppercaseSentences InputHintsFlags = 64
	InputHintsInhibitOsk         InputHintsFlags = 128
	InputHintsVerticalWriting    InputHintsFlags = 256
	InputHintsEmoji              InputHintsFlags = 512
	InputHintsNoEmoji            InputHintsFlags = 1024
)

func InputHintsGetType() gi.GType {
	ret := _I.GetGType(280, "InputHints")
	return ret
}

// Enum InputPurpose
type InputPurposeEnum int

const (
	InputPurposeFreeForm InputPurposeEnum = 0
	InputPurposeAlpha    InputPurposeEnum = 1
	InputPurposeDigits   InputPurposeEnum = 2
	InputPurposeNumber   InputPurposeEnum = 3
	InputPurposePhone    InputPurposeEnum = 4
	InputPurposeUrl      InputPurposeEnum = 5
	InputPurposeEmail    InputPurposeEnum = 6
	InputPurposeName     InputPurposeEnum = 7
	InputPurposePassword InputPurposeEnum = 8
	InputPurposePin      InputPurposeEnum = 9
)

func InputPurposeGetType() gi.GType {
	ret := _I.GetGType(281, "InputPurpose")
	return ret
}

// Object Invisible
type Invisible struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapInvisible(p unsafe.Pointer) (r Invisible) { r.P = p; return }

type IInvisible interface{ P_Invisible() unsafe.Pointer }

func (v Invisible) P_Invisible() unsafe.Pointer        { return v.P }
func (v Invisible) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Invisible) P_Buildable() unsafe.Pointer        { return v.P }
func InvisibleGetType() gi.GType {
	ret := _I.GetGType(282, "Invisible")
	return ret
}

// gtk_invisible_new
//
// [ result ] trans: nothing
//
func NewInvisible() (result Invisible) {
	iv, err := _I.Get(1399, "Invisible", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_invisible_new_for_screen
//
// [ screen ] trans: nothing
//
// [ result ] trans: nothing
//
func NewInvisibleForScreen(screen gdk.IScreen) (result Invisible) {
	iv, err := _I.Get(1400, "Invisible", "new_for_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_screen}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_invisible_get_screen
//
// [ result ] trans: nothing
//
func (v Invisible) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(1401, "Invisible", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_invisible_set_screen
//
// [ screen ] trans: nothing
//
func (v Invisible) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(1402, "Invisible", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// ignore GType struct InvisibleClass

// Struct InvisiblePrivate
type InvisiblePrivate struct {
	P unsafe.Pointer
}

func InvisiblePrivateGetType() gi.GType {
	ret := _I.GetGType(283, "InvisiblePrivate")
	return ret
}

// Flags JunctionSides
type JunctionSidesFlags int

const (
	JunctionSidesNone              JunctionSidesFlags = 0
	JunctionSidesCornerTopleft     JunctionSidesFlags = 1
	JunctionSidesCornerTopright    JunctionSidesFlags = 2
	JunctionSidesCornerBottomleft  JunctionSidesFlags = 4
	JunctionSidesCornerBottomright JunctionSidesFlags = 8
	JunctionSidesTop               JunctionSidesFlags = 3
	JunctionSidesBottom            JunctionSidesFlags = 12
	JunctionSidesLeft              JunctionSidesFlags = 5
	JunctionSidesRight             JunctionSidesFlags = 10
)

func JunctionSidesGetType() gi.GType {
	ret := _I.GetGType(284, "JunctionSides")
	return ret
}

// Enum Justification
type JustificationEnum int

const (
	JustificationLeft   JustificationEnum = 0
	JustificationRight  JustificationEnum = 1
	JustificationCenter JustificationEnum = 2
	JustificationFill   JustificationEnum = 3
)

func JustificationGetType() gi.GType {
	ret := _I.GetGType(285, "Justification")
	return ret
}

type KeySnoopFuncStruct struct {
	F_grab_widget Widget
	F_event       gdk.EventKey
	F_func_data   unsafe.Pointer
}

func GetPointer_myKeySnoopFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkKeySnoopFunc())
}

//export myGtkKeySnoopFunc
func myGtkKeySnoopFunc(grab_widget *C.GtkWidget, event *C.GdkEventKey, func_data C.gpointer) {
	// TODO: not found user_data
}

// Object Label
type Label struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Misc
}

func WrapLabel(p unsafe.Pointer) (r Label) { r.P = p; return }

type ILabel interface{ P_Label() unsafe.Pointer }

func (v Label) P_Label() unsafe.Pointer            { return v.P }
func (v Label) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Label) P_Buildable() unsafe.Pointer        { return v.P }
func LabelGetType() gi.GType {
	ret := _I.GetGType(286, "Label")
	return ret
}

// gtk_label_new
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLabel(str string) (result Label) {
	iv, err := _I.Get(1403, "Label", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_str}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result.P = ret.Pointer()
	return
}

// gtk_label_new_with_mnemonic
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLabelWithMnemonic(str string) (result Label) {
	iv, err := _I.Get(1404, "Label", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_str}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result.P = ret.Pointer()
	return
}

// gtk_label_get_angle
//
// [ result ] trans: nothing
//
func (v Label) GetAngle() (result float64) {
	iv, err := _I.Get(1405, "Label", "get_angle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_label_get_attributes
//
// [ result ] trans: nothing
//
func (v Label) GetAttributes() (result pango.AttrList) {
	iv, err := _I.Get(1406, "Label", "get_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_label_get_current_uri
//
// [ result ] trans: nothing
//
func (v Label) GetCurrentUri() (result string) {
	iv, err := _I.Get(1407, "Label", "get_current_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_label_get_ellipsize
//
// [ result ] trans: nothing
//
func (v Label) GetEllipsize() (result pango.EllipsizeModeEnum) {
	iv, err := _I.Get(1408, "Label", "get_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.EllipsizeModeEnum(ret.Int())
	return
}

// gtk_label_get_justify
//
// [ result ] trans: nothing
//
func (v Label) GetJustify() (result JustificationEnum) {
	iv, err := _I.Get(1409, "Label", "get_justify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = JustificationEnum(ret.Int())
	return
}

// gtk_label_get_label
//
// [ result ] trans: nothing
//
func (v Label) GetLabel() (result string) {
	iv, err := _I.Get(1410, "Label", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_label_get_layout
//
// [ result ] trans: nothing
//
func (v Label) GetLayout() (result pango.Layout) {
	iv, err := _I.Get(1411, "Label", "get_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_label_get_layout_offsets
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
func (v Label) GetLayoutOffsets() (x int32, y int32) {
	iv, err := _I.Get(1412, "Label", "get_layout_offsets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	iv.Call(args, nil, &outArgs[0])
	x = outArgs[0].Int32()
	y = outArgs[1].Int32()
	return
}

// gtk_label_get_line_wrap
//
// [ result ] trans: nothing
//
func (v Label) GetLineWrap() (result bool) {
	iv, err := _I.Get(1413, "Label", "get_line_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_line_wrap_mode
//
// [ result ] trans: nothing
//
func (v Label) GetLineWrapMode() (result pango.WrapModeEnum) {
	iv, err := _I.Get(1414, "Label", "get_line_wrap_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.WrapModeEnum(ret.Int())
	return
}

// gtk_label_get_lines
//
// [ result ] trans: nothing
//
func (v Label) GetLines() (result int32) {
	iv, err := _I.Get(1415, "Label", "get_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_label_get_max_width_chars
//
// [ result ] trans: nothing
//
func (v Label) GetMaxWidthChars() (result int32) {
	iv, err := _I.Get(1416, "Label", "get_max_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_label_get_mnemonic_keyval
//
// [ result ] trans: nothing
//
func (v Label) GetMnemonicKeyval() (result uint32) {
	iv, err := _I.Get(1417, "Label", "get_mnemonic_keyval")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_label_get_mnemonic_widget
//
// [ result ] trans: nothing
//
func (v Label) GetMnemonicWidget() (result Widget) {
	iv, err := _I.Get(1418, "Label", "get_mnemonic_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_label_get_selectable
//
// [ result ] trans: nothing
//
func (v Label) GetSelectable() (result bool) {
	iv, err := _I.Get(1419, "Label", "get_selectable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_selection_bounds
//
// [ start ] trans: everything, dir: out
//
// [ end ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Label) GetSelectionBounds() (result bool, start int32, end int32) {
	iv, err := _I.Get(1420, "Label", "get_selection_bounds")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_end := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_start, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	start = outArgs[0].Int32()
	end = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_label_get_single_line_mode
//
// [ result ] trans: nothing
//
func (v Label) GetSingleLineMode() (result bool) {
	iv, err := _I.Get(1421, "Label", "get_single_line_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_text
//
// [ result ] trans: nothing
//
func (v Label) GetText() (result string) {
	iv, err := _I.Get(1422, "Label", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_label_get_track_visited_links
//
// [ result ] trans: nothing
//
func (v Label) GetTrackVisitedLinks() (result bool) {
	iv, err := _I.Get(1423, "Label", "get_track_visited_links")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_use_markup
//
// [ result ] trans: nothing
//
func (v Label) GetUseMarkup() (result bool) {
	iv, err := _I.Get(1424, "Label", "get_use_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_use_underline
//
// [ result ] trans: nothing
//
func (v Label) GetUseUnderline() (result bool) {
	iv, err := _I.Get(1425, "Label", "get_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_label_get_width_chars
//
// [ result ] trans: nothing
//
func (v Label) GetWidthChars() (result int32) {
	iv, err := _I.Get(1426, "Label", "get_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_label_get_xalign
//
// [ result ] trans: nothing
//
func (v Label) GetXalign() (result float32) {
	iv, err := _I.Get(1427, "Label", "get_xalign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_label_get_yalign
//
// [ result ] trans: nothing
//
func (v Label) GetYalign() (result float32) {
	iv, err := _I.Get(1428, "Label", "get_yalign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_label_select_region
//
// [ start_offset ] trans: nothing
//
// [ end_offset ] trans: nothing
//
func (v Label) SelectRegion(start_offset int32, end_offset int32) {
	iv, err := _I.Get(1429, "Label", "select_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_offset := gi.NewInt32Argument(start_offset)
	arg_end_offset := gi.NewInt32Argument(end_offset)
	args := []gi.Argument{arg_v, arg_start_offset, arg_end_offset}
	iv.Call(args, nil, nil)
}

// gtk_label_set_angle
//
// [ angle ] trans: nothing
//
func (v Label) SetAngle(angle float64) {
	iv, err := _I.Get(1430, "Label", "set_angle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_angle := gi.NewDoubleArgument(angle)
	args := []gi.Argument{arg_v, arg_angle}
	iv.Call(args, nil, nil)
}

// gtk_label_set_attributes
//
// [ attrs ] trans: nothing
//
func (v Label) SetAttributes(attrs pango.AttrList) {
	iv, err := _I.Get(1431, "Label", "set_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attrs := gi.NewPointerArgument(attrs.P)
	args := []gi.Argument{arg_v, arg_attrs}
	iv.Call(args, nil, nil)
}

// gtk_label_set_ellipsize
//
// [ mode ] trans: nothing
//
func (v Label) SetEllipsize(mode pango.EllipsizeModeEnum) {
	iv, err := _I.Get(1432, "Label", "set_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_label_set_justify
//
// [ jtype ] trans: nothing
//
func (v Label) SetJustify(jtype JustificationEnum) {
	iv, err := _I.Get(1433, "Label", "set_justify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_jtype := gi.NewIntArgument(int(jtype))
	args := []gi.Argument{arg_v, arg_jtype}
	iv.Call(args, nil, nil)
}

// gtk_label_set_label
//
// [ str ] trans: nothing
//
func (v Label) SetLabel(str string) {
	iv, err := _I.Get(1434, "Label", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// gtk_label_set_line_wrap
//
// [ wrap ] trans: nothing
//
func (v Label) SetLineWrap(wrap bool) {
	iv, err := _I.Get(1435, "Label", "set_line_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wrap := gi.NewBoolArgument(wrap)
	args := []gi.Argument{arg_v, arg_wrap}
	iv.Call(args, nil, nil)
}

// gtk_label_set_line_wrap_mode
//
// [ wrap_mode ] trans: nothing
//
func (v Label) SetLineWrapMode(wrap_mode pango.WrapModeEnum) {
	iv, err := _I.Get(1436, "Label", "set_line_wrap_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wrap_mode := gi.NewIntArgument(int(wrap_mode))
	args := []gi.Argument{arg_v, arg_wrap_mode}
	iv.Call(args, nil, nil)
}

// gtk_label_set_lines
//
// [ lines ] trans: nothing
//
func (v Label) SetLines(lines int32) {
	iv, err := _I.Get(1437, "Label", "set_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_lines := gi.NewInt32Argument(lines)
	args := []gi.Argument{arg_v, arg_lines}
	iv.Call(args, nil, nil)
}

// gtk_label_set_markup
//
// [ str ] trans: nothing
//
func (v Label) SetMarkup(str string) {
	iv, err := _I.Get(1438, "Label", "set_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// gtk_label_set_markup_with_mnemonic
//
// [ str ] trans: nothing
//
func (v Label) SetMarkupWithMnemonic(str string) {
	iv, err := _I.Get(1439, "Label", "set_markup_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// gtk_label_set_max_width_chars
//
// [ n_chars ] trans: nothing
//
func (v Label) SetMaxWidthChars(n_chars int32) {
	iv, err := _I.Get(1440, "Label", "set_max_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_n_chars}
	iv.Call(args, nil, nil)
}

// gtk_label_set_mnemonic_widget
//
// [ widget ] trans: nothing
//
func (v Label) SetMnemonicWidget(widget IWidget) {
	iv, err := _I.Get(1441, "Label", "set_mnemonic_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_label_set_pattern
//
// [ pattern ] trans: nothing
//
func (v Label) SetPattern(pattern string) {
	iv, err := _I.Get(1442, "Label", "set_pattern")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_pattern := gi.CString(pattern)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pattern := gi.NewStringArgument(c_pattern)
	args := []gi.Argument{arg_v, arg_pattern}
	iv.Call(args, nil, nil)
	gi.Free(c_pattern)
}

// gtk_label_set_selectable
//
// [ setting ] trans: nothing
//
func (v Label) SetSelectable(setting bool) {
	iv, err := _I.Get(1443, "Label", "set_selectable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_label_set_single_line_mode
//
// [ single_line_mode ] trans: nothing
//
func (v Label) SetSingleLineMode(single_line_mode bool) {
	iv, err := _I.Get(1444, "Label", "set_single_line_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_single_line_mode := gi.NewBoolArgument(single_line_mode)
	args := []gi.Argument{arg_v, arg_single_line_mode}
	iv.Call(args, nil, nil)
}

// gtk_label_set_text
//
// [ str ] trans: nothing
//
func (v Label) SetText(str string) {
	iv, err := _I.Get(1445, "Label", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// gtk_label_set_text_with_mnemonic
//
// [ str ] trans: nothing
//
func (v Label) SetTextWithMnemonic(str string) {
	iv, err := _I.Get(1446, "Label", "set_text_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// gtk_label_set_track_visited_links
//
// [ track_links ] trans: nothing
//
func (v Label) SetTrackVisitedLinks(track_links bool) {
	iv, err := _I.Get(1447, "Label", "set_track_visited_links")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_track_links := gi.NewBoolArgument(track_links)
	args := []gi.Argument{arg_v, arg_track_links}
	iv.Call(args, nil, nil)
}

// gtk_label_set_use_markup
//
// [ setting ] trans: nothing
//
func (v Label) SetUseMarkup(setting bool) {
	iv, err := _I.Get(1448, "Label", "set_use_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_label_set_use_underline
//
// [ setting ] trans: nothing
//
func (v Label) SetUseUnderline(setting bool) {
	iv, err := _I.Get(1449, "Label", "set_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_label_set_width_chars
//
// [ n_chars ] trans: nothing
//
func (v Label) SetWidthChars(n_chars int32) {
	iv, err := _I.Get(1450, "Label", "set_width_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_chars := gi.NewInt32Argument(n_chars)
	args := []gi.Argument{arg_v, arg_n_chars}
	iv.Call(args, nil, nil)
}

// gtk_label_set_xalign
//
// [ xalign ] trans: nothing
//
func (v Label) SetXalign(xalign float32) {
	iv, err := _I.Get(1451, "Label", "set_xalign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	args := []gi.Argument{arg_v, arg_xalign}
	iv.Call(args, nil, nil)
}

// gtk_label_set_yalign
//
// [ yalign ] trans: nothing
//
func (v Label) SetYalign(yalign float32) {
	iv, err := _I.Get(1452, "Label", "set_yalign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_yalign := gi.NewFloatArgument(yalign)
	args := []gi.Argument{arg_v, arg_yalign}
	iv.Call(args, nil, nil)
}

// Object LabelAccessible
type LabelAccessible struct {
	atk.ComponentIfc
	atk.HypertextIfc
	atk.TextIfc
	WidgetAccessible
}

func WrapLabelAccessible(p unsafe.Pointer) (r LabelAccessible) { r.P = p; return }

type ILabelAccessible interface{ P_LabelAccessible() unsafe.Pointer }

func (v LabelAccessible) P_LabelAccessible() unsafe.Pointer { return v.P }
func (v LabelAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v LabelAccessible) P_Hypertext() unsafe.Pointer       { return v.P }
func (v LabelAccessible) P_Text() unsafe.Pointer            { return v.P }
func LabelAccessibleGetType() gi.GType {
	ret := _I.GetGType(287, "LabelAccessible")
	return ret
}

// ignore GType struct LabelAccessibleClass

// Struct LabelAccessiblePrivate
type LabelAccessiblePrivate struct {
	P unsafe.Pointer
}

func LabelAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(288, "LabelAccessiblePrivate")
	return ret
}

// ignore GType struct LabelClass

// Struct LabelPrivate
type LabelPrivate struct {
	P unsafe.Pointer
}

func LabelPrivateGetType() gi.GType {
	ret := _I.GetGType(289, "LabelPrivate")
	return ret
}

// Struct LabelSelectionInfo
type LabelSelectionInfo struct {
	P unsafe.Pointer
}

func LabelSelectionInfoGetType() gi.GType {
	ret := _I.GetGType(290, "LabelSelectionInfo")
	return ret
}

// Object Layout
type Layout struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ScrollableIfc
	Container
}

func WrapLayout(p unsafe.Pointer) (r Layout) { r.P = p; return }

type ILayout interface{ P_Layout() unsafe.Pointer }

func (v Layout) P_Layout() unsafe.Pointer           { return v.P }
func (v Layout) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Layout) P_Buildable() unsafe.Pointer        { return v.P }
func (v Layout) P_Scrollable() unsafe.Pointer       { return v.P }
func LayoutGetType() gi.GType {
	ret := _I.GetGType(291, "Layout")
	return ret
}

// gtk_layout_new
//
// [ hadjustment ] trans: nothing
//
// [ vadjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLayout(hadjustment IAdjustment, vadjustment IAdjustment) (result Layout) {
	iv, err := _I.Get(1453, "Layout", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if hadjustment != nil {
		tmp = hadjustment.P_Adjustment()
	}
	var tmp1 unsafe.Pointer
	if vadjustment != nil {
		tmp1 = vadjustment.P_Adjustment()
	}
	arg_hadjustment := gi.NewPointerArgument(tmp)
	arg_vadjustment := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_hadjustment, arg_vadjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_layout_get_bin_window
//
// [ result ] trans: nothing
//
func (v Layout) GetBinWindow() (result gdk.Window) {
	iv, err := _I.Get(1454, "Layout", "get_bin_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_layout_get_hadjustment
//
// [ result ] trans: nothing
//
func (v Layout) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(1455, "Layout", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_layout_get_size
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v Layout) GetSize() (width uint32, height uint32) {
	iv, err := _I.Get(1456, "Layout", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Uint32()
	height = outArgs[1].Uint32()
	return
}

// Deprecated
//
// gtk_layout_get_vadjustment
//
// [ result ] trans: nothing
//
func (v Layout) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(1457, "Layout", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_layout_move
//
// [ child_widget ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func (v Layout) Move(child_widget IWidget, x int32, y int32) {
	iv, err := _I.Get(1458, "Layout", "move")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child_widget != nil {
		tmp = child_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_widget := gi.NewPointerArgument(tmp)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_child_widget, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// gtk_layout_put
//
// [ child_widget ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func (v Layout) Put(child_widget IWidget, x int32, y int32) {
	iv, err := _I.Get(1459, "Layout", "put")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child_widget != nil {
		tmp = child_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_widget := gi.NewPointerArgument(tmp)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_child_widget, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_layout_set_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v Layout) SetHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(1460, "Layout", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_layout_set_size
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Layout) SetSize(width uint32, height uint32) {
	iv, err := _I.Get(1461, "Layout", "set_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewUint32Argument(width)
	arg_height := gi.NewUint32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_layout_set_vadjustment
//
// [ adjustment ] trans: nothing
//
func (v Layout) SetVadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(1462, "Layout", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// ignore GType struct LayoutClass

// Struct LayoutPrivate
type LayoutPrivate struct {
	P unsafe.Pointer
}

func LayoutPrivateGetType() gi.GType {
	ret := _I.GetGType(292, "LayoutPrivate")
	return ret
}

// Object LevelBar
type LevelBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Widget
}

func WrapLevelBar(p unsafe.Pointer) (r LevelBar) { r.P = p; return }

type ILevelBar interface{ P_LevelBar() unsafe.Pointer }

func (v LevelBar) P_LevelBar() unsafe.Pointer         { return v.P }
func (v LevelBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v LevelBar) P_Buildable() unsafe.Pointer        { return v.P }
func (v LevelBar) P_Orientable() unsafe.Pointer       { return v.P }
func LevelBarGetType() gi.GType {
	ret := _I.GetGType(293, "LevelBar")
	return ret
}

// gtk_level_bar_new
//
// [ result ] trans: nothing
//
func NewLevelBar() (result LevelBar) {
	iv, err := _I.Get(1463, "LevelBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_level_bar_new_for_interval
//
// [ min_value ] trans: nothing
//
// [ max_value ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLevelBarForInterval(min_value float64, max_value float64) (result LevelBar) {
	iv, err := _I.Get(1464, "LevelBar", "new_for_interval")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_min_value := gi.NewDoubleArgument(min_value)
	arg_max_value := gi.NewDoubleArgument(max_value)
	args := []gi.Argument{arg_min_value, arg_max_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_level_bar_add_offset_value
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v LevelBar) AddOffsetValue(name string, value float64) {
	iv, err := _I.Get(1465, "LevelBar", "add_offset_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_level_bar_get_inverted
//
// [ result ] trans: nothing
//
func (v LevelBar) GetInverted() (result bool) {
	iv, err := _I.Get(1466, "LevelBar", "get_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_level_bar_get_max_value
//
// [ result ] trans: nothing
//
func (v LevelBar) GetMaxValue() (result float64) {
	iv, err := _I.Get(1467, "LevelBar", "get_max_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_level_bar_get_min_value
//
// [ result ] trans: nothing
//
func (v LevelBar) GetMinValue() (result float64) {
	iv, err := _I.Get(1468, "LevelBar", "get_min_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_level_bar_get_mode
//
// [ result ] trans: nothing
//
func (v LevelBar) GetMode() (result LevelBarModeEnum) {
	iv, err := _I.Get(1469, "LevelBar", "get_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = LevelBarModeEnum(ret.Int())
	return
}

// gtk_level_bar_get_offset_value
//
// [ name ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v LevelBar) GetOffsetValue(name string) (result bool, value float64) {
	iv, err := _I.Get(1470, "LevelBar", "get_offset_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_name, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	value = outArgs[0].Double()
	result = ret.Bool()
	return
}

// gtk_level_bar_get_value
//
// [ result ] trans: nothing
//
func (v LevelBar) GetValue() (result float64) {
	iv, err := _I.Get(1471, "LevelBar", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_level_bar_remove_offset_value
//
// [ name ] trans: nothing
//
func (v LevelBar) RemoveOffsetValue(name string) {
	iv, err := _I.Get(1472, "LevelBar", "remove_offset_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_level_bar_set_inverted
//
// [ inverted ] trans: nothing
//
func (v LevelBar) SetInverted(inverted bool) {
	iv, err := _I.Get(1473, "LevelBar", "set_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_inverted := gi.NewBoolArgument(inverted)
	args := []gi.Argument{arg_v, arg_inverted}
	iv.Call(args, nil, nil)
}

// gtk_level_bar_set_max_value
//
// [ value ] trans: nothing
//
func (v LevelBar) SetMaxValue(value float64) {
	iv, err := _I.Get(1474, "LevelBar", "set_max_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_level_bar_set_min_value
//
// [ value ] trans: nothing
//
func (v LevelBar) SetMinValue(value float64) {
	iv, err := _I.Get(1475, "LevelBar", "set_min_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_level_bar_set_mode
//
// [ mode ] trans: nothing
//
func (v LevelBar) SetMode(mode LevelBarModeEnum) {
	iv, err := _I.Get(1476, "LevelBar", "set_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_level_bar_set_value
//
// [ value ] trans: nothing
//
func (v LevelBar) SetValue(value float64) {
	iv, err := _I.Get(1477, "LevelBar", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// Object LevelBarAccessible
type LevelBarAccessible struct {
	atk.ComponentIfc
	atk.ValueIfc
	WidgetAccessible
}

func WrapLevelBarAccessible(p unsafe.Pointer) (r LevelBarAccessible) { r.P = p; return }

type ILevelBarAccessible interface{ P_LevelBarAccessible() unsafe.Pointer }

func (v LevelBarAccessible) P_LevelBarAccessible() unsafe.Pointer { return v.P }
func (v LevelBarAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v LevelBarAccessible) P_Value() unsafe.Pointer              { return v.P }
func LevelBarAccessibleGetType() gi.GType {
	ret := _I.GetGType(294, "LevelBarAccessible")
	return ret
}

// ignore GType struct LevelBarAccessibleClass

// Struct LevelBarAccessiblePrivate
type LevelBarAccessiblePrivate struct {
	P unsafe.Pointer
}

func LevelBarAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(295, "LevelBarAccessiblePrivate")
	return ret
}

// ignore GType struct LevelBarClass

// Enum LevelBarMode
type LevelBarModeEnum int

const (
	LevelBarModeContinuous LevelBarModeEnum = 0
	LevelBarModeDiscrete   LevelBarModeEnum = 1
)

func LevelBarModeGetType() gi.GType {
	ret := _I.GetGType(296, "LevelBarMode")
	return ret
}

// Struct LevelBarPrivate
type LevelBarPrivate struct {
	P unsafe.Pointer
}

func LevelBarPrivateGetType() gi.GType {
	ret := _I.GetGType(297, "LevelBarPrivate")
	return ret
}

// Enum License
type LicenseEnum int

const (
	LicenseUnknown    LicenseEnum = 0
	LicenseCustom     LicenseEnum = 1
	LicenseGpl20      LicenseEnum = 2
	LicenseGpl30      LicenseEnum = 3
	LicenseLgpl21     LicenseEnum = 4
	LicenseLgpl30     LicenseEnum = 5
	LicenseBsd        LicenseEnum = 6
	LicenseMitX11     LicenseEnum = 7
	LicenseArtistic   LicenseEnum = 8
	LicenseGpl20Only  LicenseEnum = 9
	LicenseGpl30Only  LicenseEnum = 10
	LicenseLgpl21Only LicenseEnum = 11
	LicenseLgpl30Only LicenseEnum = 12
	LicenseAgpl30     LicenseEnum = 13
	LicenseAgpl30Only LicenseEnum = 14
)

func LicenseGetType() gi.GType {
	ret := _I.GetGType(298, "License")
	return ret
}

// Object LinkButton
type LinkButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Button
}

func WrapLinkButton(p unsafe.Pointer) (r LinkButton) { r.P = p; return }

type ILinkButton interface{ P_LinkButton() unsafe.Pointer }

func (v LinkButton) P_LinkButton() unsafe.Pointer       { return v.P }
func (v LinkButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v LinkButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v LinkButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v LinkButton) P_Buildable() unsafe.Pointer        { return v.P }
func LinkButtonGetType() gi.GType {
	ret := _I.GetGType(299, "LinkButton")
	return ret
}

// gtk_link_button_new
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLinkButton(uri string) (result LinkButton) {
	iv, err := _I.Get(1478, "LinkButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result.P = ret.Pointer()
	return
}

// gtk_link_button_new_with_label
//
// [ uri ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLinkButtonWithLabel(uri string, label string) (result LinkButton) {
	iv, err := _I.Get(1479, "LinkButton", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	c_label := gi.CString(label)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_uri, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_link_button_get_uri
//
// [ result ] trans: nothing
//
func (v LinkButton) GetUri() (result string) {
	iv, err := _I.Get(1480, "LinkButton", "get_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_link_button_get_visited
//
// [ result ] trans: nothing
//
func (v LinkButton) GetVisited() (result bool) {
	iv, err := _I.Get(1481, "LinkButton", "get_visited")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_link_button_set_uri
//
// [ uri ] trans: nothing
//
func (v LinkButton) SetUri(uri string) {
	iv, err := _I.Get(1482, "LinkButton", "set_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// gtk_link_button_set_visited
//
// [ visited ] trans: nothing
//
func (v LinkButton) SetVisited(visited bool) {
	iv, err := _I.Get(1483, "LinkButton", "set_visited")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visited := gi.NewBoolArgument(visited)
	args := []gi.Argument{arg_v, arg_visited}
	iv.Call(args, nil, nil)
}

// Object LinkButtonAccessible
type LinkButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.HyperlinkImplIfc
	atk.ImageIfc
	ButtonAccessible
}

func WrapLinkButtonAccessible(p unsafe.Pointer) (r LinkButtonAccessible) { r.P = p; return }

type ILinkButtonAccessible interface{ P_LinkButtonAccessible() unsafe.Pointer }

func (v LinkButtonAccessible) P_LinkButtonAccessible() unsafe.Pointer { return v.P }
func (v LinkButtonAccessible) P_Action() unsafe.Pointer               { return v.P }
func (v LinkButtonAccessible) P_Component() unsafe.Pointer            { return v.P }
func (v LinkButtonAccessible) P_HyperlinkImpl() unsafe.Pointer        { return v.P }
func (v LinkButtonAccessible) P_Image() unsafe.Pointer                { return v.P }
func LinkButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(300, "LinkButtonAccessible")
	return ret
}

// ignore GType struct LinkButtonAccessibleClass

// Struct LinkButtonAccessiblePrivate
type LinkButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func LinkButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(301, "LinkButtonAccessiblePrivate")
	return ret
}

// ignore GType struct LinkButtonClass

// Struct LinkButtonPrivate
type LinkButtonPrivate struct {
	P unsafe.Pointer
}

func LinkButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(302, "LinkButtonPrivate")
	return ret
}

// Object ListBox
type ListBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapListBox(p unsafe.Pointer) (r ListBox) { r.P = p; return }

type IListBox interface{ P_ListBox() unsafe.Pointer }

func (v ListBox) P_ListBox() unsafe.Pointer          { return v.P }
func (v ListBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ListBox) P_Buildable() unsafe.Pointer        { return v.P }
func ListBoxGetType() gi.GType {
	ret := _I.GetGType(303, "ListBox")
	return ret
}

// gtk_list_box_new
//
// [ result ] trans: nothing
//
func NewListBox() (result ListBox) {
	iv, err := _I.Get(1484, "ListBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_bind_model
//
// [ model ] trans: nothing
//
// [ create_widget_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_free_func ] trans: nothing
//
func (v ListBox) BindModel(model g.IListModel, create_widget_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, user_data_free_func int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1485, "ListBox", "bind_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_ListModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	arg_create_widget_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myListBoxCreateWidgetFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_user_data_free_func := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_model, arg_create_widget_func, arg_user_data, arg_user_data_free_func}
	iv.Call(args, nil, nil)
}

// gtk_list_box_drag_highlight_row
//
// [ row ] trans: nothing
//
func (v ListBox) DragHighlightRow(row IListBoxRow) {
	iv, err := _I.Get(1486, "ListBox", "drag_highlight_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if row != nil {
		tmp = row.P_ListBoxRow()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_row}
	iv.Call(args, nil, nil)
}

// gtk_list_box_drag_unhighlight_row
//
func (v ListBox) DragUnhighlightRow() {
	iv, err := _I.Get(1487, "ListBox", "drag_unhighlight_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_get_activate_on_single_click
//
// [ result ] trans: nothing
//
func (v ListBox) GetActivateOnSingleClick() (result bool) {
	iv, err := _I.Get(1488, "ListBox", "get_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_box_get_adjustment
//
// [ result ] trans: nothing
//
func (v ListBox) GetAdjustment() (result Adjustment) {
	iv, err := _I.Get(1489, "ListBox", "get_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_get_row_at_index
//
// [ index_ ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ListBox) GetRowAtIndex(index_ int32) (result ListBoxRow) {
	iv, err := _I.Get(1490, "ListBox", "get_row_at_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_get_row_at_y
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ListBox) GetRowAtY(y int32) (result ListBoxRow) {
	iv, err := _I.Get(1491, "ListBox", "get_row_at_y")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_get_selected_row
//
// [ result ] trans: nothing
//
func (v ListBox) GetSelectedRow() (result ListBoxRow) {
	iv, err := _I.Get(1492, "ListBox", "get_selected_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_get_selected_rows
//
// [ result ] trans: container
//
func (v ListBox) GetSelectedRows() (result g.List) {
	iv, err := _I.Get(1493, "ListBox", "get_selected_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_get_selection_mode
//
// [ result ] trans: nothing
//
func (v ListBox) GetSelectionMode() (result SelectionModeEnum) {
	iv, err := _I.Get(1494, "ListBox", "get_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SelectionModeEnum(ret.Int())
	return
}

// gtk_list_box_insert
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ListBox) Insert(child IWidget, position int32) {
	iv, err := _I.Get(1495, "ListBox", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_list_box_invalidate_filter
//
func (v ListBox) InvalidateFilter() {
	iv, err := _I.Get(1496, "ListBox", "invalidate_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_invalidate_headers
//
func (v ListBox) InvalidateHeaders() {
	iv, err := _I.Get(1497, "ListBox", "invalidate_headers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_invalidate_sort
//
func (v ListBox) InvalidateSort() {
	iv, err := _I.Get(1498, "ListBox", "invalidate_sort")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_prepend
//
// [ child ] trans: nothing
//
func (v ListBox) Prepend(child IWidget) {
	iv, err := _I.Get(1499, "ListBox", "prepend")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_list_box_select_all
//
func (v ListBox) SelectAll() {
	iv, err := _I.Get(1500, "ListBox", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_select_row
//
// [ row ] trans: nothing
//
func (v ListBox) SelectRow(row IListBoxRow) {
	iv, err := _I.Get(1501, "ListBox", "select_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if row != nil {
		tmp = row.P_ListBoxRow()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_row}
	iv.Call(args, nil, nil)
}

// gtk_list_box_selected_foreach
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v ListBox) SelectedForeach(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(1502, "ListBox", "selected_foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myListBoxForeachFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_activate_on_single_click
//
// [ single ] trans: nothing
//
func (v ListBox) SetActivateOnSingleClick(single bool) {
	iv, err := _I.Get(1503, "ListBox", "set_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_single := gi.NewBoolArgument(single)
	args := []gi.Argument{arg_v, arg_single}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_adjustment
//
// [ adjustment ] trans: nothing
//
func (v ListBox) SetAdjustment(adjustment IAdjustment) {
	iv, err := _I.Get(1504, "ListBox", "set_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_filter_func
//
// [ filter_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v ListBox) SetFilterFunc(filter_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1505, "ListBox", "set_filter_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myListBoxFilterFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_filter_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_header_func
//
// [ update_header ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v ListBox) SetHeaderFunc(update_header int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1506, "ListBox", "set_header_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_update_header := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myListBoxUpdateHeaderFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_update_header, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_placeholder
//
// [ placeholder ] trans: nothing
//
func (v ListBox) SetPlaceholder(placeholder IWidget) {
	iv, err := _I.Get(1507, "ListBox", "set_placeholder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if placeholder != nil {
		tmp = placeholder.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_placeholder := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_placeholder}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_selection_mode
//
// [ mode ] trans: nothing
//
func (v ListBox) SetSelectionMode(mode SelectionModeEnum) {
	iv, err := _I.Get(1508, "ListBox", "set_selection_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_list_box_set_sort_func
//
// [ sort_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v ListBox) SetSortFunc(sort_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1509, "ListBox", "set_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sort_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myListBoxSortFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_sort_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_list_box_unselect_all
//
func (v ListBox) UnselectAll() {
	iv, err := _I.Get(1510, "ListBox", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_unselect_row
//
// [ row ] trans: nothing
//
func (v ListBox) UnselectRow(row IListBoxRow) {
	iv, err := _I.Get(1511, "ListBox", "unselect_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if row != nil {
		tmp = row.P_ListBoxRow()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_row}
	iv.Call(args, nil, nil)
}

// Object ListBoxAccessible
type ListBoxAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapListBoxAccessible(p unsafe.Pointer) (r ListBoxAccessible) { r.P = p; return }

type IListBoxAccessible interface{ P_ListBoxAccessible() unsafe.Pointer }

func (v ListBoxAccessible) P_ListBoxAccessible() unsafe.Pointer { return v.P }
func (v ListBoxAccessible) P_Component() unsafe.Pointer         { return v.P }
func (v ListBoxAccessible) P_Selection() unsafe.Pointer         { return v.P }
func ListBoxAccessibleGetType() gi.GType {
	ret := _I.GetGType(304, "ListBoxAccessible")
	return ret
}

// ignore GType struct ListBoxAccessibleClass

// Struct ListBoxAccessiblePrivate
type ListBoxAccessiblePrivate struct {
	P unsafe.Pointer
}

func ListBoxAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(305, "ListBoxAccessiblePrivate")
	return ret
}

// ignore GType struct ListBoxClass

type ListBoxCreateWidgetFuncStruct struct {
	F_item g.Object
}

func GetPointer_myListBoxCreateWidgetFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkListBoxCreateWidgetFunc())
}

//export myGtkListBoxCreateWidgetFunc
func myGtkListBoxCreateWidgetFunc(item *C.GObject, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &ListBoxCreateWidgetFuncStruct{
		F_item: g.WrapObject(unsafe.Pointer(item)),
	}
	fn(args)
}

type ListBoxFilterFuncStruct struct {
	F_row ListBoxRow
}

func GetPointer_myListBoxFilterFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkListBoxFilterFunc())
}

//export myGtkListBoxFilterFunc
func myGtkListBoxFilterFunc(row *C.GtkListBoxRow, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &ListBoxFilterFuncStruct{
		F_row: WrapListBoxRow(unsafe.Pointer(row)),
	}
	fn(args)
}

type ListBoxForeachFuncStruct struct {
	F_box ListBox
	F_row ListBoxRow
}

func GetPointer_myListBoxForeachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkListBoxForeachFunc())
}

//export myGtkListBoxForeachFunc
func myGtkListBoxForeachFunc(box *C.GtkListBox, row *C.GtkListBoxRow, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &ListBoxForeachFuncStruct{
		F_box: WrapListBox(unsafe.Pointer(box)),
		F_row: WrapListBoxRow(unsafe.Pointer(row)),
	}
	fn(args)
}

// Object ListBoxRow
type ListBoxRow struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	BuildableIfc
	Bin
}

func WrapListBoxRow(p unsafe.Pointer) (r ListBoxRow) { r.P = p; return }

type IListBoxRow interface{ P_ListBoxRow() unsafe.Pointer }

func (v ListBoxRow) P_ListBoxRow() unsafe.Pointer       { return v.P }
func (v ListBoxRow) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ListBoxRow) P_Actionable() unsafe.Pointer       { return v.P }
func (v ListBoxRow) P_Buildable() unsafe.Pointer        { return v.P }
func ListBoxRowGetType() gi.GType {
	ret := _I.GetGType(306, "ListBoxRow")
	return ret
}

// gtk_list_box_row_new
//
// [ result ] trans: nothing
//
func NewListBoxRow() (result ListBoxRow) {
	iv, err := _I.Get(1512, "ListBoxRow", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_row_changed
//
func (v ListBoxRow) Changed() {
	iv, err := _I.Get(1513, "ListBoxRow", "changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_box_row_get_activatable
//
// [ result ] trans: nothing
//
func (v ListBoxRow) GetActivatable() (result bool) {
	iv, err := _I.Get(1514, "ListBoxRow", "get_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_box_row_get_header
//
// [ result ] trans: nothing
//
func (v ListBoxRow) GetHeader() (result Widget) {
	iv, err := _I.Get(1515, "ListBoxRow", "get_header")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_box_row_get_index
//
// [ result ] trans: nothing
//
func (v ListBoxRow) GetIndex() (result int32) {
	iv, err := _I.Get(1516, "ListBoxRow", "get_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_list_box_row_get_selectable
//
// [ result ] trans: nothing
//
func (v ListBoxRow) GetSelectable() (result bool) {
	iv, err := _I.Get(1517, "ListBoxRow", "get_selectable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_box_row_is_selected
//
// [ result ] trans: nothing
//
func (v ListBoxRow) IsSelected() (result bool) {
	iv, err := _I.Get(1518, "ListBoxRow", "is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_box_row_set_activatable
//
// [ activatable ] trans: nothing
//
func (v ListBoxRow) SetActivatable(activatable bool) {
	iv, err := _I.Get(1519, "ListBoxRow", "set_activatable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_activatable := gi.NewBoolArgument(activatable)
	args := []gi.Argument{arg_v, arg_activatable}
	iv.Call(args, nil, nil)
}

// gtk_list_box_row_set_header
//
// [ header ] trans: nothing
//
func (v ListBoxRow) SetHeader(header IWidget) {
	iv, err := _I.Get(1520, "ListBoxRow", "set_header")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if header != nil {
		tmp = header.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_header := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_header}
	iv.Call(args, nil, nil)
}

// gtk_list_box_row_set_selectable
//
// [ selectable ] trans: nothing
//
func (v ListBoxRow) SetSelectable(selectable bool) {
	iv, err := _I.Get(1521, "ListBoxRow", "set_selectable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_selectable := gi.NewBoolArgument(selectable)
	args := []gi.Argument{arg_v, arg_selectable}
	iv.Call(args, nil, nil)
}

// Object ListBoxRowAccessible
type ListBoxRowAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapListBoxRowAccessible(p unsafe.Pointer) (r ListBoxRowAccessible) { r.P = p; return }

type IListBoxRowAccessible interface{ P_ListBoxRowAccessible() unsafe.Pointer }

func (v ListBoxRowAccessible) P_ListBoxRowAccessible() unsafe.Pointer { return v.P }
func (v ListBoxRowAccessible) P_Component() unsafe.Pointer            { return v.P }
func ListBoxRowAccessibleGetType() gi.GType {
	ret := _I.GetGType(307, "ListBoxRowAccessible")
	return ret
}

// ignore GType struct ListBoxRowAccessibleClass

// ignore GType struct ListBoxRowClass

type ListBoxSortFuncStruct struct {
	F_row1 ListBoxRow
	F_row2 ListBoxRow
}

func GetPointer_myListBoxSortFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkListBoxSortFunc())
}

//export myGtkListBoxSortFunc
func myGtkListBoxSortFunc(row1 *C.GtkListBoxRow, row2 *C.GtkListBoxRow, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &ListBoxSortFuncStruct{
		F_row1: WrapListBoxRow(unsafe.Pointer(row1)),
		F_row2: WrapListBoxRow(unsafe.Pointer(row2)),
	}
	fn(args)
}

type ListBoxUpdateHeaderFuncStruct struct {
	F_row    ListBoxRow
	F_before ListBoxRow
}

func GetPointer_myListBoxUpdateHeaderFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkListBoxUpdateHeaderFunc())
}

//export myGtkListBoxUpdateHeaderFunc
func myGtkListBoxUpdateHeaderFunc(row *C.GtkListBoxRow, before *C.GtkListBoxRow, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &ListBoxUpdateHeaderFuncStruct{
		F_row:    WrapListBoxRow(unsafe.Pointer(row)),
		F_before: WrapListBoxRow(unsafe.Pointer(before)),
	}
	fn(args)
}

// Object ListStore
type ListStore struct {
	BuildableIfc
	TreeDragDestIfc
	TreeDragSourceIfc
	TreeModelIfc
	TreeSortableIfc
	g.Object
}

func WrapListStore(p unsafe.Pointer) (r ListStore) { r.P = p; return }

type IListStore interface{ P_ListStore() unsafe.Pointer }

func (v ListStore) P_ListStore() unsafe.Pointer      { return v.P }
func (v ListStore) P_Buildable() unsafe.Pointer      { return v.P }
func (v ListStore) P_TreeDragDest() unsafe.Pointer   { return v.P }
func (v ListStore) P_TreeDragSource() unsafe.Pointer { return v.P }
func (v ListStore) P_TreeModel() unsafe.Pointer      { return v.P }
func (v ListStore) P_TreeSortable() unsafe.Pointer   { return v.P }
func ListStoreGetType() gi.GType {
	ret := _I.GetGType(308, "ListStore")
	return ret
}

// gtk_list_store_newv
//
// [ n_columns ] trans: nothing
//
// [ types ] trans: nothing
//
// [ result ] trans: everything
//
func NewListStore(n_columns int32, types gi.GTypeArray) (result ListStore) {
	iv, err := _I.Get(1522, "ListStore", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_n_columns := gi.NewInt32Argument(n_columns)
	arg_types := gi.NewPointerArgument(types.P)
	args := []gi.Argument{arg_n_columns, arg_types}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_list_store_append
//
// [ iter ] trans: nothing, dir: out
//
func (v ListStore) Append(iter TreeIter) {
	iv, err := _I.Get(1523, "ListStore", "append")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_list_store_clear
//
func (v ListStore) Clear() {
	iv, err := _I.Get(1524, "ListStore", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_list_store_insert
//
// [ iter ] trans: nothing, dir: out
//
// [ position ] trans: nothing
//
func (v ListStore) Insert(iter TreeIter, position int32) {
	iv, err := _I.Get(1525, "ListStore", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_iter, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_list_store_insert_after
//
// [ iter ] trans: nothing, dir: out
//
// [ sibling ] trans: nothing
//
func (v ListStore) InsertAfter(iter TreeIter, sibling TreeIter) {
	iv, err := _I.Get(1526, "ListStore", "insert_after")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_sibling := gi.NewPointerArgument(sibling.P)
	args := []gi.Argument{arg_v, arg_iter, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_list_store_insert_before
//
// [ iter ] trans: nothing, dir: out
//
// [ sibling ] trans: nothing
//
func (v ListStore) InsertBefore(iter TreeIter, sibling TreeIter) {
	iv, err := _I.Get(1527, "ListStore", "insert_before")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_sibling := gi.NewPointerArgument(sibling.P)
	args := []gi.Argument{arg_v, arg_iter, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_list_store_insert_with_valuesv
//
// [ iter ] trans: nothing, dir: out
//
// [ position ] trans: nothing
//
// [ columns ] trans: nothing
//
// [ values ] trans: nothing
//
// [ n_values ] trans: nothing
//
func (v ListStore) InsertWithValuesv(iter TreeIter, position int32, columns gi.Int32Array, values unsafe.Pointer, n_values int32) {
	iv, err := _I.Get(1528, "ListStore", "insert_with_valuesv")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewInt32Argument(position)
	arg_columns := gi.NewPointerArgument(columns.P)
	arg_values := gi.NewPointerArgument(values)
	arg_n_values := gi.NewInt32Argument(n_values)
	args := []gi.Argument{arg_v, arg_iter, arg_position, arg_columns, arg_values, arg_n_values}
	iv.Call(args, nil, nil)
}

// gtk_list_store_iter_is_valid
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ListStore) IterIsValid(iter TreeIter) (result bool) {
	iv, err := _I.Get(1529, "ListStore", "iter_is_valid")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_store_move_after
//
// [ iter ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ListStore) MoveAfter(iter TreeIter, position TreeIter) {
	iv, err := _I.Get(1530, "ListStore", "move_after")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewPointerArgument(position.P)
	args := []gi.Argument{arg_v, arg_iter, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_list_store_move_before
//
// [ iter ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ListStore) MoveBefore(iter TreeIter, position TreeIter) {
	iv, err := _I.Get(1531, "ListStore", "move_before")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewPointerArgument(position.P)
	args := []gi.Argument{arg_v, arg_iter, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_list_store_prepend
//
// [ iter ] trans: nothing, dir: out
//
func (v ListStore) Prepend(iter TreeIter) {
	iv, err := _I.Get(1532, "ListStore", "prepend")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_list_store_remove
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ListStore) Remove(iter TreeIter) (result bool) {
	iv, err := _I.Get(1533, "ListStore", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_list_store_reorder
//
// [ new_order ] trans: nothing
//
func (v ListStore) Reorder(new_order gi.Int32Array) {
	iv, err := _I.Get(1534, "ListStore", "reorder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_new_order := gi.NewPointerArgument(new_order.P)
	args := []gi.Argument{arg_v, arg_new_order}
	iv.Call(args, nil, nil)
}

// gtk_list_store_set_column_types
//
// [ n_columns ] trans: nothing
//
// [ types ] trans: nothing
//
func (v ListStore) SetColumnTypes(n_columns int32, types gi.GTypeArray) {
	iv, err := _I.Get(1535, "ListStore", "set_column_types")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_columns := gi.NewInt32Argument(n_columns)
	arg_types := gi.NewPointerArgument(types.P)
	args := []gi.Argument{arg_v, arg_n_columns, arg_types}
	iv.Call(args, nil, nil)
}

// gtk_list_store_set_value
//
// [ iter ] trans: nothing
//
// [ column ] trans: nothing
//
// [ value ] trans: nothing
//
func (v ListStore) SetValue(iter TreeIter, column int32, value g.Value) {
	iv, err := _I.Get(1536, "ListStore", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_column := gi.NewInt32Argument(column)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_iter, arg_column, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_list_store_set_valuesv
//
// [ iter ] trans: nothing
//
// [ columns ] trans: nothing
//
// [ values ] trans: nothing
//
// [ n_values ] trans: nothing
//
func (v ListStore) Set(iter TreeIter, columns gi.Int32Array, values unsafe.Pointer, n_values int32) {
	iv, err := _I.Get(1537, "ListStore", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_columns := gi.NewPointerArgument(columns.P)
	arg_values := gi.NewPointerArgument(values)
	arg_n_values := gi.NewInt32Argument(n_values)
	args := []gi.Argument{arg_v, arg_iter, arg_columns, arg_values, arg_n_values}
	iv.Call(args, nil, nil)
}

// gtk_list_store_swap
//
// [ a ] trans: nothing
//
// [ b ] trans: nothing
//
func (v ListStore) Swap(a TreeIter, b TreeIter) {
	iv, err := _I.Get(1538, "ListStore", "swap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_a := gi.NewPointerArgument(a.P)
	arg_b := gi.NewPointerArgument(b.P)
	args := []gi.Argument{arg_v, arg_a, arg_b}
	iv.Call(args, nil, nil)
}

// ignore GType struct ListStoreClass

// Struct ListStorePrivate
type ListStorePrivate struct {
	P unsafe.Pointer
}

func ListStorePrivateGetType() gi.GType {
	ret := _I.GetGType(309, "ListStorePrivate")
	return ret
}

// Object LockButton
type LockButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Button
}

func WrapLockButton(p unsafe.Pointer) (r LockButton) { r.P = p; return }

type ILockButton interface{ P_LockButton() unsafe.Pointer }

func (v LockButton) P_LockButton() unsafe.Pointer       { return v.P }
func (v LockButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v LockButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v LockButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v LockButton) P_Buildable() unsafe.Pointer        { return v.P }
func LockButtonGetType() gi.GType {
	ret := _I.GetGType(310, "LockButton")
	return ret
}

// gtk_lock_button_new
//
// [ permission ] trans: nothing
//
// [ result ] trans: nothing
//
func NewLockButton(permission g.IPermission) (result LockButton) {
	iv, err := _I.Get(1539, "LockButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if permission != nil {
		tmp = permission.P_Permission()
	}
	arg_permission := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_permission}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_lock_button_get_permission
//
// [ result ] trans: nothing
//
func (v LockButton) GetPermission() (result g.Permission) {
	iv, err := _I.Get(1540, "LockButton", "get_permission")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_lock_button_set_permission
//
// [ permission ] trans: nothing
//
func (v LockButton) SetPermission(permission g.IPermission) {
	iv, err := _I.Get(1541, "LockButton", "set_permission")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if permission != nil {
		tmp = permission.P_Permission()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_permission := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_permission}
	iv.Call(args, nil, nil)
}

// Object LockButtonAccessible
type LockButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	ButtonAccessible
}

func WrapLockButtonAccessible(p unsafe.Pointer) (r LockButtonAccessible) { r.P = p; return }

type ILockButtonAccessible interface{ P_LockButtonAccessible() unsafe.Pointer }

func (v LockButtonAccessible) P_LockButtonAccessible() unsafe.Pointer { return v.P }
func (v LockButtonAccessible) P_Action() unsafe.Pointer               { return v.P }
func (v LockButtonAccessible) P_Component() unsafe.Pointer            { return v.P }
func (v LockButtonAccessible) P_Image() unsafe.Pointer                { return v.P }
func LockButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(311, "LockButtonAccessible")
	return ret
}

// ignore GType struct LockButtonAccessibleClass

// Struct LockButtonAccessiblePrivate
type LockButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func LockButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(312, "LockButtonAccessiblePrivate")
	return ret
}

// ignore GType struct LockButtonClass

// Struct LockButtonPrivate
type LockButtonPrivate struct {
	P unsafe.Pointer
}

func LockButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(313, "LockButtonPrivate")
	return ret
}

// Object Menu
type Menu struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	MenuShell
}

func WrapMenu(p unsafe.Pointer) (r Menu) { r.P = p; return }

type IMenu interface{ P_Menu() unsafe.Pointer }

func (v Menu) P_Menu() unsafe.Pointer             { return v.P }
func (v Menu) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Menu) P_Buildable() unsafe.Pointer        { return v.P }
func MenuGetType() gi.GType {
	ret := _I.GetGType(314, "Menu")
	return ret
}

// gtk_menu_new
//
// [ result ] trans: nothing
//
func NewMenu() (result Menu) {
	iv, err := _I.Get(1542, "Menu", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_new_from_model
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuFromModel(model g.IMenuModel) (result Menu) {
	iv, err := _I.Get(1543, "Menu", "new_from_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_get_for_attach_widget
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func MenuGetForAttachWidget1(widget IWidget) (result g.List) {
	iv, err := _I.Get(1544, "Menu", "get_for_attach_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_attach
//
// [ child ] trans: nothing
//
// [ left_attach ] trans: nothing
//
// [ right_attach ] trans: nothing
//
// [ top_attach ] trans: nothing
//
// [ bottom_attach ] trans: nothing
//
func (v Menu) Attach(child IWidget, left_attach uint32, right_attach uint32, top_attach uint32, bottom_attach uint32) {
	iv, err := _I.Get(1545, "Menu", "attach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_left_attach := gi.NewUint32Argument(left_attach)
	arg_right_attach := gi.NewUint32Argument(right_attach)
	arg_top_attach := gi.NewUint32Argument(top_attach)
	arg_bottom_attach := gi.NewUint32Argument(bottom_attach)
	args := []gi.Argument{arg_v, arg_child, arg_left_attach, arg_right_attach, arg_top_attach, arg_bottom_attach}
	iv.Call(args, nil, nil)
}

// gtk_menu_attach_to_widget
//
// [ attach_widget ] trans: nothing
//
// [ detacher ] trans: nothing
//
func (v Menu) AttachToWidget(attach_widget IWidget, detacher int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(1546, "Menu", "attach_to_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if attach_widget != nil {
		tmp = attach_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attach_widget := gi.NewPointerArgument(tmp)
	arg_detacher := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myMenuDetachFunc()))
	args := []gi.Argument{arg_v, arg_attach_widget, arg_detacher}
	iv.Call(args, nil, nil)
}

// gtk_menu_detach
//
func (v Menu) Detach() {
	iv, err := _I.Get(1547, "Menu", "detach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_get_accel_group
//
// [ result ] trans: nothing
//
func (v Menu) GetAccelGroup() (result AccelGroup) {
	iv, err := _I.Get(1548, "Menu", "get_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_get_accel_path
//
// [ result ] trans: nothing
//
func (v Menu) GetAccelPath() (result string) {
	iv, err := _I.Get(1549, "Menu", "get_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_menu_get_active
//
// [ result ] trans: nothing
//
func (v Menu) GetActive() (result Widget) {
	iv, err := _I.Get(1550, "Menu", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_get_attach_widget
//
// [ result ] trans: nothing
//
func (v Menu) GetAttachWidget() (result Widget) {
	iv, err := _I.Get(1551, "Menu", "get_attach_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_get_monitor
//
// [ result ] trans: nothing
//
func (v Menu) GetMonitor() (result int32) {
	iv, err := _I.Get(1552, "Menu", "get_monitor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_menu_get_reserve_toggle_size
//
// [ result ] trans: nothing
//
func (v Menu) GetReserveToggleSize() (result bool) {
	iv, err := _I.Get(1553, "Menu", "get_reserve_toggle_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_menu_get_tearoff_state
//
// [ result ] trans: nothing
//
func (v Menu) GetTearoffState() (result bool) {
	iv, err := _I.Get(1554, "Menu", "get_tearoff_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_menu_get_title
//
// [ result ] trans: nothing
//
func (v Menu) GetTitle() (result string) {
	iv, err := _I.Get(1555, "Menu", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_menu_place_on_monitor
//
// [ monitor ] trans: nothing
//
func (v Menu) PlaceOnMonitor(monitor gdk.IMonitor) {
	iv, err := _I.Get(1556, "Menu", "place_on_monitor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if monitor != nil {
		tmp = monitor.P_Monitor()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_monitor := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_monitor}
	iv.Call(args, nil, nil)
}

// gtk_menu_popdown
//
func (v Menu) Popdown() {
	iv, err := _I.Get(1557, "Menu", "popdown")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_menu_popup
//
// [ parent_menu_shell ] trans: nothing
//
// [ parent_menu_item ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ button ] trans: nothing
//
// [ activate_time ] trans: nothing
//
func (v Menu) Popup(parent_menu_shell IWidget, parent_menu_item IWidget, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, button uint32, activate_time uint32) {
	iv, err := _I.Get(1558, "Menu", "popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent_menu_shell != nil {
		tmp = parent_menu_shell.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if parent_menu_item != nil {
		tmp1 = parent_menu_item.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent_menu_shell := gi.NewPointerArgument(tmp)
	arg_parent_menu_item := gi.NewPointerArgument(tmp1)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myMenuPositionFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_button := gi.NewUint32Argument(button)
	arg_activate_time := gi.NewUint32Argument(activate_time)
	args := []gi.Argument{arg_v, arg_parent_menu_shell, arg_parent_menu_item, arg_func1, arg_data, arg_button, arg_activate_time}
	iv.Call(args, nil, nil)
}

// gtk_menu_popup_at_pointer
//
// [ trigger_event ] trans: nothing
//
func (v Menu) PopupAtPointer(trigger_event gdk.Event) {
	iv, err := _I.Get(1559, "Menu", "popup_at_pointer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_trigger_event := gi.NewPointerArgument(trigger_event.P)
	args := []gi.Argument{arg_v, arg_trigger_event}
	iv.Call(args, nil, nil)
}

// gtk_menu_popup_at_rect
//
// [ rect_window ] trans: nothing
//
// [ rect ] trans: nothing
//
// [ rect_anchor ] trans: nothing
//
// [ menu_anchor ] trans: nothing
//
// [ trigger_event ] trans: nothing
//
func (v Menu) PopupAtRect(rect_window gdk.IWindow, rect gdk.Rectangle, rect_anchor gdk.GravityEnum, menu_anchor gdk.GravityEnum, trigger_event gdk.Event) {
	iv, err := _I.Get(1560, "Menu", "popup_at_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if rect_window != nil {
		tmp = rect_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect_window := gi.NewPointerArgument(tmp)
	arg_rect := gi.NewPointerArgument(rect.P)
	arg_rect_anchor := gi.NewIntArgument(int(rect_anchor))
	arg_menu_anchor := gi.NewIntArgument(int(menu_anchor))
	arg_trigger_event := gi.NewPointerArgument(trigger_event.P)
	args := []gi.Argument{arg_v, arg_rect_window, arg_rect, arg_rect_anchor, arg_menu_anchor, arg_trigger_event}
	iv.Call(args, nil, nil)
}

// gtk_menu_popup_at_widget
//
// [ widget ] trans: nothing
//
// [ widget_anchor ] trans: nothing
//
// [ menu_anchor ] trans: nothing
//
// [ trigger_event ] trans: nothing
//
func (v Menu) PopupAtWidget(widget IWidget, widget_anchor gdk.GravityEnum, menu_anchor gdk.GravityEnum, trigger_event gdk.Event) {
	iv, err := _I.Get(1561, "Menu", "popup_at_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_widget_anchor := gi.NewIntArgument(int(widget_anchor))
	arg_menu_anchor := gi.NewIntArgument(int(menu_anchor))
	arg_trigger_event := gi.NewPointerArgument(trigger_event.P)
	args := []gi.Argument{arg_v, arg_widget, arg_widget_anchor, arg_menu_anchor, arg_trigger_event}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_menu_popup_for_device
//
// [ device ] trans: nothing
//
// [ parent_menu_shell ] trans: nothing
//
// [ parent_menu_item ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
// [ button ] trans: nothing
//
// [ activate_time ] trans: nothing
//
func (v Menu) PopupForDevice(device gdk.IDevice, parent_menu_shell IWidget, parent_menu_item IWidget, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/, button uint32, activate_time uint32) {
	iv, err := _I.Get(1562, "Menu", "popup_for_device")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	var tmp1 unsafe.Pointer
	if parent_menu_shell != nil {
		tmp1 = parent_menu_shell.P_Widget()
	}
	var tmp2 unsafe.Pointer
	if parent_menu_item != nil {
		tmp2 = parent_menu_item.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	arg_parent_menu_shell := gi.NewPointerArgument(tmp1)
	arg_parent_menu_item := gi.NewPointerArgument(tmp2)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myMenuPositionFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	arg_button := gi.NewUint32Argument(button)
	arg_activate_time := gi.NewUint32Argument(activate_time)
	args := []gi.Argument{arg_v, arg_device, arg_parent_menu_shell, arg_parent_menu_item, arg_func1, arg_data, arg_destroy, arg_button, arg_activate_time}
	iv.Call(args, nil, nil)
}

// gtk_menu_reorder_child
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v Menu) ReorderChild(child IWidget, position int32) {
	iv, err := _I.Get(1563, "Menu", "reorder_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_menu_reposition
//
func (v Menu) Reposition() {
	iv, err := _I.Get(1564, "Menu", "reposition")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_set_accel_group
//
// [ accel_group ] trans: nothing
//
func (v Menu) SetAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(1565, "Menu", "set_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// gtk_menu_set_accel_path
//
// [ accel_path ] trans: nothing
//
func (v Menu) SetAccelPath(accel_path string) {
	iv, err := _I.Get(1566, "Menu", "set_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	args := []gi.Argument{arg_v, arg_accel_path}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_menu_set_active
//
// [ index ] trans: nothing
//
func (v Menu) SetActive(index uint32) {
	iv, err := _I.Get(1567, "Menu", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index := gi.NewUint32Argument(index)
	args := []gi.Argument{arg_v, arg_index}
	iv.Call(args, nil, nil)
}

// gtk_menu_set_monitor
//
// [ monitor_num ] trans: nothing
//
func (v Menu) SetMonitor(monitor_num int32) {
	iv, err := _I.Get(1568, "Menu", "set_monitor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_monitor_num := gi.NewInt32Argument(monitor_num)
	args := []gi.Argument{arg_v, arg_monitor_num}
	iv.Call(args, nil, nil)
}

// gtk_menu_set_reserve_toggle_size
//
// [ reserve_toggle_size ] trans: nothing
//
func (v Menu) SetReserveToggleSize(reserve_toggle_size bool) {
	iv, err := _I.Get(1569, "Menu", "set_reserve_toggle_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reserve_toggle_size := gi.NewBoolArgument(reserve_toggle_size)
	args := []gi.Argument{arg_v, arg_reserve_toggle_size}
	iv.Call(args, nil, nil)
}

// gtk_menu_set_screen
//
// [ screen ] trans: nothing
//
func (v Menu) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(1570, "Menu", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_menu_set_tearoff_state
//
// [ torn_off ] trans: nothing
//
func (v Menu) SetTearoffState(torn_off bool) {
	iv, err := _I.Get(1571, "Menu", "set_tearoff_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_torn_off := gi.NewBoolArgument(torn_off)
	args := []gi.Argument{arg_v, arg_torn_off}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_menu_set_title
//
// [ title ] trans: nothing
//
func (v Menu) SetTitle(title string) {
	iv, err := _I.Get(1572, "Menu", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// Object MenuAccessible
type MenuAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	MenuShellAccessible
}

func WrapMenuAccessible(p unsafe.Pointer) (r MenuAccessible) { r.P = p; return }

type IMenuAccessible interface{ P_MenuAccessible() unsafe.Pointer }

func (v MenuAccessible) P_MenuAccessible() unsafe.Pointer { return v.P }
func (v MenuAccessible) P_Component() unsafe.Pointer      { return v.P }
func (v MenuAccessible) P_Selection() unsafe.Pointer      { return v.P }
func MenuAccessibleGetType() gi.GType {
	ret := _I.GetGType(315, "MenuAccessible")
	return ret
}

// ignore GType struct MenuAccessibleClass

// Struct MenuAccessiblePrivate
type MenuAccessiblePrivate struct {
	P unsafe.Pointer
}

func MenuAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(316, "MenuAccessiblePrivate")
	return ret
}

// Object MenuBar
type MenuBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	MenuShell
}

func WrapMenuBar(p unsafe.Pointer) (r MenuBar) { r.P = p; return }

type IMenuBar interface{ P_MenuBar() unsafe.Pointer }

func (v MenuBar) P_MenuBar() unsafe.Pointer          { return v.P }
func (v MenuBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MenuBar) P_Buildable() unsafe.Pointer        { return v.P }
func MenuBarGetType() gi.GType {
	ret := _I.GetGType(317, "MenuBar")
	return ret
}

// gtk_menu_bar_new
//
// [ result ] trans: nothing
//
func NewMenuBar() (result MenuBar) {
	iv, err := _I.Get(1573, "MenuBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_bar_new_from_model
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuBarFromModel(model g.IMenuModel) (result MenuBar) {
	iv, err := _I.Get(1574, "MenuBar", "new_from_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_bar_get_child_pack_direction
//
// [ result ] trans: nothing
//
func (v MenuBar) GetChildPackDirection() (result PackDirectionEnum) {
	iv, err := _I.Get(1575, "MenuBar", "get_child_pack_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PackDirectionEnum(ret.Int())
	return
}

// gtk_menu_bar_get_pack_direction
//
// [ result ] trans: nothing
//
func (v MenuBar) GetPackDirection() (result PackDirectionEnum) {
	iv, err := _I.Get(1576, "MenuBar", "get_pack_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PackDirectionEnum(ret.Int())
	return
}

// gtk_menu_bar_set_child_pack_direction
//
// [ child_pack_dir ] trans: nothing
//
func (v MenuBar) SetChildPackDirection(child_pack_dir PackDirectionEnum) {
	iv, err := _I.Get(1577, "MenuBar", "set_child_pack_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_pack_dir := gi.NewIntArgument(int(child_pack_dir))
	args := []gi.Argument{arg_v, arg_child_pack_dir}
	iv.Call(args, nil, nil)
}

// gtk_menu_bar_set_pack_direction
//
// [ pack_dir ] trans: nothing
//
func (v MenuBar) SetPackDirection(pack_dir PackDirectionEnum) {
	iv, err := _I.Get(1578, "MenuBar", "set_pack_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pack_dir := gi.NewIntArgument(int(pack_dir))
	args := []gi.Argument{arg_v, arg_pack_dir}
	iv.Call(args, nil, nil)
}

// ignore GType struct MenuBarClass

// Struct MenuBarPrivate
type MenuBarPrivate struct {
	P unsafe.Pointer
}

func MenuBarPrivateGetType() gi.GType {
	ret := _I.GetGType(318, "MenuBarPrivate")
	return ret
}

// Object MenuButton
type MenuButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToggleButton
}

func WrapMenuButton(p unsafe.Pointer) (r MenuButton) { r.P = p; return }

type IMenuButton interface{ P_MenuButton() unsafe.Pointer }

func (v MenuButton) P_MenuButton() unsafe.Pointer       { return v.P }
func (v MenuButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MenuButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v MenuButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v MenuButton) P_Buildable() unsafe.Pointer        { return v.P }
func MenuButtonGetType() gi.GType {
	ret := _I.GetGType(319, "MenuButton")
	return ret
}

// gtk_menu_button_new
//
// [ result ] trans: nothing
//
func NewMenuButton() (result MenuButton) {
	iv, err := _I.Get(1579, "MenuButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_button_get_align_widget
//
// [ result ] trans: nothing
//
func (v MenuButton) GetAlignWidget() (result Widget) {
	iv, err := _I.Get(1580, "MenuButton", "get_align_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_button_get_direction
//
// [ result ] trans: nothing
//
func (v MenuButton) GetDirection() (result ArrowTypeEnum) {
	iv, err := _I.Get(1581, "MenuButton", "get_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ArrowTypeEnum(ret.Int())
	return
}

// gtk_menu_button_get_menu_model
//
// [ result ] trans: nothing
//
func (v MenuButton) GetMenuModel() (result g.MenuModel) {
	iv, err := _I.Get(1582, "MenuButton", "get_menu_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_button_get_popover
//
// [ result ] trans: nothing
//
func (v MenuButton) GetPopover() (result Popover) {
	iv, err := _I.Get(1583, "MenuButton", "get_popover")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_button_get_popup
//
// [ result ] trans: nothing
//
func (v MenuButton) GetPopup() (result Menu) {
	iv, err := _I.Get(1584, "MenuButton", "get_popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_button_get_use_popover
//
// [ result ] trans: nothing
//
func (v MenuButton) GetUsePopover() (result bool) {
	iv, err := _I.Get(1585, "MenuButton", "get_use_popover")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_menu_button_set_align_widget
//
// [ align_widget ] trans: nothing
//
func (v MenuButton) SetAlignWidget(align_widget IWidget) {
	iv, err := _I.Get(1586, "MenuButton", "set_align_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if align_widget != nil {
		tmp = align_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_align_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_align_widget}
	iv.Call(args, nil, nil)
}

// gtk_menu_button_set_direction
//
// [ direction ] trans: nothing
//
func (v MenuButton) SetDirection(direction ArrowTypeEnum) {
	iv, err := _I.Get(1587, "MenuButton", "set_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	iv.Call(args, nil, nil)
}

// gtk_menu_button_set_menu_model
//
// [ menu_model ] trans: nothing
//
func (v MenuButton) SetMenuModel(menu_model g.IMenuModel) {
	iv, err := _I.Get(1588, "MenuButton", "set_menu_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menu_model != nil {
		tmp = menu_model.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menu_model}
	iv.Call(args, nil, nil)
}

// gtk_menu_button_set_popover
//
// [ popover ] trans: nothing
//
func (v MenuButton) SetPopover(popover IWidget) {
	iv, err := _I.Get(1589, "MenuButton", "set_popover")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if popover != nil {
		tmp = popover.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_popover := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_popover}
	iv.Call(args, nil, nil)
}

// gtk_menu_button_set_popup
//
// [ menu ] trans: nothing
//
func (v MenuButton) SetPopup(menu IWidget) {
	iv, err := _I.Get(1590, "MenuButton", "set_popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menu != nil {
		tmp = menu.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menu}
	iv.Call(args, nil, nil)
}

// gtk_menu_button_set_use_popover
//
// [ use_popover ] trans: nothing
//
func (v MenuButton) SetUsePopover(use_popover bool) {
	iv, err := _I.Get(1591, "MenuButton", "set_use_popover")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_popover := gi.NewBoolArgument(use_popover)
	args := []gi.Argument{arg_v, arg_use_popover}
	iv.Call(args, nil, nil)
}

// Object MenuButtonAccessible
type MenuButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	ToggleButtonAccessible
}

func WrapMenuButtonAccessible(p unsafe.Pointer) (r MenuButtonAccessible) { r.P = p; return }

type IMenuButtonAccessible interface{ P_MenuButtonAccessible() unsafe.Pointer }

func (v MenuButtonAccessible) P_MenuButtonAccessible() unsafe.Pointer { return v.P }
func (v MenuButtonAccessible) P_Action() unsafe.Pointer               { return v.P }
func (v MenuButtonAccessible) P_Component() unsafe.Pointer            { return v.P }
func (v MenuButtonAccessible) P_Image() unsafe.Pointer                { return v.P }
func MenuButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(320, "MenuButtonAccessible")
	return ret
}

// ignore GType struct MenuButtonAccessibleClass

// Struct MenuButtonAccessiblePrivate
type MenuButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func MenuButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(321, "MenuButtonAccessiblePrivate")
	return ret
}

// ignore GType struct MenuButtonClass

// Struct MenuButtonPrivate
type MenuButtonPrivate struct {
	P unsafe.Pointer
}

func MenuButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(322, "MenuButtonPrivate")
	return ret
}

// ignore GType struct MenuClass

type MenuDetachFuncStruct struct {
	F_attach_widget Widget
	F_menu          Menu
}

func GetPointer_myMenuDetachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkMenuDetachFunc())
}

//export myGtkMenuDetachFunc
func myGtkMenuDetachFunc(attach_widget *C.GtkWidget, menu *C.GtkMenu) {
	// TODO: not found user_data
}

// Enum MenuDirectionType
type MenuDirectionTypeEnum int

const (
	MenuDirectionTypeParent MenuDirectionTypeEnum = 0
	MenuDirectionTypeChild  MenuDirectionTypeEnum = 1
	MenuDirectionTypeNext   MenuDirectionTypeEnum = 2
	MenuDirectionTypePrev   MenuDirectionTypeEnum = 3
)

func MenuDirectionTypeGetType() gi.GType {
	ret := _I.GetGType(323, "MenuDirectionType")
	return ret
}

// Object MenuItem
type MenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Bin
}

func WrapMenuItem(p unsafe.Pointer) (r MenuItem) { r.P = p; return }

type IMenuItem interface{ P_MenuItem() unsafe.Pointer }

func (v MenuItem) P_MenuItem() unsafe.Pointer         { return v.P }
func (v MenuItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MenuItem) P_Actionable() unsafe.Pointer       { return v.P }
func (v MenuItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v MenuItem) P_Buildable() unsafe.Pointer        { return v.P }
func MenuItemGetType() gi.GType {
	ret := _I.GetGType(324, "MenuItem")
	return ret
}

// gtk_menu_item_new
//
// [ result ] trans: nothing
//
func NewMenuItem() (result MenuItem) {
	iv, err := _I.Get(1592, "MenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_item_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuItemWithLabel(label string) (result MenuItem) {
	iv, err := _I.Get(1593, "MenuItem", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_menu_item_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuItemWithMnemonic(label string) (result MenuItem) {
	iv, err := _I.Get(1594, "MenuItem", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_menu_item_activate
//
func (v MenuItem) Activate() {
	iv, err := _I.Get(1595, "MenuItem", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_deselect
//
func (v MenuItem) Deselect() {
	iv, err := _I.Get(1596, "MenuItem", "deselect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_get_accel_path
//
// [ result ] trans: nothing
//
func (v MenuItem) GetAccelPath() (result string) {
	iv, err := _I.Get(1597, "MenuItem", "get_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_menu_item_get_label
//
// [ result ] trans: nothing
//
func (v MenuItem) GetLabel() (result string) {
	iv, err := _I.Get(1598, "MenuItem", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_menu_item_get_reserve_indicator
//
// [ result ] trans: nothing
//
func (v MenuItem) GetReserveIndicator() (result bool) {
	iv, err := _I.Get(1599, "MenuItem", "get_reserve_indicator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_menu_item_get_right_justified
//
// [ result ] trans: nothing
//
func (v MenuItem) GetRightJustified() (result bool) {
	iv, err := _I.Get(1600, "MenuItem", "get_right_justified")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_menu_item_get_submenu
//
// [ result ] trans: nothing
//
func (v MenuItem) GetSubmenu() (result Widget) {
	iv, err := _I.Get(1601, "MenuItem", "get_submenu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_item_get_use_underline
//
// [ result ] trans: nothing
//
func (v MenuItem) GetUseUnderline() (result bool) {
	iv, err := _I.Get(1602, "MenuItem", "get_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_menu_item_select
//
func (v MenuItem) Select() {
	iv, err := _I.Get(1603, "MenuItem", "select")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_set_accel_path
//
// [ accel_path ] trans: nothing
//
func (v MenuItem) SetAccelPath(accel_path string) {
	iv, err := _I.Get(1604, "MenuItem", "set_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	args := []gi.Argument{arg_v, arg_accel_path}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_menu_item_set_label
//
// [ label ] trans: nothing
//
func (v MenuItem) SetLabel(label string) {
	iv, err := _I.Get(1605, "MenuItem", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_menu_item_set_reserve_indicator
//
// [ reserve ] trans: nothing
//
func (v MenuItem) SetReserveIndicator(reserve bool) {
	iv, err := _I.Get(1606, "MenuItem", "set_reserve_indicator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reserve := gi.NewBoolArgument(reserve)
	args := []gi.Argument{arg_v, arg_reserve}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_menu_item_set_right_justified
//
// [ right_justified ] trans: nothing
//
func (v MenuItem) SetRightJustified(right_justified bool) {
	iv, err := _I.Get(1607, "MenuItem", "set_right_justified")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_right_justified := gi.NewBoolArgument(right_justified)
	args := []gi.Argument{arg_v, arg_right_justified}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_set_submenu
//
// [ submenu ] trans: nothing
//
func (v MenuItem) SetSubmenu(submenu IMenu) {
	iv, err := _I.Get(1608, "MenuItem", "set_submenu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_Menu()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_submenu}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_set_use_underline
//
// [ setting ] trans: nothing
//
func (v MenuItem) SetUseUnderline(setting bool) {
	iv, err := _I.Get(1609, "MenuItem", "set_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_toggle_size_allocate
//
// [ allocation ] trans: nothing
//
func (v MenuItem) ToggleSizeAllocate(allocation int32) {
	iv, err := _I.Get(1610, "MenuItem", "toggle_size_allocate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewInt32Argument(allocation)
	args := []gi.Argument{arg_v, arg_allocation}
	iv.Call(args, nil, nil)
}

// gtk_menu_item_toggle_size_request
//
// [ requisition ] trans: everything, dir: inout
//
func (v MenuItem) ToggleSizeRequest(requisition int /*TODO:TYPE*/) {
	iv, err := _I.Get(1611, "MenuItem", "toggle_size_request")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, &outArgs[0])
}

// Object MenuItemAccessible
type MenuItemAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapMenuItemAccessible(p unsafe.Pointer) (r MenuItemAccessible) { r.P = p; return }

type IMenuItemAccessible interface{ P_MenuItemAccessible() unsafe.Pointer }

func (v MenuItemAccessible) P_MenuItemAccessible() unsafe.Pointer { return v.P }
func (v MenuItemAccessible) P_Action() unsafe.Pointer             { return v.P }
func (v MenuItemAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v MenuItemAccessible) P_Selection() unsafe.Pointer          { return v.P }
func MenuItemAccessibleGetType() gi.GType {
	ret := _I.GetGType(325, "MenuItemAccessible")
	return ret
}

// ignore GType struct MenuItemAccessibleClass

// Struct MenuItemAccessiblePrivate
type MenuItemAccessiblePrivate struct {
	P unsafe.Pointer
}

func MenuItemAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(326, "MenuItemAccessiblePrivate")
	return ret
}

// ignore GType struct MenuItemClass

// Struct MenuItemPrivate
type MenuItemPrivate struct {
	P unsafe.Pointer
}

func MenuItemPrivateGetType() gi.GType {
	ret := _I.GetGType(327, "MenuItemPrivate")
	return ret
}

type MenuPositionFuncStruct struct {
	F_menu    Menu
	F_x       unsafe.Pointer /*TODO_CB tag: gint32, isPtr: false*/
	F_y       unsafe.Pointer /*TODO_CB tag: gint32, isPtr: false*/
	F_push_in unsafe.Pointer /*TODO_CB tag: gboolean, isPtr: false*/
}

func GetPointer_myMenuPositionFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkMenuPositionFunc())
}

//export myGtkMenuPositionFunc
func myGtkMenuPositionFunc(menu *C.GtkMenu, x C.gpointer, y C.gpointer, push_in C.gpointer, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &MenuPositionFuncStruct{
		F_menu:    WrapMenu(unsafe.Pointer(menu)),
		F_x:       unsafe.Pointer(x),
		F_y:       unsafe.Pointer(y),
		F_push_in: unsafe.Pointer(push_in),
	}
	fn(args)
}

// Struct MenuPrivate
type MenuPrivate struct {
	P unsafe.Pointer
}

func MenuPrivateGetType() gi.GType {
	ret := _I.GetGType(328, "MenuPrivate")
	return ret
}

// Object MenuShell
type MenuShell struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapMenuShell(p unsafe.Pointer) (r MenuShell) { r.P = p; return }

type IMenuShell interface{ P_MenuShell() unsafe.Pointer }

func (v MenuShell) P_MenuShell() unsafe.Pointer        { return v.P }
func (v MenuShell) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MenuShell) P_Buildable() unsafe.Pointer        { return v.P }
func MenuShellGetType() gi.GType {
	ret := _I.GetGType(329, "MenuShell")
	return ret
}

// gtk_menu_shell_activate_item
//
// [ menu_item ] trans: nothing
//
// [ force_deactivate ] trans: nothing
//
func (v MenuShell) ActivateItem(menu_item IWidget, force_deactivate bool) {
	iv, err := _I.Get(1612, "MenuShell", "activate_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menu_item != nil {
		tmp = menu_item.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu_item := gi.NewPointerArgument(tmp)
	arg_force_deactivate := gi.NewBoolArgument(force_deactivate)
	args := []gi.Argument{arg_v, arg_menu_item, arg_force_deactivate}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_append
//
// [ child ] trans: nothing
//
func (v MenuShell) Append(child IMenuItem) {
	iv, err := _I.Get(1613, "MenuShell", "append")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_MenuItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_bind_model
//
// [ model ] trans: nothing
//
// [ action_namespace ] trans: nothing
//
// [ with_separators ] trans: nothing
//
func (v MenuShell) BindModel(model g.IMenuModel, action_namespace string, with_separators bool) {
	iv, err := _I.Get(1614, "MenuShell", "bind_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	c_action_namespace := gi.CString(action_namespace)
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	arg_action_namespace := gi.NewStringArgument(c_action_namespace)
	arg_with_separators := gi.NewBoolArgument(with_separators)
	args := []gi.Argument{arg_v, arg_model, arg_action_namespace, arg_with_separators}
	iv.Call(args, nil, nil)
	gi.Free(c_action_namespace)
}

// gtk_menu_shell_cancel
//
func (v MenuShell) Cancel() {
	iv, err := _I.Get(1615, "MenuShell", "cancel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_deactivate
//
func (v MenuShell) Deactivate() {
	iv, err := _I.Get(1616, "MenuShell", "deactivate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_deselect
//
func (v MenuShell) Deselect() {
	iv, err := _I.Get(1617, "MenuShell", "deselect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_get_parent_shell
//
// [ result ] trans: nothing
//
func (v MenuShell) GetParentShell() (result Widget) {
	iv, err := _I.Get(1618, "MenuShell", "get_parent_shell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_shell_get_selected_item
//
// [ result ] trans: nothing
//
func (v MenuShell) GetSelectedItem() (result Widget) {
	iv, err := _I.Get(1619, "MenuShell", "get_selected_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_shell_get_take_focus
//
// [ result ] trans: nothing
//
func (v MenuShell) GetTakeFocus() (result bool) {
	iv, err := _I.Get(1620, "MenuShell", "get_take_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_menu_shell_insert
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v MenuShell) Insert(child IWidget, position int32) {
	iv, err := _I.Get(1621, "MenuShell", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_prepend
//
// [ child ] trans: nothing
//
func (v MenuShell) Prepend(child IWidget) {
	iv, err := _I.Get(1622, "MenuShell", "prepend")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_select_first
//
// [ search_sensitive ] trans: nothing
//
func (v MenuShell) SelectFirst(search_sensitive bool) {
	iv, err := _I.Get(1623, "MenuShell", "select_first")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_search_sensitive := gi.NewBoolArgument(search_sensitive)
	args := []gi.Argument{arg_v, arg_search_sensitive}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_select_item
//
// [ menu_item ] trans: nothing
//
func (v MenuShell) SelectItem(menu_item IWidget) {
	iv, err := _I.Get(1624, "MenuShell", "select_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menu_item != nil {
		tmp = menu_item.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menu_item}
	iv.Call(args, nil, nil)
}

// gtk_menu_shell_set_take_focus
//
// [ take_focus ] trans: nothing
//
func (v MenuShell) SetTakeFocus(take_focus bool) {
	iv, err := _I.Get(1625, "MenuShell", "set_take_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_take_focus := gi.NewBoolArgument(take_focus)
	args := []gi.Argument{arg_v, arg_take_focus}
	iv.Call(args, nil, nil)
}

// Object MenuShellAccessible
type MenuShellAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapMenuShellAccessible(p unsafe.Pointer) (r MenuShellAccessible) { r.P = p; return }

type IMenuShellAccessible interface{ P_MenuShellAccessible() unsafe.Pointer }

func (v MenuShellAccessible) P_MenuShellAccessible() unsafe.Pointer { return v.P }
func (v MenuShellAccessible) P_Component() unsafe.Pointer           { return v.P }
func (v MenuShellAccessible) P_Selection() unsafe.Pointer           { return v.P }
func MenuShellAccessibleGetType() gi.GType {
	ret := _I.GetGType(330, "MenuShellAccessible")
	return ret
}

// ignore GType struct MenuShellAccessibleClass

// Struct MenuShellAccessiblePrivate
type MenuShellAccessiblePrivate struct {
	P unsafe.Pointer
}

func MenuShellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(331, "MenuShellAccessiblePrivate")
	return ret
}

// ignore GType struct MenuShellClass

// Struct MenuShellPrivate
type MenuShellPrivate struct {
	P unsafe.Pointer
}

func MenuShellPrivateGetType() gi.GType {
	ret := _I.GetGType(332, "MenuShellPrivate")
	return ret
}

// Object MenuToolButton
type MenuToolButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToolButton
}

func WrapMenuToolButton(p unsafe.Pointer) (r MenuToolButton) { r.P = p; return }

type IMenuToolButton interface{ P_MenuToolButton() unsafe.Pointer }

func (v MenuToolButton) P_MenuToolButton() unsafe.Pointer   { return v.P }
func (v MenuToolButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MenuToolButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v MenuToolButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v MenuToolButton) P_Buildable() unsafe.Pointer        { return v.P }
func MenuToolButtonGetType() gi.GType {
	ret := _I.GetGType(333, "MenuToolButton")
	return ret
}

// gtk_menu_tool_button_new
//
// [ icon_widget ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuToolButton(icon_widget IWidget, label string) (result MenuToolButton) {
	iv, err := _I.Get(1626, "MenuToolButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon_widget != nil {
		tmp = icon_widget.P_Widget()
	}
	c_label := gi.CString(label)
	arg_icon_widget := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_icon_widget, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_menu_tool_button_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewMenuToolButtonFromStock(stock_id string) (result MenuToolButton) {
	iv, err := _I.Get(1627, "MenuToolButton", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_menu_tool_button_get_menu
//
// [ result ] trans: nothing
//
func (v MenuToolButton) GetMenu() (result Widget) {
	iv, err := _I.Get(1628, "MenuToolButton", "get_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_menu_tool_button_set_arrow_tooltip_markup
//
// [ markup ] trans: nothing
//
func (v MenuToolButton) SetArrowTooltipMarkup(markup string) {
	iv, err := _I.Get(1629, "MenuToolButton", "set_arrow_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_menu_tool_button_set_arrow_tooltip_text
//
// [ text ] trans: nothing
//
func (v MenuToolButton) SetArrowTooltipText(text string) {
	iv, err := _I.Get(1630, "MenuToolButton", "set_arrow_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_menu_tool_button_set_menu
//
// [ menu ] trans: nothing
//
func (v MenuToolButton) SetMenu(menu IWidget) {
	iv, err := _I.Get(1631, "MenuToolButton", "set_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if menu != nil {
		tmp = menu.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menu}
	iv.Call(args, nil, nil)
}

// ignore GType struct MenuToolButtonClass

// Struct MenuToolButtonPrivate
type MenuToolButtonPrivate struct {
	P unsafe.Pointer
}

func MenuToolButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(334, "MenuToolButtonPrivate")
	return ret
}

// Object MessageDialog
type MessageDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Dialog
}

func WrapMessageDialog(p unsafe.Pointer) (r MessageDialog) { r.P = p; return }

type IMessageDialog interface{ P_MessageDialog() unsafe.Pointer }

func (v MessageDialog) P_MessageDialog() unsafe.Pointer    { return v.P }
func (v MessageDialog) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v MessageDialog) P_Buildable() unsafe.Pointer        { return v.P }
func MessageDialogGetType() gi.GType {
	ret := _I.GetGType(335, "MessageDialog")
	return ret
}

// Deprecated
//
// gtk_message_dialog_get_image
//
// [ result ] trans: nothing
//
func (v MessageDialog) GetImage() (result Widget) {
	iv, err := _I.Get(1632, "MessageDialog", "get_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_message_dialog_get_message_area
//
// [ result ] trans: nothing
//
func (v MessageDialog) GetMessageArea() (result Widget) {
	iv, err := _I.Get(1633, "MessageDialog", "get_message_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_message_dialog_set_image
//
// [ image ] trans: nothing
//
func (v MessageDialog) SetImage(image IWidget) {
	iv, err := _I.Get(1634, "MessageDialog", "set_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if image != nil {
		tmp = image.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_image := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_image}
	iv.Call(args, nil, nil)
}

// gtk_message_dialog_set_markup
//
// [ str ] trans: nothing
//
func (v MessageDialog) SetMarkup(str string) {
	iv, err := _I.Get(1635, "MessageDialog", "set_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_str}
	iv.Call(args, nil, nil)
	gi.Free(c_str)
}

// ignore GType struct MessageDialogClass

// Struct MessageDialogPrivate
type MessageDialogPrivate struct {
	P unsafe.Pointer
}

func MessageDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(336, "MessageDialogPrivate")
	return ret
}

// Enum MessageType
type MessageTypeEnum int

const (
	MessageTypeInfo     MessageTypeEnum = 0
	MessageTypeWarning  MessageTypeEnum = 1
	MessageTypeQuestion MessageTypeEnum = 2
	MessageTypeError    MessageTypeEnum = 3
	MessageTypeOther    MessageTypeEnum = 4
)

func MessageTypeGetType() gi.GType {
	ret := _I.GetGType(337, "MessageType")
	return ret
}

// Object Misc
type Misc struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapMisc(p unsafe.Pointer) (r Misc) { r.P = p; return }

type IMisc interface{ P_Misc() unsafe.Pointer }

func (v Misc) P_Misc() unsafe.Pointer             { return v.P }
func (v Misc) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Misc) P_Buildable() unsafe.Pointer        { return v.P }
func MiscGetType() gi.GType {
	ret := _I.GetGType(338, "Misc")
	return ret
}

// Deprecated
//
// gtk_misc_get_alignment
//
// [ xalign ] trans: everything, dir: out
//
// [ yalign ] trans: everything, dir: out
//
func (v Misc) GetAlignment() (xalign float32, yalign float32) {
	iv, err := _I.Get(1636, "Misc", "get_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_yalign := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, &outArgs[0])
	xalign = outArgs[0].Float()
	yalign = outArgs[1].Float()
	return
}

// Deprecated
//
// gtk_misc_get_padding
//
// [ xpad ] trans: everything, dir: out
//
// [ ypad ] trans: everything, dir: out
//
func (v Misc) GetPadding() (xpad int32, ypad int32) {
	iv, err := _I.Get(1637, "Misc", "get_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_xpad := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_ypad := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_xpad, arg_ypad}
	iv.Call(args, nil, &outArgs[0])
	xpad = outArgs[0].Int32()
	ypad = outArgs[1].Int32()
	return
}

// Deprecated
//
// gtk_misc_set_alignment
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
func (v Misc) SetAlignment(xalign float32, yalign float32) {
	iv, err := _I.Get(1638, "Misc", "set_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	arg_yalign := gi.NewFloatArgument(yalign)
	args := []gi.Argument{arg_v, arg_xalign, arg_yalign}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_misc_set_padding
//
// [ xpad ] trans: nothing
//
// [ ypad ] trans: nothing
//
func (v Misc) SetPadding(xpad int32, ypad int32) {
	iv, err := _I.Get(1639, "Misc", "set_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xpad := gi.NewInt32Argument(xpad)
	arg_ypad := gi.NewInt32Argument(ypad)
	args := []gi.Argument{arg_v, arg_xpad, arg_ypad}
	iv.Call(args, nil, nil)
}

// ignore GType struct MiscClass

// Struct MiscPrivate
type MiscPrivate struct {
	P unsafe.Pointer
}

func MiscPrivateGetType() gi.GType {
	ret := _I.GetGType(339, "MiscPrivate")
	return ret
}

// Object ModelButton
type ModelButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Button
}

func WrapModelButton(p unsafe.Pointer) (r ModelButton) { r.P = p; return }

type IModelButton interface{ P_ModelButton() unsafe.Pointer }

func (v ModelButton) P_ModelButton() unsafe.Pointer      { return v.P }
func (v ModelButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ModelButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ModelButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ModelButton) P_Buildable() unsafe.Pointer        { return v.P }
func ModelButtonGetType() gi.GType {
	ret := _I.GetGType(340, "ModelButton")
	return ret
}

// gtk_model_button_new
//
// [ result ] trans: nothing
//
func NewModelButton() (result ModelButton) {
	iv, err := _I.Get(1640, "ModelButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

type ModuleDisplayInitFuncStruct struct {
	F_display gdk.Display
}

func GetPointer_myModuleDisplayInitFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkModuleDisplayInitFunc())
}

//export myGtkModuleDisplayInitFunc
func myGtkModuleDisplayInitFunc(display *C.GdkDisplay) {
	// TODO: not found user_data
}

type ModuleInitFuncStruct struct {
	F_argc *int32
	F_argv unsafe.Pointer /*TODO_CB tag: array, isPtr: true*/
}

func GetPointer_myModuleInitFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkModuleInitFunc())
}

//export myGtkModuleInitFunc
func myGtkModuleInitFunc(argc *C.gint32, argv C.gpointer) {
	// TODO: not found user_data
}

// Object MountOperation
type MountOperation struct {
	g.MountOperation
}

func WrapMountOperation(p unsafe.Pointer) (r MountOperation) { r.P = p; return }

type IMountOperation interface{ P_MountOperation() unsafe.Pointer }

func (v MountOperation) P_MountOperation() unsafe.Pointer { return v.P }
func MountOperationGetType() gi.GType {
	ret := _I.GetGType(341, "MountOperation")
	return ret
}

// gtk_mount_operation_new
//
// [ parent ] trans: nothing
//
// [ result ] trans: everything
//
func NewMountOperation(parent IWindow) (result MountOperation) {
	iv, err := _I.Get(1641, "MountOperation", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_parent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_mount_operation_get_parent
//
// [ result ] trans: nothing
//
func (v MountOperation) GetParent() (result Window) {
	iv, err := _I.Get(1642, "MountOperation", "get_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_mount_operation_get_screen
//
// [ result ] trans: nothing
//
func (v MountOperation) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(1643, "MountOperation", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_mount_operation_is_showing
//
// [ result ] trans: nothing
//
func (v MountOperation) IsShowing() (result bool) {
	iv, err := _I.Get(1644, "MountOperation", "is_showing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_mount_operation_set_parent
//
// [ parent ] trans: nothing
//
func (v MountOperation) SetParent(parent IWindow) {
	iv, err := _I.Get(1645, "MountOperation", "set_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_mount_operation_set_screen
//
// [ screen ] trans: nothing
//
func (v MountOperation) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(1646, "MountOperation", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// ignore GType struct MountOperationClass

// Struct MountOperationPrivate
type MountOperationPrivate struct {
	P unsafe.Pointer
}

func MountOperationPrivateGetType() gi.GType {
	ret := _I.GetGType(342, "MountOperationPrivate")
	return ret
}

// Enum MovementStep
type MovementStepEnum int

const (
	MovementStepLogicalPositions MovementStepEnum = 0
	MovementStepVisualPositions  MovementStepEnum = 1
	MovementStepWords            MovementStepEnum = 2
	MovementStepDisplayLines     MovementStepEnum = 3
	MovementStepDisplayLineEnds  MovementStepEnum = 4
	MovementStepParagraphs       MovementStepEnum = 5
	MovementStepParagraphEnds    MovementStepEnum = 6
	MovementStepPages            MovementStepEnum = 7
	MovementStepBufferEnds       MovementStepEnum = 8
	MovementStepHorizontalPages  MovementStepEnum = 9
)

func MovementStepGetType() gi.GType {
	ret := _I.GetGType(343, "MovementStep")
	return ret
}

// Object NativeDialog
type NativeDialog struct {
	g.Object
}

func WrapNativeDialog(p unsafe.Pointer) (r NativeDialog) { r.P = p; return }

type INativeDialog interface{ P_NativeDialog() unsafe.Pointer }

func (v NativeDialog) P_NativeDialog() unsafe.Pointer { return v.P }
func NativeDialogGetType() gi.GType {
	ret := _I.GetGType(344, "NativeDialog")
	return ret
}

// gtk_native_dialog_destroy
//
func (v NativeDialog) Destroy() {
	iv, err := _I.Get(1647, "NativeDialog", "destroy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_native_dialog_get_modal
//
// [ result ] trans: nothing
//
func (v NativeDialog) GetModal() (result bool) {
	iv, err := _I.Get(1648, "NativeDialog", "get_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_native_dialog_get_title
//
// [ result ] trans: nothing
//
func (v NativeDialog) GetTitle() (result string) {
	iv, err := _I.Get(1649, "NativeDialog", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_native_dialog_get_transient_for
//
// [ result ] trans: nothing
//
func (v NativeDialog) GetTransientFor() (result Window) {
	iv, err := _I.Get(1650, "NativeDialog", "get_transient_for")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_native_dialog_get_visible
//
// [ result ] trans: nothing
//
func (v NativeDialog) GetVisible() (result bool) {
	iv, err := _I.Get(1651, "NativeDialog", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_native_dialog_hide
//
func (v NativeDialog) Hide() {
	iv, err := _I.Get(1652, "NativeDialog", "hide")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_native_dialog_run
//
// [ result ] trans: nothing
//
func (v NativeDialog) Run() (result int32) {
	iv, err := _I.Get(1653, "NativeDialog", "run")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_native_dialog_set_modal
//
// [ modal ] trans: nothing
//
func (v NativeDialog) SetModal(modal bool) {
	iv, err := _I.Get(1654, "NativeDialog", "set_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_modal := gi.NewBoolArgument(modal)
	args := []gi.Argument{arg_v, arg_modal}
	iv.Call(args, nil, nil)
}

// gtk_native_dialog_set_title
//
// [ title ] trans: nothing
//
func (v NativeDialog) SetTitle(title string) {
	iv, err := _I.Get(1655, "NativeDialog", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_native_dialog_set_transient_for
//
// [ parent ] trans: nothing
//
func (v NativeDialog) SetTransientFor(parent IWindow) {
	iv, err := _I.Get(1656, "NativeDialog", "set_transient_for")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_native_dialog_show
//
func (v NativeDialog) Show() {
	iv, err := _I.Get(1657, "NativeDialog", "show")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct NativeDialogClass

// Object Notebook
type Notebook struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapNotebook(p unsafe.Pointer) (r Notebook) { r.P = p; return }

type INotebook interface{ P_Notebook() unsafe.Pointer }

func (v Notebook) P_Notebook() unsafe.Pointer         { return v.P }
func (v Notebook) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Notebook) P_Buildable() unsafe.Pointer        { return v.P }
func NotebookGetType() gi.GType {
	ret := _I.GetGType(345, "Notebook")
	return ret
}

// gtk_notebook_new
//
// [ result ] trans: nothing
//
func NewNotebook() (result Notebook) {
	iv, err := _I.Get(1658, "Notebook", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_append_page
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) AppendPage(child IWidget, tab_label IWidget) (result int32) {
	iv, err := _I.Get(1659, "Notebook", "append_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_append_page_menu
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ menu_label ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) AppendPageMenu(child IWidget, tab_label IWidget, menu_label IWidget) (result int32) {
	iv, err := _I.Get(1660, "Notebook", "append_page_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	var tmp2 unsafe.Pointer
	if menu_label != nil {
		tmp2 = menu_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	arg_menu_label := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label, arg_menu_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_detach_tab
//
// [ child ] trans: nothing
//
func (v Notebook) DetachTab(child IWidget) {
	iv, err := _I.Get(1661, "Notebook", "detach_tab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_notebook_get_action_widget
//
// [ pack_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetActionWidget(pack_type PackTypeEnum) (result Widget) {
	iv, err := _I.Get(1662, "Notebook", "get_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pack_type := gi.NewIntArgument(int(pack_type))
	args := []gi.Argument{arg_v, arg_pack_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_get_current_page
//
// [ result ] trans: nothing
//
func (v Notebook) GetCurrentPage() (result int32) {
	iv, err := _I.Get(1663, "Notebook", "get_current_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_get_group_name
//
// [ result ] trans: nothing
//
func (v Notebook) GetGroupName() (result string) {
	iv, err := _I.Get(1664, "Notebook", "get_group_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_notebook_get_menu_label
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetMenuLabel(child IWidget) (result Widget) {
	iv, err := _I.Get(1665, "Notebook", "get_menu_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_get_menu_label_text
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetMenuLabelText(child IWidget) (result string) {
	iv, err := _I.Get(1666, "Notebook", "get_menu_label_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_notebook_get_n_pages
//
// [ result ] trans: nothing
//
func (v Notebook) GetNPages() (result int32) {
	iv, err := _I.Get(1667, "Notebook", "get_n_pages")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_get_nth_page
//
// [ page_num ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetNthPage(page_num int32) (result Widget) {
	iv, err := _I.Get(1668, "Notebook", "get_nth_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_get_scrollable
//
// [ result ] trans: nothing
//
func (v Notebook) GetScrollable() (result bool) {
	iv, err := _I.Get(1669, "Notebook", "get_scrollable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_notebook_get_show_border
//
// [ result ] trans: nothing
//
func (v Notebook) GetShowBorder() (result bool) {
	iv, err := _I.Get(1670, "Notebook", "get_show_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_notebook_get_show_tabs
//
// [ result ] trans: nothing
//
func (v Notebook) GetShowTabs() (result bool) {
	iv, err := _I.Get(1671, "Notebook", "get_show_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_notebook_get_tab_detachable
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabDetachable(child IWidget) (result bool) {
	iv, err := _I.Get(1672, "Notebook", "get_tab_detachable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_notebook_get_tab_hborder
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabHborder() (result uint16) {
	iv, err := _I.Get(1673, "Notebook", "get_tab_hborder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// gtk_notebook_get_tab_label
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabLabel(child IWidget) (result Widget) {
	iv, err := _I.Get(1674, "Notebook", "get_tab_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_get_tab_label_text
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabLabelText(child IWidget) (result string) {
	iv, err := _I.Get(1675, "Notebook", "get_tab_label_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_notebook_get_tab_pos
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabPos() (result PositionTypeEnum) {
	iv, err := _I.Get(1676, "Notebook", "get_tab_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// gtk_notebook_get_tab_reorderable
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabReorderable(child IWidget) (result bool) {
	iv, err := _I.Get(1677, "Notebook", "get_tab_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_notebook_get_tab_vborder
//
// [ result ] trans: nothing
//
func (v Notebook) GetTabVborder() (result uint16) {
	iv, err := _I.Get(1678, "Notebook", "get_tab_vborder")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// gtk_notebook_insert_page
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ position ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) InsertPage(child IWidget, tab_label IWidget, position int32) (result int32) {
	iv, err := _I.Get(1679, "Notebook", "insert_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label, arg_position}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_insert_page_menu
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ menu_label ] trans: nothing
//
// [ position ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) InsertPageMenu(child IWidget, tab_label IWidget, menu_label IWidget, position int32) (result int32) {
	iv, err := _I.Get(1680, "Notebook", "insert_page_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	var tmp2 unsafe.Pointer
	if menu_label != nil {
		tmp2 = menu_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	arg_menu_label := gi.NewPointerArgument(tmp2)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label, arg_menu_label, arg_position}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_next_page
//
func (v Notebook) NextPage() {
	iv, err := _I.Get(1681, "Notebook", "next_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_notebook_page_num
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) PageNum(child IWidget) (result int32) {
	iv, err := _I.Get(1682, "Notebook", "page_num")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_popup_disable
//
func (v Notebook) PopupDisable() {
	iv, err := _I.Get(1683, "Notebook", "popup_disable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_notebook_popup_enable
//
func (v Notebook) PopupEnable() {
	iv, err := _I.Get(1684, "Notebook", "popup_enable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_notebook_prepend_page
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) PrependPage(child IWidget, tab_label IWidget) (result int32) {
	iv, err := _I.Get(1685, "Notebook", "prepend_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_prepend_page_menu
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
// [ menu_label ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Notebook) PrependPageMenu(child IWidget, tab_label IWidget, menu_label IWidget) (result int32) {
	iv, err := _I.Get(1686, "Notebook", "prepend_page_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	var tmp2 unsafe.Pointer
	if menu_label != nil {
		tmp2 = menu_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	arg_menu_label := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label, arg_menu_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_notebook_prev_page
//
func (v Notebook) PrevPage() {
	iv, err := _I.Get(1687, "Notebook", "prev_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_notebook_remove_page
//
// [ page_num ] trans: nothing
//
func (v Notebook) RemovePage(page_num int32) {
	iv, err := _I.Get(1688, "Notebook", "remove_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	iv.Call(args, nil, nil)
}

// gtk_notebook_reorder_child
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v Notebook) ReorderChild(child IWidget, position int32) {
	iv, err := _I.Get(1689, "Notebook", "reorder_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_action_widget
//
// [ widget ] trans: nothing
//
// [ pack_type ] trans: nothing
//
func (v Notebook) SetActionWidget(widget IWidget, pack_type PackTypeEnum) {
	iv, err := _I.Get(1690, "Notebook", "set_action_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_pack_type := gi.NewIntArgument(int(pack_type))
	args := []gi.Argument{arg_v, arg_widget, arg_pack_type}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_current_page
//
// [ page_num ] trans: nothing
//
func (v Notebook) SetCurrentPage(page_num int32) {
	iv, err := _I.Get(1691, "Notebook", "set_current_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_num := gi.NewInt32Argument(page_num)
	args := []gi.Argument{arg_v, arg_page_num}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_group_name
//
// [ group_name ] trans: nothing
//
func (v Notebook) SetGroupName(group_name string) {
	iv, err := _I.Get(1692, "Notebook", "set_group_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	args := []gi.Argument{arg_v, arg_group_name}
	iv.Call(args, nil, nil)
	gi.Free(c_group_name)
}

// gtk_notebook_set_menu_label
//
// [ child ] trans: nothing
//
// [ menu_label ] trans: nothing
//
func (v Notebook) SetMenuLabel(child IWidget, menu_label IWidget) {
	iv, err := _I.Get(1693, "Notebook", "set_menu_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if menu_label != nil {
		tmp1 = menu_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_menu_label := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_menu_label}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_menu_label_text
//
// [ child ] trans: nothing
//
// [ menu_text ] trans: nothing
//
func (v Notebook) SetMenuLabelText(child IWidget, menu_text string) {
	iv, err := _I.Get(1694, "Notebook", "set_menu_label_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_menu_text := gi.CString(menu_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_menu_text := gi.NewStringArgument(c_menu_text)
	args := []gi.Argument{arg_v, arg_child, arg_menu_text}
	iv.Call(args, nil, nil)
	gi.Free(c_menu_text)
}

// gtk_notebook_set_scrollable
//
// [ scrollable ] trans: nothing
//
func (v Notebook) SetScrollable(scrollable bool) {
	iv, err := _I.Get(1695, "Notebook", "set_scrollable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_scrollable := gi.NewBoolArgument(scrollable)
	args := []gi.Argument{arg_v, arg_scrollable}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_show_border
//
// [ show_border ] trans: nothing
//
func (v Notebook) SetShowBorder(show_border bool) {
	iv, err := _I.Get(1696, "Notebook", "set_show_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_border := gi.NewBoolArgument(show_border)
	args := []gi.Argument{arg_v, arg_show_border}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_show_tabs
//
// [ show_tabs ] trans: nothing
//
func (v Notebook) SetShowTabs(show_tabs bool) {
	iv, err := _I.Get(1697, "Notebook", "set_show_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_tabs := gi.NewBoolArgument(show_tabs)
	args := []gi.Argument{arg_v, arg_show_tabs}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_tab_detachable
//
// [ child ] trans: nothing
//
// [ detachable ] trans: nothing
//
func (v Notebook) SetTabDetachable(child IWidget, detachable bool) {
	iv, err := _I.Get(1698, "Notebook", "set_tab_detachable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_detachable := gi.NewBoolArgument(detachable)
	args := []gi.Argument{arg_v, arg_child, arg_detachable}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_tab_label
//
// [ child ] trans: nothing
//
// [ tab_label ] trans: nothing
//
func (v Notebook) SetTabLabel(child IWidget, tab_label IWidget) {
	iv, err := _I.Get(1699, "Notebook", "set_tab_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if tab_label != nil {
		tmp1 = tab_label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_label := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_tab_label}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_tab_label_text
//
// [ child ] trans: nothing
//
// [ tab_text ] trans: nothing
//
func (v Notebook) SetTabLabelText(child IWidget, tab_text string) {
	iv, err := _I.Get(1700, "Notebook", "set_tab_label_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_tab_text := gi.CString(tab_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_tab_text := gi.NewStringArgument(c_tab_text)
	args := []gi.Argument{arg_v, arg_child, arg_tab_text}
	iv.Call(args, nil, nil)
	gi.Free(c_tab_text)
}

// gtk_notebook_set_tab_pos
//
// [ pos ] trans: nothing
//
func (v Notebook) SetTabPos(pos PositionTypeEnum) {
	iv, err := _I.Get(1701, "Notebook", "set_tab_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewIntArgument(int(pos))
	args := []gi.Argument{arg_v, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_notebook_set_tab_reorderable
//
// [ child ] trans: nothing
//
// [ reorderable ] trans: nothing
//
func (v Notebook) SetTabReorderable(child IWidget, reorderable bool) {
	iv, err := _I.Get(1702, "Notebook", "set_tab_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_reorderable := gi.NewBoolArgument(reorderable)
	args := []gi.Argument{arg_v, arg_child, arg_reorderable}
	iv.Call(args, nil, nil)
}

// Object NotebookAccessible
type NotebookAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	ContainerAccessible
}

func WrapNotebookAccessible(p unsafe.Pointer) (r NotebookAccessible) { r.P = p; return }

type INotebookAccessible interface{ P_NotebookAccessible() unsafe.Pointer }

func (v NotebookAccessible) P_NotebookAccessible() unsafe.Pointer { return v.P }
func (v NotebookAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v NotebookAccessible) P_Selection() unsafe.Pointer          { return v.P }
func NotebookAccessibleGetType() gi.GType {
	ret := _I.GetGType(346, "NotebookAccessible")
	return ret
}

// ignore GType struct NotebookAccessibleClass

// Struct NotebookAccessiblePrivate
type NotebookAccessiblePrivate struct {
	P unsafe.Pointer
}

func NotebookAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(347, "NotebookAccessiblePrivate")
	return ret
}

// ignore GType struct NotebookClass

// Object NotebookPageAccessible
type NotebookPageAccessible struct {
	atk.ComponentIfc
	atk.Object
}

func WrapNotebookPageAccessible(p unsafe.Pointer) (r NotebookPageAccessible) { r.P = p; return }

type INotebookPageAccessible interface{ P_NotebookPageAccessible() unsafe.Pointer }

func (v NotebookPageAccessible) P_NotebookPageAccessible() unsafe.Pointer { return v.P }
func (v NotebookPageAccessible) P_Component() unsafe.Pointer              { return v.P }
func NotebookPageAccessibleGetType() gi.GType {
	ret := _I.GetGType(348, "NotebookPageAccessible")
	return ret
}

// gtk_notebook_page_accessible_new
//
// [ notebook ] trans: nothing
//
// [ child ] trans: nothing
//
// [ result ] trans: everything
//
func NewNotebookPageAccessible(notebook INotebookAccessible, child IWidget) (result NotebookPageAccessible) {
	iv, err := _I.Get(1703, "NotebookPageAccessible", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if notebook != nil {
		tmp = notebook.P_NotebookAccessible()
	}
	var tmp1 unsafe.Pointer
	if child != nil {
		tmp1 = child.P_Widget()
	}
	arg_notebook := gi.NewPointerArgument(tmp)
	arg_child := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_notebook, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_notebook_page_accessible_invalidate
//
func (v NotebookPageAccessible) Invalidate() {
	iv, err := _I.Get(1704, "NotebookPageAccessible", "invalidate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct NotebookPageAccessibleClass

// Struct NotebookPageAccessiblePrivate
type NotebookPageAccessiblePrivate struct {
	P unsafe.Pointer
}

func NotebookPageAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(349, "NotebookPageAccessiblePrivate")
	return ret
}

// Struct NotebookPrivate
type NotebookPrivate struct {
	P unsafe.Pointer
}

func NotebookPrivateGetType() gi.GType {
	ret := _I.GetGType(350, "NotebookPrivate")
	return ret
}

// Enum NotebookTab
type NotebookTabEnum int

const (
	NotebookTabFirst NotebookTabEnum = 0
	NotebookTabLast  NotebookTabEnum = 1
)

func NotebookTabGetType() gi.GType {
	ret := _I.GetGType(351, "NotebookTab")
	return ret
}

// Enum NumberUpLayout
type NumberUpLayoutEnum int

const (
	NumberUpLayoutLrtb NumberUpLayoutEnum = 0
	NumberUpLayoutLrbt NumberUpLayoutEnum = 1
	NumberUpLayoutRltb NumberUpLayoutEnum = 2
	NumberUpLayoutRlbt NumberUpLayoutEnum = 3
	NumberUpLayoutTblr NumberUpLayoutEnum = 4
	NumberUpLayoutTbrl NumberUpLayoutEnum = 5
	NumberUpLayoutBtlr NumberUpLayoutEnum = 6
	NumberUpLayoutBtrl NumberUpLayoutEnum = 7
)

func NumberUpLayoutGetType() gi.GType {
	ret := _I.GetGType(352, "NumberUpLayout")
	return ret
}

// Object NumerableIcon
type NumerableIcon struct {
	g.IconIfc
	g.EmblemedIcon
}

func WrapNumerableIcon(p unsafe.Pointer) (r NumerableIcon) { r.P = p; return }

type INumerableIcon interface{ P_NumerableIcon() unsafe.Pointer }

func (v NumerableIcon) P_NumerableIcon() unsafe.Pointer { return v.P }
func (v NumerableIcon) P_Icon() unsafe.Pointer          { return v.P }
func NumerableIconGetType() gi.GType {
	ret := _I.GetGType(353, "NumerableIcon")
	return ret
}

// Deprecated
//
// gtk_numerable_icon_new
//
// [ base_icon ] trans: nothing
//
// [ result ] trans: everything
//
func NumerableIconNew1(base_icon g.IIcon) (result g.Icon) {
	iv, err := _I.Get(1705, "NumerableIcon", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_icon != nil {
		tmp = base_icon.P_Icon()
	}
	arg_base_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_base_icon}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_numerable_icon_new_with_style_context
//
// [ base_icon ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: everything
//
func NumerableIconNewWithStyleContext1(base_icon g.IIcon, context IStyleContext) (result g.Icon) {
	iv, err := _I.Get(1706, "NumerableIcon", "new_with_style_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_icon != nil {
		tmp = base_icon.P_Icon()
	}
	var tmp1 unsafe.Pointer
	if context != nil {
		tmp1 = context.P_StyleContext()
	}
	arg_base_icon := gi.NewPointerArgument(tmp)
	arg_context := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_base_icon, arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_numerable_icon_get_background_gicon
//
// [ result ] trans: nothing
//
func (v NumerableIcon) GetBackgroundGicon() (result g.Icon) {
	iv, err := _I.Get(1707, "NumerableIcon", "get_background_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_numerable_icon_get_background_icon_name
//
// [ result ] trans: nothing
//
func (v NumerableIcon) GetBackgroundIconName() (result string) {
	iv, err := _I.Get(1708, "NumerableIcon", "get_background_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_numerable_icon_get_count
//
// [ result ] trans: nothing
//
func (v NumerableIcon) GetCount() (result int32) {
	iv, err := _I.Get(1709, "NumerableIcon", "get_count")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_numerable_icon_get_label
//
// [ result ] trans: nothing
//
func (v NumerableIcon) GetLabel() (result string) {
	iv, err := _I.Get(1710, "NumerableIcon", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_numerable_icon_get_style_context
//
// [ result ] trans: nothing
//
func (v NumerableIcon) GetStyleContext() (result StyleContext) {
	iv, err := _I.Get(1711, "NumerableIcon", "get_style_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_numerable_icon_set_background_gicon
//
// [ icon ] trans: nothing
//
func (v NumerableIcon) SetBackgroundGicon(icon g.IIcon) {
	iv, err := _I.Get(1712, "NumerableIcon", "set_background_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_numerable_icon_set_background_icon_name
//
// [ icon_name ] trans: nothing
//
func (v NumerableIcon) SetBackgroundIconName(icon_name string) {
	iv, err := _I.Get(1713, "NumerableIcon", "set_background_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_numerable_icon_set_count
//
// [ count ] trans: nothing
//
func (v NumerableIcon) SetCount(count int32) {
	iv, err := _I.Get(1714, "NumerableIcon", "set_count")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_numerable_icon_set_label
//
// [ label ] trans: nothing
//
func (v NumerableIcon) SetLabel(label string) {
	iv, err := _I.Get(1715, "NumerableIcon", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// Deprecated
//
// gtk_numerable_icon_set_style_context
//
// [ style ] trans: nothing
//
func (v NumerableIcon) SetStyleContext(style IStyleContext) {
	iv, err := _I.Get(1716, "NumerableIcon", "set_style_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_StyleContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// ignore GType struct NumerableIconClass

// Struct NumerableIconPrivate
type NumerableIconPrivate struct {
	P unsafe.Pointer
}

func NumerableIconPrivateGetType() gi.GType {
	ret := _I.GetGType(354, "NumerableIconPrivate")
	return ret
}

// Object OffscreenWindow
type OffscreenWindow struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Window
}

func WrapOffscreenWindow(p unsafe.Pointer) (r OffscreenWindow) { r.P = p; return }

type IOffscreenWindow interface{ P_OffscreenWindow() unsafe.Pointer }

func (v OffscreenWindow) P_OffscreenWindow() unsafe.Pointer  { return v.P }
func (v OffscreenWindow) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v OffscreenWindow) P_Buildable() unsafe.Pointer        { return v.P }
func OffscreenWindowGetType() gi.GType {
	ret := _I.GetGType(355, "OffscreenWindow")
	return ret
}

// gtk_offscreen_window_new
//
// [ result ] trans: nothing
//
func NewOffscreenWindow() (result OffscreenWindow) {
	iv, err := _I.Get(1717, "OffscreenWindow", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_offscreen_window_get_pixbuf
//
// [ result ] trans: everything
//
func (v OffscreenWindow) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(1718, "OffscreenWindow", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_offscreen_window_get_surface
//
// [ result ] trans: nothing
//
func (v OffscreenWindow) GetSurface() (result cairo.Surface) {
	iv, err := _I.Get(1719, "OffscreenWindow", "get_surface")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct OffscreenWindowClass

// Interface Orientable
type Orientable struct {
	OrientableIfc
	P unsafe.Pointer
}
type OrientableIfc struct{}
type IOrientable interface{ P_Orientable() unsafe.Pointer }

func (v Orientable) P_Orientable() unsafe.Pointer { return v.P }
func OrientableGetType() gi.GType {
	ret := _I.GetGType(356, "Orientable")
	return ret
}

// gtk_orientable_get_orientation
//
// [ result ] trans: nothing
//
func (v *OrientableIfc) GetOrientation() (result OrientationEnum) {
	iv, err := _I.Get(1720, "Orientable", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_orientable_set_orientation
//
// [ orientation ] trans: nothing
//
func (v *OrientableIfc) SetOrientation(orientation OrientationEnum) {
	iv, err := _I.Get(1721, "Orientable", "set_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	iv.Call(args, nil, nil)
}

// ignore GType struct OrientableIface

// Enum Orientation
type OrientationEnum int

const (
	OrientationHorizontal OrientationEnum = 0
	OrientationVertical   OrientationEnum = 1
)

func OrientationGetType() gi.GType {
	ret := _I.GetGType(357, "Orientation")
	return ret
}

// Object Overlay
type Overlay struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapOverlay(p unsafe.Pointer) (r Overlay) { r.P = p; return }

type IOverlay interface{ P_Overlay() unsafe.Pointer }

func (v Overlay) P_Overlay() unsafe.Pointer          { return v.P }
func (v Overlay) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Overlay) P_Buildable() unsafe.Pointer        { return v.P }
func OverlayGetType() gi.GType {
	ret := _I.GetGType(358, "Overlay")
	return ret
}

// gtk_overlay_new
//
// [ result ] trans: nothing
//
func NewOverlay() (result Overlay) {
	iv, err := _I.Get(1722, "Overlay", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_overlay_add_overlay
//
// [ widget ] trans: nothing
//
func (v Overlay) AddOverlay(widget IWidget) {
	iv, err := _I.Get(1723, "Overlay", "add_overlay")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_overlay_get_overlay_pass_through
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Overlay) GetOverlayPassThrough(widget IWidget) (result bool) {
	iv, err := _I.Get(1724, "Overlay", "get_overlay_pass_through")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_overlay_reorder_overlay
//
// [ child ] trans: nothing
//
// [ position ] trans: nothing
//
func (v Overlay) ReorderOverlay(child IWidget, position int32) {
	iv, err := _I.Get(1725, "Overlay", "reorder_overlay")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_child, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_overlay_set_overlay_pass_through
//
// [ widget ] trans: nothing
//
// [ pass_through ] trans: nothing
//
func (v Overlay) SetOverlayPassThrough(widget IWidget, pass_through bool) {
	iv, err := _I.Get(1726, "Overlay", "set_overlay_pass_through")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_pass_through := gi.NewBoolArgument(pass_through)
	args := []gi.Argument{arg_v, arg_widget, arg_pass_through}
	iv.Call(args, nil, nil)
}

// ignore GType struct OverlayClass

// Struct OverlayPrivate
type OverlayPrivate struct {
	P unsafe.Pointer
}

func OverlayPrivateGetType() gi.GType {
	ret := _I.GetGType(359, "OverlayPrivate")
	return ret
}

// Enum PackDirection
type PackDirectionEnum int

const (
	PackDirectionLtr PackDirectionEnum = 0
	PackDirectionRtl PackDirectionEnum = 1
	PackDirectionTtb PackDirectionEnum = 2
	PackDirectionBtt PackDirectionEnum = 3
)

func PackDirectionGetType() gi.GType {
	ret := _I.GetGType(360, "PackDirection")
	return ret
}

// Enum PackType
type PackTypeEnum int

const (
	PackTypeStart PackTypeEnum = 0
	PackTypeEnd   PackTypeEnum = 1
)

func PackTypeGetType() gi.GType {
	ret := _I.GetGType(361, "PackType")
	return ret
}

// Struct PadActionEntry
type PadActionEntry struct {
	P unsafe.Pointer
}

const SizeOfStructPadActionEntry = 32

func PadActionEntryGetType() gi.GType {
	ret := _I.GetGType(362, "PadActionEntry")
	return ret
}

// Enum PadActionType
type PadActionTypeEnum int

const (
	PadActionTypeButton PadActionTypeEnum = 0
	PadActionTypeRing   PadActionTypeEnum = 1
	PadActionTypeStrip  PadActionTypeEnum = 2
)

func PadActionTypeGetType() gi.GType {
	ret := _I.GetGType(363, "PadActionType")
	return ret
}

// Object PadController
type PadController struct {
	EventController
}

func WrapPadController(p unsafe.Pointer) (r PadController) { r.P = p; return }

type IPadController interface{ P_PadController() unsafe.Pointer }

func (v PadController) P_PadController() unsafe.Pointer { return v.P }
func PadControllerGetType() gi.GType {
	ret := _I.GetGType(364, "PadController")
	return ret
}

// gtk_pad_controller_new
//
// [ window ] trans: nothing
//
// [ group ] trans: nothing
//
// [ pad ] trans: nothing
//
// [ result ] trans: everything
//
func NewPadController(window IWindow, group g.IActionGroup, pad gdk.IDevice) (result PadController) {
	iv, err := _I.Get(1727, "PadController", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	var tmp1 unsafe.Pointer
	if group != nil {
		tmp1 = group.P_ActionGroup()
	}
	var tmp2 unsafe.Pointer
	if pad != nil {
		tmp2 = pad.P_Device()
	}
	arg_window := gi.NewPointerArgument(tmp)
	arg_group := gi.NewPointerArgument(tmp1)
	arg_pad := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_window, arg_group, arg_pad}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_pad_controller_set_action
//
// [ type1 ] trans: nothing
//
// [ index ] trans: nothing
//
// [ mode ] trans: nothing
//
// [ label ] trans: nothing
//
// [ action_name ] trans: nothing
//
func (v PadController) SetAction(type1 PadActionTypeEnum, index int32, mode int32, label string, action_name string) {
	iv, err := _I.Get(1728, "PadController", "set_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_index := gi.NewInt32Argument(index)
	arg_mode := gi.NewInt32Argument(mode)
	arg_label := gi.NewStringArgument(c_label)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_type1, arg_index, arg_mode, arg_label, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_action_name)
}

// gtk_pad_controller_set_action_entries
//
// [ entries ] trans: nothing
//
// [ n_entries ] trans: nothing
//
func (v PadController) SetActionEntries(entries unsafe.Pointer, n_entries int32) {
	iv, err := _I.Get(1729, "PadController", "set_action_entries")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_entries := gi.NewPointerArgument(entries)
	arg_n_entries := gi.NewInt32Argument(n_entries)
	args := []gi.Argument{arg_v, arg_entries, arg_n_entries}
	iv.Call(args, nil, nil)
}

// ignore GType struct PadControllerClass

// Enum PageOrientation
type PageOrientationEnum int

const (
	PageOrientationPortrait         PageOrientationEnum = 0
	PageOrientationLandscape        PageOrientationEnum = 1
	PageOrientationReversePortrait  PageOrientationEnum = 2
	PageOrientationReverseLandscape PageOrientationEnum = 3
)

func PageOrientationGetType() gi.GType {
	ret := _I.GetGType(365, "PageOrientation")
	return ret
}

// Struct PageRange
type PageRange struct {
	P unsafe.Pointer
}

const SizeOfStructPageRange = 8

func PageRangeGetType() gi.GType {
	ret := _I.GetGType(366, "PageRange")
	return ret
}

// Enum PageSet
type PageSetEnum int

const (
	PageSetAll  PageSetEnum = 0
	PageSetEven PageSetEnum = 1
	PageSetOdd  PageSetEnum = 2
)

func PageSetGetType() gi.GType {
	ret := _I.GetGType(367, "PageSet")
	return ret
}

// Object PageSetup
type PageSetup struct {
	g.Object
}

func WrapPageSetup(p unsafe.Pointer) (r PageSetup) { r.P = p; return }

type IPageSetup interface{ P_PageSetup() unsafe.Pointer }

func (v PageSetup) P_PageSetup() unsafe.Pointer { return v.P }
func PageSetupGetType() gi.GType {
	ret := _I.GetGType(368, "PageSetup")
	return ret
}

// gtk_page_setup_new
//
// [ result ] trans: everything
//
func NewPageSetup() (result PageSetup) {
	iv, err := _I.Get(1730, "PageSetup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_new_from_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPageSetupFromFile(file_name string) (result PageSetup, err error) {
	iv, err := _I.Get(1731, "PageSetup", "new_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_new_from_gvariant
//
// [ variant ] trans: nothing
//
// [ result ] trans: everything
//
func NewPageSetupFromGvariant(variant g.Variant) (result PageSetup) {
	iv, err := _I.Get(1732, "PageSetup", "new_from_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_variant := gi.NewPointerArgument(variant.P)
	args := []gi.Argument{arg_variant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_new_from_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPageSetupFromKeyFile(key_file g.KeyFile, group_name string) (result PageSetup, err error) {
	iv, err := _I.Get(1733, "PageSetup", "new_from_key_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_group_name := gi.CString(group_name)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_key_file, arg_group_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_group_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_copy
//
// [ result ] trans: everything
//
func (v PageSetup) Copy() (result PageSetup) {
	iv, err := _I.Get(1734, "PageSetup", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_get_bottom_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetBottomMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1735, "PageSetup", "get_bottom_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_left_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetLeftMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1736, "PageSetup", "get_left_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_orientation
//
// [ result ] trans: nothing
//
func (v PageSetup) GetOrientation() (result PageOrientationEnum) {
	iv, err := _I.Get(1737, "PageSetup", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PageOrientationEnum(ret.Int())
	return
}

// gtk_page_setup_get_page_height
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetPageHeight(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1738, "PageSetup", "get_page_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_page_width
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetPageWidth(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1739, "PageSetup", "get_page_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_paper_height
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetPaperHeight(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1740, "PageSetup", "get_paper_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_paper_size
//
// [ result ] trans: nothing
//
func (v PageSetup) GetPaperSize() (result PaperSize) {
	iv, err := _I.Get(1741, "PageSetup", "get_paper_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_get_paper_width
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetPaperWidth(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1742, "PageSetup", "get_paper_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_right_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetRightMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1743, "PageSetup", "get_right_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_get_top_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) GetTopMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1744, "PageSetup", "get_top_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_page_setup_load_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) LoadFile(file_name string) (result bool, err error) {
	iv, err := _I.Get(1745, "PageSetup", "load_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_page_setup_load_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) LoadKeyFile(key_file g.KeyFile, group_name string) (result bool, err error) {
	iv, err := _I.Get(1746, "PageSetup", "load_key_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_key_file, arg_group_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_group_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_page_setup_set_bottom_margin
//
// [ margin ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PageSetup) SetBottomMargin(margin float64, unit UnitEnum) {
	iv, err := _I.Get(1747, "PageSetup", "set_bottom_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewDoubleArgument(margin)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_margin, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_left_margin
//
// [ margin ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PageSetup) SetLeftMargin(margin float64, unit UnitEnum) {
	iv, err := _I.Get(1748, "PageSetup", "set_left_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewDoubleArgument(margin)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_margin, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_orientation
//
// [ orientation ] trans: nothing
//
func (v PageSetup) SetOrientation(orientation PageOrientationEnum) {
	iv, err := _I.Get(1749, "PageSetup", "set_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_paper_size
//
// [ size ] trans: nothing
//
func (v PageSetup) SetPaperSize(size PaperSize) {
	iv, err := _I.Get(1750, "PageSetup", "set_paper_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewPointerArgument(size.P)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_paper_size_and_default_margins
//
// [ size ] trans: nothing
//
func (v PageSetup) SetPaperSizeAndDefaultMargins(size PaperSize) {
	iv, err := _I.Get(1751, "PageSetup", "set_paper_size_and_default_margins")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewPointerArgument(size.P)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_right_margin
//
// [ margin ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PageSetup) SetRightMargin(margin float64, unit UnitEnum) {
	iv, err := _I.Get(1752, "PageSetup", "set_right_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewDoubleArgument(margin)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_margin, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_set_top_margin
//
// [ margin ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PageSetup) SetTopMargin(margin float64, unit UnitEnum) {
	iv, err := _I.Get(1753, "PageSetup", "set_top_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewDoubleArgument(margin)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_margin, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_page_setup_to_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PageSetup) ToFile(file_name string) (result bool, err error) {
	iv, err := _I.Get(1754, "PageSetup", "to_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_page_setup_to_gvariant
//
// [ result ] trans: nothing
//
func (v PageSetup) ToGvariant() (result g.Variant) {
	iv, err := _I.Get(1755, "PageSetup", "to_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_page_setup_to_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
func (v PageSetup) ToKeyFile(key_file g.KeyFile, group_name string) {
	iv, err := _I.Get(1756, "PageSetup", "to_key_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	args := []gi.Argument{arg_v, arg_key_file, arg_group_name}
	iv.Call(args, nil, nil)
	gi.Free(c_group_name)
}

type PageSetupDoneFuncStruct struct {
	F_page_setup PageSetup
	F_data       unsafe.Pointer
}

func GetPointer_myPageSetupDoneFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkPageSetupDoneFunc())
}

//export myGtkPageSetupDoneFunc
func myGtkPageSetupDoneFunc(page_setup *C.GtkPageSetup, data C.gpointer) {
	// TODO: not found user_data
}

// Enum PanDirection
type PanDirectionEnum int

const (
	PanDirectionLeft  PanDirectionEnum = 0
	PanDirectionRight PanDirectionEnum = 1
	PanDirectionUp    PanDirectionEnum = 2
	PanDirectionDown  PanDirectionEnum = 3
)

func PanDirectionGetType() gi.GType {
	ret := _I.GetGType(369, "PanDirection")
	return ret
}

// Object Paned
type Paned struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Container
}

func WrapPaned(p unsafe.Pointer) (r Paned) { r.P = p; return }

type IPaned interface{ P_Paned() unsafe.Pointer }

func (v Paned) P_Paned() unsafe.Pointer            { return v.P }
func (v Paned) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Paned) P_Buildable() unsafe.Pointer        { return v.P }
func (v Paned) P_Orientable() unsafe.Pointer       { return v.P }
func PanedGetType() gi.GType {
	ret := _I.GetGType(370, "Paned")
	return ret
}

// gtk_paned_new
//
// [ orientation ] trans: nothing
//
// [ result ] trans: nothing
//
func NewPaned(orientation OrientationEnum) (result Paned) {
	iv, err := _I.Get(1757, "Paned", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paned_add1
//
// [ child ] trans: nothing
//
func (v Paned) Add1(child IWidget) {
	iv, err := _I.Get(1758, "Paned", "add1")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_paned_add2
//
// [ child ] trans: nothing
//
func (v Paned) Add2(child IWidget) {
	iv, err := _I.Get(1759, "Paned", "add2")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_paned_get_child1
//
// [ result ] trans: nothing
//
func (v Paned) GetChild1() (result Widget) {
	iv, err := _I.Get(1760, "Paned", "get_child1")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paned_get_child2
//
// [ result ] trans: nothing
//
func (v Paned) GetChild2() (result Widget) {
	iv, err := _I.Get(1761, "Paned", "get_child2")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paned_get_handle_window
//
// [ result ] trans: nothing
//
func (v Paned) GetHandleWindow() (result gdk.Window) {
	iv, err := _I.Get(1762, "Paned", "get_handle_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paned_get_position
//
// [ result ] trans: nothing
//
func (v Paned) GetPosition() (result int32) {
	iv, err := _I.Get(1763, "Paned", "get_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_paned_get_wide_handle
//
// [ result ] trans: nothing
//
func (v Paned) GetWideHandle() (result bool) {
	iv, err := _I.Get(1764, "Paned", "get_wide_handle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_paned_pack1
//
// [ child ] trans: nothing
//
// [ resize ] trans: nothing
//
// [ shrink ] trans: nothing
//
func (v Paned) Pack1(child IWidget, resize bool, shrink bool) {
	iv, err := _I.Get(1765, "Paned", "pack1")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_resize := gi.NewBoolArgument(resize)
	arg_shrink := gi.NewBoolArgument(shrink)
	args := []gi.Argument{arg_v, arg_child, arg_resize, arg_shrink}
	iv.Call(args, nil, nil)
}

// gtk_paned_pack2
//
// [ child ] trans: nothing
//
// [ resize ] trans: nothing
//
// [ shrink ] trans: nothing
//
func (v Paned) Pack2(child IWidget, resize bool, shrink bool) {
	iv, err := _I.Get(1766, "Paned", "pack2")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_resize := gi.NewBoolArgument(resize)
	arg_shrink := gi.NewBoolArgument(shrink)
	args := []gi.Argument{arg_v, arg_child, arg_resize, arg_shrink}
	iv.Call(args, nil, nil)
}

// gtk_paned_set_position
//
// [ position ] trans: nothing
//
func (v Paned) SetPosition(position int32) {
	iv, err := _I.Get(1767, "Paned", "set_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_paned_set_wide_handle
//
// [ wide ] trans: nothing
//
func (v Paned) SetWideHandle(wide bool) {
	iv, err := _I.Get(1768, "Paned", "set_wide_handle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wide := gi.NewBoolArgument(wide)
	args := []gi.Argument{arg_v, arg_wide}
	iv.Call(args, nil, nil)
}

// Object PanedAccessible
type PanedAccessible struct {
	atk.ComponentIfc
	atk.ValueIfc
	ContainerAccessible
}

func WrapPanedAccessible(p unsafe.Pointer) (r PanedAccessible) { r.P = p; return }

type IPanedAccessible interface{ P_PanedAccessible() unsafe.Pointer }

func (v PanedAccessible) P_PanedAccessible() unsafe.Pointer { return v.P }
func (v PanedAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v PanedAccessible) P_Value() unsafe.Pointer           { return v.P }
func PanedAccessibleGetType() gi.GType {
	ret := _I.GetGType(371, "PanedAccessible")
	return ret
}

// ignore GType struct PanedAccessibleClass

// Struct PanedAccessiblePrivate
type PanedAccessiblePrivate struct {
	P unsafe.Pointer
}

func PanedAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(372, "PanedAccessiblePrivate")
	return ret
}

// ignore GType struct PanedClass

// Struct PanedPrivate
type PanedPrivate struct {
	P unsafe.Pointer
}

func PanedPrivateGetType() gi.GType {
	ret := _I.GetGType(373, "PanedPrivate")
	return ret
}

// Struct PaperSize
type PaperSize struct {
	P unsafe.Pointer
}

func PaperSizeGetType() gi.GType {
	ret := _I.GetGType(374, "PaperSize")
	return ret
}

// gtk_paper_size_new
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSize(name string) (result PaperSize) {
	iv, err := _I.Get(1769, "PaperSize", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_new_custom
//
// [ name ] trans: nothing
//
// [ display_name ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ unit ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSizeCustom(name string, display_name string, width float64, height float64, unit UnitEnum) (result PaperSize) {
	iv, err := _I.Get(1770, "PaperSize", "new_custom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_display_name := gi.CString(display_name)
	arg_name := gi.NewStringArgument(c_name)
	arg_display_name := gi.NewStringArgument(c_display_name)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_name, arg_display_name, arg_width, arg_height, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_display_name)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_new_from_gvariant
//
// [ variant ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSizeFromGvariant(variant g.Variant) (result PaperSize) {
	iv, err := _I.Get(1771, "PaperSize", "new_from_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_variant := gi.NewPointerArgument(variant.P)
	args := []gi.Argument{arg_variant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_new_from_ipp
//
// [ ipp_name ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSizeFromIpp(ipp_name string, width float64, height float64) (result PaperSize) {
	iv, err := _I.Get(1772, "PaperSize", "new_from_ipp")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ipp_name := gi.CString(ipp_name)
	arg_ipp_name := gi.NewStringArgument(c_ipp_name)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_ipp_name, arg_width, arg_height}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ipp_name)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_new_from_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSizeFromKeyFile(key_file g.KeyFile, group_name string) (result PaperSize, err error) {
	iv, err := _I.Get(1773, "PaperSize", "new_from_key_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_group_name := gi.CString(group_name)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_key_file, arg_group_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_group_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_new_from_ppd
//
// [ ppd_name ] trans: nothing
//
// [ ppd_display_name ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ result ] trans: everything
//
func NewPaperSizeFromPpd(ppd_name string, ppd_display_name string, width float64, height float64) (result PaperSize) {
	iv, err := _I.Get(1774, "PaperSize", "new_from_ppd")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ppd_name := gi.CString(ppd_name)
	c_ppd_display_name := gi.CString(ppd_display_name)
	arg_ppd_name := gi.NewStringArgument(c_ppd_name)
	arg_ppd_display_name := gi.NewStringArgument(c_ppd_display_name)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_ppd_name, arg_ppd_display_name, arg_width, arg_height}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ppd_name)
	gi.Free(c_ppd_display_name)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_copy
//
// [ result ] trans: everything
//
func (v PaperSize) Copy() (result PaperSize) {
	iv, err := _I.Get(1775, "PaperSize", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_free
//
func (v PaperSize) Free() {
	iv, err := _I.Get(1776, "PaperSize", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_paper_size_get_default_bottom_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetDefaultBottomMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1777, "PaperSize", "get_default_bottom_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_get_default_left_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetDefaultLeftMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1778, "PaperSize", "get_default_left_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_get_default_right_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetDefaultRightMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1779, "PaperSize", "get_default_right_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_get_default_top_margin
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetDefaultTopMargin(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1780, "PaperSize", "get_default_top_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_get_display_name
//
// [ result ] trans: nothing
//
func (v PaperSize) GetDisplayName() (result string) {
	iv, err := _I.Get(1781, "PaperSize", "get_display_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_paper_size_get_height
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetHeight(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1782, "PaperSize", "get_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_get_name
//
// [ result ] trans: nothing
//
func (v PaperSize) GetName() (result string) {
	iv, err := _I.Get(1783, "PaperSize", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_paper_size_get_ppd_name
//
// [ result ] trans: nothing
//
func (v PaperSize) GetPpdName() (result string) {
	iv, err := _I.Get(1784, "PaperSize", "get_ppd_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_paper_size_get_width
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) GetWidth(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1785, "PaperSize", "get_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_paper_size_is_custom
//
// [ result ] trans: nothing
//
func (v PaperSize) IsCustom() (result bool) {
	iv, err := _I.Get(1786, "PaperSize", "is_custom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_paper_size_is_equal
//
// [ size2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PaperSize) IsEqual(size2 PaperSize) (result bool) {
	iv, err := _I.Get(1787, "PaperSize", "is_equal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size2 := gi.NewPointerArgument(size2.P)
	args := []gi.Argument{arg_v, arg_size2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_paper_size_is_ipp
//
// [ result ] trans: nothing
//
func (v PaperSize) IsIpp() (result bool) {
	iv, err := _I.Get(1788, "PaperSize", "is_ipp")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_paper_size_set_size
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PaperSize) SetSize(width float64, height float64, unit UnitEnum) {
	iv, err := _I.Get(1789, "PaperSize", "set_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_width, arg_height, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_paper_size_to_gvariant
//
// [ result ] trans: nothing
//
func (v PaperSize) ToGvariant() (result g.Variant) {
	iv, err := _I.Get(1790, "PaperSize", "to_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_paper_size_to_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
func (v PaperSize) ToKeyFile(key_file g.KeyFile, group_name string) {
	iv, err := _I.Get(1791, "PaperSize", "to_key_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	args := []gi.Argument{arg_v, arg_key_file, arg_group_name}
	iv.Call(args, nil, nil)
	gi.Free(c_group_name)
}

// gtk_paper_size_get_paper_sizes
//
// [ include_custom ] trans: nothing
//
// [ result ] trans: everything
//
func PaperSizeGetPaperSizes1(include_custom bool) (result g.List) {
	iv, err := _I.Get(1793, "PaperSize", "get_paper_sizes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_include_custom := gi.NewBoolArgument(include_custom)
	args := []gi.Argument{arg_include_custom}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// Enum PathPriorityType
type PathPriorityTypeEnum int

const (
	PathPriorityTypeLowest      PathPriorityTypeEnum = 0
	PathPriorityTypeGtk         PathPriorityTypeEnum = 4
	PathPriorityTypeApplication PathPriorityTypeEnum = 8
	PathPriorityTypeTheme       PathPriorityTypeEnum = 10
	PathPriorityTypeRc          PathPriorityTypeEnum = 12
	PathPriorityTypeHighest     PathPriorityTypeEnum = 15
)

func PathPriorityTypeGetType() gi.GType {
	ret := _I.GetGType(375, "PathPriorityType")
	return ret
}

// Deprecated
//
// Enum PathType
type PathTypeEnum int

const (
	PathTypeWidget      PathTypeEnum = 0
	PathTypeWidgetClass PathTypeEnum = 1
	PathTypeClass       PathTypeEnum = 2
)

func PathTypeGetType() gi.GType {
	ret := _I.GetGType(376, "PathType")
	return ret
}

// Flags PlacesOpenFlags
type PlacesOpenFlags int

const (
	PlacesOpenFlagsNormal    PlacesOpenFlags = 1
	PlacesOpenFlagsNewTab    PlacesOpenFlags = 2
	PlacesOpenFlagsNewWindow PlacesOpenFlags = 4
)

func PlacesOpenFlagsGetType() gi.GType {
	ret := _I.GetGType(377, "PlacesOpenFlags")
	return ret
}

// Object PlacesSidebar
type PlacesSidebar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ScrolledWindow
}

func WrapPlacesSidebar(p unsafe.Pointer) (r PlacesSidebar) { r.P = p; return }

type IPlacesSidebar interface{ P_PlacesSidebar() unsafe.Pointer }

func (v PlacesSidebar) P_PlacesSidebar() unsafe.Pointer    { return v.P }
func (v PlacesSidebar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v PlacesSidebar) P_Buildable() unsafe.Pointer        { return v.P }
func PlacesSidebarGetType() gi.GType {
	ret := _I.GetGType(378, "PlacesSidebar")
	return ret
}

// gtk_places_sidebar_new
//
// [ result ] trans: nothing
//
func NewPlacesSidebar() (result PlacesSidebar) {
	iv, err := _I.Get(1794, "PlacesSidebar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_places_sidebar_add_shortcut
//
// [ location ] trans: nothing
//
func (v PlacesSidebar) AddShortcut(location g.IFile) {
	iv, err := _I.Get(1795, "PlacesSidebar", "add_shortcut")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if location != nil {
		tmp = location.P_File()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_location := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_location}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_get_local_only
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetLocalOnly() (result bool) {
	iv, err := _I.Get(1796, "PlacesSidebar", "get_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_location
//
// [ result ] trans: everything
//
func (v PlacesSidebar) GetLocation() (result g.File) {
	iv, err := _I.Get(1797, "PlacesSidebar", "get_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_places_sidebar_get_nth_bookmark
//
// [ n ] trans: nothing
//
// [ result ] trans: everything
//
func (v PlacesSidebar) GetNthBookmark(n int32) (result g.File) {
	iv, err := _I.Get(1798, "PlacesSidebar", "get_nth_bookmark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n := gi.NewInt32Argument(n)
	args := []gi.Argument{arg_v, arg_n}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_places_sidebar_get_open_flags
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetOpenFlags() (result PlacesOpenFlags) {
	iv, err := _I.Get(1799, "PlacesSidebar", "get_open_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PlacesOpenFlags(ret.Int())
	return
}

// Deprecated
//
// gtk_places_sidebar_get_show_connect_to_server
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowConnectToServer() (result bool) {
	iv, err := _I.Get(1800, "PlacesSidebar", "get_show_connect_to_server")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_desktop
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowDesktop() (result bool) {
	iv, err := _I.Get(1801, "PlacesSidebar", "get_show_desktop")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_enter_location
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowEnterLocation() (result bool) {
	iv, err := _I.Get(1802, "PlacesSidebar", "get_show_enter_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_other_locations
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowOtherLocations() (result bool) {
	iv, err := _I.Get(1803, "PlacesSidebar", "get_show_other_locations")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_recent
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowRecent() (result bool) {
	iv, err := _I.Get(1804, "PlacesSidebar", "get_show_recent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_starred_location
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowStarredLocation() (result bool) {
	iv, err := _I.Get(1805, "PlacesSidebar", "get_show_starred_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_get_show_trash
//
// [ result ] trans: nothing
//
func (v PlacesSidebar) GetShowTrash() (result bool) {
	iv, err := _I.Get(1806, "PlacesSidebar", "get_show_trash")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_places_sidebar_list_shortcuts
//
// [ result ] trans: everything
//
func (v PlacesSidebar) ListShortcuts() (result g.SList) {
	iv, err := _I.Get(1807, "PlacesSidebar", "list_shortcuts")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_places_sidebar_remove_shortcut
//
// [ location ] trans: nothing
//
func (v PlacesSidebar) RemoveShortcut(location g.IFile) {
	iv, err := _I.Get(1808, "PlacesSidebar", "remove_shortcut")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if location != nil {
		tmp = location.P_File()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_location := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_location}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_drop_targets_visible
//
// [ visible ] trans: nothing
//
// [ context ] trans: nothing
//
func (v PlacesSidebar) SetDropTargetsVisible(visible bool, context gdk.IDragContext) {
	iv, err := _I.Get(1809, "PlacesSidebar", "set_drop_targets_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_visible, arg_context}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_local_only
//
// [ local_only ] trans: nothing
//
func (v PlacesSidebar) SetLocalOnly(local_only bool) {
	iv, err := _I.Get(1810, "PlacesSidebar", "set_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_local_only := gi.NewBoolArgument(local_only)
	args := []gi.Argument{arg_v, arg_local_only}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_location
//
// [ location ] trans: nothing
//
func (v PlacesSidebar) SetLocation(location g.IFile) {
	iv, err := _I.Get(1811, "PlacesSidebar", "set_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if location != nil {
		tmp = location.P_File()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_location := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_location}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_open_flags
//
// [ flags ] trans: nothing
//
func (v PlacesSidebar) SetOpenFlags(flags PlacesOpenFlags) {
	iv, err := _I.Get(1812, "PlacesSidebar", "set_open_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_places_sidebar_set_show_connect_to_server
//
// [ show_connect_to_server ] trans: nothing
//
func (v PlacesSidebar) SetShowConnectToServer(show_connect_to_server bool) {
	iv, err := _I.Get(1813, "PlacesSidebar", "set_show_connect_to_server")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_connect_to_server := gi.NewBoolArgument(show_connect_to_server)
	args := []gi.Argument{arg_v, arg_show_connect_to_server}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_desktop
//
// [ show_desktop ] trans: nothing
//
func (v PlacesSidebar) SetShowDesktop(show_desktop bool) {
	iv, err := _I.Get(1814, "PlacesSidebar", "set_show_desktop")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_desktop := gi.NewBoolArgument(show_desktop)
	args := []gi.Argument{arg_v, arg_show_desktop}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_enter_location
//
// [ show_enter_location ] trans: nothing
//
func (v PlacesSidebar) SetShowEnterLocation(show_enter_location bool) {
	iv, err := _I.Get(1815, "PlacesSidebar", "set_show_enter_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_enter_location := gi.NewBoolArgument(show_enter_location)
	args := []gi.Argument{arg_v, arg_show_enter_location}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_other_locations
//
// [ show_other_locations ] trans: nothing
//
func (v PlacesSidebar) SetShowOtherLocations(show_other_locations bool) {
	iv, err := _I.Get(1816, "PlacesSidebar", "set_show_other_locations")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_other_locations := gi.NewBoolArgument(show_other_locations)
	args := []gi.Argument{arg_v, arg_show_other_locations}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_recent
//
// [ show_recent ] trans: nothing
//
func (v PlacesSidebar) SetShowRecent(show_recent bool) {
	iv, err := _I.Get(1817, "PlacesSidebar", "set_show_recent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_recent := gi.NewBoolArgument(show_recent)
	args := []gi.Argument{arg_v, arg_show_recent}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_starred_location
//
// [ show_starred_location ] trans: nothing
//
func (v PlacesSidebar) SetShowStarredLocation(show_starred_location bool) {
	iv, err := _I.Get(1818, "PlacesSidebar", "set_show_starred_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_starred_location := gi.NewBoolArgument(show_starred_location)
	args := []gi.Argument{arg_v, arg_show_starred_location}
	iv.Call(args, nil, nil)
}

// gtk_places_sidebar_set_show_trash
//
// [ show_trash ] trans: nothing
//
func (v PlacesSidebar) SetShowTrash(show_trash bool) {
	iv, err := _I.Get(1819, "PlacesSidebar", "set_show_trash")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_trash := gi.NewBoolArgument(show_trash)
	args := []gi.Argument{arg_v, arg_show_trash}
	iv.Call(args, nil, nil)
}

// ignore GType struct PlacesSidebarClass

// Object Plug
type Plug struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Window
}

func WrapPlug(p unsafe.Pointer) (r Plug) { r.P = p; return }

type IPlug interface{ P_Plug() unsafe.Pointer }

func (v Plug) P_Plug() unsafe.Pointer             { return v.P }
func (v Plug) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Plug) P_Buildable() unsafe.Pointer        { return v.P }
func PlugGetType() gi.GType {
	ret := _I.GetGType(379, "Plug")
	return ret
}

// gtk_plug_new
//
// [ socket_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewPlug(socket_id uint64) (result Plug) {
	iv, err := _I.Get(1820, "Plug", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_socket_id := gi.NewUint64Argument(socket_id)
	args := []gi.Argument{arg_socket_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_plug_new_for_display
//
// [ display ] trans: nothing
//
// [ socket_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewPlugForDisplay(display gdk.IDisplay, socket_id uint64) (result Plug) {
	iv, err := _I.Get(1821, "Plug", "new_for_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	arg_socket_id := gi.NewUint64Argument(socket_id)
	args := []gi.Argument{arg_display, arg_socket_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_plug_construct
//
// [ socket_id ] trans: nothing
//
func (v Plug) Construct(socket_id uint64) {
	iv, err := _I.Get(1822, "Plug", "construct")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_socket_id := gi.NewUint64Argument(socket_id)
	args := []gi.Argument{arg_v, arg_socket_id}
	iv.Call(args, nil, nil)
}

// gtk_plug_construct_for_display
//
// [ display ] trans: nothing
//
// [ socket_id ] trans: nothing
//
func (v Plug) ConstructForDisplay(display gdk.IDisplay, socket_id uint64) {
	iv, err := _I.Get(1823, "Plug", "construct_for_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_display := gi.NewPointerArgument(tmp)
	arg_socket_id := gi.NewUint64Argument(socket_id)
	args := []gi.Argument{arg_v, arg_display, arg_socket_id}
	iv.Call(args, nil, nil)
}

// gtk_plug_get_embedded
//
// [ result ] trans: nothing
//
func (v Plug) GetEmbedded() (result bool) {
	iv, err := _I.Get(1824, "Plug", "get_embedded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_plug_get_id
//
// [ result ] trans: nothing
//
func (v Plug) GetId() (result uint64) {
	iv, err := _I.Get(1825, "Plug", "get_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// gtk_plug_get_socket_window
//
// [ result ] trans: nothing
//
func (v Plug) GetSocketWindow() (result gdk.Window) {
	iv, err := _I.Get(1826, "Plug", "get_socket_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct PlugClass

// Struct PlugPrivate
type PlugPrivate struct {
	P unsafe.Pointer
}

func PlugPrivateGetType() gi.GType {
	ret := _I.GetGType(380, "PlugPrivate")
	return ret
}

// Enum PolicyType
type PolicyTypeEnum int

const (
	PolicyTypeAlways    PolicyTypeEnum = 0
	PolicyTypeAutomatic PolicyTypeEnum = 1
	PolicyTypeNever     PolicyTypeEnum = 2
	PolicyTypeExternal  PolicyTypeEnum = 3
)

func PolicyTypeGetType() gi.GType {
	ret := _I.GetGType(381, "PolicyType")
	return ret
}

// Object Popover
type Popover struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapPopover(p unsafe.Pointer) (r Popover) { r.P = p; return }

type IPopover interface{ P_Popover() unsafe.Pointer }

func (v Popover) P_Popover() unsafe.Pointer          { return v.P }
func (v Popover) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Popover) P_Buildable() unsafe.Pointer        { return v.P }
func PopoverGetType() gi.GType {
	ret := _I.GetGType(382, "Popover")
	return ret
}

// gtk_popover_new
//
// [ relative_to ] trans: nothing
//
// [ result ] trans: nothing
//
func NewPopover(relative_to IWidget) (result Popover) {
	iv, err := _I.Get(1827, "Popover", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if relative_to != nil {
		tmp = relative_to.P_Widget()
	}
	arg_relative_to := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_relative_to}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_popover_new_from_model
//
// [ relative_to ] trans: nothing
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewPopoverFromModel(relative_to IWidget, model g.IMenuModel) (result Popover) {
	iv, err := _I.Get(1828, "Popover", "new_from_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if relative_to != nil {
		tmp = relative_to.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if model != nil {
		tmp1 = model.P_MenuModel()
	}
	arg_relative_to := gi.NewPointerArgument(tmp)
	arg_model := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_relative_to, arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_popover_bind_model
//
// [ model ] trans: nothing
//
// [ action_namespace ] trans: nothing
//
func (v Popover) BindModel(model g.IMenuModel, action_namespace string) {
	iv, err := _I.Get(1829, "Popover", "bind_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	c_action_namespace := gi.CString(action_namespace)
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	arg_action_namespace := gi.NewStringArgument(c_action_namespace)
	args := []gi.Argument{arg_v, arg_model, arg_action_namespace}
	iv.Call(args, nil, nil)
	gi.Free(c_action_namespace)
}

// gtk_popover_get_constrain_to
//
// [ result ] trans: nothing
//
func (v Popover) GetConstrainTo() (result PopoverConstraintEnum) {
	iv, err := _I.Get(1830, "Popover", "get_constrain_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PopoverConstraintEnum(ret.Int())
	return
}

// gtk_popover_get_default_widget
//
// [ result ] trans: nothing
//
func (v Popover) GetDefaultWidget() (result Widget) {
	iv, err := _I.Get(1831, "Popover", "get_default_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_popover_get_modal
//
// [ result ] trans: nothing
//
func (v Popover) GetModal() (result bool) {
	iv, err := _I.Get(1832, "Popover", "get_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_popover_get_pointing_to
//
// [ rect ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Popover) GetPointingTo(rect gdk.Rectangle) (result bool) {
	iv, err := _I.Get(1833, "Popover", "get_pointing_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_popover_get_position
//
// [ result ] trans: nothing
//
func (v Popover) GetPosition() (result PositionTypeEnum) {
	iv, err := _I.Get(1834, "Popover", "get_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// gtk_popover_get_relative_to
//
// [ result ] trans: nothing
//
func (v Popover) GetRelativeTo() (result Widget) {
	iv, err := _I.Get(1835, "Popover", "get_relative_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_popover_get_transitions_enabled
//
// [ result ] trans: nothing
//
func (v Popover) GetTransitionsEnabled() (result bool) {
	iv, err := _I.Get(1836, "Popover", "get_transitions_enabled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_popover_popdown
//
func (v Popover) Popdown() {
	iv, err := _I.Get(1837, "Popover", "popdown")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_popover_popup
//
func (v Popover) Popup() {
	iv, err := _I.Get(1838, "Popover", "popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_constrain_to
//
// [ constraint ] trans: nothing
//
func (v Popover) SetConstrainTo(constraint PopoverConstraintEnum) {
	iv, err := _I.Get(1839, "Popover", "set_constrain_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_constraint := gi.NewIntArgument(int(constraint))
	args := []gi.Argument{arg_v, arg_constraint}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_default_widget
//
// [ widget ] trans: nothing
//
func (v Popover) SetDefaultWidget(widget IWidget) {
	iv, err := _I.Get(1840, "Popover", "set_default_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_modal
//
// [ modal ] trans: nothing
//
func (v Popover) SetModal(modal bool) {
	iv, err := _I.Get(1841, "Popover", "set_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_modal := gi.NewBoolArgument(modal)
	args := []gi.Argument{arg_v, arg_modal}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_pointing_to
//
// [ rect ] trans: nothing
//
func (v Popover) SetPointingTo(rect gdk.Rectangle) {
	iv, err := _I.Get(1842, "Popover", "set_pointing_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_position
//
// [ position ] trans: nothing
//
func (v Popover) SetPosition(position PositionTypeEnum) {
	iv, err := _I.Get(1843, "Popover", "set_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewIntArgument(int(position))
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_popover_set_relative_to
//
// [ relative_to ] trans: nothing
//
func (v Popover) SetRelativeTo(relative_to IWidget) {
	iv, err := _I.Get(1844, "Popover", "set_relative_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if relative_to != nil {
		tmp = relative_to.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_relative_to := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_relative_to}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_popover_set_transitions_enabled
//
// [ transitions_enabled ] trans: nothing
//
func (v Popover) SetTransitionsEnabled(transitions_enabled bool) {
	iv, err := _I.Get(1845, "Popover", "set_transitions_enabled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_transitions_enabled := gi.NewBoolArgument(transitions_enabled)
	args := []gi.Argument{arg_v, arg_transitions_enabled}
	iv.Call(args, nil, nil)
}

// Object PopoverAccessible
type PopoverAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapPopoverAccessible(p unsafe.Pointer) (r PopoverAccessible) { r.P = p; return }

type IPopoverAccessible interface{ P_PopoverAccessible() unsafe.Pointer }

func (v PopoverAccessible) P_PopoverAccessible() unsafe.Pointer { return v.P }
func (v PopoverAccessible) P_Component() unsafe.Pointer         { return v.P }
func PopoverAccessibleGetType() gi.GType {
	ret := _I.GetGType(383, "PopoverAccessible")
	return ret
}

// ignore GType struct PopoverAccessibleClass

// ignore GType struct PopoverClass

// Enum PopoverConstraint
type PopoverConstraintEnum int

const (
	PopoverConstraintNone   PopoverConstraintEnum = 0
	PopoverConstraintWindow PopoverConstraintEnum = 1
)

func PopoverConstraintGetType() gi.GType {
	ret := _I.GetGType(384, "PopoverConstraint")
	return ret
}

// Object PopoverMenu
type PopoverMenu struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Popover
}

func WrapPopoverMenu(p unsafe.Pointer) (r PopoverMenu) { r.P = p; return }

type IPopoverMenu interface{ P_PopoverMenu() unsafe.Pointer }

func (v PopoverMenu) P_PopoverMenu() unsafe.Pointer      { return v.P }
func (v PopoverMenu) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v PopoverMenu) P_Buildable() unsafe.Pointer        { return v.P }
func PopoverMenuGetType() gi.GType {
	ret := _I.GetGType(385, "PopoverMenu")
	return ret
}

// gtk_popover_menu_new
//
// [ result ] trans: nothing
//
func NewPopoverMenu() (result PopoverMenu) {
	iv, err := _I.Get(1846, "PopoverMenu", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_popover_menu_open_submenu
//
// [ name ] trans: nothing
//
func (v PopoverMenu) OpenSubmenu(name string) {
	iv, err := _I.Get(1847, "PopoverMenu", "open_submenu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// ignore GType struct PopoverMenuClass

// Struct PopoverPrivate
type PopoverPrivate struct {
	P unsafe.Pointer
}

func PopoverPrivateGetType() gi.GType {
	ret := _I.GetGType(386, "PopoverPrivate")
	return ret
}

// Enum PositionType
type PositionTypeEnum int

const (
	PositionTypeLeft   PositionTypeEnum = 0
	PositionTypeRight  PositionTypeEnum = 1
	PositionTypeTop    PositionTypeEnum = 2
	PositionTypeBottom PositionTypeEnum = 3
)

func PositionTypeGetType() gi.GType {
	ret := _I.GetGType(387, "PositionType")
	return ret
}

// Object PrintContext
type PrintContext struct {
	g.Object
}

func WrapPrintContext(p unsafe.Pointer) (r PrintContext) { r.P = p; return }

type IPrintContext interface{ P_PrintContext() unsafe.Pointer }

func (v PrintContext) P_PrintContext() unsafe.Pointer { return v.P }
func PrintContextGetType() gi.GType {
	ret := _I.GetGType(388, "PrintContext")
	return ret
}

// gtk_print_context_create_pango_context
//
// [ result ] trans: everything
//
func (v PrintContext) CreatePangoContext() (result pango.Context) {
	iv, err := _I.Get(1848, "PrintContext", "create_pango_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_context_create_pango_layout
//
// [ result ] trans: everything
//
func (v PrintContext) CreatePangoLayout() (result pango.Layout) {
	iv, err := _I.Get(1849, "PrintContext", "create_pango_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_context_get_cairo_context
//
// [ result ] trans: nothing
//
func (v PrintContext) GetCairoContext() (result cairo.Context) {
	iv, err := _I.Get(1850, "PrintContext", "get_cairo_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_context_get_dpi_x
//
// [ result ] trans: nothing
//
func (v PrintContext) GetDpiX() (result float64) {
	iv, err := _I.Get(1851, "PrintContext", "get_dpi_x")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_context_get_dpi_y
//
// [ result ] trans: nothing
//
func (v PrintContext) GetDpiY() (result float64) {
	iv, err := _I.Get(1852, "PrintContext", "get_dpi_y")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_context_get_hard_margins
//
// [ top ] trans: everything, dir: out
//
// [ bottom ] trans: everything, dir: out
//
// [ left ] trans: everything, dir: out
//
// [ right ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v PrintContext) GetHardMargins() (result bool, top float64, bottom float64, left float64, right float64) {
	iv, err := _I.Get(1853, "PrintContext", "get_hard_margins")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_top := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_bottom := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_left := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_right := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_top, arg_bottom, arg_left, arg_right}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	top = outArgs[0].Double()
	bottom = outArgs[1].Double()
	left = outArgs[2].Double()
	right = outArgs[3].Double()
	result = ret.Bool()
	return
}

// gtk_print_context_get_height
//
// [ result ] trans: nothing
//
func (v PrintContext) GetHeight() (result float64) {
	iv, err := _I.Get(1854, "PrintContext", "get_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_context_get_page_setup
//
// [ result ] trans: nothing
//
func (v PrintContext) GetPageSetup() (result PageSetup) {
	iv, err := _I.Get(1855, "PrintContext", "get_page_setup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_context_get_pango_fontmap
//
// [ result ] trans: nothing
//
func (v PrintContext) GetPangoFontmap() (result pango.FontMap) {
	iv, err := _I.Get(1856, "PrintContext", "get_pango_fontmap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_context_get_width
//
// [ result ] trans: nothing
//
func (v PrintContext) GetWidth() (result float64) {
	iv, err := _I.Get(1857, "PrintContext", "get_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_context_set_cairo_context
//
// [ cr ] trans: nothing
//
// [ dpi_x ] trans: nothing
//
// [ dpi_y ] trans: nothing
//
func (v PrintContext) SetCairoContext(cr cairo.Context, dpi_x float64, dpi_y float64) {
	iv, err := _I.Get(1858, "PrintContext", "set_cairo_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_dpi_x := gi.NewDoubleArgument(dpi_x)
	arg_dpi_y := gi.NewDoubleArgument(dpi_y)
	args := []gi.Argument{arg_v, arg_cr, arg_dpi_x, arg_dpi_y}
	iv.Call(args, nil, nil)
}

// Enum PrintDuplex
type PrintDuplexEnum int

const (
	PrintDuplexSimplex    PrintDuplexEnum = 0
	PrintDuplexHorizontal PrintDuplexEnum = 1
	PrintDuplexVertical   PrintDuplexEnum = 2
)

func PrintDuplexGetType() gi.GType {
	ret := _I.GetGType(389, "PrintDuplex")
	return ret
}

// Enum PrintError
type PrintErrorEnum int

const (
	PrintErrorGeneral       PrintErrorEnum = 0
	PrintErrorInternalError PrintErrorEnum = 1
	PrintErrorNomem         PrintErrorEnum = 2
	PrintErrorInvalidFile   PrintErrorEnum = 3
)

func PrintErrorGetType() gi.GType {
	ret := _I.GetGType(390, "PrintError")
	return ret
}

// Object PrintOperation
type PrintOperation struct {
	PrintOperationPreviewIfc
	g.Object
}

func WrapPrintOperation(p unsafe.Pointer) (r PrintOperation) { r.P = p; return }

type IPrintOperation interface{ P_PrintOperation() unsafe.Pointer }

func (v PrintOperation) P_PrintOperation() unsafe.Pointer        { return v.P }
func (v PrintOperation) P_PrintOperationPreview() unsafe.Pointer { return v.P }
func PrintOperationGetType() gi.GType {
	ret := _I.GetGType(391, "PrintOperation")
	return ret
}

// gtk_print_operation_new
//
// [ result ] trans: everything
//
func NewPrintOperation() (result PrintOperation) {
	iv, err := _I.Get(1859, "PrintOperation", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_operation_cancel
//
func (v PrintOperation) Cancel() {
	iv, err := _I.Get(1860, "PrintOperation", "cancel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_draw_page_finish
//
func (v PrintOperation) DrawPageFinish() {
	iv, err := _I.Get(1861, "PrintOperation", "draw_page_finish")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_get_default_page_setup
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetDefaultPageSetup() (result PageSetup) {
	iv, err := _I.Get(1862, "PrintOperation", "get_default_page_setup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_operation_get_embed_page_setup
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetEmbedPageSetup() (result bool) {
	iv, err := _I.Get(1863, "PrintOperation", "get_embed_page_setup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_operation_get_error
//
func (v PrintOperation) GetError() (err error) {
	iv, err := _I.Get(1864, "PrintOperation", "get_error")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	iv.Call(args, nil, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	return
}

// gtk_print_operation_get_has_selection
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetHasSelection() (result bool) {
	iv, err := _I.Get(1865, "PrintOperation", "get_has_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_operation_get_n_pages_to_print
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetNPagesToPrint() (result int32) {
	iv, err := _I.Get(1866, "PrintOperation", "get_n_pages_to_print")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_operation_get_print_settings
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetPrintSettings() (result PrintSettings) {
	iv, err := _I.Get(1867, "PrintOperation", "get_print_settings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_operation_get_status
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetStatus() (result PrintStatusEnum) {
	iv, err := _I.Get(1868, "PrintOperation", "get_status")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PrintStatusEnum(ret.Int())
	return
}

// gtk_print_operation_get_status_string
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetStatusString() (result string) {
	iv, err := _I.Get(1869, "PrintOperation", "get_status_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_operation_get_support_selection
//
// [ result ] trans: nothing
//
func (v PrintOperation) GetSupportSelection() (result bool) {
	iv, err := _I.Get(1870, "PrintOperation", "get_support_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_operation_is_finished
//
// [ result ] trans: nothing
//
func (v PrintOperation) IsFinished() (result bool) {
	iv, err := _I.Get(1871, "PrintOperation", "is_finished")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_operation_run
//
// [ action ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintOperation) Run(action PrintOperationActionEnum, parent IWindow) (result PrintOperationResultEnum, err error) {
	iv, err := _I.Get(1872, "PrintOperation", "run")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewIntArgument(int(action))
	arg_parent := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_action, arg_parent, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = PrintOperationResultEnum(ret.Int())
	return
}

// gtk_print_operation_set_allow_async
//
// [ allow_async ] trans: nothing
//
func (v PrintOperation) SetAllowAsync(allow_async bool) {
	iv, err := _I.Get(1873, "PrintOperation", "set_allow_async")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allow_async := gi.NewBoolArgument(allow_async)
	args := []gi.Argument{arg_v, arg_allow_async}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_current_page
//
// [ current_page ] trans: nothing
//
func (v PrintOperation) SetCurrentPage(current_page int32) {
	iv, err := _I.Get(1874, "PrintOperation", "set_current_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_current_page := gi.NewInt32Argument(current_page)
	args := []gi.Argument{arg_v, arg_current_page}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_custom_tab_label
//
// [ label ] trans: nothing
//
func (v PrintOperation) SetCustomTabLabel(label string) {
	iv, err := _I.Get(1875, "PrintOperation", "set_custom_tab_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_print_operation_set_default_page_setup
//
// [ default_page_setup ] trans: nothing
//
func (v PrintOperation) SetDefaultPageSetup(default_page_setup IPageSetup) {
	iv, err := _I.Get(1876, "PrintOperation", "set_default_page_setup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if default_page_setup != nil {
		tmp = default_page_setup.P_PageSetup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_page_setup := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_default_page_setup}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_defer_drawing
//
func (v PrintOperation) SetDeferDrawing() {
	iv, err := _I.Get(1877, "PrintOperation", "set_defer_drawing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_embed_page_setup
//
// [ embed ] trans: nothing
//
func (v PrintOperation) SetEmbedPageSetup(embed bool) {
	iv, err := _I.Get(1878, "PrintOperation", "set_embed_page_setup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_embed := gi.NewBoolArgument(embed)
	args := []gi.Argument{arg_v, arg_embed}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_export_filename
//
// [ filename ] trans: nothing
//
func (v PrintOperation) SetExportFilename(filename string) {
	iv, err := _I.Get(1879, "PrintOperation", "set_export_filename")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// gtk_print_operation_set_has_selection
//
// [ has_selection ] trans: nothing
//
func (v PrintOperation) SetHasSelection(has_selection bool) {
	iv, err := _I.Get(1880, "PrintOperation", "set_has_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_selection := gi.NewBoolArgument(has_selection)
	args := []gi.Argument{arg_v, arg_has_selection}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_job_name
//
// [ job_name ] trans: nothing
//
func (v PrintOperation) SetJobName(job_name string) {
	iv, err := _I.Get(1881, "PrintOperation", "set_job_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_job_name := gi.CString(job_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_job_name := gi.NewStringArgument(c_job_name)
	args := []gi.Argument{arg_v, arg_job_name}
	iv.Call(args, nil, nil)
	gi.Free(c_job_name)
}

// gtk_print_operation_set_n_pages
//
// [ n_pages ] trans: nothing
//
func (v PrintOperation) SetNPages(n_pages int32) {
	iv, err := _I.Get(1882, "PrintOperation", "set_n_pages")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_pages := gi.NewInt32Argument(n_pages)
	args := []gi.Argument{arg_v, arg_n_pages}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_print_settings
//
// [ print_settings ] trans: nothing
//
func (v PrintOperation) SetPrintSettings(print_settings IPrintSettings) {
	iv, err := _I.Get(1883, "PrintOperation", "set_print_settings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if print_settings != nil {
		tmp = print_settings.P_PrintSettings()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_print_settings := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_print_settings}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_show_progress
//
// [ show_progress ] trans: nothing
//
func (v PrintOperation) SetShowProgress(show_progress bool) {
	iv, err := _I.Get(1884, "PrintOperation", "set_show_progress")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_progress := gi.NewBoolArgument(show_progress)
	args := []gi.Argument{arg_v, arg_show_progress}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_support_selection
//
// [ support_selection ] trans: nothing
//
func (v PrintOperation) SetSupportSelection(support_selection bool) {
	iv, err := _I.Get(1885, "PrintOperation", "set_support_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_support_selection := gi.NewBoolArgument(support_selection)
	args := []gi.Argument{arg_v, arg_support_selection}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_track_print_status
//
// [ track_status ] trans: nothing
//
func (v PrintOperation) SetTrackPrintStatus(track_status bool) {
	iv, err := _I.Get(1886, "PrintOperation", "set_track_print_status")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_track_status := gi.NewBoolArgument(track_status)
	args := []gi.Argument{arg_v, arg_track_status}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_unit
//
// [ unit ] trans: nothing
//
func (v PrintOperation) SetUnit(unit UnitEnum) {
	iv, err := _I.Get(1887, "PrintOperation", "set_unit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_set_use_full_page
//
// [ full_page ] trans: nothing
//
func (v PrintOperation) SetUseFullPage(full_page bool) {
	iv, err := _I.Get(1888, "PrintOperation", "set_use_full_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_full_page := gi.NewBoolArgument(full_page)
	args := []gi.Argument{arg_v, arg_full_page}
	iv.Call(args, nil, nil)
}

// Enum PrintOperationAction
type PrintOperationActionEnum int

const (
	PrintOperationActionPrintDialog PrintOperationActionEnum = 0
	PrintOperationActionPrint       PrintOperationActionEnum = 1
	PrintOperationActionPreview     PrintOperationActionEnum = 2
	PrintOperationActionExport      PrintOperationActionEnum = 3
)

func PrintOperationActionGetType() gi.GType {
	ret := _I.GetGType(392, "PrintOperationAction")
	return ret
}

// ignore GType struct PrintOperationClass

// Interface PrintOperationPreview
type PrintOperationPreview struct {
	PrintOperationPreviewIfc
	P unsafe.Pointer
}
type PrintOperationPreviewIfc struct{}
type IPrintOperationPreview interface{ P_PrintOperationPreview() unsafe.Pointer }

func (v PrintOperationPreview) P_PrintOperationPreview() unsafe.Pointer { return v.P }
func PrintOperationPreviewGetType() gi.GType {
	ret := _I.GetGType(393, "PrintOperationPreview")
	return ret
}

// gtk_print_operation_preview_end_preview
//
func (v *PrintOperationPreviewIfc) EndPreview() {
	iv, err := _I.Get(1889, "PrintOperationPreview", "end_preview")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_print_operation_preview_is_selected
//
// [ page_nr ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *PrintOperationPreviewIfc) IsSelected(page_nr int32) (result bool) {
	iv, err := _I.Get(1890, "PrintOperationPreview", "is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_page_nr := gi.NewInt32Argument(page_nr)
	args := []gi.Argument{arg_v, arg_page_nr}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_operation_preview_render_page
//
// [ page_nr ] trans: nothing
//
func (v *PrintOperationPreviewIfc) RenderPage(page_nr int32) {
	iv, err := _I.Get(1891, "PrintOperationPreview", "render_page")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_page_nr := gi.NewInt32Argument(page_nr)
	args := []gi.Argument{arg_v, arg_page_nr}
	iv.Call(args, nil, nil)
}

// ignore GType struct PrintOperationPreviewIface

// Struct PrintOperationPrivate
type PrintOperationPrivate struct {
	P unsafe.Pointer
}

func PrintOperationPrivateGetType() gi.GType {
	ret := _I.GetGType(394, "PrintOperationPrivate")
	return ret
}

// Enum PrintOperationResult
type PrintOperationResultEnum int

const (
	PrintOperationResultError      PrintOperationResultEnum = 0
	PrintOperationResultApply      PrintOperationResultEnum = 1
	PrintOperationResultCancel     PrintOperationResultEnum = 2
	PrintOperationResultInProgress PrintOperationResultEnum = 3
)

func PrintOperationResultGetType() gi.GType {
	ret := _I.GetGType(395, "PrintOperationResult")
	return ret
}

// Enum PrintPages
type PrintPagesEnum int

const (
	PrintPagesAll       PrintPagesEnum = 0
	PrintPagesCurrent   PrintPagesEnum = 1
	PrintPagesRanges    PrintPagesEnum = 2
	PrintPagesSelection PrintPagesEnum = 3
)

func PrintPagesGetType() gi.GType {
	ret := _I.GetGType(396, "PrintPages")
	return ret
}

// Enum PrintQuality
type PrintQualityEnum int

const (
	PrintQualityLow    PrintQualityEnum = 0
	PrintQualityNormal PrintQualityEnum = 1
	PrintQualityHigh   PrintQualityEnum = 2
	PrintQualityDraft  PrintQualityEnum = 3
)

func PrintQualityGetType() gi.GType {
	ret := _I.GetGType(397, "PrintQuality")
	return ret
}

// Object PrintSettings
type PrintSettings struct {
	g.Object
}

func WrapPrintSettings(p unsafe.Pointer) (r PrintSettings) { r.P = p; return }

type IPrintSettings interface{ P_PrintSettings() unsafe.Pointer }

func (v PrintSettings) P_PrintSettings() unsafe.Pointer { return v.P }
func PrintSettingsGetType() gi.GType {
	ret := _I.GetGType(398, "PrintSettings")
	return ret
}

// gtk_print_settings_new
//
// [ result ] trans: everything
//
func NewPrintSettings() (result PrintSettings) {
	iv, err := _I.Get(1892, "PrintSettings", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_new_from_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPrintSettingsFromFile(file_name string) (result PrintSettings, err error) {
	iv, err := _I.Get(1893, "PrintSettings", "new_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_new_from_gvariant
//
// [ variant ] trans: nothing
//
// [ result ] trans: everything
//
func NewPrintSettingsFromGvariant(variant g.Variant) (result PrintSettings) {
	iv, err := _I.Get(1894, "PrintSettings", "new_from_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_variant := gi.NewPointerArgument(variant.P)
	args := []gi.Argument{arg_variant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_new_from_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPrintSettingsFromKeyFile(key_file g.KeyFile, group_name string) (result PrintSettings, err error) {
	iv, err := _I.Get(1895, "PrintSettings", "new_from_key_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_group_name := gi.CString(group_name)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_key_file, arg_group_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_group_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_copy
//
// [ result ] trans: everything
//
func (v PrintSettings) Copy() (result PrintSettings) {
	iv, err := _I.Get(1896, "PrintSettings", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_foreach
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v PrintSettings) Foreach(func1 int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(1897, "PrintSettings", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myPrintSettingsFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_get
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) Get(key string) (result string) {
	iv, err := _I.Get(1898, "PrintSettings", "get")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_bool
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetBool(key string) (result bool) {
	iv, err := _I.Get(1899, "PrintSettings", "get_bool")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// gtk_print_settings_get_collate
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetCollate() (result bool) {
	iv, err := _I.Get(1900, "PrintSettings", "get_collate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_settings_get_default_source
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetDefaultSource() (result string) {
	iv, err := _I.Get(1901, "PrintSettings", "get_default_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_dither
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetDither() (result string) {
	iv, err := _I.Get(1902, "PrintSettings", "get_dither")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_double
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetDouble(key string) (result float64) {
	iv, err := _I.Get(1903, "PrintSettings", "get_double")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Double()
	return
}

// gtk_print_settings_get_double_with_default
//
// [ key ] trans: nothing
//
// [ def ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetDoubleWithDefault(key string, def float64) (result float64) {
	iv, err := _I.Get(1904, "PrintSettings", "get_double_with_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_def := gi.NewDoubleArgument(def)
	args := []gi.Argument{arg_v, arg_key, arg_def}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Double()
	return
}

// gtk_print_settings_get_duplex
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetDuplex() (result PrintDuplexEnum) {
	iv, err := _I.Get(1905, "PrintSettings", "get_duplex")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PrintDuplexEnum(ret.Int())
	return
}

// gtk_print_settings_get_finishings
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetFinishings() (result string) {
	iv, err := _I.Get(1906, "PrintSettings", "get_finishings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_int
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetInt(key string) (result int32) {
	iv, err := _I.Get(1907, "PrintSettings", "get_int")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_int_with_default
//
// [ key ] trans: nothing
//
// [ def ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetIntWithDefault(key string, def int32) (result int32) {
	iv, err := _I.Get(1908, "PrintSettings", "get_int_with_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_def := gi.NewInt32Argument(def)
	args := []gi.Argument{arg_v, arg_key, arg_def}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_length
//
// [ key ] trans: nothing
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetLength(key string, unit UnitEnum) (result float64) {
	iv, err := _I.Get(1909, "PrintSettings", "get_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_key, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Double()
	return
}

// gtk_print_settings_get_media_type
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetMediaType() (result string) {
	iv, err := _I.Get(1910, "PrintSettings", "get_media_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_n_copies
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetNCopies() (result int32) {
	iv, err := _I.Get(1911, "PrintSettings", "get_n_copies")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_number_up
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetNumberUp() (result int32) {
	iv, err := _I.Get(1912, "PrintSettings", "get_number_up")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_number_up_layout
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetNumberUpLayout() (result NumberUpLayoutEnum) {
	iv, err := _I.Get(1913, "PrintSettings", "get_number_up_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NumberUpLayoutEnum(ret.Int())
	return
}

// gtk_print_settings_get_orientation
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetOrientation() (result PageOrientationEnum) {
	iv, err := _I.Get(1914, "PrintSettings", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PageOrientationEnum(ret.Int())
	return
}

// gtk_print_settings_get_output_bin
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetOutputBin() (result string) {
	iv, err := _I.Get(1915, "PrintSettings", "get_output_bin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_page_ranges
//
// [ num_ranges ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v PrintSettings) GetPageRanges() (result unsafe.Pointer) {
	iv, err := _I.Get(1916, "PrintSettings", "get_page_ranges")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_num_ranges := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_num_ranges}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var num_ranges int32
	_ = num_ranges
	num_ranges = outArgs[0].Int32()
	result = ret.Pointer()
	return
}

// gtk_print_settings_get_page_set
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPageSet() (result PageSetEnum) {
	iv, err := _I.Get(1917, "PrintSettings", "get_page_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PageSetEnum(ret.Int())
	return
}

// gtk_print_settings_get_paper_height
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPaperHeight(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1918, "PrintSettings", "get_paper_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_settings_get_paper_size
//
// [ result ] trans: everything
//
func (v PrintSettings) GetPaperSize() (result PaperSize) {
	iv, err := _I.Get(1919, "PrintSettings", "get_paper_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_get_paper_width
//
// [ unit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPaperWidth(unit UnitEnum) (result float64) {
	iv, err := _I.Get(1920, "PrintSettings", "get_paper_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_unit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_settings_get_print_pages
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPrintPages() (result PrintPagesEnum) {
	iv, err := _I.Get(1921, "PrintSettings", "get_print_pages")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PrintPagesEnum(ret.Int())
	return
}

// gtk_print_settings_get_printer
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPrinter() (result string) {
	iv, err := _I.Get(1922, "PrintSettings", "get_printer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_print_settings_get_printer_lpi
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetPrinterLpi() (result float64) {
	iv, err := _I.Get(1923, "PrintSettings", "get_printer_lpi")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_settings_get_quality
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetQuality() (result PrintQualityEnum) {
	iv, err := _I.Get(1924, "PrintSettings", "get_quality")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PrintQualityEnum(ret.Int())
	return
}

// gtk_print_settings_get_resolution
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetResolution() (result int32) {
	iv, err := _I.Get(1925, "PrintSettings", "get_resolution")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_resolution_x
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetResolutionX() (result int32) {
	iv, err := _I.Get(1926, "PrintSettings", "get_resolution_x")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_resolution_y
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetResolutionY() (result int32) {
	iv, err := _I.Get(1927, "PrintSettings", "get_resolution_y")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_print_settings_get_reverse
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetReverse() (result bool) {
	iv, err := _I.Get(1928, "PrintSettings", "get_reverse")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_settings_get_scale
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetScale() (result float64) {
	iv, err := _I.Get(1929, "PrintSettings", "get_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_print_settings_get_use_color
//
// [ result ] trans: nothing
//
func (v PrintSettings) GetUseColor() (result bool) {
	iv, err := _I.Get(1930, "PrintSettings", "get_use_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_print_settings_has_key
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) HasKey(key string) (result bool) {
	iv, err := _I.Get(1931, "PrintSettings", "has_key")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// gtk_print_settings_load_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) LoadFile(file_name string) (result bool, err error) {
	iv, err := _I.Get(1932, "PrintSettings", "load_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_print_settings_load_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) LoadKeyFile(key_file g.KeyFile, group_name string) (result bool, err error) {
	iv, err := _I.Get(1933, "PrintSettings", "load_key_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_key_file, arg_group_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_group_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_print_settings_set
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
func (v PrintSettings) Set(key string, value string) {
	iv, err := _I.Get(1934, "PrintSettings", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
	gi.Free(c_value)
}

// gtk_print_settings_set_bool
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
func (v PrintSettings) SetBool(key string, value bool) {
	iv, err := _I.Get(1935, "PrintSettings", "set_bool")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewBoolArgument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// gtk_print_settings_set_collate
//
// [ collate ] trans: nothing
//
func (v PrintSettings) SetCollate(collate bool) {
	iv, err := _I.Get(1936, "PrintSettings", "set_collate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_collate := gi.NewBoolArgument(collate)
	args := []gi.Argument{arg_v, arg_collate}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_default_source
//
// [ default_source ] trans: nothing
//
func (v PrintSettings) SetDefaultSource(default_source string) {
	iv, err := _I.Get(1937, "PrintSettings", "set_default_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_default_source := gi.CString(default_source)
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_source := gi.NewStringArgument(c_default_source)
	args := []gi.Argument{arg_v, arg_default_source}
	iv.Call(args, nil, nil)
	gi.Free(c_default_source)
}

// gtk_print_settings_set_dither
//
// [ dither ] trans: nothing
//
func (v PrintSettings) SetDither(dither string) {
	iv, err := _I.Get(1938, "PrintSettings", "set_dither")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dither := gi.CString(dither)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dither := gi.NewStringArgument(c_dither)
	args := []gi.Argument{arg_v, arg_dither}
	iv.Call(args, nil, nil)
	gi.Free(c_dither)
}

// gtk_print_settings_set_double
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
func (v PrintSettings) SetDouble(key string, value float64) {
	iv, err := _I.Get(1939, "PrintSettings", "set_double")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// gtk_print_settings_set_duplex
//
// [ duplex ] trans: nothing
//
func (v PrintSettings) SetDuplex(duplex PrintDuplexEnum) {
	iv, err := _I.Get(1940, "PrintSettings", "set_duplex")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_duplex := gi.NewIntArgument(int(duplex))
	args := []gi.Argument{arg_v, arg_duplex}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_finishings
//
// [ finishings ] trans: nothing
//
func (v PrintSettings) SetFinishings(finishings string) {
	iv, err := _I.Get(1941, "PrintSettings", "set_finishings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_finishings := gi.CString(finishings)
	arg_v := gi.NewPointerArgument(v.P)
	arg_finishings := gi.NewStringArgument(c_finishings)
	args := []gi.Argument{arg_v, arg_finishings}
	iv.Call(args, nil, nil)
	gi.Free(c_finishings)
}

// gtk_print_settings_set_int
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
func (v PrintSettings) SetInt(key string, value int32) {
	iv, err := _I.Get(1942, "PrintSettings", "set_int")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewInt32Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// gtk_print_settings_set_length
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PrintSettings) SetLength(key string, value float64, unit UnitEnum) {
	iv, err := _I.Get(1943, "PrintSettings", "set_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewDoubleArgument(value)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_key, arg_value, arg_unit}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// gtk_print_settings_set_media_type
//
// [ media_type ] trans: nothing
//
func (v PrintSettings) SetMediaType(media_type string) {
	iv, err := _I.Get(1944, "PrintSettings", "set_media_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_media_type := gi.CString(media_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_media_type := gi.NewStringArgument(c_media_type)
	args := []gi.Argument{arg_v, arg_media_type}
	iv.Call(args, nil, nil)
	gi.Free(c_media_type)
}

// gtk_print_settings_set_n_copies
//
// [ num_copies ] trans: nothing
//
func (v PrintSettings) SetNCopies(num_copies int32) {
	iv, err := _I.Get(1945, "PrintSettings", "set_n_copies")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_num_copies := gi.NewInt32Argument(num_copies)
	args := []gi.Argument{arg_v, arg_num_copies}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_number_up
//
// [ number_up ] trans: nothing
//
func (v PrintSettings) SetNumberUp(number_up int32) {
	iv, err := _I.Get(1946, "PrintSettings", "set_number_up")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_number_up := gi.NewInt32Argument(number_up)
	args := []gi.Argument{arg_v, arg_number_up}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_number_up_layout
//
// [ number_up_layout ] trans: nothing
//
func (v PrintSettings) SetNumberUpLayout(number_up_layout NumberUpLayoutEnum) {
	iv, err := _I.Get(1947, "PrintSettings", "set_number_up_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_number_up_layout := gi.NewIntArgument(int(number_up_layout))
	args := []gi.Argument{arg_v, arg_number_up_layout}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_orientation
//
// [ orientation ] trans: nothing
//
func (v PrintSettings) SetOrientation(orientation PageOrientationEnum) {
	iv, err := _I.Get(1948, "PrintSettings", "set_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_output_bin
//
// [ output_bin ] trans: nothing
//
func (v PrintSettings) SetOutputBin(output_bin string) {
	iv, err := _I.Get(1949, "PrintSettings", "set_output_bin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_output_bin := gi.CString(output_bin)
	arg_v := gi.NewPointerArgument(v.P)
	arg_output_bin := gi.NewStringArgument(c_output_bin)
	args := []gi.Argument{arg_v, arg_output_bin}
	iv.Call(args, nil, nil)
	gi.Free(c_output_bin)
}

// gtk_print_settings_set_page_ranges
//
// [ page_ranges ] trans: nothing
//
// [ num_ranges ] trans: nothing
//
func (v PrintSettings) SetPageRanges(page_ranges unsafe.Pointer, num_ranges int32) {
	iv, err := _I.Get(1950, "PrintSettings", "set_page_ranges")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_ranges := gi.NewPointerArgument(page_ranges)
	arg_num_ranges := gi.NewInt32Argument(num_ranges)
	args := []gi.Argument{arg_v, arg_page_ranges, arg_num_ranges}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_page_set
//
// [ page_set ] trans: nothing
//
func (v PrintSettings) SetPageSet(page_set PageSetEnum) {
	iv, err := _I.Get(1951, "PrintSettings", "set_page_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_page_set := gi.NewIntArgument(int(page_set))
	args := []gi.Argument{arg_v, arg_page_set}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_paper_height
//
// [ height ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PrintSettings) SetPaperHeight(height float64, unit UnitEnum) {
	iv, err := _I.Get(1952, "PrintSettings", "set_paper_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_height := gi.NewDoubleArgument(height)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_height, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_paper_size
//
// [ paper_size ] trans: nothing
//
func (v PrintSettings) SetPaperSize(paper_size PaperSize) {
	iv, err := _I.Get(1953, "PrintSettings", "set_paper_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_paper_size := gi.NewPointerArgument(paper_size.P)
	args := []gi.Argument{arg_v, arg_paper_size}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_paper_width
//
// [ width ] trans: nothing
//
// [ unit ] trans: nothing
//
func (v PrintSettings) SetPaperWidth(width float64, unit UnitEnum) {
	iv, err := _I.Get(1954, "PrintSettings", "set_paper_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewDoubleArgument(width)
	arg_unit := gi.NewIntArgument(int(unit))
	args := []gi.Argument{arg_v, arg_width, arg_unit}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_print_pages
//
// [ pages ] trans: nothing
//
func (v PrintSettings) SetPrintPages(pages PrintPagesEnum) {
	iv, err := _I.Get(1955, "PrintSettings", "set_print_pages")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pages := gi.NewIntArgument(int(pages))
	args := []gi.Argument{arg_v, arg_pages}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_printer
//
// [ printer ] trans: nothing
//
func (v PrintSettings) SetPrinter(printer string) {
	iv, err := _I.Get(1956, "PrintSettings", "set_printer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_printer := gi.CString(printer)
	arg_v := gi.NewPointerArgument(v.P)
	arg_printer := gi.NewStringArgument(c_printer)
	args := []gi.Argument{arg_v, arg_printer}
	iv.Call(args, nil, nil)
	gi.Free(c_printer)
}

// gtk_print_settings_set_printer_lpi
//
// [ lpi ] trans: nothing
//
func (v PrintSettings) SetPrinterLpi(lpi float64) {
	iv, err := _I.Get(1957, "PrintSettings", "set_printer_lpi")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_lpi := gi.NewDoubleArgument(lpi)
	args := []gi.Argument{arg_v, arg_lpi}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_quality
//
// [ quality ] trans: nothing
//
func (v PrintSettings) SetQuality(quality PrintQualityEnum) {
	iv, err := _I.Get(1958, "PrintSettings", "set_quality")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_quality := gi.NewIntArgument(int(quality))
	args := []gi.Argument{arg_v, arg_quality}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_resolution
//
// [ resolution ] trans: nothing
//
func (v PrintSettings) SetResolution(resolution int32) {
	iv, err := _I.Get(1959, "PrintSettings", "set_resolution")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resolution := gi.NewInt32Argument(resolution)
	args := []gi.Argument{arg_v, arg_resolution}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_resolution_xy
//
// [ resolution_x ] trans: nothing
//
// [ resolution_y ] trans: nothing
//
func (v PrintSettings) SetResolutionXy(resolution_x int32, resolution_y int32) {
	iv, err := _I.Get(1960, "PrintSettings", "set_resolution_xy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resolution_x := gi.NewInt32Argument(resolution_x)
	arg_resolution_y := gi.NewInt32Argument(resolution_y)
	args := []gi.Argument{arg_v, arg_resolution_x, arg_resolution_y}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_reverse
//
// [ reverse ] trans: nothing
//
func (v PrintSettings) SetReverse(reverse bool) {
	iv, err := _I.Get(1961, "PrintSettings", "set_reverse")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reverse := gi.NewBoolArgument(reverse)
	args := []gi.Argument{arg_v, arg_reverse}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_scale
//
// [ scale ] trans: nothing
//
func (v PrintSettings) SetScale(scale float64) {
	iv, err := _I.Get(1962, "PrintSettings", "set_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_scale := gi.NewDoubleArgument(scale)
	args := []gi.Argument{arg_v, arg_scale}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_set_use_color
//
// [ use_color ] trans: nothing
//
func (v PrintSettings) SetUseColor(use_color bool) {
	iv, err := _I.Get(1963, "PrintSettings", "set_use_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_color := gi.NewBoolArgument(use_color)
	args := []gi.Argument{arg_v, arg_use_color}
	iv.Call(args, nil, nil)
}

// gtk_print_settings_to_file
//
// [ file_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v PrintSettings) ToFile(file_name string) (result bool, err error) {
	iv, err := _I.Get(1964, "PrintSettings", "to_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file_name := gi.CString(file_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_file_name := gi.NewStringArgument(c_file_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_file_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_print_settings_to_gvariant
//
// [ result ] trans: nothing
//
func (v PrintSettings) ToGvariant() (result g.Variant) {
	iv, err := _I.Get(1965, "PrintSettings", "to_gvariant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_settings_to_key_file
//
// [ key_file ] trans: nothing
//
// [ group_name ] trans: nothing
//
func (v PrintSettings) ToKeyFile(key_file g.KeyFile, group_name string) {
	iv, err := _I.Get(1966, "PrintSettings", "to_key_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key_file := gi.NewPointerArgument(key_file.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	args := []gi.Argument{arg_v, arg_key_file, arg_group_name}
	iv.Call(args, nil, nil)
	gi.Free(c_group_name)
}

// gtk_print_settings_unset
//
// [ key ] trans: nothing
//
func (v PrintSettings) Unset(key string) {
	iv, err := _I.Get(1967, "PrintSettings", "unset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

type PrintSettingsFuncStruct struct {
	F_key   string
	F_value string
}

func GetPointer_myPrintSettingsFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkPrintSettingsFunc())
}

//export myGtkPrintSettingsFunc
func myGtkPrintSettingsFunc(key *C.gchar, value *C.gchar, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &PrintSettingsFuncStruct{
		F_key:   gi.GoString(unsafe.Pointer(key)),
		F_value: gi.GoString(unsafe.Pointer(value)),
	}
	fn(args)
}

// Enum PrintStatus
type PrintStatusEnum int

const (
	PrintStatusInitial         PrintStatusEnum = 0
	PrintStatusPreparing       PrintStatusEnum = 1
	PrintStatusGeneratingData  PrintStatusEnum = 2
	PrintStatusSendingData     PrintStatusEnum = 3
	PrintStatusPending         PrintStatusEnum = 4
	PrintStatusPendingIssue    PrintStatusEnum = 5
	PrintStatusPrinting        PrintStatusEnum = 6
	PrintStatusFinished        PrintStatusEnum = 7
	PrintStatusFinishedAborted PrintStatusEnum = 8
)

func PrintStatusGetType() gi.GType {
	ret := _I.GetGType(399, "PrintStatus")
	return ret
}

// Object ProgressBar
type ProgressBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Widget
}

func WrapProgressBar(p unsafe.Pointer) (r ProgressBar) { r.P = p; return }

type IProgressBar interface{ P_ProgressBar() unsafe.Pointer }

func (v ProgressBar) P_ProgressBar() unsafe.Pointer      { return v.P }
func (v ProgressBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ProgressBar) P_Buildable() unsafe.Pointer        { return v.P }
func (v ProgressBar) P_Orientable() unsafe.Pointer       { return v.P }
func ProgressBarGetType() gi.GType {
	ret := _I.GetGType(400, "ProgressBar")
	return ret
}

// gtk_progress_bar_new
//
// [ result ] trans: nothing
//
func NewProgressBar() (result ProgressBar) {
	iv, err := _I.Get(1968, "ProgressBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_progress_bar_get_ellipsize
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetEllipsize() (result pango.EllipsizeModeEnum) {
	iv, err := _I.Get(1969, "ProgressBar", "get_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.EllipsizeModeEnum(ret.Int())
	return
}

// gtk_progress_bar_get_fraction
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetFraction() (result float64) {
	iv, err := _I.Get(1970, "ProgressBar", "get_fraction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_progress_bar_get_inverted
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetInverted() (result bool) {
	iv, err := _I.Get(1971, "ProgressBar", "get_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_progress_bar_get_pulse_step
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetPulseStep() (result float64) {
	iv, err := _I.Get(1972, "ProgressBar", "get_pulse_step")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_progress_bar_get_show_text
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetShowText() (result bool) {
	iv, err := _I.Get(1973, "ProgressBar", "get_show_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_progress_bar_get_text
//
// [ result ] trans: nothing
//
func (v ProgressBar) GetText() (result string) {
	iv, err := _I.Get(1974, "ProgressBar", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_progress_bar_pulse
//
func (v ProgressBar) Pulse() {
	iv, err := _I.Get(1975, "ProgressBar", "pulse")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_ellipsize
//
// [ mode ] trans: nothing
//
func (v ProgressBar) SetEllipsize(mode pango.EllipsizeModeEnum) {
	iv, err := _I.Get(1976, "ProgressBar", "set_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_fraction
//
// [ fraction ] trans: nothing
//
func (v ProgressBar) SetFraction(fraction float64) {
	iv, err := _I.Get(1977, "ProgressBar", "set_fraction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fraction := gi.NewDoubleArgument(fraction)
	args := []gi.Argument{arg_v, arg_fraction}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_inverted
//
// [ inverted ] trans: nothing
//
func (v ProgressBar) SetInverted(inverted bool) {
	iv, err := _I.Get(1978, "ProgressBar", "set_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_inverted := gi.NewBoolArgument(inverted)
	args := []gi.Argument{arg_v, arg_inverted}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_pulse_step
//
// [ fraction ] trans: nothing
//
func (v ProgressBar) SetPulseStep(fraction float64) {
	iv, err := _I.Get(1979, "ProgressBar", "set_pulse_step")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fraction := gi.NewDoubleArgument(fraction)
	args := []gi.Argument{arg_v, arg_fraction}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_show_text
//
// [ show_text ] trans: nothing
//
func (v ProgressBar) SetShowText(show_text bool) {
	iv, err := _I.Get(1980, "ProgressBar", "set_show_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_text := gi.NewBoolArgument(show_text)
	args := []gi.Argument{arg_v, arg_show_text}
	iv.Call(args, nil, nil)
}

// gtk_progress_bar_set_text
//
// [ text ] trans: nothing
//
func (v ProgressBar) SetText(text string) {
	iv, err := _I.Get(1981, "ProgressBar", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// Object ProgressBarAccessible
type ProgressBarAccessible struct {
	atk.ComponentIfc
	atk.ValueIfc
	WidgetAccessible
}

func WrapProgressBarAccessible(p unsafe.Pointer) (r ProgressBarAccessible) { r.P = p; return }

type IProgressBarAccessible interface{ P_ProgressBarAccessible() unsafe.Pointer }

func (v ProgressBarAccessible) P_ProgressBarAccessible() unsafe.Pointer { return v.P }
func (v ProgressBarAccessible) P_Component() unsafe.Pointer             { return v.P }
func (v ProgressBarAccessible) P_Value() unsafe.Pointer                 { return v.P }
func ProgressBarAccessibleGetType() gi.GType {
	ret := _I.GetGType(401, "ProgressBarAccessible")
	return ret
}

// ignore GType struct ProgressBarAccessibleClass

// Struct ProgressBarAccessiblePrivate
type ProgressBarAccessiblePrivate struct {
	P unsafe.Pointer
}

func ProgressBarAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(402, "ProgressBarAccessiblePrivate")
	return ret
}

// ignore GType struct ProgressBarClass

// Struct ProgressBarPrivate
type ProgressBarPrivate struct {
	P unsafe.Pointer
}

func ProgressBarPrivateGetType() gi.GType {
	ret := _I.GetGType(403, "ProgressBarPrivate")
	return ret
}

// Enum PropagationPhase
type PropagationPhaseEnum int

const (
	PropagationPhaseNone    PropagationPhaseEnum = 0
	PropagationPhaseCapture PropagationPhaseEnum = 1
	PropagationPhaseBubble  PropagationPhaseEnum = 2
	PropagationPhaseTarget  PropagationPhaseEnum = 3
)

func PropagationPhaseGetType() gi.GType {
	ret := _I.GetGType(404, "PropagationPhase")
	return ret
}

// Object RadioAction
type RadioAction struct {
	BuildableIfc
	ToggleAction
}

func WrapRadioAction(p unsafe.Pointer) (r RadioAction) { r.P = p; return }

type IRadioAction interface{ P_RadioAction() unsafe.Pointer }

func (v RadioAction) P_RadioAction() unsafe.Pointer { return v.P }
func (v RadioAction) P_Buildable() unsafe.Pointer   { return v.P }
func RadioActionGetType() gi.GType {
	ret := _I.GetGType(405, "RadioAction")
	return ret
}

// Deprecated
//
// gtk_radio_action_new
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ tooltip ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func NewRadioAction(name string, label string, tooltip string, stock_id string, value int32) (result RadioAction) {
	iv, err := _I.Get(1982, "RadioAction", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	c_tooltip := gi.CString(tooltip)
	c_stock_id := gi.CString(stock_id)
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_value := gi.NewInt32Argument(value)
	args := []gi.Argument{arg_name, arg_label, arg_tooltip, arg_stock_id, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_label)
	gi.Free(c_tooltip)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_radio_action_get_current_value
//
// [ result ] trans: nothing
//
func (v RadioAction) GetCurrentValue() (result int32) {
	iv, err := _I.Get(1983, "RadioAction", "get_current_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_radio_action_get_group
//
// [ result ] trans: nothing
//
func (v RadioAction) GetGroup() (result g.SList) {
	iv, err := _I.Get(1984, "RadioAction", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_radio_action_join_group
//
// [ group_source ] trans: nothing
//
func (v RadioAction) JoinGroup(group_source IRadioAction) {
	iv, err := _I.Get(1985, "RadioAction", "join_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group_source != nil {
		tmp = group_source.P_RadioAction()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_source := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group_source}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_radio_action_set_current_value
//
// [ current_value ] trans: nothing
//
func (v RadioAction) SetCurrentValue(current_value int32) {
	iv, err := _I.Get(1986, "RadioAction", "set_current_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_current_value := gi.NewInt32Argument(current_value)
	args := []gi.Argument{arg_v, arg_current_value}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_radio_action_set_group
//
// [ group ] trans: nothing
//
func (v RadioAction) SetGroup(group g.SList) {
	iv, err := _I.Get(1987, "RadioAction", "set_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
}

// ignore GType struct RadioActionClass

// Deprecated
//
// Struct RadioActionEntry
type RadioActionEntry struct {
	P unsafe.Pointer
}

const SizeOfStructRadioActionEntry = 48

func RadioActionEntryGetType() gi.GType {
	ret := _I.GetGType(406, "RadioActionEntry")
	return ret
}

// Struct RadioActionPrivate
type RadioActionPrivate struct {
	P unsafe.Pointer
}

func RadioActionPrivateGetType() gi.GType {
	ret := _I.GetGType(407, "RadioActionPrivate")
	return ret
}

// Object RadioButton
type RadioButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	CheckButton
}

func WrapRadioButton(p unsafe.Pointer) (r RadioButton) { r.P = p; return }

type IRadioButton interface{ P_RadioButton() unsafe.Pointer }

func (v RadioButton) P_RadioButton() unsafe.Pointer      { return v.P }
func (v RadioButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v RadioButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v RadioButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v RadioButton) P_Buildable() unsafe.Pointer        { return v.P }
func RadioButtonGetType() gi.GType {
	ret := _I.GetGType(408, "RadioButton")
	return ret
}

// gtk_radio_button_new
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButton(group g.SList) (result RadioButton) {
	iv, err := _I.Get(1988, "RadioButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_new_from_widget
//
// [ radio_group_member ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButtonFromWidget(radio_group_member IRadioButton) (result RadioButton) {
	iv, err := _I.Get(1989, "RadioButton", "new_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if radio_group_member != nil {
		tmp = radio_group_member.P_RadioButton()
	}
	arg_radio_group_member := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_radio_group_member}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_new_with_label
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButtonWithLabel(group g.SList, label string) (result RadioButton) {
	iv, err := _I.Get(1990, "RadioButton", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(group.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_new_with_label_from_widget
//
// [ radio_group_member ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButtonWithLabelFromWidget(radio_group_member IRadioButton, label string) (result RadioButton) {
	iv, err := _I.Get(1991, "RadioButton", "new_with_label_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if radio_group_member != nil {
		tmp = radio_group_member.P_RadioButton()
	}
	c_label := gi.CString(label)
	arg_radio_group_member := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_radio_group_member, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_new_with_mnemonic
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButtonWithMnemonic(group g.SList, label string) (result RadioButton) {
	iv, err := _I.Get(1992, "RadioButton", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(group.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_new_with_mnemonic_from_widget
//
// [ radio_group_member ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioButtonWithMnemonicFromWidget(radio_group_member IRadioButton, label string) (result RadioButton) {
	iv, err := _I.Get(1993, "RadioButton", "new_with_mnemonic_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if radio_group_member != nil {
		tmp = radio_group_member.P_RadioButton()
	}
	c_label := gi.CString(label)
	arg_radio_group_member := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_radio_group_member, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_get_group
//
// [ result ] trans: nothing
//
func (v RadioButton) GetGroup() (result g.SList) {
	iv, err := _I.Get(1994, "RadioButton", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_button_join_group
//
// [ group_source ] trans: nothing
//
func (v RadioButton) JoinGroup(group_source IRadioButton) {
	iv, err := _I.Get(1995, "RadioButton", "join_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group_source != nil {
		tmp = group_source.P_RadioButton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_source := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group_source}
	iv.Call(args, nil, nil)
}

// gtk_radio_button_set_group
//
// [ group ] trans: nothing
//
func (v RadioButton) SetGroup(group g.SList) {
	iv, err := _I.Get(1996, "RadioButton", "set_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
}

// Object RadioButtonAccessible
type RadioButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	ToggleButtonAccessible
}

func WrapRadioButtonAccessible(p unsafe.Pointer) (r RadioButtonAccessible) { r.P = p; return }

type IRadioButtonAccessible interface{ P_RadioButtonAccessible() unsafe.Pointer }

func (v RadioButtonAccessible) P_RadioButtonAccessible() unsafe.Pointer { return v.P }
func (v RadioButtonAccessible) P_Action() unsafe.Pointer                { return v.P }
func (v RadioButtonAccessible) P_Component() unsafe.Pointer             { return v.P }
func (v RadioButtonAccessible) P_Image() unsafe.Pointer                 { return v.P }
func RadioButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(409, "RadioButtonAccessible")
	return ret
}

// ignore GType struct RadioButtonAccessibleClass

// Struct RadioButtonAccessiblePrivate
type RadioButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func RadioButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(410, "RadioButtonAccessiblePrivate")
	return ret
}

// ignore GType struct RadioButtonClass

// Struct RadioButtonPrivate
type RadioButtonPrivate struct {
	P unsafe.Pointer
}

func RadioButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(411, "RadioButtonPrivate")
	return ret
}

// Object RadioMenuItem
type RadioMenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	CheckMenuItem
}

func WrapRadioMenuItem(p unsafe.Pointer) (r RadioMenuItem) { r.P = p; return }

type IRadioMenuItem interface{ P_RadioMenuItem() unsafe.Pointer }

func (v RadioMenuItem) P_RadioMenuItem() unsafe.Pointer    { return v.P }
func (v RadioMenuItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v RadioMenuItem) P_Actionable() unsafe.Pointer       { return v.P }
func (v RadioMenuItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v RadioMenuItem) P_Buildable() unsafe.Pointer        { return v.P }
func RadioMenuItemGetType() gi.GType {
	ret := _I.GetGType(412, "RadioMenuItem")
	return ret
}

// gtk_radio_menu_item_new
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItem(group g.SList) (result RadioMenuItem) {
	iv, err := _I.Get(1997, "RadioMenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_new_from_widget
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItemFromWidget(group IRadioMenuItem) (result RadioMenuItem) {
	iv, err := _I.Get(1998, "RadioMenuItem", "new_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_RadioMenuItem()
	}
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_new_with_label
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItemWithLabel(group g.SList, label string) (result RadioMenuItem) {
	iv, err := _I.Get(1999, "RadioMenuItem", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(group.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_new_with_label_from_widget
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItemWithLabelFromWidget(group IRadioMenuItem, label string) (result RadioMenuItem) {
	iv, err := _I.Get(2000, "RadioMenuItem", "new_with_label_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_RadioMenuItem()
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_new_with_mnemonic
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItemWithMnemonic(group g.SList, label string) (result RadioMenuItem) {
	iv, err := _I.Get(2001, "RadioMenuItem", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(group.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_new_with_mnemonic_from_widget
//
// [ group ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioMenuItemWithMnemonicFromWidget(group IRadioMenuItem, label string) (result RadioMenuItem) {
	iv, err := _I.Get(2002, "RadioMenuItem", "new_with_mnemonic_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_RadioMenuItem()
	}
	c_label := gi.CString(label)
	arg_group := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_group, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_get_group
//
// [ result ] trans: nothing
//
func (v RadioMenuItem) GetGroup() (result g.SList) {
	iv, err := _I.Get(2003, "RadioMenuItem", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_menu_item_join_group
//
// [ group_source ] trans: nothing
//
func (v RadioMenuItem) JoinGroup(group_source IRadioMenuItem) {
	iv, err := _I.Get(2004, "RadioMenuItem", "join_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group_source != nil {
		tmp = group_source.P_RadioMenuItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_source := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group_source}
	iv.Call(args, nil, nil)
}

// gtk_radio_menu_item_set_group
//
// [ group ] trans: nothing
//
func (v RadioMenuItem) SetGroup(group g.SList) {
	iv, err := _I.Get(2005, "RadioMenuItem", "set_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
}

// Object RadioMenuItemAccessible
type RadioMenuItemAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.SelectionIfc
	CheckMenuItemAccessible
}

func WrapRadioMenuItemAccessible(p unsafe.Pointer) (r RadioMenuItemAccessible) { r.P = p; return }

type IRadioMenuItemAccessible interface{ P_RadioMenuItemAccessible() unsafe.Pointer }

func (v RadioMenuItemAccessible) P_RadioMenuItemAccessible() unsafe.Pointer { return v.P }
func (v RadioMenuItemAccessible) P_Action() unsafe.Pointer                  { return v.P }
func (v RadioMenuItemAccessible) P_Component() unsafe.Pointer               { return v.P }
func (v RadioMenuItemAccessible) P_Selection() unsafe.Pointer               { return v.P }
func RadioMenuItemAccessibleGetType() gi.GType {
	ret := _I.GetGType(413, "RadioMenuItemAccessible")
	return ret
}

// ignore GType struct RadioMenuItemAccessibleClass

// Struct RadioMenuItemAccessiblePrivate
type RadioMenuItemAccessiblePrivate struct {
	P unsafe.Pointer
}

func RadioMenuItemAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(414, "RadioMenuItemAccessiblePrivate")
	return ret
}

// ignore GType struct RadioMenuItemClass

// Struct RadioMenuItemPrivate
type RadioMenuItemPrivate struct {
	P unsafe.Pointer
}

func RadioMenuItemPrivateGetType() gi.GType {
	ret := _I.GetGType(415, "RadioMenuItemPrivate")
	return ret
}

// Object RadioToolButton
type RadioToolButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToggleToolButton
}

func WrapRadioToolButton(p unsafe.Pointer) (r RadioToolButton) { r.P = p; return }

type IRadioToolButton interface{ P_RadioToolButton() unsafe.Pointer }

func (v RadioToolButton) P_RadioToolButton() unsafe.Pointer  { return v.P }
func (v RadioToolButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v RadioToolButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v RadioToolButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v RadioToolButton) P_Buildable() unsafe.Pointer        { return v.P }
func RadioToolButtonGetType() gi.GType {
	ret := _I.GetGType(416, "RadioToolButton")
	return ret
}

// gtk_radio_tool_button_new
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioToolButton(group g.SList) (result RadioToolButton) {
	iv, err := _I.Get(2006, "RadioToolButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_radio_tool_button_new_from_stock
//
// [ group ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioToolButtonFromStock(group g.SList, stock_id string) (result RadioToolButton) {
	iv, err := _I.Get(2007, "RadioToolButton", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_group := gi.NewPointerArgument(group.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_group, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_radio_tool_button_new_from_widget
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioToolButtonFromWidget(group IRadioToolButton) (result RadioToolButton) {
	iv, err := _I.Get(2008, "RadioToolButton", "new_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_RadioToolButton()
	}
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_radio_tool_button_new_with_stock_from_widget
//
// [ group ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRadioToolButtonWithStockFromWidget(group IRadioToolButton, stock_id string) (result RadioToolButton) {
	iv, err := _I.Get(2009, "RadioToolButton", "new_with_stock_from_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_RadioToolButton()
	}
	c_stock_id := gi.CString(stock_id)
	arg_group := gi.NewPointerArgument(tmp)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_group, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_radio_tool_button_get_group
//
// [ result ] trans: nothing
//
func (v RadioToolButton) GetGroup() (result g.SList) {
	iv, err := _I.Get(2010, "RadioToolButton", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_radio_tool_button_set_group
//
// [ group ] trans: nothing
//
func (v RadioToolButton) SetGroup(group g.SList) {
	iv, err := _I.Get(2011, "RadioToolButton", "set_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
}

// ignore GType struct RadioToolButtonClass

// Object Range
type Range struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Widget
}

func WrapRange(p unsafe.Pointer) (r Range) { r.P = p; return }

type IRange interface{ P_Range() unsafe.Pointer }

func (v Range) P_Range() unsafe.Pointer            { return v.P }
func (v Range) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Range) P_Buildable() unsafe.Pointer        { return v.P }
func (v Range) P_Orientable() unsafe.Pointer       { return v.P }
func RangeGetType() gi.GType {
	ret := _I.GetGType(417, "Range")
	return ret
}

// gtk_range_get_adjustment
//
// [ result ] trans: nothing
//
func (v Range) GetAdjustment() (result Adjustment) {
	iv, err := _I.Get(2012, "Range", "get_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_range_get_fill_level
//
// [ result ] trans: nothing
//
func (v Range) GetFillLevel() (result float64) {
	iv, err := _I.Get(2013, "Range", "get_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_range_get_flippable
//
// [ result ] trans: nothing
//
func (v Range) GetFlippable() (result bool) {
	iv, err := _I.Get(2014, "Range", "get_flippable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_range_get_inverted
//
// [ result ] trans: nothing
//
func (v Range) GetInverted() (result bool) {
	iv, err := _I.Get(2015, "Range", "get_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_range_get_lower_stepper_sensitivity
//
// [ result ] trans: nothing
//
func (v Range) GetLowerStepperSensitivity() (result SensitivityTypeEnum) {
	iv, err := _I.Get(2016, "Range", "get_lower_stepper_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SensitivityTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_range_get_min_slider_size
//
// [ result ] trans: nothing
//
func (v Range) GetMinSliderSize() (result int32) {
	iv, err := _I.Get(2017, "Range", "get_min_slider_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_range_get_range_rect
//
// [ range_rect ] trans: nothing, dir: out
//
func (v Range) GetRangeRect(range_rect gdk.Rectangle) {
	iv, err := _I.Get(2018, "Range", "get_range_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_range_rect := gi.NewPointerArgument(range_rect.P)
	args := []gi.Argument{arg_v, arg_range_rect}
	iv.Call(args, nil, nil)
}

// gtk_range_get_restrict_to_fill_level
//
// [ result ] trans: nothing
//
func (v Range) GetRestrictToFillLevel() (result bool) {
	iv, err := _I.Get(2019, "Range", "get_restrict_to_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_range_get_round_digits
//
// [ result ] trans: nothing
//
func (v Range) GetRoundDigits() (result int32) {
	iv, err := _I.Get(2020, "Range", "get_round_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_range_get_show_fill_level
//
// [ result ] trans: nothing
//
func (v Range) GetShowFillLevel() (result bool) {
	iv, err := _I.Get(2021, "Range", "get_show_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_range_get_slider_range
//
// [ slider_start ] trans: everything, dir: out
//
// [ slider_end ] trans: everything, dir: out
//
func (v Range) GetSliderRange() (slider_start int32, slider_end int32) {
	iv, err := _I.Get(2022, "Range", "get_slider_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_slider_start := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_slider_end := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_slider_start, arg_slider_end}
	iv.Call(args, nil, &outArgs[0])
	slider_start = outArgs[0].Int32()
	slider_end = outArgs[1].Int32()
	return
}

// gtk_range_get_slider_size_fixed
//
// [ result ] trans: nothing
//
func (v Range) GetSliderSizeFixed() (result bool) {
	iv, err := _I.Get(2023, "Range", "get_slider_size_fixed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_range_get_upper_stepper_sensitivity
//
// [ result ] trans: nothing
//
func (v Range) GetUpperStepperSensitivity() (result SensitivityTypeEnum) {
	iv, err := _I.Get(2024, "Range", "get_upper_stepper_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SensitivityTypeEnum(ret.Int())
	return
}

// gtk_range_get_value
//
// [ result ] trans: nothing
//
func (v Range) GetValue() (result float64) {
	iv, err := _I.Get(2025, "Range", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_range_set_adjustment
//
// [ adjustment ] trans: nothing
//
func (v Range) SetAdjustment(adjustment IAdjustment) {
	iv, err := _I.Get(2026, "Range", "set_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_range_set_fill_level
//
// [ fill_level ] trans: nothing
//
func (v Range) SetFillLevel(fill_level float64) {
	iv, err := _I.Get(2027, "Range", "set_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fill_level := gi.NewDoubleArgument(fill_level)
	args := []gi.Argument{arg_v, arg_fill_level}
	iv.Call(args, nil, nil)
}

// gtk_range_set_flippable
//
// [ flippable ] trans: nothing
//
func (v Range) SetFlippable(flippable bool) {
	iv, err := _I.Get(2028, "Range", "set_flippable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flippable := gi.NewBoolArgument(flippable)
	args := []gi.Argument{arg_v, arg_flippable}
	iv.Call(args, nil, nil)
}

// gtk_range_set_increments
//
// [ step ] trans: nothing
//
// [ page ] trans: nothing
//
func (v Range) SetIncrements(step float64, page float64) {
	iv, err := _I.Get(2029, "Range", "set_increments")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_step := gi.NewDoubleArgument(step)
	arg_page := gi.NewDoubleArgument(page)
	args := []gi.Argument{arg_v, arg_step, arg_page}
	iv.Call(args, nil, nil)
}

// gtk_range_set_inverted
//
// [ setting ] trans: nothing
//
func (v Range) SetInverted(setting bool) {
	iv, err := _I.Get(2030, "Range", "set_inverted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_range_set_lower_stepper_sensitivity
//
// [ sensitivity ] trans: nothing
//
func (v Range) SetLowerStepperSensitivity(sensitivity SensitivityTypeEnum) {
	iv, err := _I.Get(2031, "Range", "set_lower_stepper_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitivity := gi.NewIntArgument(int(sensitivity))
	args := []gi.Argument{arg_v, arg_sensitivity}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_range_set_min_slider_size
//
// [ min_size ] trans: nothing
//
func (v Range) SetMinSliderSize(min_size int32) {
	iv, err := _I.Get(2032, "Range", "set_min_slider_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_min_size := gi.NewInt32Argument(min_size)
	args := []gi.Argument{arg_v, arg_min_size}
	iv.Call(args, nil, nil)
}

// gtk_range_set_range
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
func (v Range) SetRange(min float64, max float64) {
	iv, err := _I.Get(2033, "Range", "set_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	args := []gi.Argument{arg_v, arg_min, arg_max}
	iv.Call(args, nil, nil)
}

// gtk_range_set_restrict_to_fill_level
//
// [ restrict_to_fill_level ] trans: nothing
//
func (v Range) SetRestrictToFillLevel(restrict_to_fill_level bool) {
	iv, err := _I.Get(2034, "Range", "set_restrict_to_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_restrict_to_fill_level := gi.NewBoolArgument(restrict_to_fill_level)
	args := []gi.Argument{arg_v, arg_restrict_to_fill_level}
	iv.Call(args, nil, nil)
}

// gtk_range_set_round_digits
//
// [ round_digits ] trans: nothing
//
func (v Range) SetRoundDigits(round_digits int32) {
	iv, err := _I.Get(2035, "Range", "set_round_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_round_digits := gi.NewInt32Argument(round_digits)
	args := []gi.Argument{arg_v, arg_round_digits}
	iv.Call(args, nil, nil)
}

// gtk_range_set_show_fill_level
//
// [ show_fill_level ] trans: nothing
//
func (v Range) SetShowFillLevel(show_fill_level bool) {
	iv, err := _I.Get(2036, "Range", "set_show_fill_level")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_fill_level := gi.NewBoolArgument(show_fill_level)
	args := []gi.Argument{arg_v, arg_show_fill_level}
	iv.Call(args, nil, nil)
}

// gtk_range_set_slider_size_fixed
//
// [ size_fixed ] trans: nothing
//
func (v Range) SetSliderSizeFixed(size_fixed bool) {
	iv, err := _I.Get(2037, "Range", "set_slider_size_fixed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size_fixed := gi.NewBoolArgument(size_fixed)
	args := []gi.Argument{arg_v, arg_size_fixed}
	iv.Call(args, nil, nil)
}

// gtk_range_set_upper_stepper_sensitivity
//
// [ sensitivity ] trans: nothing
//
func (v Range) SetUpperStepperSensitivity(sensitivity SensitivityTypeEnum) {
	iv, err := _I.Get(2038, "Range", "set_upper_stepper_sensitivity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitivity := gi.NewIntArgument(int(sensitivity))
	args := []gi.Argument{arg_v, arg_sensitivity}
	iv.Call(args, nil, nil)
}

// gtk_range_set_value
//
// [ value ] trans: nothing
//
func (v Range) SetValue(value float64) {
	iv, err := _I.Get(2039, "Range", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// Object RangeAccessible
type RangeAccessible struct {
	atk.ComponentIfc
	atk.ValueIfc
	WidgetAccessible
}

func WrapRangeAccessible(p unsafe.Pointer) (r RangeAccessible) { r.P = p; return }

type IRangeAccessible interface{ P_RangeAccessible() unsafe.Pointer }

func (v RangeAccessible) P_RangeAccessible() unsafe.Pointer { return v.P }
func (v RangeAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v RangeAccessible) P_Value() unsafe.Pointer           { return v.P }
func RangeAccessibleGetType() gi.GType {
	ret := _I.GetGType(418, "RangeAccessible")
	return ret
}

// ignore GType struct RangeAccessibleClass

// Struct RangeAccessiblePrivate
type RangeAccessiblePrivate struct {
	P unsafe.Pointer
}

func RangeAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(419, "RangeAccessiblePrivate")
	return ret
}

// ignore GType struct RangeClass

// Struct RangePrivate
type RangePrivate struct {
	P unsafe.Pointer
}

func RangePrivateGetType() gi.GType {
	ret := _I.GetGType(420, "RangePrivate")
	return ret
}

// Struct RcContext
type RcContext struct {
	P unsafe.Pointer
}

func RcContextGetType() gi.GType {
	ret := _I.GetGType(421, "RcContext")
	return ret
}

// Flags RcFlags
type RcFlags int

const (
	RcFlagsFg   RcFlags = 1
	RcFlagsBg   RcFlags = 2
	RcFlagsText RcFlags = 4
	RcFlagsBase RcFlags = 8
)

func RcFlagsGetType() gi.GType {
	ret := _I.GetGType(422, "RcFlags")
	return ret
}

// Struct RcProperty
type RcProperty struct {
	P unsafe.Pointer
}

const SizeOfStructRcProperty = 40

func RcPropertyGetType() gi.GType {
	ret := _I.GetGType(423, "RcProperty")
	return ret
}

// gtk_rc_property_parse_border
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseBorder1(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(2040, "RcProperty", "parse_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_color
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseColor1(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(2041, "RcProperty", "parse_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_enum
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseEnum1(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(2042, "RcProperty", "parse_enum")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_flags
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseFlags1(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(2043, "RcProperty", "parse_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_requisition
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseRequisition1(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(2044, "RcProperty", "parse_requisition")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

type RcPropertyParserStruct struct {
	F_pspec          g.ParamSpec
	F_rc_string      g.String
	F_property_value g.Value
}

func GetPointer_myRcPropertyParser() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkRcPropertyParser())
}

//export myGtkRcPropertyParser
func myGtkRcPropertyParser(pspec *C.GParamSpec, rc_string *C.GString, property_value *C.GValue) {
	// TODO: not found user_data
}

// Object RcStyle
type RcStyle struct {
	g.Object
}

func WrapRcStyle(p unsafe.Pointer) (r RcStyle) { r.P = p; return }

type IRcStyle interface{ P_RcStyle() unsafe.Pointer }

func (v RcStyle) P_RcStyle() unsafe.Pointer { return v.P }
func RcStyleGetType() gi.GType {
	ret := _I.GetGType(424, "RcStyle")
	return ret
}

// Deprecated
//
// gtk_rc_style_new
//
// [ result ] trans: everything
//
func NewRcStyle() (result RcStyle) {
	iv, err := _I.Get(2045, "RcStyle", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_rc_style_copy
//
// [ result ] trans: everything
//
func (v RcStyle) Copy() (result RcStyle) {
	iv, err := _I.Get(2046, "RcStyle", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct RcStyleClass

// Deprecated
//
// Enum RcTokenType
type RcTokenTypeEnum int

const (
	RcTokenTypeInvalid      RcTokenTypeEnum = 270
	RcTokenTypeInclude      RcTokenTypeEnum = 271
	RcTokenTypeNormal       RcTokenTypeEnum = 272
	RcTokenTypeActive       RcTokenTypeEnum = 273
	RcTokenTypePrelight     RcTokenTypeEnum = 274
	RcTokenTypeSelected     RcTokenTypeEnum = 275
	RcTokenTypeInsensitive  RcTokenTypeEnum = 276
	RcTokenTypeFg           RcTokenTypeEnum = 277
	RcTokenTypeBg           RcTokenTypeEnum = 278
	RcTokenTypeText         RcTokenTypeEnum = 279
	RcTokenTypeBase         RcTokenTypeEnum = 280
	RcTokenTypeXthickness   RcTokenTypeEnum = 281
	RcTokenTypeYthickness   RcTokenTypeEnum = 282
	RcTokenTypeFont         RcTokenTypeEnum = 283
	RcTokenTypeFontset      RcTokenTypeEnum = 284
	RcTokenTypeFontName     RcTokenTypeEnum = 285
	RcTokenTypeBgPixmap     RcTokenTypeEnum = 286
	RcTokenTypePixmapPath   RcTokenTypeEnum = 287
	RcTokenTypeStyle        RcTokenTypeEnum = 288
	RcTokenTypeBinding      RcTokenTypeEnum = 289
	RcTokenTypeBind         RcTokenTypeEnum = 290
	RcTokenTypeWidget       RcTokenTypeEnum = 291
	RcTokenTypeWidgetClass  RcTokenTypeEnum = 292
	RcTokenTypeClass        RcTokenTypeEnum = 293
	RcTokenTypeLowest       RcTokenTypeEnum = 294
	RcTokenTypeGtk          RcTokenTypeEnum = 295
	RcTokenTypeApplication  RcTokenTypeEnum = 296
	RcTokenTypeTheme        RcTokenTypeEnum = 297
	RcTokenTypeRc           RcTokenTypeEnum = 298
	RcTokenTypeHighest      RcTokenTypeEnum = 299
	RcTokenTypeEngine       RcTokenTypeEnum = 300
	RcTokenTypeModulePath   RcTokenTypeEnum = 301
	RcTokenTypeImModulePath RcTokenTypeEnum = 302
	RcTokenTypeImModuleFile RcTokenTypeEnum = 303
	RcTokenTypeStock        RcTokenTypeEnum = 304
	RcTokenTypeLtr          RcTokenTypeEnum = 305
	RcTokenTypeRtl          RcTokenTypeEnum = 306
	RcTokenTypeColor        RcTokenTypeEnum = 307
	RcTokenTypeUnbind       RcTokenTypeEnum = 308
	RcTokenTypeLast         RcTokenTypeEnum = 309
)

func RcTokenTypeGetType() gi.GType {
	ret := _I.GetGType(425, "RcTokenType")
	return ret
}

// Object RecentAction
type RecentAction struct {
	BuildableIfc
	RecentChooserIfc
	Action
}

func WrapRecentAction(p unsafe.Pointer) (r RecentAction) { r.P = p; return }

type IRecentAction interface{ P_RecentAction() unsafe.Pointer }

func (v RecentAction) P_RecentAction() unsafe.Pointer  { return v.P }
func (v RecentAction) P_Buildable() unsafe.Pointer     { return v.P }
func (v RecentAction) P_RecentChooser() unsafe.Pointer { return v.P }
func RecentActionGetType() gi.GType {
	ret := _I.GetGType(426, "RecentAction")
	return ret
}

// Deprecated
//
// gtk_recent_action_new
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ tooltip ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewRecentAction(name string, label string, tooltip string, stock_id string) (result RecentAction) {
	iv, err := _I.Get(2047, "RecentAction", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	c_tooltip := gi.CString(tooltip)
	c_stock_id := gi.CString(stock_id)
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_name, arg_label, arg_tooltip, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_label)
	gi.Free(c_tooltip)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_recent_action_new_for_manager
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ tooltip ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ manager ] trans: nothing
//
// [ result ] trans: everything
//
func NewRecentActionForManager(name string, label string, tooltip string, stock_id string, manager IRecentManager) (result RecentAction) {
	iv, err := _I.Get(2048, "RecentAction", "new_for_manager")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	c_tooltip := gi.CString(tooltip)
	c_stock_id := gi.CString(stock_id)
	var tmp unsafe.Pointer
	if manager != nil {
		tmp = manager.P_RecentManager()
	}
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_manager := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_name, arg_label, arg_tooltip, arg_stock_id, arg_manager}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_label)
	gi.Free(c_tooltip)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_recent_action_get_show_numbers
//
// [ result ] trans: nothing
//
func (v RecentAction) GetShowNumbers() (result bool) {
	iv, err := _I.Get(2049, "RecentAction", "get_show_numbers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_recent_action_set_show_numbers
//
// [ show_numbers ] trans: nothing
//
func (v RecentAction) SetShowNumbers(show_numbers bool) {
	iv, err := _I.Get(2050, "RecentAction", "set_show_numbers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_numbers := gi.NewBoolArgument(show_numbers)
	args := []gi.Argument{arg_v, arg_show_numbers}
	iv.Call(args, nil, nil)
}

// ignore GType struct RecentActionClass

// Struct RecentActionPrivate
type RecentActionPrivate struct {
	P unsafe.Pointer
}

func RecentActionPrivateGetType() gi.GType {
	ret := _I.GetGType(427, "RecentActionPrivate")
	return ret
}

// Interface RecentChooser
type RecentChooser struct {
	RecentChooserIfc
	P unsafe.Pointer
}
type RecentChooserIfc struct{}
type IRecentChooser interface{ P_RecentChooser() unsafe.Pointer }

func (v RecentChooser) P_RecentChooser() unsafe.Pointer { return v.P }
func RecentChooserGetType() gi.GType {
	ret := _I.GetGType(428, "RecentChooser")
	return ret
}

// gtk_recent_chooser_add_filter
//
// [ filter ] trans: nothing
//
func (v *RecentChooserIfc) AddFilter(filter IRecentFilter) {
	iv, err := _I.Get(2051, "RecentChooser", "add_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_RecentFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_get_current_item
//
// [ result ] trans: everything
//
func (v *RecentChooserIfc) GetCurrentItem() (result RecentInfo) {
	iv, err := _I.Get(2052, "RecentChooser", "get_current_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_get_current_uri
//
// [ result ] trans: everything
//
func (v *RecentChooserIfc) GetCurrentUri() (result string) {
	iv, err := _I.Get(2053, "RecentChooser", "get_current_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_recent_chooser_get_filter
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetFilter() (result RecentFilter) {
	iv, err := _I.Get(2054, "RecentChooser", "get_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_get_items
//
// [ result ] trans: everything
//
func (v *RecentChooserIfc) GetItems() (result g.List) {
	iv, err := _I.Get(2055, "RecentChooser", "get_items")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_get_limit
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetLimit() (result int32) {
	iv, err := _I.Get(2056, "RecentChooser", "get_limit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_recent_chooser_get_local_only
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetLocalOnly() (result bool) {
	iv, err := _I.Get(2057, "RecentChooser", "get_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_select_multiple
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetSelectMultiple() (result bool) {
	iv, err := _I.Get(2058, "RecentChooser", "get_select_multiple")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_show_icons
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetShowIcons() (result bool) {
	iv, err := _I.Get(2059, "RecentChooser", "get_show_icons")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_show_not_found
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetShowNotFound() (result bool) {
	iv, err := _I.Get(2060, "RecentChooser", "get_show_not_found")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_show_private
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetShowPrivate() (result bool) {
	iv, err := _I.Get(2061, "RecentChooser", "get_show_private")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_show_tips
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetShowTips() (result bool) {
	iv, err := _I.Get(2062, "RecentChooser", "get_show_tips")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_get_sort_type
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) GetSortType() (result RecentSortTypeEnum) {
	iv, err := _I.Get(2063, "RecentChooser", "get_sort_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = RecentSortTypeEnum(ret.Int())
	return
}

// gtk_recent_chooser_get_uris
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v *RecentChooserIfc) GetUris() (result gi.CStrArray) {
	iv, err := _I.Get(2064, "RecentChooser", "get_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	length = outArgs[0].Uint64()
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_recent_chooser_list_filters
//
// [ result ] trans: container
//
func (v *RecentChooserIfc) ListFilters() (result g.SList) {
	iv, err := _I.Get(2065, "RecentChooser", "list_filters")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_remove_filter
//
// [ filter ] trans: nothing
//
func (v *RecentChooserIfc) RemoveFilter(filter IRecentFilter) {
	iv, err := _I.Get(2066, "RecentChooser", "remove_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_RecentFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_select_all
//
func (v *RecentChooserIfc) SelectAll() {
	iv, err := _I.Get(2067, "RecentChooser", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_select_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) SelectUri(uri string) (result bool, err error) {
	iv, err := _I.Get(2068, "RecentChooser", "select_uri")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_recent_chooser_set_current_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *RecentChooserIfc) SetCurrentUri(uri string) (result bool, err error) {
	iv, err := _I.Get(2069, "RecentChooser", "set_current_uri")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_recent_chooser_set_filter
//
// [ filter ] trans: nothing
//
func (v *RecentChooserIfc) SetFilter(filter IRecentFilter) {
	iv, err := _I.Get(2070, "RecentChooser", "set_filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if filter != nil {
		tmp = filter.P_RecentFilter()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_filter := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_filter}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_limit
//
// [ limit ] trans: nothing
//
func (v *RecentChooserIfc) SetLimit(limit int32) {
	iv, err := _I.Get(2071, "RecentChooser", "set_limit")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_limit := gi.NewInt32Argument(limit)
	args := []gi.Argument{arg_v, arg_limit}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_local_only
//
// [ local_only ] trans: nothing
//
func (v *RecentChooserIfc) SetLocalOnly(local_only bool) {
	iv, err := _I.Get(2072, "RecentChooser", "set_local_only")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_local_only := gi.NewBoolArgument(local_only)
	args := []gi.Argument{arg_v, arg_local_only}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_select_multiple
//
// [ select_multiple ] trans: nothing
//
func (v *RecentChooserIfc) SetSelectMultiple(select_multiple bool) {
	iv, err := _I.Get(2073, "RecentChooser", "set_select_multiple")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_select_multiple := gi.NewBoolArgument(select_multiple)
	args := []gi.Argument{arg_v, arg_select_multiple}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_show_icons
//
// [ show_icons ] trans: nothing
//
func (v *RecentChooserIfc) SetShowIcons(show_icons bool) {
	iv, err := _I.Get(2074, "RecentChooser", "set_show_icons")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_icons := gi.NewBoolArgument(show_icons)
	args := []gi.Argument{arg_v, arg_show_icons}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_show_not_found
//
// [ show_not_found ] trans: nothing
//
func (v *RecentChooserIfc) SetShowNotFound(show_not_found bool) {
	iv, err := _I.Get(2075, "RecentChooser", "set_show_not_found")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_not_found := gi.NewBoolArgument(show_not_found)
	args := []gi.Argument{arg_v, arg_show_not_found}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_show_private
//
// [ show_private ] trans: nothing
//
func (v *RecentChooserIfc) SetShowPrivate(show_private bool) {
	iv, err := _I.Get(2076, "RecentChooser", "set_show_private")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_private := gi.NewBoolArgument(show_private)
	args := []gi.Argument{arg_v, arg_show_private}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_show_tips
//
// [ show_tips ] trans: nothing
//
func (v *RecentChooserIfc) SetShowTips(show_tips bool) {
	iv, err := _I.Get(2077, "RecentChooser", "set_show_tips")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_show_tips := gi.NewBoolArgument(show_tips)
	args := []gi.Argument{arg_v, arg_show_tips}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_sort_func
//
// [ sort_func ] trans: nothing
//
// [ sort_data ] trans: nothing
//
// [ data_destroy ] trans: nothing
//
func (v *RecentChooserIfc) SetSortFunc(sort_func int /*TODO_TYPE CALLBACK*/, sort_data unsafe.Pointer, data_destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2078, "RecentChooser", "set_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myRecentSortFunc()))
	arg_sort_data := gi.NewPointerArgument(sort_data)
	arg_data_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_sort_func, arg_sort_data, arg_data_destroy}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_set_sort_type
//
// [ sort_type ] trans: nothing
//
func (v *RecentChooserIfc) SetSortType(sort_type RecentSortTypeEnum) {
	iv, err := _I.Get(2079, "RecentChooser", "set_sort_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_type := gi.NewIntArgument(int(sort_type))
	args := []gi.Argument{arg_v, arg_sort_type}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_unselect_all
//
func (v *RecentChooserIfc) UnselectAll() {
	iv, err := _I.Get(2080, "RecentChooser", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_unselect_uri
//
// [ uri ] trans: nothing
//
func (v *RecentChooserIfc) UnselectUri(uri string) {
	iv, err := _I.Get(2081, "RecentChooser", "unselect_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// Object RecentChooserDialog
type RecentChooserDialog struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	RecentChooserIfc
	Dialog
}

func WrapRecentChooserDialog(p unsafe.Pointer) (r RecentChooserDialog) { r.P = p; return }

type IRecentChooserDialog interface{ P_RecentChooserDialog() unsafe.Pointer }

func (v RecentChooserDialog) P_RecentChooserDialog() unsafe.Pointer { return v.P }
func (v RecentChooserDialog) P_ImplementorIface() unsafe.Pointer    { return v.P }
func (v RecentChooserDialog) P_Buildable() unsafe.Pointer           { return v.P }
func (v RecentChooserDialog) P_RecentChooser() unsafe.Pointer       { return v.P }
func RecentChooserDialogGetType() gi.GType {
	ret := _I.GetGType(429, "RecentChooserDialog")
	return ret
}

// ignore GType struct RecentChooserDialogClass

// Struct RecentChooserDialogPrivate
type RecentChooserDialogPrivate struct {
	P unsafe.Pointer
}

func RecentChooserDialogPrivateGetType() gi.GType {
	ret := _I.GetGType(430, "RecentChooserDialogPrivate")
	return ret
}

// Enum RecentChooserError
type RecentChooserErrorEnum int

const (
	RecentChooserErrorNotFound   RecentChooserErrorEnum = 0
	RecentChooserErrorInvalidUri RecentChooserErrorEnum = 1
)

func RecentChooserErrorGetType() gi.GType {
	ret := _I.GetGType(431, "RecentChooserError")
	return ret
}

// ignore GType struct RecentChooserIface

// Object RecentChooserMenu
type RecentChooserMenu struct {
	atk.ImplementorIfaceIfc
	ActivatableIfc
	BuildableIfc
	RecentChooserIfc
	Menu
}

func WrapRecentChooserMenu(p unsafe.Pointer) (r RecentChooserMenu) { r.P = p; return }

type IRecentChooserMenu interface{ P_RecentChooserMenu() unsafe.Pointer }

func (v RecentChooserMenu) P_RecentChooserMenu() unsafe.Pointer { return v.P }
func (v RecentChooserMenu) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v RecentChooserMenu) P_Activatable() unsafe.Pointer       { return v.P }
func (v RecentChooserMenu) P_Buildable() unsafe.Pointer         { return v.P }
func (v RecentChooserMenu) P_RecentChooser() unsafe.Pointer     { return v.P }
func RecentChooserMenuGetType() gi.GType {
	ret := _I.GetGType(432, "RecentChooserMenu")
	return ret
}

// gtk_recent_chooser_menu_new
//
// [ result ] trans: nothing
//
func NewRecentChooserMenu() (result RecentChooserMenu) {
	iv, err := _I.Get(2082, "RecentChooserMenu", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_menu_new_for_manager
//
// [ manager ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRecentChooserMenuForManager(manager IRecentManager) (result RecentChooserMenu) {
	iv, err := _I.Get(2083, "RecentChooserMenu", "new_for_manager")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if manager != nil {
		tmp = manager.P_RecentManager()
	}
	arg_manager := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_manager}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_menu_get_show_numbers
//
// [ result ] trans: nothing
//
func (v RecentChooserMenu) GetShowNumbers() (result bool) {
	iv, err := _I.Get(2084, "RecentChooserMenu", "get_show_numbers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_chooser_menu_set_show_numbers
//
// [ show_numbers ] trans: nothing
//
func (v RecentChooserMenu) SetShowNumbers(show_numbers bool) {
	iv, err := _I.Get(2085, "RecentChooserMenu", "set_show_numbers")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_numbers := gi.NewBoolArgument(show_numbers)
	args := []gi.Argument{arg_v, arg_show_numbers}
	iv.Call(args, nil, nil)
}

// ignore GType struct RecentChooserMenuClass

// Struct RecentChooserMenuPrivate
type RecentChooserMenuPrivate struct {
	P unsafe.Pointer
}

func RecentChooserMenuPrivateGetType() gi.GType {
	ret := _I.GetGType(433, "RecentChooserMenuPrivate")
	return ret
}

// Object RecentChooserWidget
type RecentChooserWidget struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	RecentChooserIfc
	Box
}

func WrapRecentChooserWidget(p unsafe.Pointer) (r RecentChooserWidget) { r.P = p; return }

type IRecentChooserWidget interface{ P_RecentChooserWidget() unsafe.Pointer }

func (v RecentChooserWidget) P_RecentChooserWidget() unsafe.Pointer { return v.P }
func (v RecentChooserWidget) P_ImplementorIface() unsafe.Pointer    { return v.P }
func (v RecentChooserWidget) P_Buildable() unsafe.Pointer           { return v.P }
func (v RecentChooserWidget) P_Orientable() unsafe.Pointer          { return v.P }
func (v RecentChooserWidget) P_RecentChooser() unsafe.Pointer       { return v.P }
func RecentChooserWidgetGetType() gi.GType {
	ret := _I.GetGType(434, "RecentChooserWidget")
	return ret
}

// gtk_recent_chooser_widget_new
//
// [ result ] trans: nothing
//
func NewRecentChooserWidget() (result RecentChooserWidget) {
	iv, err := _I.Get(2086, "RecentChooserWidget", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_chooser_widget_new_for_manager
//
// [ manager ] trans: nothing
//
// [ result ] trans: nothing
//
func NewRecentChooserWidgetForManager(manager IRecentManager) (result RecentChooserWidget) {
	iv, err := _I.Get(2087, "RecentChooserWidget", "new_for_manager")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if manager != nil {
		tmp = manager.P_RecentManager()
	}
	arg_manager := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_manager}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct RecentChooserWidgetClass

// Struct RecentChooserWidgetPrivate
type RecentChooserWidgetPrivate struct {
	P unsafe.Pointer
}

func RecentChooserWidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(435, "RecentChooserWidgetPrivate")
	return ret
}

// Struct RecentData
type RecentData struct {
	P unsafe.Pointer
}

const SizeOfStructRecentData = 56

func RecentDataGetType() gi.GType {
	ret := _I.GetGType(436, "RecentData")
	return ret
}

// Object RecentFilter
type RecentFilter struct {
	BuildableIfc
	g.InitiallyUnowned
}

func WrapRecentFilter(p unsafe.Pointer) (r RecentFilter) { r.P = p; return }

type IRecentFilter interface{ P_RecentFilter() unsafe.Pointer }

func (v RecentFilter) P_RecentFilter() unsafe.Pointer { return v.P }
func (v RecentFilter) P_Buildable() unsafe.Pointer    { return v.P }
func RecentFilterGetType() gi.GType {
	ret := _I.GetGType(437, "RecentFilter")
	return ret
}

// gtk_recent_filter_new
//
// [ result ] trans: nothing
//
func NewRecentFilter() (result RecentFilter) {
	iv, err := _I.Get(2088, "RecentFilter", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_filter_add_age
//
// [ days ] trans: nothing
//
func (v RecentFilter) AddAge(days int32) {
	iv, err := _I.Get(2089, "RecentFilter", "add_age")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_days := gi.NewInt32Argument(days)
	args := []gi.Argument{arg_v, arg_days}
	iv.Call(args, nil, nil)
}

// gtk_recent_filter_add_application
//
// [ application ] trans: nothing
//
func (v RecentFilter) AddApplication(application string) {
	iv, err := _I.Get(2090, "RecentFilter", "add_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_application := gi.CString(application)
	arg_v := gi.NewPointerArgument(v.P)
	arg_application := gi.NewStringArgument(c_application)
	args := []gi.Argument{arg_v, arg_application}
	iv.Call(args, nil, nil)
	gi.Free(c_application)
}

// gtk_recent_filter_add_custom
//
// [ needed ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ data_destroy ] trans: nothing
//
func (v RecentFilter) AddCustom(needed RecentFilterFlags, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, data_destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2091, "RecentFilter", "add_custom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_needed := gi.NewIntArgument(int(needed))
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myRecentFilterFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_data_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_needed, arg_func1, arg_data, arg_data_destroy}
	iv.Call(args, nil, nil)
}

// gtk_recent_filter_add_group
//
// [ group ] trans: nothing
//
func (v RecentFilter) AddGroup(group string) {
	iv, err := _I.Get(2092, "RecentFilter", "add_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group := gi.CString(group)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewStringArgument(c_group)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
	gi.Free(c_group)
}

// gtk_recent_filter_add_mime_type
//
// [ mime_type ] trans: nothing
//
func (v RecentFilter) AddMimeType(mime_type string) {
	iv, err := _I.Get(2093, "RecentFilter", "add_mime_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mime_type := gi.CString(mime_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	args := []gi.Argument{arg_v, arg_mime_type}
	iv.Call(args, nil, nil)
	gi.Free(c_mime_type)
}

// gtk_recent_filter_add_pattern
//
// [ pattern ] trans: nothing
//
func (v RecentFilter) AddPattern(pattern string) {
	iv, err := _I.Get(2094, "RecentFilter", "add_pattern")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_pattern := gi.CString(pattern)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pattern := gi.NewStringArgument(c_pattern)
	args := []gi.Argument{arg_v, arg_pattern}
	iv.Call(args, nil, nil)
	gi.Free(c_pattern)
}

// gtk_recent_filter_add_pixbuf_formats
//
func (v RecentFilter) AddPixbufFormats() {
	iv, err := _I.Get(2095, "RecentFilter", "add_pixbuf_formats")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_recent_filter_filter
//
// [ filter_info ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentFilter) Filter(filter_info RecentFilterInfo) (result bool) {
	iv, err := _I.Get(2096, "RecentFilter", "filter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_info := gi.NewPointerArgument(filter_info.P)
	args := []gi.Argument{arg_v, arg_filter_info}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_filter_get_name
//
// [ result ] trans: nothing
//
func (v RecentFilter) GetName() (result string) {
	iv, err := _I.Get(2097, "RecentFilter", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_recent_filter_get_needed
//
// [ result ] trans: nothing
//
func (v RecentFilter) GetNeeded() (result RecentFilterFlags) {
	iv, err := _I.Get(2098, "RecentFilter", "get_needed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = RecentFilterFlags(ret.Int())
	return
}

// gtk_recent_filter_set_name
//
// [ name ] trans: nothing
//
func (v RecentFilter) SetName(name string) {
	iv, err := _I.Get(2099, "RecentFilter", "set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Flags RecentFilterFlags
type RecentFilterFlags int

const (
	RecentFilterFlagsUri         RecentFilterFlags = 1
	RecentFilterFlagsDisplayName RecentFilterFlags = 2
	RecentFilterFlagsMimeType    RecentFilterFlags = 4
	RecentFilterFlagsApplication RecentFilterFlags = 8
	RecentFilterFlagsGroup       RecentFilterFlags = 16
	RecentFilterFlagsAge         RecentFilterFlags = 32
)

func RecentFilterFlagsGetType() gi.GType {
	ret := _I.GetGType(438, "RecentFilterFlags")
	return ret
}

type RecentFilterFuncStruct struct {
	F_filter_info RecentFilterInfo
}

func GetPointer_myRecentFilterFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkRecentFilterFunc())
}

//export myGtkRecentFilterFunc
func myGtkRecentFilterFunc(filter_info *C.GtkRecentFilterInfo, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &RecentFilterFuncStruct{
		F_filter_info: RecentFilterInfo{P: unsafe.Pointer(filter_info)},
	}
	fn(args)
}

// Struct RecentFilterInfo
type RecentFilterInfo struct {
	P unsafe.Pointer
}

const SizeOfStructRecentFilterInfo = 56

func RecentFilterInfoGetType() gi.GType {
	ret := _I.GetGType(439, "RecentFilterInfo")
	return ret
}

// Struct RecentInfo
type RecentInfo struct {
	P unsafe.Pointer
}

func RecentInfoGetType() gi.GType {
	ret := _I.GetGType(440, "RecentInfo")
	return ret
}

// gtk_recent_info_create_app_info
//
// [ app_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v RecentInfo) CreateAppInfo(app_name string) (result g.AppInfo, err error) {
	iv, err := _I.Get(2100, "RecentInfo", "create_app_info")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_app_name := gi.CString(app_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_app_name := gi.NewStringArgument(c_app_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_app_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_app_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_recent_info_exists
//
// [ result ] trans: nothing
//
func (v RecentInfo) Exists() (result bool) {
	iv, err := _I.Get(2101, "RecentInfo", "exists")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_info_get_added
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetAdded() (result int64) {
	iv, err := _I.Get(2102, "RecentInfo", "get_added")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// gtk_recent_info_get_age
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetAge() (result int32) {
	iv, err := _I.Get(2103, "RecentInfo", "get_age")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_recent_info_get_application_info
//
// [ app_name ] trans: nothing
//
// [ app_exec ] trans: nothing, dir: out
//
// [ count ] trans: everything, dir: out
//
// [ time_ ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetApplicationInfo(app_name string) (result bool, app_exec string, count uint32, time_ int64) {
	iv, err := _I.Get(2104, "RecentInfo", "get_application_info")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	c_app_name := gi.CString(app_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_app_name := gi.NewStringArgument(c_app_name)
	arg_app_exec := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_count := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_time_ := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_app_name, arg_app_exec, arg_count, arg_time_}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_app_name)
	app_exec = outArgs[0].String().Copy()
	count = outArgs[1].Uint32()
	time_ = outArgs[2].Int64()
	result = ret.Bool()
	return
}

// gtk_recent_info_get_applications
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v RecentInfo) GetApplications() (result gi.CStrArray) {
	iv, err := _I.Get(2105, "RecentInfo", "get_applications")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	length = outArgs[0].Uint64()
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_recent_info_get_description
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetDescription() (result string) {
	iv, err := _I.Get(2106, "RecentInfo", "get_description")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_recent_info_get_display_name
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetDisplayName() (result string) {
	iv, err := _I.Get(2107, "RecentInfo", "get_display_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_recent_info_get_gicon
//
// [ result ] trans: everything
//
func (v RecentInfo) GetGicon() (result g.Icon) {
	iv, err := _I.Get(2108, "RecentInfo", "get_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_info_get_groups
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v RecentInfo) GetGroups() (result gi.CStrArray) {
	iv, err := _I.Get(2109, "RecentInfo", "get_groups")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	length = outArgs[0].Uint64()
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_recent_info_get_icon
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func (v RecentInfo) GetIcon(size int32) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(2110, "RecentInfo", "get_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_info_get_mime_type
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetMimeType() (result string) {
	iv, err := _I.Get(2111, "RecentInfo", "get_mime_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_recent_info_get_modified
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetModified() (result int64) {
	iv, err := _I.Get(2112, "RecentInfo", "get_modified")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// gtk_recent_info_get_private_hint
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetPrivateHint() (result bool) {
	iv, err := _I.Get(2113, "RecentInfo", "get_private_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_info_get_short_name
//
// [ result ] trans: everything
//
func (v RecentInfo) GetShortName() (result string) {
	iv, err := _I.Get(2114, "RecentInfo", "get_short_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_recent_info_get_uri
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetUri() (result string) {
	iv, err := _I.Get(2115, "RecentInfo", "get_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_recent_info_get_uri_display
//
// [ result ] trans: everything
//
func (v RecentInfo) GetUriDisplay() (result string) {
	iv, err := _I.Get(2116, "RecentInfo", "get_uri_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_recent_info_get_visited
//
// [ result ] trans: nothing
//
func (v RecentInfo) GetVisited() (result int64) {
	iv, err := _I.Get(2117, "RecentInfo", "get_visited")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// gtk_recent_info_has_application
//
// [ app_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentInfo) HasApplication(app_name string) (result bool) {
	iv, err := _I.Get(2118, "RecentInfo", "has_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_app_name := gi.CString(app_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_app_name := gi.NewStringArgument(c_app_name)
	args := []gi.Argument{arg_v, arg_app_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_app_name)
	result = ret.Bool()
	return
}

// gtk_recent_info_has_group
//
// [ group_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentInfo) HasGroup(group_name string) (result bool) {
	iv, err := _I.Get(2119, "RecentInfo", "has_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group_name := gi.CString(group_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_name := gi.NewStringArgument(c_group_name)
	args := []gi.Argument{arg_v, arg_group_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_group_name)
	result = ret.Bool()
	return
}

// gtk_recent_info_is_local
//
// [ result ] trans: nothing
//
func (v RecentInfo) IsLocal() (result bool) {
	iv, err := _I.Get(2120, "RecentInfo", "is_local")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_info_last_application
//
// [ result ] trans: everything
//
func (v RecentInfo) LastApplication() (result string) {
	iv, err := _I.Get(2121, "RecentInfo", "last_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_recent_info_match
//
// [ info_b ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentInfo) Match(info_b RecentInfo) (result bool) {
	iv, err := _I.Get(2122, "RecentInfo", "match")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info_b := gi.NewPointerArgument(info_b.P)
	args := []gi.Argument{arg_v, arg_info_b}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_recent_info_ref
//
// [ result ] trans: everything
//
func (v RecentInfo) Ref() (result RecentInfo) {
	iv, err := _I.Get(2123, "RecentInfo", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_info_unref
//
func (v RecentInfo) Unref() {
	iv, err := _I.Get(2124, "RecentInfo", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object RecentManager
type RecentManager struct {
	g.Object
}

func WrapRecentManager(p unsafe.Pointer) (r RecentManager) { r.P = p; return }

type IRecentManager interface{ P_RecentManager() unsafe.Pointer }

func (v RecentManager) P_RecentManager() unsafe.Pointer { return v.P }
func RecentManagerGetType() gi.GType {
	ret := _I.GetGType(441, "RecentManager")
	return ret
}

// gtk_recent_manager_new
//
// [ result ] trans: everything
//
func NewRecentManager() (result RecentManager) {
	iv, err := _I.Get(2125, "RecentManager", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_manager_add_full
//
// [ uri ] trans: nothing
//
// [ recent_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentManager) AddFull(uri string, recent_data RecentData) (result bool) {
	iv, err := _I.Get(2127, "RecentManager", "add_full")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_recent_data := gi.NewPointerArgument(recent_data.P)
	args := []gi.Argument{arg_v, arg_uri, arg_recent_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_recent_manager_add_item
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentManager) AddItem(uri string) (result bool) {
	iv, err := _I.Get(2128, "RecentManager", "add_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_recent_manager_get_items
//
// [ result ] trans: everything
//
func (v RecentManager) GetItems() (result g.List) {
	iv, err := _I.Get(2129, "RecentManager", "get_items")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_recent_manager_has_item
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentManager) HasItem(uri string) (result bool) {
	iv, err := _I.Get(2130, "RecentManager", "has_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result = ret.Bool()
	return
}

// gtk_recent_manager_lookup_item
//
// [ uri ] trans: nothing
//
// [ result ] trans: everything
//
func (v RecentManager) LookupItem(uri string) (result RecentInfo, err error) {
	iv, err := _I.Get(2131, "RecentManager", "lookup_item")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// gtk_recent_manager_move_item
//
// [ uri ] trans: nothing
//
// [ new_uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentManager) MoveItem(uri string, new_uri string) (result bool, err error) {
	iv, err := _I.Get(2132, "RecentManager", "move_item")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	c_new_uri := gi.CString(new_uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_new_uri := gi.NewStringArgument(c_new_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_new_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	gi.Free(c_new_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_recent_manager_purge_items
//
// [ result ] trans: nothing
//
func (v RecentManager) PurgeItems() (result int32, err error) {
	iv, err := _I.Get(2133, "RecentManager", "purge_items")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// gtk_recent_manager_remove_item
//
// [ uri ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RecentManager) RemoveItem(uri string) (result bool, err error) {
	iv, err := _I.Get(2134, "RecentManager", "remove_item")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct RecentManagerClass

// Enum RecentManagerError
type RecentManagerErrorEnum int

const (
	RecentManagerErrorNotFound        RecentManagerErrorEnum = 0
	RecentManagerErrorInvalidUri      RecentManagerErrorEnum = 1
	RecentManagerErrorInvalidEncoding RecentManagerErrorEnum = 2
	RecentManagerErrorNotRegistered   RecentManagerErrorEnum = 3
	RecentManagerErrorRead            RecentManagerErrorEnum = 4
	RecentManagerErrorWrite           RecentManagerErrorEnum = 5
	RecentManagerErrorUnknown         RecentManagerErrorEnum = 6
)

func RecentManagerErrorGetType() gi.GType {
	ret := _I.GetGType(442, "RecentManagerError")
	return ret
}

// Struct RecentManagerPrivate
type RecentManagerPrivate struct {
	P unsafe.Pointer
}

func RecentManagerPrivateGetType() gi.GType {
	ret := _I.GetGType(443, "RecentManagerPrivate")
	return ret
}

type RecentSortFuncStruct struct {
	F_a RecentInfo
	F_b RecentInfo
}

func GetPointer_myRecentSortFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkRecentSortFunc())
}

//export myGtkRecentSortFunc
func myGtkRecentSortFunc(a *C.GtkRecentInfo, b *C.GtkRecentInfo, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &RecentSortFuncStruct{
		F_a: RecentInfo{P: unsafe.Pointer(a)},
		F_b: RecentInfo{P: unsafe.Pointer(b)},
	}
	fn(args)
}

// Enum RecentSortType
type RecentSortTypeEnum int

const (
	RecentSortTypeNone   RecentSortTypeEnum = 0
	RecentSortTypeMru    RecentSortTypeEnum = 1
	RecentSortTypeLru    RecentSortTypeEnum = 2
	RecentSortTypeCustom RecentSortTypeEnum = 3
)

func RecentSortTypeGetType() gi.GType {
	ret := _I.GetGType(444, "RecentSortType")
	return ret
}

// Flags RegionFlags
type RegionFlags int

const (
	RegionFlagsEven   RegionFlags = 1
	RegionFlagsOdd    RegionFlags = 2
	RegionFlagsFirst  RegionFlags = 4
	RegionFlagsLast   RegionFlags = 8
	RegionFlagsOnly   RegionFlags = 16
	RegionFlagsSorted RegionFlags = 32
)

func RegionFlagsGetType() gi.GType {
	ret := _I.GetGType(445, "RegionFlags")
	return ret
}

// Enum ReliefStyle
type ReliefStyleEnum int

const (
	ReliefStyleNormal ReliefStyleEnum = 0
	ReliefStyleHalf   ReliefStyleEnum = 1
	ReliefStyleNone   ReliefStyleEnum = 2
)

func ReliefStyleGetType() gi.GType {
	ret := _I.GetGType(446, "ReliefStyle")
	return ret
}

// Object RendererCellAccessible
type RendererCellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.TableCellIfc
	CellAccessible
}

func WrapRendererCellAccessible(p unsafe.Pointer) (r RendererCellAccessible) { r.P = p; return }

type IRendererCellAccessible interface{ P_RendererCellAccessible() unsafe.Pointer }

func (v RendererCellAccessible) P_RendererCellAccessible() unsafe.Pointer { return v.P }
func (v RendererCellAccessible) P_Action() unsafe.Pointer                 { return v.P }
func (v RendererCellAccessible) P_Component() unsafe.Pointer              { return v.P }
func (v RendererCellAccessible) P_TableCell() unsafe.Pointer              { return v.P }
func RendererCellAccessibleGetType() gi.GType {
	ret := _I.GetGType(447, "RendererCellAccessible")
	return ret
}

// gtk_renderer_cell_accessible_new
//
// [ renderer ] trans: nothing
//
// [ result ] trans: everything
//
func NewRendererCellAccessible(renderer ICellRenderer) (result RendererCellAccessible) {
	iv, err := _I.Get(2135, "RendererCellAccessible", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if renderer != nil {
		tmp = renderer.P_CellRenderer()
	}
	arg_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_renderer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct RendererCellAccessibleClass

// Struct RendererCellAccessiblePrivate
type RendererCellAccessiblePrivate struct {
	P unsafe.Pointer
}

func RendererCellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(448, "RendererCellAccessiblePrivate")
	return ret
}

// Struct RequestedSize
type RequestedSize struct {
	P unsafe.Pointer
}

const SizeOfStructRequestedSize = 16

func RequestedSizeGetType() gi.GType {
	ret := _I.GetGType(449, "RequestedSize")
	return ret
}

// Struct Requisition
type Requisition struct {
	P unsafe.Pointer
}

const SizeOfStructRequisition = 8

func RequisitionGetType() gi.GType {
	ret := _I.GetGType(450, "Requisition")
	return ret
}

// gtk_requisition_new
//
// [ result ] trans: everything
//
func NewRequisition() (result Requisition) {
	iv, err := _I.Get(2136, "Requisition", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_requisition_copy
//
// [ result ] trans: everything
//
func (v Requisition) Copy() (result Requisition) {
	iv, err := _I.Get(2137, "Requisition", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_requisition_free
//
func (v Requisition) Free() {
	iv, err := _I.Get(2138, "Requisition", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum ResizeMode
type ResizeModeEnum int

const (
	ResizeModeParent    ResizeModeEnum = 0
	ResizeModeQueue     ResizeModeEnum = 1
	ResizeModeImmediate ResizeModeEnum = 2
)

func ResizeModeGetType() gi.GType {
	ret := _I.GetGType(451, "ResizeMode")
	return ret
}

// Enum ResponseType
type ResponseTypeEnum int

const (
	ResponseTypeNone        ResponseTypeEnum = -1
	ResponseTypeReject      ResponseTypeEnum = -2
	ResponseTypeAccept      ResponseTypeEnum = -3
	ResponseTypeDeleteEvent ResponseTypeEnum = -4
	ResponseTypeOk          ResponseTypeEnum = -5
	ResponseTypeCancel      ResponseTypeEnum = -6
	ResponseTypeClose       ResponseTypeEnum = -7
	ResponseTypeYes         ResponseTypeEnum = -8
	ResponseTypeNo          ResponseTypeEnum = -9
	ResponseTypeApply       ResponseTypeEnum = -10
	ResponseTypeHelp        ResponseTypeEnum = -11
)

func ResponseTypeGetType() gi.GType {
	ret := _I.GetGType(452, "ResponseType")
	return ret
}

// Object Revealer
type Revealer struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapRevealer(p unsafe.Pointer) (r Revealer) { r.P = p; return }

type IRevealer interface{ P_Revealer() unsafe.Pointer }

func (v Revealer) P_Revealer() unsafe.Pointer         { return v.P }
func (v Revealer) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Revealer) P_Buildable() unsafe.Pointer        { return v.P }
func RevealerGetType() gi.GType {
	ret := _I.GetGType(453, "Revealer")
	return ret
}

// gtk_revealer_new
//
// [ result ] trans: nothing
//
func NewRevealer() (result Revealer) {
	iv, err := _I.Get(2139, "Revealer", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_revealer_get_child_revealed
//
// [ result ] trans: nothing
//
func (v Revealer) GetChildRevealed() (result bool) {
	iv, err := _I.Get(2140, "Revealer", "get_child_revealed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_revealer_get_reveal_child
//
// [ result ] trans: nothing
//
func (v Revealer) GetRevealChild() (result bool) {
	iv, err := _I.Get(2141, "Revealer", "get_reveal_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_revealer_get_transition_duration
//
// [ result ] trans: nothing
//
func (v Revealer) GetTransitionDuration() (result uint32) {
	iv, err := _I.Get(2142, "Revealer", "get_transition_duration")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_revealer_get_transition_type
//
// [ result ] trans: nothing
//
func (v Revealer) GetTransitionType() (result RevealerTransitionTypeEnum) {
	iv, err := _I.Get(2143, "Revealer", "get_transition_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = RevealerTransitionTypeEnum(ret.Int())
	return
}

// gtk_revealer_set_reveal_child
//
// [ reveal_child ] trans: nothing
//
func (v Revealer) SetRevealChild(reveal_child bool) {
	iv, err := _I.Get(2144, "Revealer", "set_reveal_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reveal_child := gi.NewBoolArgument(reveal_child)
	args := []gi.Argument{arg_v, arg_reveal_child}
	iv.Call(args, nil, nil)
}

// gtk_revealer_set_transition_duration
//
// [ duration ] trans: nothing
//
func (v Revealer) SetTransitionDuration(duration uint32) {
	iv, err := _I.Get(2145, "Revealer", "set_transition_duration")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_duration := gi.NewUint32Argument(duration)
	args := []gi.Argument{arg_v, arg_duration}
	iv.Call(args, nil, nil)
}

// gtk_revealer_set_transition_type
//
// [ transition ] trans: nothing
//
func (v Revealer) SetTransitionType(transition RevealerTransitionTypeEnum) {
	iv, err := _I.Get(2146, "Revealer", "set_transition_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_transition := gi.NewIntArgument(int(transition))
	args := []gi.Argument{arg_v, arg_transition}
	iv.Call(args, nil, nil)
}

// ignore GType struct RevealerClass

// Enum RevealerTransitionType
type RevealerTransitionTypeEnum int

const (
	RevealerTransitionTypeNone       RevealerTransitionTypeEnum = 0
	RevealerTransitionTypeCrossfade  RevealerTransitionTypeEnum = 1
	RevealerTransitionTypeSlideRight RevealerTransitionTypeEnum = 2
	RevealerTransitionTypeSlideLeft  RevealerTransitionTypeEnum = 3
	RevealerTransitionTypeSlideUp    RevealerTransitionTypeEnum = 4
	RevealerTransitionTypeSlideDown  RevealerTransitionTypeEnum = 5
)

func RevealerTransitionTypeGetType() gi.GType {
	ret := _I.GetGType(454, "RevealerTransitionType")
	return ret
}

// Object Scale
type Scale struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Range
}

func WrapScale(p unsafe.Pointer) (r Scale) { r.P = p; return }

type IScale interface{ P_Scale() unsafe.Pointer }

func (v Scale) P_Scale() unsafe.Pointer            { return v.P }
func (v Scale) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Scale) P_Buildable() unsafe.Pointer        { return v.P }
func (v Scale) P_Orientable() unsafe.Pointer       { return v.P }
func ScaleGetType() gi.GType {
	ret := _I.GetGType(455, "Scale")
	return ret
}

// gtk_scale_new
//
// [ orientation ] trans: nothing
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewScale(orientation OrientationEnum, adjustment IAdjustment) (result Scale) {
	iv, err := _I.Get(2147, "Scale", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_orientation, arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_new_with_range
//
// [ orientation ] trans: nothing
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
// [ step ] trans: nothing
//
// [ result ] trans: nothing
//
func NewScaleWithRange(orientation OrientationEnum, min float64, max float64, step float64) (result Scale) {
	iv, err := _I.Get(2148, "Scale", "new_with_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	arg_step := gi.NewDoubleArgument(step)
	args := []gi.Argument{arg_orientation, arg_min, arg_max, arg_step}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_add_mark
//
// [ value ] trans: nothing
//
// [ position ] trans: nothing
//
// [ markup ] trans: nothing
//
func (v Scale) AddMark(value float64, position PositionTypeEnum, markup string) {
	iv, err := _I.Get(2149, "Scale", "add_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	arg_position := gi.NewIntArgument(int(position))
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_value, arg_position, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_scale_clear_marks
//
func (v Scale) ClearMarks() {
	iv, err := _I.Get(2150, "Scale", "clear_marks")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_scale_get_digits
//
// [ result ] trans: nothing
//
func (v Scale) GetDigits() (result int32) {
	iv, err := _I.Get(2151, "Scale", "get_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_scale_get_draw_value
//
// [ result ] trans: nothing
//
func (v Scale) GetDrawValue() (result bool) {
	iv, err := _I.Get(2152, "Scale", "get_draw_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scale_get_has_origin
//
// [ result ] trans: nothing
//
func (v Scale) GetHasOrigin() (result bool) {
	iv, err := _I.Get(2153, "Scale", "get_has_origin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scale_get_layout
//
// [ result ] trans: nothing
//
func (v Scale) GetLayout() (result pango.Layout) {
	iv, err := _I.Get(2154, "Scale", "get_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_get_layout_offsets
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
func (v Scale) GetLayoutOffsets() (x int32, y int32) {
	iv, err := _I.Get(2155, "Scale", "get_layout_offsets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	iv.Call(args, nil, &outArgs[0])
	x = outArgs[0].Int32()
	y = outArgs[1].Int32()
	return
}

// gtk_scale_get_value_pos
//
// [ result ] trans: nothing
//
func (v Scale) GetValuePos() (result PositionTypeEnum) {
	iv, err := _I.Get(2156, "Scale", "get_value_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PositionTypeEnum(ret.Int())
	return
}

// gtk_scale_set_digits
//
// [ digits ] trans: nothing
//
func (v Scale) SetDigits(digits int32) {
	iv, err := _I.Get(2157, "Scale", "set_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_digits := gi.NewInt32Argument(digits)
	args := []gi.Argument{arg_v, arg_digits}
	iv.Call(args, nil, nil)
}

// gtk_scale_set_draw_value
//
// [ draw_value ] trans: nothing
//
func (v Scale) SetDrawValue(draw_value bool) {
	iv, err := _I.Get(2158, "Scale", "set_draw_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw_value := gi.NewBoolArgument(draw_value)
	args := []gi.Argument{arg_v, arg_draw_value}
	iv.Call(args, nil, nil)
}

// gtk_scale_set_has_origin
//
// [ has_origin ] trans: nothing
//
func (v Scale) SetHasOrigin(has_origin bool) {
	iv, err := _I.Get(2159, "Scale", "set_has_origin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_origin := gi.NewBoolArgument(has_origin)
	args := []gi.Argument{arg_v, arg_has_origin}
	iv.Call(args, nil, nil)
}

// gtk_scale_set_value_pos
//
// [ pos ] trans: nothing
//
func (v Scale) SetValuePos(pos PositionTypeEnum) {
	iv, err := _I.Get(2160, "Scale", "set_value_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewIntArgument(int(pos))
	args := []gi.Argument{arg_v, arg_pos}
	iv.Call(args, nil, nil)
}

// Object ScaleAccessible
type ScaleAccessible struct {
	atk.ComponentIfc
	atk.ValueIfc
	RangeAccessible
}

func WrapScaleAccessible(p unsafe.Pointer) (r ScaleAccessible) { r.P = p; return }

type IScaleAccessible interface{ P_ScaleAccessible() unsafe.Pointer }

func (v ScaleAccessible) P_ScaleAccessible() unsafe.Pointer { return v.P }
func (v ScaleAccessible) P_Component() unsafe.Pointer       { return v.P }
func (v ScaleAccessible) P_Value() unsafe.Pointer           { return v.P }
func ScaleAccessibleGetType() gi.GType {
	ret := _I.GetGType(456, "ScaleAccessible")
	return ret
}

// ignore GType struct ScaleAccessibleClass

// Struct ScaleAccessiblePrivate
type ScaleAccessiblePrivate struct {
	P unsafe.Pointer
}

func ScaleAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(457, "ScaleAccessiblePrivate")
	return ret
}

// Object ScaleButton
type ScaleButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	OrientableIfc
	Button
}

func WrapScaleButton(p unsafe.Pointer) (r ScaleButton) { r.P = p; return }

type IScaleButton interface{ P_ScaleButton() unsafe.Pointer }

func (v ScaleButton) P_ScaleButton() unsafe.Pointer      { return v.P }
func (v ScaleButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ScaleButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ScaleButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ScaleButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v ScaleButton) P_Orientable() unsafe.Pointer       { return v.P }
func ScaleButtonGetType() gi.GType {
	ret := _I.GetGType(458, "ScaleButton")
	return ret
}

// gtk_scale_button_new
//
// [ size ] trans: nothing
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
// [ step ] trans: nothing
//
// [ icons ] trans: nothing
//
// [ result ] trans: nothing
//
func NewScaleButton(size int32, min float64, max float64, step float64, icons gi.CStrArray) (result ScaleButton) {
	iv, err := _I.Get(2161, "ScaleButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_size := gi.NewInt32Argument(size)
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	arg_step := gi.NewDoubleArgument(step)
	arg_icons := gi.NewPointerArgument(icons.P)
	args := []gi.Argument{arg_size, arg_min, arg_max, arg_step, arg_icons}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_button_get_adjustment
//
// [ result ] trans: nothing
//
func (v ScaleButton) GetAdjustment() (result Adjustment) {
	iv, err := _I.Get(2162, "ScaleButton", "get_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_button_get_minus_button
//
// [ result ] trans: nothing
//
func (v ScaleButton) GetMinusButton() (result Button) {
	iv, err := _I.Get(2163, "ScaleButton", "get_minus_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_button_get_plus_button
//
// [ result ] trans: nothing
//
func (v ScaleButton) GetPlusButton() (result Button) {
	iv, err := _I.Get(2164, "ScaleButton", "get_plus_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_button_get_popup
//
// [ result ] trans: nothing
//
func (v ScaleButton) GetPopup() (result Widget) {
	iv, err := _I.Get(2165, "ScaleButton", "get_popup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scale_button_get_value
//
// [ result ] trans: nothing
//
func (v ScaleButton) GetValue() (result float64) {
	iv, err := _I.Get(2166, "ScaleButton", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_scale_button_set_adjustment
//
// [ adjustment ] trans: nothing
//
func (v ScaleButton) SetAdjustment(adjustment IAdjustment) {
	iv, err := _I.Get(2167, "ScaleButton", "set_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_scale_button_set_icons
//
// [ icons ] trans: nothing
//
func (v ScaleButton) SetIcons(icons gi.CStrArray) {
	iv, err := _I.Get(2168, "ScaleButton", "set_icons")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icons := gi.NewPointerArgument(icons.P)
	args := []gi.Argument{arg_v, arg_icons}
	iv.Call(args, nil, nil)
}

// gtk_scale_button_set_value
//
// [ value ] trans: nothing
//
func (v ScaleButton) SetValue(value float64) {
	iv, err := _I.Get(2169, "ScaleButton", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// Object ScaleButtonAccessible
type ScaleButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	atk.ValueIfc
	ButtonAccessible
}

func WrapScaleButtonAccessible(p unsafe.Pointer) (r ScaleButtonAccessible) { r.P = p; return }

type IScaleButtonAccessible interface{ P_ScaleButtonAccessible() unsafe.Pointer }

func (v ScaleButtonAccessible) P_ScaleButtonAccessible() unsafe.Pointer { return v.P }
func (v ScaleButtonAccessible) P_Action() unsafe.Pointer                { return v.P }
func (v ScaleButtonAccessible) P_Component() unsafe.Pointer             { return v.P }
func (v ScaleButtonAccessible) P_Image() unsafe.Pointer                 { return v.P }
func (v ScaleButtonAccessible) P_Value() unsafe.Pointer                 { return v.P }
func ScaleButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(459, "ScaleButtonAccessible")
	return ret
}

// ignore GType struct ScaleButtonAccessibleClass

// Struct ScaleButtonAccessiblePrivate
type ScaleButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func ScaleButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(460, "ScaleButtonAccessiblePrivate")
	return ret
}

// ignore GType struct ScaleButtonClass

// Struct ScaleButtonPrivate
type ScaleButtonPrivate struct {
	P unsafe.Pointer
}

func ScaleButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(461, "ScaleButtonPrivate")
	return ret
}

// ignore GType struct ScaleClass

// Struct ScalePrivate
type ScalePrivate struct {
	P unsafe.Pointer
}

func ScalePrivateGetType() gi.GType {
	ret := _I.GetGType(462, "ScalePrivate")
	return ret
}

// Enum ScrollStep
type ScrollStepEnum int

const (
	ScrollStepSteps           ScrollStepEnum = 0
	ScrollStepPages           ScrollStepEnum = 1
	ScrollStepEnds            ScrollStepEnum = 2
	ScrollStepHorizontalSteps ScrollStepEnum = 3
	ScrollStepHorizontalPages ScrollStepEnum = 4
	ScrollStepHorizontalEnds  ScrollStepEnum = 5
)

func ScrollStepGetType() gi.GType {
	ret := _I.GetGType(463, "ScrollStep")
	return ret
}

// Enum ScrollType
type ScrollTypeEnum int

const (
	ScrollTypeNone         ScrollTypeEnum = 0
	ScrollTypeJump         ScrollTypeEnum = 1
	ScrollTypeStepBackward ScrollTypeEnum = 2
	ScrollTypeStepForward  ScrollTypeEnum = 3
	ScrollTypePageBackward ScrollTypeEnum = 4
	ScrollTypePageForward  ScrollTypeEnum = 5
	ScrollTypeStepUp       ScrollTypeEnum = 6
	ScrollTypeStepDown     ScrollTypeEnum = 7
	ScrollTypePageUp       ScrollTypeEnum = 8
	ScrollTypePageDown     ScrollTypeEnum = 9
	ScrollTypeStepLeft     ScrollTypeEnum = 10
	ScrollTypeStepRight    ScrollTypeEnum = 11
	ScrollTypePageLeft     ScrollTypeEnum = 12
	ScrollTypePageRight    ScrollTypeEnum = 13
	ScrollTypeStart        ScrollTypeEnum = 14
	ScrollTypeEnd          ScrollTypeEnum = 15
)

func ScrollTypeGetType() gi.GType {
	ret := _I.GetGType(464, "ScrollType")
	return ret
}

// Interface Scrollable
type Scrollable struct {
	ScrollableIfc
	P unsafe.Pointer
}
type ScrollableIfc struct{}
type IScrollable interface{ P_Scrollable() unsafe.Pointer }

func (v Scrollable) P_Scrollable() unsafe.Pointer { return v.P }
func ScrollableGetType() gi.GType {
	ret := _I.GetGType(465, "Scrollable")
	return ret
}

// gtk_scrollable_get_border
//
// [ border ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v *ScrollableIfc) GetBorder(border Border) (result bool) {
	iv, err := _I.Get(2170, "Scrollable", "get_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_border := gi.NewPointerArgument(border.P)
	args := []gi.Argument{arg_v, arg_border}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrollable_get_hadjustment
//
// [ result ] trans: nothing
//
func (v *ScrollableIfc) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(2171, "Scrollable", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrollable_get_hscroll_policy
//
// [ result ] trans: nothing
//
func (v *ScrollableIfc) GetHscrollPolicy() (result ScrollablePolicyEnum) {
	iv, err := _I.Get(2172, "Scrollable", "get_hscroll_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ScrollablePolicyEnum(ret.Int())
	return
}

// gtk_scrollable_get_vadjustment
//
// [ result ] trans: nothing
//
func (v *ScrollableIfc) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(2173, "Scrollable", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrollable_get_vscroll_policy
//
// [ result ] trans: nothing
//
func (v *ScrollableIfc) GetVscrollPolicy() (result ScrollablePolicyEnum) {
	iv, err := _I.Get(2174, "Scrollable", "get_vscroll_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ScrollablePolicyEnum(ret.Int())
	return
}

// gtk_scrollable_set_hadjustment
//
// [ hadjustment ] trans: nothing
//
func (v *ScrollableIfc) SetHadjustment(hadjustment IAdjustment) {
	iv, err := _I.Get(2175, "Scrollable", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if hadjustment != nil {
		tmp = hadjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_hadjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_hadjustment}
	iv.Call(args, nil, nil)
}

// gtk_scrollable_set_hscroll_policy
//
// [ policy ] trans: nothing
//
func (v *ScrollableIfc) SetHscrollPolicy(policy ScrollablePolicyEnum) {
	iv, err := _I.Get(2176, "Scrollable", "set_hscroll_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_policy := gi.NewIntArgument(int(policy))
	args := []gi.Argument{arg_v, arg_policy}
	iv.Call(args, nil, nil)
}

// gtk_scrollable_set_vadjustment
//
// [ vadjustment ] trans: nothing
//
func (v *ScrollableIfc) SetVadjustment(vadjustment IAdjustment) {
	iv, err := _I.Get(2177, "Scrollable", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if vadjustment != nil {
		tmp = vadjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_vadjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_vadjustment}
	iv.Call(args, nil, nil)
}

// gtk_scrollable_set_vscroll_policy
//
// [ policy ] trans: nothing
//
func (v *ScrollableIfc) SetVscrollPolicy(policy ScrollablePolicyEnum) {
	iv, err := _I.Get(2178, "Scrollable", "set_vscroll_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_policy := gi.NewIntArgument(int(policy))
	args := []gi.Argument{arg_v, arg_policy}
	iv.Call(args, nil, nil)
}

// ignore GType struct ScrollableInterface

// Enum ScrollablePolicy
type ScrollablePolicyEnum int

const (
	ScrollablePolicyMinimum ScrollablePolicyEnum = 0
	ScrollablePolicyNatural ScrollablePolicyEnum = 1
)

func ScrollablePolicyGetType() gi.GType {
	ret := _I.GetGType(466, "ScrollablePolicy")
	return ret
}

// Object Scrollbar
type Scrollbar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Range
}

func WrapScrollbar(p unsafe.Pointer) (r Scrollbar) { r.P = p; return }

type IScrollbar interface{ P_Scrollbar() unsafe.Pointer }

func (v Scrollbar) P_Scrollbar() unsafe.Pointer        { return v.P }
func (v Scrollbar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Scrollbar) P_Buildable() unsafe.Pointer        { return v.P }
func (v Scrollbar) P_Orientable() unsafe.Pointer       { return v.P }
func ScrollbarGetType() gi.GType {
	ret := _I.GetGType(467, "Scrollbar")
	return ret
}

// gtk_scrollbar_new
//
// [ orientation ] trans: nothing
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewScrollbar(orientation OrientationEnum, adjustment IAdjustment) (result Scrollbar) {
	iv, err := _I.Get(2179, "Scrollbar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_orientation, arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ScrollbarClass

// Object ScrolledWindow
type ScrolledWindow struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapScrolledWindow(p unsafe.Pointer) (r ScrolledWindow) { r.P = p; return }

type IScrolledWindow interface{ P_ScrolledWindow() unsafe.Pointer }

func (v ScrolledWindow) P_ScrolledWindow() unsafe.Pointer   { return v.P }
func (v ScrolledWindow) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ScrolledWindow) P_Buildable() unsafe.Pointer        { return v.P }
func ScrolledWindowGetType() gi.GType {
	ret := _I.GetGType(468, "ScrolledWindow")
	return ret
}

// gtk_scrolled_window_new
//
// [ hadjustment ] trans: nothing
//
// [ vadjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewScrolledWindow(hadjustment IAdjustment, vadjustment IAdjustment) (result ScrolledWindow) {
	iv, err := _I.Get(2180, "ScrolledWindow", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if hadjustment != nil {
		tmp = hadjustment.P_Adjustment()
	}
	var tmp1 unsafe.Pointer
	if vadjustment != nil {
		tmp1 = vadjustment.P_Adjustment()
	}
	arg_hadjustment := gi.NewPointerArgument(tmp)
	arg_vadjustment := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_hadjustment, arg_vadjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_scrolled_window_add_with_viewport
//
// [ child ] trans: nothing
//
func (v ScrolledWindow) AddWithViewport(child IWidget) {
	iv, err := _I.Get(2181, "ScrolledWindow", "add_with_viewport")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_get_capture_button_press
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetCaptureButtonPress() (result bool) {
	iv, err := _I.Get(2182, "ScrolledWindow", "get_capture_button_press")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrolled_window_get_hadjustment
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(2183, "ScrolledWindow", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrolled_window_get_hscrollbar
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetHscrollbar() (result Widget) {
	iv, err := _I.Get(2184, "ScrolledWindow", "get_hscrollbar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrolled_window_get_kinetic_scrolling
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetKineticScrolling() (result bool) {
	iv, err := _I.Get(2185, "ScrolledWindow", "get_kinetic_scrolling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrolled_window_get_max_content_height
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetMaxContentHeight() (result int32) {
	iv, err := _I.Get(2186, "ScrolledWindow", "get_max_content_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_scrolled_window_get_max_content_width
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetMaxContentWidth() (result int32) {
	iv, err := _I.Get(2187, "ScrolledWindow", "get_max_content_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_scrolled_window_get_min_content_height
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetMinContentHeight() (result int32) {
	iv, err := _I.Get(2188, "ScrolledWindow", "get_min_content_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_scrolled_window_get_min_content_width
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetMinContentWidth() (result int32) {
	iv, err := _I.Get(2189, "ScrolledWindow", "get_min_content_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_scrolled_window_get_overlay_scrolling
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetOverlayScrolling() (result bool) {
	iv, err := _I.Get(2190, "ScrolledWindow", "get_overlay_scrolling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrolled_window_get_placement
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetPlacement() (result CornerTypeEnum) {
	iv, err := _I.Get(2191, "ScrolledWindow", "get_placement")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = CornerTypeEnum(ret.Int())
	return
}

// gtk_scrolled_window_get_policy
//
// [ hscrollbar_policy ] trans: everything, dir: out
//
// [ vscrollbar_policy ] trans: everything, dir: out
//
func (v ScrolledWindow) GetPolicy() (hscrollbar_policy PolicyTypeEnum, vscrollbar_policy PolicyTypeEnum) {
	iv, err := _I.Get(2192, "ScrolledWindow", "get_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_hscrollbar_policy := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_vscrollbar_policy := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_hscrollbar_policy, arg_vscrollbar_policy}
	iv.Call(args, nil, &outArgs[0])
	hscrollbar_policy = PolicyTypeEnum(outArgs[0].Int())
	vscrollbar_policy = PolicyTypeEnum(outArgs[1].Int())
	return
}

// gtk_scrolled_window_get_propagate_natural_height
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetPropagateNaturalHeight() (result bool) {
	iv, err := _I.Get(2193, "ScrolledWindow", "get_propagate_natural_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrolled_window_get_propagate_natural_width
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetPropagateNaturalWidth() (result bool) {
	iv, err := _I.Get(2194, "ScrolledWindow", "get_propagate_natural_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_scrolled_window_get_shadow_type
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetShadowType() (result ShadowTypeEnum) {
	iv, err := _I.Get(2195, "ScrolledWindow", "get_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ShadowTypeEnum(ret.Int())
	return
}

// gtk_scrolled_window_get_vadjustment
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(2196, "ScrolledWindow", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrolled_window_get_vscrollbar
//
// [ result ] trans: nothing
//
func (v ScrolledWindow) GetVscrollbar() (result Widget) {
	iv, err := _I.Get(2197, "ScrolledWindow", "get_vscrollbar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_scrolled_window_set_capture_button_press
//
// [ capture_button_press ] trans: nothing
//
func (v ScrolledWindow) SetCaptureButtonPress(capture_button_press bool) {
	iv, err := _I.Get(2198, "ScrolledWindow", "set_capture_button_press")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_capture_button_press := gi.NewBoolArgument(capture_button_press)
	args := []gi.Argument{arg_v, arg_capture_button_press}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_hadjustment
//
// [ hadjustment ] trans: nothing
//
func (v ScrolledWindow) SetHadjustment(hadjustment IAdjustment) {
	iv, err := _I.Get(2199, "ScrolledWindow", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if hadjustment != nil {
		tmp = hadjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hadjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_hadjustment}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_kinetic_scrolling
//
// [ kinetic_scrolling ] trans: nothing
//
func (v ScrolledWindow) SetKineticScrolling(kinetic_scrolling bool) {
	iv, err := _I.Get(2200, "ScrolledWindow", "set_kinetic_scrolling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_kinetic_scrolling := gi.NewBoolArgument(kinetic_scrolling)
	args := []gi.Argument{arg_v, arg_kinetic_scrolling}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_max_content_height
//
// [ height ] trans: nothing
//
func (v ScrolledWindow) SetMaxContentHeight(height int32) {
	iv, err := _I.Get(2201, "ScrolledWindow", "set_max_content_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_max_content_width
//
// [ width ] trans: nothing
//
func (v ScrolledWindow) SetMaxContentWidth(width int32) {
	iv, err := _I.Get(2202, "ScrolledWindow", "set_max_content_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	args := []gi.Argument{arg_v, arg_width}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_min_content_height
//
// [ height ] trans: nothing
//
func (v ScrolledWindow) SetMinContentHeight(height int32) {
	iv, err := _I.Get(2203, "ScrolledWindow", "set_min_content_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_min_content_width
//
// [ width ] trans: nothing
//
func (v ScrolledWindow) SetMinContentWidth(width int32) {
	iv, err := _I.Get(2204, "ScrolledWindow", "set_min_content_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	args := []gi.Argument{arg_v, arg_width}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_overlay_scrolling
//
// [ overlay_scrolling ] trans: nothing
//
func (v ScrolledWindow) SetOverlayScrolling(overlay_scrolling bool) {
	iv, err := _I.Get(2205, "ScrolledWindow", "set_overlay_scrolling")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_overlay_scrolling := gi.NewBoolArgument(overlay_scrolling)
	args := []gi.Argument{arg_v, arg_overlay_scrolling}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_placement
//
// [ window_placement ] trans: nothing
//
func (v ScrolledWindow) SetPlacement(window_placement CornerTypeEnum) {
	iv, err := _I.Get(2206, "ScrolledWindow", "set_placement")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window_placement := gi.NewIntArgument(int(window_placement))
	args := []gi.Argument{arg_v, arg_window_placement}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_policy
//
// [ hscrollbar_policy ] trans: nothing
//
// [ vscrollbar_policy ] trans: nothing
//
func (v ScrolledWindow) SetPolicy(hscrollbar_policy PolicyTypeEnum, vscrollbar_policy PolicyTypeEnum) {
	iv, err := _I.Get(2207, "ScrolledWindow", "set_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hscrollbar_policy := gi.NewIntArgument(int(hscrollbar_policy))
	arg_vscrollbar_policy := gi.NewIntArgument(int(vscrollbar_policy))
	args := []gi.Argument{arg_v, arg_hscrollbar_policy, arg_vscrollbar_policy}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_propagate_natural_height
//
// [ propagate ] trans: nothing
//
func (v ScrolledWindow) SetPropagateNaturalHeight(propagate bool) {
	iv, err := _I.Get(2208, "ScrolledWindow", "set_propagate_natural_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_propagate := gi.NewBoolArgument(propagate)
	args := []gi.Argument{arg_v, arg_propagate}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_propagate_natural_width
//
// [ propagate ] trans: nothing
//
func (v ScrolledWindow) SetPropagateNaturalWidth(propagate bool) {
	iv, err := _I.Get(2209, "ScrolledWindow", "set_propagate_natural_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_propagate := gi.NewBoolArgument(propagate)
	args := []gi.Argument{arg_v, arg_propagate}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_shadow_type
//
// [ type1 ] trans: nothing
//
func (v ScrolledWindow) SetShadowType(type1 ShadowTypeEnum) {
	iv, err := _I.Get(2210, "ScrolledWindow", "set_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_set_vadjustment
//
// [ vadjustment ] trans: nothing
//
func (v ScrolledWindow) SetVadjustment(vadjustment IAdjustment) {
	iv, err := _I.Get(2211, "ScrolledWindow", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if vadjustment != nil {
		tmp = vadjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vadjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_vadjustment}
	iv.Call(args, nil, nil)
}

// gtk_scrolled_window_unset_placement
//
func (v ScrolledWindow) UnsetPlacement() {
	iv, err := _I.Get(2212, "ScrolledWindow", "unset_placement")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object ScrolledWindowAccessible
type ScrolledWindowAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapScrolledWindowAccessible(p unsafe.Pointer) (r ScrolledWindowAccessible) { r.P = p; return }

type IScrolledWindowAccessible interface{ P_ScrolledWindowAccessible() unsafe.Pointer }

func (v ScrolledWindowAccessible) P_ScrolledWindowAccessible() unsafe.Pointer { return v.P }
func (v ScrolledWindowAccessible) P_Component() unsafe.Pointer                { return v.P }
func ScrolledWindowAccessibleGetType() gi.GType {
	ret := _I.GetGType(469, "ScrolledWindowAccessible")
	return ret
}

// ignore GType struct ScrolledWindowAccessibleClass

// Struct ScrolledWindowAccessiblePrivate
type ScrolledWindowAccessiblePrivate struct {
	P unsafe.Pointer
}

func ScrolledWindowAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(470, "ScrolledWindowAccessiblePrivate")
	return ret
}

// ignore GType struct ScrolledWindowClass

// Struct ScrolledWindowPrivate
type ScrolledWindowPrivate struct {
	P unsafe.Pointer
}

func ScrolledWindowPrivateGetType() gi.GType {
	ret := _I.GetGType(471, "ScrolledWindowPrivate")
	return ret
}

// Object SearchBar
type SearchBar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapSearchBar(p unsafe.Pointer) (r SearchBar) { r.P = p; return }

type ISearchBar interface{ P_SearchBar() unsafe.Pointer }

func (v SearchBar) P_SearchBar() unsafe.Pointer        { return v.P }
func (v SearchBar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v SearchBar) P_Buildable() unsafe.Pointer        { return v.P }
func SearchBarGetType() gi.GType {
	ret := _I.GetGType(472, "SearchBar")
	return ret
}

// gtk_search_bar_new
//
// [ result ] trans: nothing
//
func NewSearchBar() (result SearchBar) {
	iv, err := _I.Get(2213, "SearchBar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_search_bar_connect_entry
//
// [ entry ] trans: nothing
//
func (v SearchBar) ConnectEntry(entry IEntry) {
	iv, err := _I.Get(2214, "SearchBar", "connect_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if entry != nil {
		tmp = entry.P_Entry()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_entry := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_entry}
	iv.Call(args, nil, nil)
}

// gtk_search_bar_get_search_mode
//
// [ result ] trans: nothing
//
func (v SearchBar) GetSearchMode() (result bool) {
	iv, err := _I.Get(2215, "SearchBar", "get_search_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_search_bar_get_show_close_button
//
// [ result ] trans: nothing
//
func (v SearchBar) GetShowCloseButton() (result bool) {
	iv, err := _I.Get(2216, "SearchBar", "get_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_search_bar_handle_event
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SearchBar) HandleEvent(event gdk.Event) (result bool) {
	iv, err := _I.Get(2217, "SearchBar", "handle_event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_search_bar_set_search_mode
//
// [ search_mode ] trans: nothing
//
func (v SearchBar) SetSearchMode(search_mode bool) {
	iv, err := _I.Get(2218, "SearchBar", "set_search_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_search_mode := gi.NewBoolArgument(search_mode)
	args := []gi.Argument{arg_v, arg_search_mode}
	iv.Call(args, nil, nil)
}

// gtk_search_bar_set_show_close_button
//
// [ visible ] trans: nothing
//
func (v SearchBar) SetShowCloseButton(visible bool) {
	iv, err := _I.Get(2219, "SearchBar", "set_show_close_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// ignore GType struct SearchBarClass

// Object SearchEntry
type SearchEntry struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellEditableIfc
	EditableIfc
	Entry
}

func WrapSearchEntry(p unsafe.Pointer) (r SearchEntry) { r.P = p; return }

type ISearchEntry interface{ P_SearchEntry() unsafe.Pointer }

func (v SearchEntry) P_SearchEntry() unsafe.Pointer      { return v.P }
func (v SearchEntry) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v SearchEntry) P_Buildable() unsafe.Pointer        { return v.P }
func (v SearchEntry) P_CellEditable() unsafe.Pointer     { return v.P }
func (v SearchEntry) P_Editable() unsafe.Pointer         { return v.P }
func SearchEntryGetType() gi.GType {
	ret := _I.GetGType(473, "SearchEntry")
	return ret
}

// gtk_search_entry_new
//
// [ result ] trans: nothing
//
func NewSearchEntry() (result SearchEntry) {
	iv, err := _I.Get(2220, "SearchEntry", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_search_entry_handle_event
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SearchEntry) HandleEvent(event gdk.Event) (result bool) {
	iv, err := _I.Get(2221, "SearchEntry", "handle_event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SearchEntryClass

// Struct SelectionData
type SelectionData struct {
	P unsafe.Pointer
}

func SelectionDataGetType() gi.GType {
	ret := _I.GetGType(474, "SelectionData")
	return ret
}

// gtk_selection_data_copy
//
// [ result ] trans: everything
//
func (v SelectionData) Copy() (result SelectionData) {
	iv, err := _I.Get(2222, "SelectionData", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_free
//
func (v SelectionData) Free() {
	iv, err := _I.Get(2223, "SelectionData", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_selection_data_get_data_type
//
// [ result ] trans: nothing
//
func (v SelectionData) GetDataType() (result gdk.Atom) {
	iv, err := _I.Get(2224, "SelectionData", "get_data_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_get_data_with_length
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SelectionData) GetData() (result gi.Uint8Array) {
	iv, err := _I.Get(2225, "SelectionData", "get_data")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length int32
	_ = length
	length = outArgs[0].Int32()
	result = gi.Uint8Array{P: ret.Pointer(), Len: int(length)}
	return
}

// gtk_selection_data_get_display
//
// [ result ] trans: nothing
//
func (v SelectionData) GetDisplay() (result gdk.Display) {
	iv, err := _I.Get(2226, "SelectionData", "get_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_get_format
//
// [ result ] trans: nothing
//
func (v SelectionData) GetFormat() (result int32) {
	iv, err := _I.Get(2227, "SelectionData", "get_format")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_selection_data_get_length
//
// [ result ] trans: nothing
//
func (v SelectionData) GetLength() (result int32) {
	iv, err := _I.Get(2228, "SelectionData", "get_length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_selection_data_get_pixbuf
//
// [ result ] trans: everything
//
func (v SelectionData) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(2229, "SelectionData", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_get_selection
//
// [ result ] trans: nothing
//
func (v SelectionData) GetSelection() (result gdk.Atom) {
	iv, err := _I.Get(2230, "SelectionData", "get_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_get_target
//
// [ result ] trans: nothing
//
func (v SelectionData) GetTarget() (result gdk.Atom) {
	iv, err := _I.Get(2231, "SelectionData", "get_target")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_selection_data_get_targets
//
// [ targets ] trans: container, dir: out
//
// [ n_atoms ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SelectionData) GetTargets() (result bool, targets gi.PointerArray) {
	iv, err := _I.Get(2232, "SelectionData", "get_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_n_atoms := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_targets, arg_n_atoms}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_atoms int32
	_ = n_atoms
	targets.P = outArgs[0].Pointer()
	n_atoms = outArgs[1].Int32()
	result = ret.Bool()
	targets.Len = int(n_atoms)
	return
}

// gtk_selection_data_get_text
//
// [ result ] trans: everything
//
func (v SelectionData) GetText() (result string) {
	iv, err := _I.Get(2233, "SelectionData", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_selection_data_get_uris
//
// [ result ] trans: everything
//
func (v SelectionData) GetUris() (result gi.CStrArray) {
	iv, err := _I.Get(2234, "SelectionData", "get_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_selection_data_set
//
// [ type1 ] trans: nothing
//
// [ format ] trans: nothing
//
// [ data ] trans: nothing
//
// [ length ] trans: nothing
//
func (v SelectionData) Set(type1 gdk.Atom, format int32, data gi.Uint8Array, length int32) {
	iv, err := _I.Get(2235, "SelectionData", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewPointerArgument(type1.P)
	arg_format := gi.NewInt32Argument(format)
	arg_data := gi.NewPointerArgument(data.P)
	arg_length := gi.NewInt32Argument(length)
	args := []gi.Argument{arg_v, arg_type1, arg_format, arg_data, arg_length}
	iv.Call(args, nil, nil)
}

// gtk_selection_data_set_pixbuf
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SelectionData) SetPixbuf(pixbuf gdkpixbuf.IPixbuf) (result bool) {
	iv, err := _I.Get(2236, "SelectionData", "set_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_data_set_text
//
// [ str ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SelectionData) SetText(str string, len1 int32) (result bool) {
	iv, err := _I.Get(2237, "SelectionData", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_str, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// gtk_selection_data_set_uris
//
// [ uris ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SelectionData) SetUris(uris gi.CStrArray) (result bool) {
	iv, err := _I.Get(2238, "SelectionData", "set_uris")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_uris := gi.NewPointerArgument(uris.P)
	args := []gi.Argument{arg_v, arg_uris}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_data_targets_include_image
//
// [ writable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SelectionData) TargetsIncludeImage(writable bool) (result bool) {
	iv, err := _I.Get(2239, "SelectionData", "targets_include_image")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_writable := gi.NewBoolArgument(writable)
	args := []gi.Argument{arg_v, arg_writable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_data_targets_include_rich_text
//
// [ buffer ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SelectionData) TargetsIncludeRichText(buffer ITextBuffer) (result bool) {
	iv, err := _I.Get(2240, "SelectionData", "targets_include_rich_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_buffer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_data_targets_include_text
//
// [ result ] trans: nothing
//
func (v SelectionData) TargetsIncludeText() (result bool) {
	iv, err := _I.Get(2241, "SelectionData", "targets_include_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_data_targets_include_uri
//
// [ result ] trans: nothing
//
func (v SelectionData) TargetsIncludeUri() (result bool) {
	iv, err := _I.Get(2242, "SelectionData", "targets_include_uri")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Enum SelectionMode
type SelectionModeEnum int

const (
	SelectionModeNone     SelectionModeEnum = 0
	SelectionModeSingle   SelectionModeEnum = 1
	SelectionModeBrowse   SelectionModeEnum = 2
	SelectionModeMultiple SelectionModeEnum = 3
)

func SelectionModeGetType() gi.GType {
	ret := _I.GetGType(475, "SelectionMode")
	return ret
}

// Enum SensitivityType
type SensitivityTypeEnum int

const (
	SensitivityTypeAuto SensitivityTypeEnum = 0
	SensitivityTypeOn   SensitivityTypeEnum = 1
	SensitivityTypeOff  SensitivityTypeEnum = 2
)

func SensitivityTypeGetType() gi.GType {
	ret := _I.GetGType(476, "SensitivityType")
	return ret
}

// Object Separator
type Separator struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Widget
}

func WrapSeparator(p unsafe.Pointer) (r Separator) { r.P = p; return }

type ISeparator interface{ P_Separator() unsafe.Pointer }

func (v Separator) P_Separator() unsafe.Pointer        { return v.P }
func (v Separator) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Separator) P_Buildable() unsafe.Pointer        { return v.P }
func (v Separator) P_Orientable() unsafe.Pointer       { return v.P }
func SeparatorGetType() gi.GType {
	ret := _I.GetGType(477, "Separator")
	return ret
}

// gtk_separator_new
//
// [ orientation ] trans: nothing
//
// [ result ] trans: nothing
//
func NewSeparator(orientation OrientationEnum) (result Separator) {
	iv, err := _I.Get(2243, "Separator", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SeparatorClass

// Object SeparatorMenuItem
type SeparatorMenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	MenuItem
}

func WrapSeparatorMenuItem(p unsafe.Pointer) (r SeparatorMenuItem) { r.P = p; return }

type ISeparatorMenuItem interface{ P_SeparatorMenuItem() unsafe.Pointer }

func (v SeparatorMenuItem) P_SeparatorMenuItem() unsafe.Pointer { return v.P }
func (v SeparatorMenuItem) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v SeparatorMenuItem) P_Actionable() unsafe.Pointer        { return v.P }
func (v SeparatorMenuItem) P_Activatable() unsafe.Pointer       { return v.P }
func (v SeparatorMenuItem) P_Buildable() unsafe.Pointer         { return v.P }
func SeparatorMenuItemGetType() gi.GType {
	ret := _I.GetGType(478, "SeparatorMenuItem")
	return ret
}

// gtk_separator_menu_item_new
//
// [ result ] trans: nothing
//
func NewSeparatorMenuItem() (result SeparatorMenuItem) {
	iv, err := _I.Get(2244, "SeparatorMenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SeparatorMenuItemClass

// Struct SeparatorPrivate
type SeparatorPrivate struct {
	P unsafe.Pointer
}

func SeparatorPrivateGetType() gi.GType {
	ret := _I.GetGType(479, "SeparatorPrivate")
	return ret
}

// Object SeparatorToolItem
type SeparatorToolItem struct {
	atk.ImplementorIfaceIfc
	ActivatableIfc
	BuildableIfc
	ToolItem
}

func WrapSeparatorToolItem(p unsafe.Pointer) (r SeparatorToolItem) { r.P = p; return }

type ISeparatorToolItem interface{ P_SeparatorToolItem() unsafe.Pointer }

func (v SeparatorToolItem) P_SeparatorToolItem() unsafe.Pointer { return v.P }
func (v SeparatorToolItem) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v SeparatorToolItem) P_Activatable() unsafe.Pointer       { return v.P }
func (v SeparatorToolItem) P_Buildable() unsafe.Pointer         { return v.P }
func SeparatorToolItemGetType() gi.GType {
	ret := _I.GetGType(480, "SeparatorToolItem")
	return ret
}

// gtk_separator_tool_item_new
//
// [ result ] trans: nothing
//
func NewSeparatorToolItem() (result SeparatorToolItem) {
	iv, err := _I.Get(2245, "SeparatorToolItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_separator_tool_item_get_draw
//
// [ result ] trans: nothing
//
func (v SeparatorToolItem) GetDraw() (result bool) {
	iv, err := _I.Get(2246, "SeparatorToolItem", "get_draw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_separator_tool_item_set_draw
//
// [ draw ] trans: nothing
//
func (v SeparatorToolItem) SetDraw(draw bool) {
	iv, err := _I.Get(2247, "SeparatorToolItem", "set_draw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw := gi.NewBoolArgument(draw)
	args := []gi.Argument{arg_v, arg_draw}
	iv.Call(args, nil, nil)
}

// ignore GType struct SeparatorToolItemClass

// Struct SeparatorToolItemPrivate
type SeparatorToolItemPrivate struct {
	P unsafe.Pointer
}

func SeparatorToolItemPrivateGetType() gi.GType {
	ret := _I.GetGType(481, "SeparatorToolItemPrivate")
	return ret
}

// Object Settings
type Settings struct {
	StyleProviderIfc
	g.Object
}

func WrapSettings(p unsafe.Pointer) (r Settings) { r.P = p; return }

type ISettings interface{ P_Settings() unsafe.Pointer }

func (v Settings) P_Settings() unsafe.Pointer      { return v.P }
func (v Settings) P_StyleProvider() unsafe.Pointer { return v.P }
func SettingsGetType() gi.GType {
	ret := _I.GetGType(482, "Settings")
	return ret
}

// gtk_settings_get_for_screen
//
// [ screen ] trans: nothing
//
// [ result ] trans: nothing
//
func SettingsGetForScreen1(screen gdk.IScreen) (result Settings) {
	iv, err := _I.Get(2249, "Settings", "get_for_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_screen}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_settings_install_property
//
// [ pspec ] trans: nothing
//
func SettingsInstallProperty1(pspec g.IParamSpec) {
	iv, err := _I.Get(2250, "Settings", "install_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pspec}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_settings_install_property_parser
//
// [ pspec ] trans: nothing
//
// [ parser ] trans: nothing
//
func SettingsInstallPropertyParser1(pspec g.IParamSpec, parser int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2251, "Settings", "install_property_parser")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_parser := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myRcPropertyParser()))
	args := []gi.Argument{arg_pspec, arg_parser}
	iv.Call(args, nil, nil)
}

// gtk_settings_reset_property
//
// [ name ] trans: nothing
//
func (v Settings) ResetProperty(name string) {
	iv, err := _I.Get(2252, "Settings", "reset_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_settings_set_double_property
//
// [ name ] trans: nothing
//
// [ v_double ] trans: nothing
//
// [ origin ] trans: nothing
//
func (v Settings) SetDoubleProperty(name string, v_double float64, origin string) {
	iv, err := _I.Get(2253, "Settings", "set_double_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_origin := gi.CString(origin)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_v_double := gi.NewDoubleArgument(v_double)
	arg_origin := gi.NewStringArgument(c_origin)
	args := []gi.Argument{arg_v, arg_name, arg_v_double, arg_origin}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_origin)
}

// Deprecated
//
// gtk_settings_set_long_property
//
// [ name ] trans: nothing
//
// [ v_long ] trans: nothing
//
// [ origin ] trans: nothing
//
func (v Settings) SetLongProperty(name string, v_long int64, origin string) {
	iv, err := _I.Get(2254, "Settings", "set_long_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_origin := gi.CString(origin)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_v_long := gi.NewInt64Argument(v_long)
	arg_origin := gi.NewStringArgument(c_origin)
	args := []gi.Argument{arg_v, arg_name, arg_v_long, arg_origin}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_origin)
}

// Deprecated
//
// gtk_settings_set_property_value
//
// [ name ] trans: nothing
//
// [ svalue ] trans: nothing
//
func (v Settings) SetPropertyValue(name string, svalue SettingsValue) {
	iv, err := _I.Get(2255, "Settings", "set_property_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_svalue := gi.NewPointerArgument(svalue.P)
	args := []gi.Argument{arg_v, arg_name, arg_svalue}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_settings_set_string_property
//
// [ name ] trans: nothing
//
// [ v_string ] trans: nothing
//
// [ origin ] trans: nothing
//
func (v Settings) SetStringProperty(name string, v_string string, origin string) {
	iv, err := _I.Get(2256, "Settings", "set_string_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_v_string := gi.CString(v_string)
	c_origin := gi.CString(origin)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_v_string := gi.NewStringArgument(c_v_string)
	arg_origin := gi.NewStringArgument(c_origin)
	args := []gi.Argument{arg_v, arg_name, arg_v_string, arg_origin}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_v_string)
	gi.Free(c_origin)
}

// ignore GType struct SettingsClass

// Struct SettingsPrivate
type SettingsPrivate struct {
	P unsafe.Pointer
}

func SettingsPrivateGetType() gi.GType {
	ret := _I.GetGType(483, "SettingsPrivate")
	return ret
}

// Struct SettingsValue
type SettingsValue struct {
	P unsafe.Pointer
}

const SizeOfStructSettingsValue = 32

func SettingsValueGetType() gi.GType {
	ret := _I.GetGType(484, "SettingsValue")
	return ret
}

// Enum ShadowType
type ShadowTypeEnum int

const (
	ShadowTypeNone      ShadowTypeEnum = 0
	ShadowTypeIn        ShadowTypeEnum = 1
	ShadowTypeOut       ShadowTypeEnum = 2
	ShadowTypeEtchedIn  ShadowTypeEnum = 3
	ShadowTypeEtchedOut ShadowTypeEnum = 4
)

func ShadowTypeGetType() gi.GType {
	ret := _I.GetGType(485, "ShadowType")
	return ret
}

// Object ShortcutLabel
type ShortcutLabel struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapShortcutLabel(p unsafe.Pointer) (r ShortcutLabel) { r.P = p; return }

type IShortcutLabel interface{ P_ShortcutLabel() unsafe.Pointer }

func (v ShortcutLabel) P_ShortcutLabel() unsafe.Pointer    { return v.P }
func (v ShortcutLabel) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ShortcutLabel) P_Buildable() unsafe.Pointer        { return v.P }
func (v ShortcutLabel) P_Orientable() unsafe.Pointer       { return v.P }
func ShortcutLabelGetType() gi.GType {
	ret := _I.GetGType(486, "ShortcutLabel")
	return ret
}

// gtk_shortcut_label_new
//
// [ accelerator ] trans: nothing
//
// [ result ] trans: everything
//
func NewShortcutLabel(accelerator string) (result ShortcutLabel) {
	iv, err := _I.Get(2257, "ShortcutLabel", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accelerator := gi.CString(accelerator)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	args := []gi.Argument{arg_accelerator}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_accelerator)
	result.P = ret.Pointer()
	return
}

// gtk_shortcut_label_get_accelerator
//
// [ result ] trans: nothing
//
func (v ShortcutLabel) GetAccelerator() (result string) {
	iv, err := _I.Get(2258, "ShortcutLabel", "get_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_shortcut_label_get_disabled_text
//
// [ result ] trans: nothing
//
func (v ShortcutLabel) GetDisabledText() (result string) {
	iv, err := _I.Get(2259, "ShortcutLabel", "get_disabled_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_shortcut_label_set_accelerator
//
// [ accelerator ] trans: nothing
//
func (v ShortcutLabel) SetAccelerator(accelerator string) {
	iv, err := _I.Get(2260, "ShortcutLabel", "set_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accelerator := gi.CString(accelerator)
	arg_v := gi.NewPointerArgument(v.P)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	args := []gi.Argument{arg_v, arg_accelerator}
	iv.Call(args, nil, nil)
	gi.Free(c_accelerator)
}

// gtk_shortcut_label_set_disabled_text
//
// [ disabled_text ] trans: nothing
//
func (v ShortcutLabel) SetDisabledText(disabled_text string) {
	iv, err := _I.Get(2261, "ShortcutLabel", "set_disabled_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_disabled_text := gi.CString(disabled_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_disabled_text := gi.NewStringArgument(c_disabled_text)
	args := []gi.Argument{arg_v, arg_disabled_text}
	iv.Call(args, nil, nil)
	gi.Free(c_disabled_text)
}

// ignore GType struct ShortcutLabelClass

// Enum ShortcutType
type ShortcutTypeEnum int

const (
	ShortcutTypeAccelerator                   ShortcutTypeEnum = 0
	ShortcutTypeGesturePinch                  ShortcutTypeEnum = 1
	ShortcutTypeGestureStretch                ShortcutTypeEnum = 2
	ShortcutTypeGestureRotateClockwise        ShortcutTypeEnum = 3
	ShortcutTypeGestureRotateCounterclockwise ShortcutTypeEnum = 4
	ShortcutTypeGestureTwoFingerSwipeLeft     ShortcutTypeEnum = 5
	ShortcutTypeGestureTwoFingerSwipeRight    ShortcutTypeEnum = 6
	ShortcutTypeGesture                       ShortcutTypeEnum = 7
)

func ShortcutTypeGetType() gi.GType {
	ret := _I.GetGType(487, "ShortcutType")
	return ret
}

// Object ShortcutsGroup
type ShortcutsGroup struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapShortcutsGroup(p unsafe.Pointer) (r ShortcutsGroup) { r.P = p; return }

type IShortcutsGroup interface{ P_ShortcutsGroup() unsafe.Pointer }

func (v ShortcutsGroup) P_ShortcutsGroup() unsafe.Pointer   { return v.P }
func (v ShortcutsGroup) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ShortcutsGroup) P_Buildable() unsafe.Pointer        { return v.P }
func (v ShortcutsGroup) P_Orientable() unsafe.Pointer       { return v.P }
func ShortcutsGroupGetType() gi.GType {
	ret := _I.GetGType(488, "ShortcutsGroup")
	return ret
}

// ignore GType struct ShortcutsGroupClass

// Object ShortcutsSection
type ShortcutsSection struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapShortcutsSection(p unsafe.Pointer) (r ShortcutsSection) { r.P = p; return }

type IShortcutsSection interface{ P_ShortcutsSection() unsafe.Pointer }

func (v ShortcutsSection) P_ShortcutsSection() unsafe.Pointer { return v.P }
func (v ShortcutsSection) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ShortcutsSection) P_Buildable() unsafe.Pointer        { return v.P }
func (v ShortcutsSection) P_Orientable() unsafe.Pointer       { return v.P }
func ShortcutsSectionGetType() gi.GType {
	ret := _I.GetGType(489, "ShortcutsSection")
	return ret
}

// ignore GType struct ShortcutsSectionClass

// Object ShortcutsShortcut
type ShortcutsShortcut struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapShortcutsShortcut(p unsafe.Pointer) (r ShortcutsShortcut) { r.P = p; return }

type IShortcutsShortcut interface{ P_ShortcutsShortcut() unsafe.Pointer }

func (v ShortcutsShortcut) P_ShortcutsShortcut() unsafe.Pointer { return v.P }
func (v ShortcutsShortcut) P_ImplementorIface() unsafe.Pointer  { return v.P }
func (v ShortcutsShortcut) P_Buildable() unsafe.Pointer         { return v.P }
func (v ShortcutsShortcut) P_Orientable() unsafe.Pointer        { return v.P }
func ShortcutsShortcutGetType() gi.GType {
	ret := _I.GetGType(490, "ShortcutsShortcut")
	return ret
}

// ignore GType struct ShortcutsShortcutClass

// Object ShortcutsWindow
type ShortcutsWindow struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Window
}

func WrapShortcutsWindow(p unsafe.Pointer) (r ShortcutsWindow) { r.P = p; return }

type IShortcutsWindow interface{ P_ShortcutsWindow() unsafe.Pointer }

func (v ShortcutsWindow) P_ShortcutsWindow() unsafe.Pointer  { return v.P }
func (v ShortcutsWindow) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ShortcutsWindow) P_Buildable() unsafe.Pointer        { return v.P }
func ShortcutsWindowGetType() gi.GType {
	ret := _I.GetGType(491, "ShortcutsWindow")
	return ret
}

// ignore GType struct ShortcutsWindowClass

// Object SizeGroup
type SizeGroup struct {
	BuildableIfc
	g.Object
}

func WrapSizeGroup(p unsafe.Pointer) (r SizeGroup) { r.P = p; return }

type ISizeGroup interface{ P_SizeGroup() unsafe.Pointer }

func (v SizeGroup) P_SizeGroup() unsafe.Pointer { return v.P }
func (v SizeGroup) P_Buildable() unsafe.Pointer { return v.P }
func SizeGroupGetType() gi.GType {
	ret := _I.GetGType(492, "SizeGroup")
	return ret
}

// gtk_size_group_new
//
// [ mode ] trans: nothing
//
// [ result ] trans: everything
//
func NewSizeGroup(mode SizeGroupModeEnum) (result SizeGroup) {
	iv, err := _I.Get(2262, "SizeGroup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_mode}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_size_group_add_widget
//
// [ widget ] trans: nothing
//
func (v SizeGroup) AddWidget(widget IWidget) {
	iv, err := _I.Get(2263, "SizeGroup", "add_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_size_group_get_ignore_hidden
//
// [ result ] trans: nothing
//
func (v SizeGroup) GetIgnoreHidden() (result bool) {
	iv, err := _I.Get(2264, "SizeGroup", "get_ignore_hidden")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_size_group_get_mode
//
// [ result ] trans: nothing
//
func (v SizeGroup) GetMode() (result SizeGroupModeEnum) {
	iv, err := _I.Get(2265, "SizeGroup", "get_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SizeGroupModeEnum(ret.Int())
	return
}

// gtk_size_group_get_widgets
//
// [ result ] trans: nothing
//
func (v SizeGroup) GetWidgets() (result g.SList) {
	iv, err := _I.Get(2266, "SizeGroup", "get_widgets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_size_group_remove_widget
//
// [ widget ] trans: nothing
//
func (v SizeGroup) RemoveWidget(widget IWidget) {
	iv, err := _I.Get(2267, "SizeGroup", "remove_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_size_group_set_ignore_hidden
//
// [ ignore_hidden ] trans: nothing
//
func (v SizeGroup) SetIgnoreHidden(ignore_hidden bool) {
	iv, err := _I.Get(2268, "SizeGroup", "set_ignore_hidden")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ignore_hidden := gi.NewBoolArgument(ignore_hidden)
	args := []gi.Argument{arg_v, arg_ignore_hidden}
	iv.Call(args, nil, nil)
}

// gtk_size_group_set_mode
//
// [ mode ] trans: nothing
//
func (v SizeGroup) SetMode(mode SizeGroupModeEnum) {
	iv, err := _I.Get(2269, "SizeGroup", "set_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// ignore GType struct SizeGroupClass

// Enum SizeGroupMode
type SizeGroupModeEnum int

const (
	SizeGroupModeNone       SizeGroupModeEnum = 0
	SizeGroupModeHorizontal SizeGroupModeEnum = 1
	SizeGroupModeVertical   SizeGroupModeEnum = 2
	SizeGroupModeBoth       SizeGroupModeEnum = 3
)

func SizeGroupModeGetType() gi.GType {
	ret := _I.GetGType(493, "SizeGroupMode")
	return ret
}

// Struct SizeGroupPrivate
type SizeGroupPrivate struct {
	P unsafe.Pointer
}

func SizeGroupPrivateGetType() gi.GType {
	ret := _I.GetGType(494, "SizeGroupPrivate")
	return ret
}

// Enum SizeRequestMode
type SizeRequestModeEnum int

const (
	SizeRequestModeHeightForWidth SizeRequestModeEnum = 0
	SizeRequestModeWidthForHeight SizeRequestModeEnum = 1
	SizeRequestModeConstantSize   SizeRequestModeEnum = 2
)

func SizeRequestModeGetType() gi.GType {
	ret := _I.GetGType(495, "SizeRequestMode")
	return ret
}

// Object Socket
type Socket struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapSocket(p unsafe.Pointer) (r Socket) { r.P = p; return }

type ISocket interface{ P_Socket() unsafe.Pointer }

func (v Socket) P_Socket() unsafe.Pointer           { return v.P }
func (v Socket) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Socket) P_Buildable() unsafe.Pointer        { return v.P }
func SocketGetType() gi.GType {
	ret := _I.GetGType(496, "Socket")
	return ret
}

// gtk_socket_new
//
// [ result ] trans: nothing
//
func NewSocket() (result Socket) {
	iv, err := _I.Get(2270, "Socket", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_socket_add_id
//
// [ window ] trans: nothing
//
func (v Socket) AddId(window uint64) {
	iv, err := _I.Get(2271, "Socket", "add_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewUint64Argument(window)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_socket_get_id
//
// [ result ] trans: nothing
//
func (v Socket) GetId() (result uint64) {
	iv, err := _I.Get(2272, "Socket", "get_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// gtk_socket_get_plug_window
//
// [ result ] trans: nothing
//
func (v Socket) GetPlugWindow() (result gdk.Window) {
	iv, err := _I.Get(2273, "Socket", "get_plug_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SocketClass

// Struct SocketPrivate
type SocketPrivate struct {
	P unsafe.Pointer
}

func SocketPrivateGetType() gi.GType {
	ret := _I.GetGType(497, "SocketPrivate")
	return ret
}

// Enum SortType
type SortTypeEnum int

const (
	SortTypeAscending  SortTypeEnum = 0
	SortTypeDescending SortTypeEnum = 1
)

func SortTypeGetType() gi.GType {
	ret := _I.GetGType(498, "SortType")
	return ret
}

// Object SpinButton
type SpinButton struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	CellEditableIfc
	EditableIfc
	OrientableIfc
	Entry
}

func WrapSpinButton(p unsafe.Pointer) (r SpinButton) { r.P = p; return }

type ISpinButton interface{ P_SpinButton() unsafe.Pointer }

func (v SpinButton) P_SpinButton() unsafe.Pointer       { return v.P }
func (v SpinButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v SpinButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v SpinButton) P_CellEditable() unsafe.Pointer     { return v.P }
func (v SpinButton) P_Editable() unsafe.Pointer         { return v.P }
func (v SpinButton) P_Orientable() unsafe.Pointer       { return v.P }
func SpinButtonGetType() gi.GType {
	ret := _I.GetGType(499, "SpinButton")
	return ret
}

// gtk_spin_button_new
//
// [ adjustment ] trans: nothing
//
// [ climb_rate ] trans: nothing
//
// [ digits ] trans: nothing
//
// [ result ] trans: nothing
//
func NewSpinButton(adjustment IAdjustment, climb_rate float64, digits uint32) (result SpinButton) {
	iv, err := _I.Get(2274, "SpinButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_adjustment := gi.NewPointerArgument(tmp)
	arg_climb_rate := gi.NewDoubleArgument(climb_rate)
	arg_digits := gi.NewUint32Argument(digits)
	args := []gi.Argument{arg_adjustment, arg_climb_rate, arg_digits}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_spin_button_new_with_range
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
// [ step ] trans: nothing
//
// [ result ] trans: nothing
//
func NewSpinButtonWithRange(min float64, max float64, step float64) (result SpinButton) {
	iv, err := _I.Get(2275, "SpinButton", "new_with_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	arg_step := gi.NewDoubleArgument(step)
	args := []gi.Argument{arg_min, arg_max, arg_step}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_spin_button_configure
//
// [ adjustment ] trans: nothing
//
// [ climb_rate ] trans: nothing
//
// [ digits ] trans: nothing
//
func (v SpinButton) Configure(adjustment IAdjustment, climb_rate float64, digits uint32) {
	iv, err := _I.Get(2276, "SpinButton", "configure")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	arg_climb_rate := gi.NewDoubleArgument(climb_rate)
	arg_digits := gi.NewUint32Argument(digits)
	args := []gi.Argument{arg_v, arg_adjustment, arg_climb_rate, arg_digits}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_get_adjustment
//
// [ result ] trans: nothing
//
func (v SpinButton) GetAdjustment() (result Adjustment) {
	iv, err := _I.Get(2277, "SpinButton", "get_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_spin_button_get_digits
//
// [ result ] trans: nothing
//
func (v SpinButton) GetDigits() (result uint32) {
	iv, err := _I.Get(2278, "SpinButton", "get_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_spin_button_get_increments
//
// [ step ] trans: everything, dir: out
//
// [ page ] trans: everything, dir: out
//
func (v SpinButton) GetIncrements() (step float64, page float64) {
	iv, err := _I.Get(2279, "SpinButton", "get_increments")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_step := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_page := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_step, arg_page}
	iv.Call(args, nil, &outArgs[0])
	step = outArgs[0].Double()
	page = outArgs[1].Double()
	return
}

// gtk_spin_button_get_numeric
//
// [ result ] trans: nothing
//
func (v SpinButton) GetNumeric() (result bool) {
	iv, err := _I.Get(2280, "SpinButton", "get_numeric")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_spin_button_get_range
//
// [ min ] trans: everything, dir: out
//
// [ max ] trans: everything, dir: out
//
func (v SpinButton) GetRange() (min float64, max float64) {
	iv, err := _I.Get(2281, "SpinButton", "get_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_min := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_max := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_min, arg_max}
	iv.Call(args, nil, &outArgs[0])
	min = outArgs[0].Double()
	max = outArgs[1].Double()
	return
}

// gtk_spin_button_get_snap_to_ticks
//
// [ result ] trans: nothing
//
func (v SpinButton) GetSnapToTicks() (result bool) {
	iv, err := _I.Get(2282, "SpinButton", "get_snap_to_ticks")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_spin_button_get_update_policy
//
// [ result ] trans: nothing
//
func (v SpinButton) GetUpdatePolicy() (result SpinButtonUpdatePolicyEnum) {
	iv, err := _I.Get(2283, "SpinButton", "get_update_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SpinButtonUpdatePolicyEnum(ret.Int())
	return
}

// gtk_spin_button_get_value
//
// [ result ] trans: nothing
//
func (v SpinButton) GetValue() (result float64) {
	iv, err := _I.Get(2284, "SpinButton", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_spin_button_get_value_as_int
//
// [ result ] trans: nothing
//
func (v SpinButton) GetValueAsInt() (result int32) {
	iv, err := _I.Get(2285, "SpinButton", "get_value_as_int")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_spin_button_get_wrap
//
// [ result ] trans: nothing
//
func (v SpinButton) GetWrap() (result bool) {
	iv, err := _I.Get(2286, "SpinButton", "get_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_spin_button_set_adjustment
//
// [ adjustment ] trans: nothing
//
func (v SpinButton) SetAdjustment(adjustment IAdjustment) {
	iv, err := _I.Get(2287, "SpinButton", "set_adjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_digits
//
// [ digits ] trans: nothing
//
func (v SpinButton) SetDigits(digits uint32) {
	iv, err := _I.Get(2288, "SpinButton", "set_digits")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_digits := gi.NewUint32Argument(digits)
	args := []gi.Argument{arg_v, arg_digits}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_increments
//
// [ step ] trans: nothing
//
// [ page ] trans: nothing
//
func (v SpinButton) SetIncrements(step float64, page float64) {
	iv, err := _I.Get(2289, "SpinButton", "set_increments")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_step := gi.NewDoubleArgument(step)
	arg_page := gi.NewDoubleArgument(page)
	args := []gi.Argument{arg_v, arg_step, arg_page}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_numeric
//
// [ numeric ] trans: nothing
//
func (v SpinButton) SetNumeric(numeric bool) {
	iv, err := _I.Get(2290, "SpinButton", "set_numeric")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_numeric := gi.NewBoolArgument(numeric)
	args := []gi.Argument{arg_v, arg_numeric}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_range
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
func (v SpinButton) SetRange(min float64, max float64) {
	iv, err := _I.Get(2291, "SpinButton", "set_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	args := []gi.Argument{arg_v, arg_min, arg_max}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_snap_to_ticks
//
// [ snap_to_ticks ] trans: nothing
//
func (v SpinButton) SetSnapToTicks(snap_to_ticks bool) {
	iv, err := _I.Get(2292, "SpinButton", "set_snap_to_ticks")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_snap_to_ticks := gi.NewBoolArgument(snap_to_ticks)
	args := []gi.Argument{arg_v, arg_snap_to_ticks}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_update_policy
//
// [ policy ] trans: nothing
//
func (v SpinButton) SetUpdatePolicy(policy SpinButtonUpdatePolicyEnum) {
	iv, err := _I.Get(2293, "SpinButton", "set_update_policy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_policy := gi.NewIntArgument(int(policy))
	args := []gi.Argument{arg_v, arg_policy}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_value
//
// [ value ] trans: nothing
//
func (v SpinButton) SetValue(value float64) {
	iv, err := _I.Get(2294, "SpinButton", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_set_wrap
//
// [ wrap ] trans: nothing
//
func (v SpinButton) SetWrap(wrap bool) {
	iv, err := _I.Get(2295, "SpinButton", "set_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wrap := gi.NewBoolArgument(wrap)
	args := []gi.Argument{arg_v, arg_wrap}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_spin
//
// [ direction ] trans: nothing
//
// [ increment ] trans: nothing
//
func (v SpinButton) Spin(direction SpinTypeEnum, increment float64) {
	iv, err := _I.Get(2296, "SpinButton", "spin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	arg_increment := gi.NewDoubleArgument(increment)
	args := []gi.Argument{arg_v, arg_direction, arg_increment}
	iv.Call(args, nil, nil)
}

// gtk_spin_button_update
//
func (v SpinButton) Update() {
	iv, err := _I.Get(2297, "SpinButton", "update")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object SpinButtonAccessible
type SpinButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.EditableTextIfc
	atk.TextIfc
	atk.ValueIfc
	EntryAccessible
}

func WrapSpinButtonAccessible(p unsafe.Pointer) (r SpinButtonAccessible) { r.P = p; return }

type ISpinButtonAccessible interface{ P_SpinButtonAccessible() unsafe.Pointer }

func (v SpinButtonAccessible) P_SpinButtonAccessible() unsafe.Pointer { return v.P }
func (v SpinButtonAccessible) P_Action() unsafe.Pointer               { return v.P }
func (v SpinButtonAccessible) P_Component() unsafe.Pointer            { return v.P }
func (v SpinButtonAccessible) P_EditableText() unsafe.Pointer         { return v.P }
func (v SpinButtonAccessible) P_Text() unsafe.Pointer                 { return v.P }
func (v SpinButtonAccessible) P_Value() unsafe.Pointer                { return v.P }
func SpinButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(500, "SpinButtonAccessible")
	return ret
}

// ignore GType struct SpinButtonAccessibleClass

// Struct SpinButtonAccessiblePrivate
type SpinButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func SpinButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(501, "SpinButtonAccessiblePrivate")
	return ret
}

// ignore GType struct SpinButtonClass

// Struct SpinButtonPrivate
type SpinButtonPrivate struct {
	P unsafe.Pointer
}

func SpinButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(502, "SpinButtonPrivate")
	return ret
}

// Enum SpinButtonUpdatePolicy
type SpinButtonUpdatePolicyEnum int

const (
	SpinButtonUpdatePolicyAlways  SpinButtonUpdatePolicyEnum = 0
	SpinButtonUpdatePolicyIfValid SpinButtonUpdatePolicyEnum = 1
)

func SpinButtonUpdatePolicyGetType() gi.GType {
	ret := _I.GetGType(503, "SpinButtonUpdatePolicy")
	return ret
}

// Enum SpinType
type SpinTypeEnum int

const (
	SpinTypeStepForward  SpinTypeEnum = 0
	SpinTypeStepBackward SpinTypeEnum = 1
	SpinTypePageForward  SpinTypeEnum = 2
	SpinTypePageBackward SpinTypeEnum = 3
	SpinTypeHome         SpinTypeEnum = 4
	SpinTypeEnd          SpinTypeEnum = 5
	SpinTypeUserDefined  SpinTypeEnum = 6
)

func SpinTypeGetType() gi.GType {
	ret := _I.GetGType(504, "SpinType")
	return ret
}

// Object Spinner
type Spinner struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Widget
}

func WrapSpinner(p unsafe.Pointer) (r Spinner) { r.P = p; return }

type ISpinner interface{ P_Spinner() unsafe.Pointer }

func (v Spinner) P_Spinner() unsafe.Pointer          { return v.P }
func (v Spinner) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Spinner) P_Buildable() unsafe.Pointer        { return v.P }
func SpinnerGetType() gi.GType {
	ret := _I.GetGType(505, "Spinner")
	return ret
}

// gtk_spinner_new
//
// [ result ] trans: nothing
//
func NewSpinner() (result Spinner) {
	iv, err := _I.Get(2298, "Spinner", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_spinner_start
//
func (v Spinner) Start() {
	iv, err := _I.Get(2299, "Spinner", "start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_spinner_stop
//
func (v Spinner) Stop() {
	iv, err := _I.Get(2300, "Spinner", "stop")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object SpinnerAccessible
type SpinnerAccessible struct {
	atk.ComponentIfc
	atk.ImageIfc
	WidgetAccessible
}

func WrapSpinnerAccessible(p unsafe.Pointer) (r SpinnerAccessible) { r.P = p; return }

type ISpinnerAccessible interface{ P_SpinnerAccessible() unsafe.Pointer }

func (v SpinnerAccessible) P_SpinnerAccessible() unsafe.Pointer { return v.P }
func (v SpinnerAccessible) P_Component() unsafe.Pointer         { return v.P }
func (v SpinnerAccessible) P_Image() unsafe.Pointer             { return v.P }
func SpinnerAccessibleGetType() gi.GType {
	ret := _I.GetGType(506, "SpinnerAccessible")
	return ret
}

// ignore GType struct SpinnerAccessibleClass

// Struct SpinnerAccessiblePrivate
type SpinnerAccessiblePrivate struct {
	P unsafe.Pointer
}

func SpinnerAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(507, "SpinnerAccessiblePrivate")
	return ret
}

// ignore GType struct SpinnerClass

// Struct SpinnerPrivate
type SpinnerPrivate struct {
	P unsafe.Pointer
}

func SpinnerPrivateGetType() gi.GType {
	ret := _I.GetGType(508, "SpinnerPrivate")
	return ret
}

// Object Stack
type Stack struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapStack(p unsafe.Pointer) (r Stack) { r.P = p; return }

type IStack interface{ P_Stack() unsafe.Pointer }

func (v Stack) P_Stack() unsafe.Pointer            { return v.P }
func (v Stack) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Stack) P_Buildable() unsafe.Pointer        { return v.P }
func StackGetType() gi.GType {
	ret := _I.GetGType(509, "Stack")
	return ret
}

// gtk_stack_new
//
// [ result ] trans: nothing
//
func NewStack() (result Stack) {
	iv, err := _I.Get(2301, "Stack", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_add_named
//
// [ child ] trans: nothing
//
// [ name ] trans: nothing
//
func (v Stack) AddNamed(child IWidget, name string) {
	iv, err := _I.Get(2302, "Stack", "add_named")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_child, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_stack_add_titled
//
// [ child ] trans: nothing
//
// [ name ] trans: nothing
//
// [ title ] trans: nothing
//
func (v Stack) AddTitled(child IWidget, name string, title string) {
	iv, err := _I.Get(2303, "Stack", "add_titled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	c_name := gi.CString(name)
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_child, arg_name, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_title)
}

// gtk_stack_get_child_by_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Stack) GetChildByName(name string) (result Widget) {
	iv, err := _I.Get(2304, "Stack", "get_child_by_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_stack_get_hhomogeneous
//
// [ result ] trans: nothing
//
func (v Stack) GetHhomogeneous() (result bool) {
	iv, err := _I.Get(2305, "Stack", "get_hhomogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_stack_get_homogeneous
//
// [ result ] trans: nothing
//
func (v Stack) GetHomogeneous() (result bool) {
	iv, err := _I.Get(2306, "Stack", "get_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_stack_get_interpolate_size
//
// [ result ] trans: nothing
//
func (v Stack) GetInterpolateSize() (result bool) {
	iv, err := _I.Get(2307, "Stack", "get_interpolate_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_stack_get_transition_duration
//
// [ result ] trans: nothing
//
func (v Stack) GetTransitionDuration() (result uint32) {
	iv, err := _I.Get(2308, "Stack", "get_transition_duration")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_stack_get_transition_running
//
// [ result ] trans: nothing
//
func (v Stack) GetTransitionRunning() (result bool) {
	iv, err := _I.Get(2309, "Stack", "get_transition_running")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_stack_get_transition_type
//
// [ result ] trans: nothing
//
func (v Stack) GetTransitionType() (result StackTransitionTypeEnum) {
	iv, err := _I.Get(2310, "Stack", "get_transition_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StackTransitionTypeEnum(ret.Int())
	return
}

// gtk_stack_get_vhomogeneous
//
// [ result ] trans: nothing
//
func (v Stack) GetVhomogeneous() (result bool) {
	iv, err := _I.Get(2311, "Stack", "get_vhomogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_stack_get_visible_child
//
// [ result ] trans: nothing
//
func (v Stack) GetVisibleChild() (result Widget) {
	iv, err := _I.Get(2312, "Stack", "get_visible_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_get_visible_child_name
//
// [ result ] trans: nothing
//
func (v Stack) GetVisibleChildName() (result string) {
	iv, err := _I.Get(2313, "Stack", "get_visible_child_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_stack_set_hhomogeneous
//
// [ hhomogeneous ] trans: nothing
//
func (v Stack) SetHhomogeneous(hhomogeneous bool) {
	iv, err := _I.Get(2314, "Stack", "set_hhomogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hhomogeneous := gi.NewBoolArgument(hhomogeneous)
	args := []gi.Argument{arg_v, arg_hhomogeneous}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v Stack) SetHomogeneous(homogeneous bool) {
	iv, err := _I.Get(2315, "Stack", "set_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_interpolate_size
//
// [ interpolate_size ] trans: nothing
//
func (v Stack) SetInterpolateSize(interpolate_size bool) {
	iv, err := _I.Get(2316, "Stack", "set_interpolate_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_interpolate_size := gi.NewBoolArgument(interpolate_size)
	args := []gi.Argument{arg_v, arg_interpolate_size}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_transition_duration
//
// [ duration ] trans: nothing
//
func (v Stack) SetTransitionDuration(duration uint32) {
	iv, err := _I.Get(2317, "Stack", "set_transition_duration")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_duration := gi.NewUint32Argument(duration)
	args := []gi.Argument{arg_v, arg_duration}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_transition_type
//
// [ transition ] trans: nothing
//
func (v Stack) SetTransitionType(transition StackTransitionTypeEnum) {
	iv, err := _I.Get(2318, "Stack", "set_transition_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_transition := gi.NewIntArgument(int(transition))
	args := []gi.Argument{arg_v, arg_transition}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_vhomogeneous
//
// [ vhomogeneous ] trans: nothing
//
func (v Stack) SetVhomogeneous(vhomogeneous bool) {
	iv, err := _I.Get(2319, "Stack", "set_vhomogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vhomogeneous := gi.NewBoolArgument(vhomogeneous)
	args := []gi.Argument{arg_v, arg_vhomogeneous}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_visible_child
//
// [ child ] trans: nothing
//
func (v Stack) SetVisibleChild(child IWidget) {
	iv, err := _I.Get(2320, "Stack", "set_visible_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_child}
	iv.Call(args, nil, nil)
}

// gtk_stack_set_visible_child_full
//
// [ name ] trans: nothing
//
// [ transition ] trans: nothing
//
func (v Stack) SetVisibleChildFull(name string, transition StackTransitionTypeEnum) {
	iv, err := _I.Get(2321, "Stack", "set_visible_child_full")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_transition := gi.NewIntArgument(int(transition))
	args := []gi.Argument{arg_v, arg_name, arg_transition}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_stack_set_visible_child_name
//
// [ name ] trans: nothing
//
func (v Stack) SetVisibleChildName(name string) {
	iv, err := _I.Get(2322, "Stack", "set_visible_child_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Object StackAccessible
type StackAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapStackAccessible(p unsafe.Pointer) (r StackAccessible) { r.P = p; return }

type IStackAccessible interface{ P_StackAccessible() unsafe.Pointer }

func (v StackAccessible) P_StackAccessible() unsafe.Pointer { return v.P }
func (v StackAccessible) P_Component() unsafe.Pointer       { return v.P }
func StackAccessibleGetType() gi.GType {
	ret := _I.GetGType(510, "StackAccessible")
	return ret
}

// ignore GType struct StackAccessibleClass

// ignore GType struct StackClass

// Object StackSidebar
type StackSidebar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapStackSidebar(p unsafe.Pointer) (r StackSidebar) { r.P = p; return }

type IStackSidebar interface{ P_StackSidebar() unsafe.Pointer }

func (v StackSidebar) P_StackSidebar() unsafe.Pointer     { return v.P }
func (v StackSidebar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v StackSidebar) P_Buildable() unsafe.Pointer        { return v.P }
func StackSidebarGetType() gi.GType {
	ret := _I.GetGType(511, "StackSidebar")
	return ret
}

// gtk_stack_sidebar_new
//
// [ result ] trans: nothing
//
func NewStackSidebar() (result StackSidebar) {
	iv, err := _I.Get(2323, "StackSidebar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_sidebar_get_stack
//
// [ result ] trans: nothing
//
func (v StackSidebar) GetStack() (result Stack) {
	iv, err := _I.Get(2324, "StackSidebar", "get_stack")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_sidebar_set_stack
//
// [ stack ] trans: nothing
//
func (v StackSidebar) SetStack(stack IStack) {
	iv, err := _I.Get(2325, "StackSidebar", "set_stack")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if stack != nil {
		tmp = stack.P_Stack()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stack := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_stack}
	iv.Call(args, nil, nil)
}

// ignore GType struct StackSidebarClass

// Struct StackSidebarPrivate
type StackSidebarPrivate struct {
	P unsafe.Pointer
}

func StackSidebarPrivateGetType() gi.GType {
	ret := _I.GetGType(512, "StackSidebarPrivate")
	return ret
}

// Object StackSwitcher
type StackSwitcher struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapStackSwitcher(p unsafe.Pointer) (r StackSwitcher) { r.P = p; return }

type IStackSwitcher interface{ P_StackSwitcher() unsafe.Pointer }

func (v StackSwitcher) P_StackSwitcher() unsafe.Pointer    { return v.P }
func (v StackSwitcher) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v StackSwitcher) P_Buildable() unsafe.Pointer        { return v.P }
func (v StackSwitcher) P_Orientable() unsafe.Pointer       { return v.P }
func StackSwitcherGetType() gi.GType {
	ret := _I.GetGType(513, "StackSwitcher")
	return ret
}

// gtk_stack_switcher_new
//
// [ result ] trans: nothing
//
func NewStackSwitcher() (result StackSwitcher) {
	iv, err := _I.Get(2326, "StackSwitcher", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_switcher_get_stack
//
// [ result ] trans: nothing
//
func (v StackSwitcher) GetStack() (result Stack) {
	iv, err := _I.Get(2327, "StackSwitcher", "get_stack")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_stack_switcher_set_stack
//
// [ stack ] trans: nothing
//
func (v StackSwitcher) SetStack(stack IStack) {
	iv, err := _I.Get(2328, "StackSwitcher", "set_stack")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if stack != nil {
		tmp = stack.P_Stack()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stack := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_stack}
	iv.Call(args, nil, nil)
}

// ignore GType struct StackSwitcherClass

// Enum StackTransitionType
type StackTransitionTypeEnum int

const (
	StackTransitionTypeNone           StackTransitionTypeEnum = 0
	StackTransitionTypeCrossfade      StackTransitionTypeEnum = 1
	StackTransitionTypeSlideRight     StackTransitionTypeEnum = 2
	StackTransitionTypeSlideLeft      StackTransitionTypeEnum = 3
	StackTransitionTypeSlideUp        StackTransitionTypeEnum = 4
	StackTransitionTypeSlideDown      StackTransitionTypeEnum = 5
	StackTransitionTypeSlideLeftRight StackTransitionTypeEnum = 6
	StackTransitionTypeSlideUpDown    StackTransitionTypeEnum = 7
	StackTransitionTypeOverUp         StackTransitionTypeEnum = 8
	StackTransitionTypeOverDown       StackTransitionTypeEnum = 9
	StackTransitionTypeOverLeft       StackTransitionTypeEnum = 10
	StackTransitionTypeOverRight      StackTransitionTypeEnum = 11
	StackTransitionTypeUnderUp        StackTransitionTypeEnum = 12
	StackTransitionTypeUnderDown      StackTransitionTypeEnum = 13
	StackTransitionTypeUnderLeft      StackTransitionTypeEnum = 14
	StackTransitionTypeUnderRight     StackTransitionTypeEnum = 15
	StackTransitionTypeOverUpDown     StackTransitionTypeEnum = 16
	StackTransitionTypeOverDownUp     StackTransitionTypeEnum = 17
	StackTransitionTypeOverLeftRight  StackTransitionTypeEnum = 18
	StackTransitionTypeOverRightLeft  StackTransitionTypeEnum = 19
)

func StackTransitionTypeGetType() gi.GType {
	ret := _I.GetGType(514, "StackTransitionType")
	return ret
}

// Flags StateFlags
type StateFlags int

const (
	StateFlagsNormal       StateFlags = 0
	StateFlagsActive       StateFlags = 1
	StateFlagsPrelight     StateFlags = 2
	StateFlagsSelected     StateFlags = 4
	StateFlagsInsensitive  StateFlags = 8
	StateFlagsInconsistent StateFlags = 16
	StateFlagsFocused      StateFlags = 32
	StateFlagsBackdrop     StateFlags = 64
	StateFlagsDirLtr       StateFlags = 128
	StateFlagsDirRtl       StateFlags = 256
	StateFlagsLink         StateFlags = 512
	StateFlagsVisited      StateFlags = 1024
	StateFlagsChecked      StateFlags = 2048
	StateFlagsDropActive   StateFlags = 4096
)

func StateFlagsGetType() gi.GType {
	ret := _I.GetGType(515, "StateFlags")
	return ret
}

// Deprecated
//
// Enum StateType
type StateTypeEnum int

const (
	StateTypeNormal       StateTypeEnum = 0
	StateTypeActive       StateTypeEnum = 1
	StateTypePrelight     StateTypeEnum = 2
	StateTypeSelected     StateTypeEnum = 3
	StateTypeInsensitive  StateTypeEnum = 4
	StateTypeInconsistent StateTypeEnum = 5
	StateTypeFocused      StateTypeEnum = 6
)

func StateTypeGetType() gi.GType {
	ret := _I.GetGType(516, "StateType")
	return ret
}

// Object StatusIcon
type StatusIcon struct {
	g.Object
}

func WrapStatusIcon(p unsafe.Pointer) (r StatusIcon) { r.P = p; return }

type IStatusIcon interface{ P_StatusIcon() unsafe.Pointer }

func (v StatusIcon) P_StatusIcon() unsafe.Pointer { return v.P }
func StatusIconGetType() gi.GType {
	ret := _I.GetGType(517, "StatusIcon")
	return ret
}

// Deprecated
//
// gtk_status_icon_new
//
// [ result ] trans: everything
//
func NewStatusIcon() (result StatusIcon) {
	iv, err := _I.Get(2329, "StatusIcon", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_new_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func NewStatusIconFromFile(filename string) (result StatusIcon) {
	iv, err := _I.Get(2330, "StatusIcon", "new_from_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_new_from_gicon
//
// [ icon ] trans: nothing
//
// [ result ] trans: everything
//
func NewStatusIconFromGicon(icon g.IIcon) (result StatusIcon) {
	iv, err := _I.Get(2331, "StatusIcon", "new_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_icon}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_new_from_icon_name
//
// [ icon_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewStatusIconFromIconName(icon_name string) (result StatusIcon) {
	iv, err := _I.Get(2332, "StatusIcon", "new_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_icon_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_icon_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_new_from_pixbuf
//
// [ pixbuf ] trans: nothing
//
// [ result ] trans: everything
//
func NewStatusIconFromPixbuf(pixbuf gdkpixbuf.IPixbuf) (result StatusIcon) {
	iv, err := _I.Get(2333, "StatusIcon", "new_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pixbuf}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewStatusIconFromStock(stock_id string) (result StatusIcon) {
	iv, err := _I.Get(2334, "StatusIcon", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_position_menu
//
// [ menu ] trans: nothing
//
// [ x ] trans: everything, dir: inout
//
// [ y ] trans: everything, dir: inout
//
// [ push_in ] trans: everything, dir: out
//
// [ user_data ] trans: nothing
//
func StatusIconPositionMenu1(menu IMenu, x int /*TODO:TYPE*/, y int /*TODO:TYPE*/, user_data IStatusIcon) (push_in bool) {
	iv, err := _I.Get(2335, "StatusIcon", "position_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	var tmp unsafe.Pointer
	if menu != nil {
		tmp = menu.P_Menu()
	}
	var tmp1 unsafe.Pointer
	if user_data != nil {
		tmp1 = user_data.P_StatusIcon()
	}
	arg_menu := gi.NewPointerArgument(tmp)
	arg_push_in := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_user_data := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_menu, arg_push_in, arg_user_data}
	iv.Call(args, nil, &outArgs[0])
	push_in = outArgs[0].Bool()
	return
}

// Deprecated
//
// gtk_status_icon_get_geometry
//
// [ screen ] trans: nothing, dir: out
//
// [ area ] trans: nothing, dir: out
//
// [ orientation ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetGeometry(area gdk.Rectangle) (result bool, screen gdk.Screen, orientation OrientationEnum) {
	iv, err := _I.Get(2336, "StatusIcon", "get_geometry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_area := gi.NewPointerArgument(area.P)
	arg_orientation := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_screen, arg_area, arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	screen.P = outArgs[0].Pointer()
	orientation = OrientationEnum(outArgs[1].Int())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_status_icon_get_gicon
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetGicon() (result g.Icon) {
	iv, err := _I.Get(2337, "StatusIcon", "get_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_get_has_tooltip
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetHasTooltip() (result bool) {
	iv, err := _I.Get(2338, "StatusIcon", "get_has_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_status_icon_get_icon_name
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetIconName() (result string) {
	iv, err := _I.Get(2339, "StatusIcon", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_status_icon_get_pixbuf
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(2340, "StatusIcon", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_get_screen
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(2341, "StatusIcon", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_status_icon_get_size
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetSize() (result int32) {
	iv, err := _I.Get(2342, "StatusIcon", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_status_icon_get_stock
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetStock() (result string) {
	iv, err := _I.Get(2343, "StatusIcon", "get_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_status_icon_get_storage_type
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetStorageType() (result ImageTypeEnum) {
	iv, err := _I.Get(2344, "StatusIcon", "get_storage_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ImageTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_status_icon_get_title
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetTitle() (result string) {
	iv, err := _I.Get(2345, "StatusIcon", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// gtk_status_icon_get_tooltip_markup
//
// [ result ] trans: everything
//
func (v StatusIcon) GetTooltipMarkup() (result string) {
	iv, err := _I.Get(2346, "StatusIcon", "get_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_status_icon_get_tooltip_text
//
// [ result ] trans: everything
//
func (v StatusIcon) GetTooltipText() (result string) {
	iv, err := _I.Get(2347, "StatusIcon", "get_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_status_icon_get_visible
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetVisible() (result bool) {
	iv, err := _I.Get(2348, "StatusIcon", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_status_icon_get_x11_window_id
//
// [ result ] trans: nothing
//
func (v StatusIcon) GetX11WindowId() (result uint32) {
	iv, err := _I.Get(2349, "StatusIcon", "get_x11_window_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_status_icon_is_embedded
//
// [ result ] trans: nothing
//
func (v StatusIcon) IsEmbedded() (result bool) {
	iv, err := _I.Get(2350, "StatusIcon", "is_embedded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_status_icon_set_from_file
//
// [ filename ] trans: nothing
//
func (v StatusIcon) SetFromFile(filename string) {
	iv, err := _I.Get(2351, "StatusIcon", "set_from_file")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_v, arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// Deprecated
//
// gtk_status_icon_set_from_gicon
//
// [ icon ] trans: nothing
//
func (v StatusIcon) SetFromGicon(icon g.IIcon) {
	iv, err := _I.Get(2352, "StatusIcon", "set_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_status_icon_set_from_icon_name
//
// [ icon_name ] trans: nothing
//
func (v StatusIcon) SetFromIconName(icon_name string) {
	iv, err := _I.Get(2353, "StatusIcon", "set_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_status_icon_set_from_pixbuf
//
// [ pixbuf ] trans: nothing
//
func (v StatusIcon) SetFromPixbuf(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(2354, "StatusIcon", "set_from_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_status_icon_set_from_stock
//
// [ stock_id ] trans: nothing
//
func (v StatusIcon) SetFromStock(stock_id string) {
	iv, err := _I.Get(2355, "StatusIcon", "set_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// Deprecated
//
// gtk_status_icon_set_has_tooltip
//
// [ has_tooltip ] trans: nothing
//
func (v StatusIcon) SetHasTooltip(has_tooltip bool) {
	iv, err := _I.Get(2356, "StatusIcon", "set_has_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_tooltip := gi.NewBoolArgument(has_tooltip)
	args := []gi.Argument{arg_v, arg_has_tooltip}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_status_icon_set_name
//
// [ name ] trans: nothing
//
func (v StatusIcon) SetName(name string) {
	iv, err := _I.Get(2357, "StatusIcon", "set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_status_icon_set_screen
//
// [ screen ] trans: nothing
//
func (v StatusIcon) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(2358, "StatusIcon", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_status_icon_set_title
//
// [ title ] trans: nothing
//
func (v StatusIcon) SetTitle(title string) {
	iv, err := _I.Get(2359, "StatusIcon", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// Deprecated
//
// gtk_status_icon_set_tooltip_markup
//
// [ markup ] trans: nothing
//
func (v StatusIcon) SetTooltipMarkup(markup string) {
	iv, err := _I.Get(2360, "StatusIcon", "set_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// Deprecated
//
// gtk_status_icon_set_tooltip_text
//
// [ text ] trans: nothing
//
func (v StatusIcon) SetTooltipText(text string) {
	iv, err := _I.Get(2361, "StatusIcon", "set_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// Deprecated
//
// gtk_status_icon_set_visible
//
// [ visible ] trans: nothing
//
func (v StatusIcon) SetVisible(visible bool) {
	iv, err := _I.Get(2362, "StatusIcon", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// ignore GType struct StatusIconClass

// Struct StatusIconPrivate
type StatusIconPrivate struct {
	P unsafe.Pointer
}

func StatusIconPrivateGetType() gi.GType {
	ret := _I.GetGType(518, "StatusIconPrivate")
	return ret
}

// Object Statusbar
type Statusbar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapStatusbar(p unsafe.Pointer) (r Statusbar) { r.P = p; return }

type IStatusbar interface{ P_Statusbar() unsafe.Pointer }

func (v Statusbar) P_Statusbar() unsafe.Pointer        { return v.P }
func (v Statusbar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Statusbar) P_Buildable() unsafe.Pointer        { return v.P }
func (v Statusbar) P_Orientable() unsafe.Pointer       { return v.P }
func StatusbarGetType() gi.GType {
	ret := _I.GetGType(519, "Statusbar")
	return ret
}

// gtk_statusbar_new
//
// [ result ] trans: nothing
//
func NewStatusbar() (result Statusbar) {
	iv, err := _I.Get(2363, "Statusbar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_statusbar_get_context_id
//
// [ context_description ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Statusbar) GetContextId(context_description string) (result uint32) {
	iv, err := _I.Get(2364, "Statusbar", "get_context_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_context_description := gi.CString(context_description)
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_description := gi.NewStringArgument(c_context_description)
	args := []gi.Argument{arg_v, arg_context_description}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_context_description)
	result = ret.Uint32()
	return
}

// gtk_statusbar_get_message_area
//
// [ result ] trans: nothing
//
func (v Statusbar) GetMessageArea() (result Box) {
	iv, err := _I.Get(2365, "Statusbar", "get_message_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_statusbar_pop
//
// [ context_id ] trans: nothing
//
func (v Statusbar) Pop(context_id uint32) {
	iv, err := _I.Get(2366, "Statusbar", "pop")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_id := gi.NewUint32Argument(context_id)
	args := []gi.Argument{arg_v, arg_context_id}
	iv.Call(args, nil, nil)
}

// gtk_statusbar_push
//
// [ context_id ] trans: nothing
//
// [ text ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Statusbar) Push(context_id uint32, text string) (result uint32) {
	iv, err := _I.Get(2367, "Statusbar", "push")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_id := gi.NewUint32Argument(context_id)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_context_id, arg_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_text)
	result = ret.Uint32()
	return
}

// gtk_statusbar_remove
//
// [ context_id ] trans: nothing
//
// [ message_id ] trans: nothing
//
func (v Statusbar) Remove(context_id uint32, message_id uint32) {
	iv, err := _I.Get(2368, "Statusbar", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_id := gi.NewUint32Argument(context_id)
	arg_message_id := gi.NewUint32Argument(message_id)
	args := []gi.Argument{arg_v, arg_context_id, arg_message_id}
	iv.Call(args, nil, nil)
}

// gtk_statusbar_remove_all
//
// [ context_id ] trans: nothing
//
func (v Statusbar) RemoveAll(context_id uint32) {
	iv, err := _I.Get(2369, "Statusbar", "remove_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context_id := gi.NewUint32Argument(context_id)
	args := []gi.Argument{arg_v, arg_context_id}
	iv.Call(args, nil, nil)
}

// Object StatusbarAccessible
type StatusbarAccessible struct {
	atk.ComponentIfc
	ContainerAccessible
}

func WrapStatusbarAccessible(p unsafe.Pointer) (r StatusbarAccessible) { r.P = p; return }

type IStatusbarAccessible interface{ P_StatusbarAccessible() unsafe.Pointer }

func (v StatusbarAccessible) P_StatusbarAccessible() unsafe.Pointer { return v.P }
func (v StatusbarAccessible) P_Component() unsafe.Pointer           { return v.P }
func StatusbarAccessibleGetType() gi.GType {
	ret := _I.GetGType(520, "StatusbarAccessible")
	return ret
}

// ignore GType struct StatusbarAccessibleClass

// Struct StatusbarAccessiblePrivate
type StatusbarAccessiblePrivate struct {
	P unsafe.Pointer
}

func StatusbarAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(521, "StatusbarAccessiblePrivate")
	return ret
}

// ignore GType struct StatusbarClass

// Struct StatusbarPrivate
type StatusbarPrivate struct {
	P unsafe.Pointer
}

func StatusbarPrivateGetType() gi.GType {
	ret := _I.GetGType(522, "StatusbarPrivate")
	return ret
}

// Deprecated
//
// Struct StockItem
type StockItem struct {
	P unsafe.Pointer
}

const SizeOfStructStockItem = 32

func StockItemGetType() gi.GType {
	ret := _I.GetGType(523, "StockItem")
	return ret
}

// Deprecated
//
// gtk_stock_item_free
//
func (v StockItem) Free() {
	iv, err := _I.Get(2370, "StockItem", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object Style
type Style struct {
	g.Object
}

func WrapStyle(p unsafe.Pointer) (r Style) { r.P = p; return }

type IStyle interface{ P_Style() unsafe.Pointer }

func (v Style) P_Style() unsafe.Pointer { return v.P }
func StyleGetType() gi.GType {
	ret := _I.GetGType(524, "Style")
	return ret
}

// Deprecated
//
// gtk_style_new
//
// [ result ] trans: everything
//
func NewStyle() (result Style) {
	iv, err := _I.Get(2371, "Style", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_apply_default_background
//
// [ cr ] trans: nothing
//
// [ window ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Style) ApplyDefaultBackground(cr cairo.Context, window gdk.IWindow, state_type StateTypeEnum, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(2372, "Style", "apply_default_background")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_window := gi.NewPointerArgument(tmp)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_cr, arg_window, arg_state_type, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_copy
//
// [ result ] trans: everything
//
func (v Style) Copy() (result Style) {
	iv, err := _I.Get(2373, "Style", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_detach
//
func (v Style) Detach() {
	iv, err := _I.Get(2374, "Style", "detach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_style_get_style_property
//
// [ widget_type ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
func (v Style) GetStyleProperty(widget_type gi.GType, property_name string, value g.Value) {
	iv, err := _I.Get(2375, "Style", "get_style_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget_type := gi.NewUintArgument(uint(widget_type))
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_widget_type, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_style_has_context
//
// [ result ] trans: nothing
//
func (v Style) HasContext() (result bool) {
	iv, err := _I.Get(2376, "Style", "has_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_lookup_color
//
// [ color_name ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Style) LookupColor(color_name string, color gdk.Color) (result bool) {
	iv, err := _I.Get(2377, "Style", "lookup_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_color_name := gi.CString(color_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_color_name := gi.NewStringArgument(c_color_name)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color_name, arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_color_name)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_lookup_icon_set
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Style) LookupIconSet(stock_id string) (result IconSet) {
	iv, err := _I.Get(2378, "Style", "lookup_icon_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_render_icon
//
// [ source ] trans: nothing
//
// [ direction ] trans: nothing
//
// [ state ] trans: nothing
//
// [ size ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ result ] trans: everything
//
func (v Style) RenderIcon(source IconSource, direction TextDirectionEnum, state StateTypeEnum, size int32, widget IWidget, detail string) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(2379, "Style", "render_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_source := gi.NewPointerArgument(source.P)
	arg_direction := gi.NewIntArgument(int(direction))
	arg_state := gi.NewIntArgument(int(state))
	arg_size := gi.NewInt32Argument(size)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_detail := gi.NewStringArgument(c_detail)
	args := []gi.Argument{arg_v, arg_source, arg_direction, arg_state, arg_size, arg_widget, arg_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_detail)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_set_background
//
// [ window ] trans: nothing
//
// [ state_type ] trans: nothing
//
func (v Style) SetBackground(window gdk.IWindow, state_type StateTypeEnum) {
	iv, err := _I.Get(2380, "Style", "set_background")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	arg_state_type := gi.NewIntArgument(int(state_type))
	args := []gi.Argument{arg_v, arg_window, arg_state_type}
	iv.Call(args, nil, nil)
}

// ignore GType struct StyleClass

// Object StyleContext
type StyleContext struct {
	g.Object
}

func WrapStyleContext(p unsafe.Pointer) (r StyleContext) { r.P = p; return }

type IStyleContext interface{ P_StyleContext() unsafe.Pointer }

func (v StyleContext) P_StyleContext() unsafe.Pointer { return v.P }
func StyleContextGetType() gi.GType {
	ret := _I.GetGType(525, "StyleContext")
	return ret
}

// gtk_style_context_new
//
// [ result ] trans: everything
//
func NewStyleContext() (result StyleContext) {
	iv, err := _I.Get(2381, "StyleContext", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_add_provider_for_screen
//
// [ screen ] trans: nothing
//
// [ provider ] trans: nothing
//
// [ priority ] trans: nothing
//
func StyleContextAddProviderForScreen1(screen gdk.IScreen, provider IStyleProvider, priority uint32) {
	iv, err := _I.Get(2382, "StyleContext", "add_provider_for_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	var tmp1 unsafe.Pointer
	if provider != nil {
		tmp1 = provider.P_StyleProvider()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	arg_provider := gi.NewPointerArgument(tmp1)
	arg_priority := gi.NewUint32Argument(priority)
	args := []gi.Argument{arg_screen, arg_provider, arg_priority}
	iv.Call(args, nil, nil)
}

// gtk_style_context_remove_provider_for_screen
//
// [ screen ] trans: nothing
//
// [ provider ] trans: nothing
//
func StyleContextRemoveProviderForScreen1(screen gdk.IScreen, provider IStyleProvider) {
	iv, err := _I.Get(2383, "StyleContext", "remove_provider_for_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	var tmp1 unsafe.Pointer
	if provider != nil {
		tmp1 = provider.P_StyleProvider()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	arg_provider := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_screen, arg_provider}
	iv.Call(args, nil, nil)
}

// gtk_style_context_reset_widgets
//
// [ screen ] trans: nothing
//
func StyleContextResetWidgets1(screen gdk.IScreen) {
	iv, err := _I.Get(2384, "StyleContext", "reset_widgets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_screen}
	iv.Call(args, nil, nil)
}

// gtk_style_context_add_class
//
// [ class_name ] trans: nothing
//
func (v StyleContext) AddClass(class_name string) {
	iv, err := _I.Get(2385, "StyleContext", "add_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_class_name := gi.CString(class_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_class_name := gi.NewStringArgument(c_class_name)
	args := []gi.Argument{arg_v, arg_class_name}
	iv.Call(args, nil, nil)
	gi.Free(c_class_name)
}

// gtk_style_context_add_provider
//
// [ provider ] trans: nothing
//
// [ priority ] trans: nothing
//
func (v StyleContext) AddProvider(provider IStyleProvider, priority uint32) {
	iv, err := _I.Get(2386, "StyleContext", "add_provider")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if provider != nil {
		tmp = provider.P_StyleProvider()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_provider := gi.NewPointerArgument(tmp)
	arg_priority := gi.NewUint32Argument(priority)
	args := []gi.Argument{arg_v, arg_provider, arg_priority}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_add_region
//
// [ region_name ] trans: nothing
//
// [ flags ] trans: nothing
//
func (v StyleContext) AddRegion(region_name string, flags RegionFlags) {
	iv, err := _I.Get(2387, "StyleContext", "add_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_region_name := gi.CString(region_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_region_name := gi.NewStringArgument(c_region_name)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_region_name, arg_flags}
	iv.Call(args, nil, nil)
	gi.Free(c_region_name)
}

// Deprecated
//
// gtk_style_context_cancel_animations
//
// [ region_id ] trans: nothing
//
func (v StyleContext) CancelAnimations(region_id unsafe.Pointer) {
	iv, err := _I.Get(2388, "StyleContext", "cancel_animations")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region_id := gi.NewPointerArgument(region_id)
	args := []gi.Argument{arg_v, arg_region_id}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_get_background_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v StyleContext) GetBackgroundColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2389, "StyleContext", "get_background_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_style_context_get_border
//
// [ state ] trans: nothing
//
// [ border ] trans: nothing, dir: out
//
func (v StyleContext) GetBorder(state StateFlags, border Border) {
	iv, err := _I.Get(2390, "StyleContext", "get_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_border := gi.NewPointerArgument(border.P)
	args := []gi.Argument{arg_v, arg_state, arg_border}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_get_border_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v StyleContext) GetBorderColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2391, "StyleContext", "get_border_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// gtk_style_context_get_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v StyleContext) GetColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2392, "StyleContext", "get_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_get_direction
//
// [ result ] trans: nothing
//
func (v StyleContext) GetDirection() (result TextDirectionEnum) {
	iv, err := _I.Get(2393, "StyleContext", "get_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TextDirectionEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_style_context_get_font
//
// [ state ] trans: nothing
//
// [ result ] trans: nothing
//
func (v StyleContext) GetFont(state StateFlags) (result pango.FontDescription) {
	iv, err := _I.Get(2394, "StyleContext", "get_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_frame_clock
//
// [ result ] trans: nothing
//
func (v StyleContext) GetFrameClock() (result gdk.FrameClock) {
	iv, err := _I.Get(2395, "StyleContext", "get_frame_clock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_junction_sides
//
// [ result ] trans: nothing
//
func (v StyleContext) GetJunctionSides() (result JunctionSidesFlags) {
	iv, err := _I.Get(2396, "StyleContext", "get_junction_sides")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = JunctionSidesFlags(ret.Int())
	return
}

// gtk_style_context_get_margin
//
// [ state ] trans: nothing
//
// [ margin ] trans: nothing, dir: out
//
func (v StyleContext) GetMargin(state StateFlags, margin Border) {
	iv, err := _I.Get(2397, "StyleContext", "get_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_margin := gi.NewPointerArgument(margin.P)
	args := []gi.Argument{arg_v, arg_state, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_style_context_get_padding
//
// [ state ] trans: nothing
//
// [ padding ] trans: nothing, dir: out
//
func (v StyleContext) GetPadding(state StateFlags, padding Border) {
	iv, err := _I.Get(2398, "StyleContext", "get_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_padding := gi.NewPointerArgument(padding.P)
	args := []gi.Argument{arg_v, arg_state, arg_padding}
	iv.Call(args, nil, nil)
}

// gtk_style_context_get_parent
//
// [ result ] trans: nothing
//
func (v StyleContext) GetParent() (result StyleContext) {
	iv, err := _I.Get(2399, "StyleContext", "get_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_path
//
// [ result ] trans: nothing
//
func (v StyleContext) GetPath() (result WidgetPath) {
	iv, err := _I.Get(2400, "StyleContext", "get_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_property
//
// [ property ] trans: nothing
//
// [ state ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
func (v StyleContext) GetProperty(property string, state StateFlags, value g.Value) {
	iv, err := _I.Get(2401, "StyleContext", "get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	arg_state := gi.NewIntArgument(int(state))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property, arg_state, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// gtk_style_context_get_scale
//
// [ result ] trans: nothing
//
func (v StyleContext) GetScale() (result int32) {
	iv, err := _I.Get(2402, "StyleContext", "get_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_style_context_get_screen
//
// [ result ] trans: nothing
//
func (v StyleContext) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(2403, "StyleContext", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_section
//
// [ property ] trans: nothing
//
// [ result ] trans: nothing
//
func (v StyleContext) GetSection(property string) (result CssSection) {
	iv, err := _I.Get(2404, "StyleContext", "get_section")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	args := []gi.Argument{arg_v, arg_property}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_property)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_get_state
//
// [ result ] trans: nothing
//
func (v StyleContext) GetState() (result StateFlags) {
	iv, err := _I.Get(2405, "StyleContext", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateFlags(ret.Int())
	return
}

// gtk_style_context_get_style_property
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v StyleContext) GetStyleProperty(property_name string, value g.Value) {
	iv, err := _I.Get(2406, "StyleContext", "get_style_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_style_context_has_class
//
// [ class_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v StyleContext) HasClass(class_name string) (result bool) {
	iv, err := _I.Get(2407, "StyleContext", "has_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_class_name := gi.CString(class_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_class_name := gi.NewStringArgument(c_class_name)
	args := []gi.Argument{arg_v, arg_class_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_class_name)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_context_has_region
//
// [ region_name ] trans: nothing
//
// [ flags_return ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v StyleContext) HasRegion(region_name string) (result bool, flags_return RegionFlags) {
	iv, err := _I.Get(2408, "StyleContext", "has_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_region_name := gi.CString(region_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_region_name := gi.NewStringArgument(c_region_name)
	arg_flags_return := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_region_name, arg_flags_return}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_region_name)
	flags_return = RegionFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_context_invalidate
//
func (v StyleContext) Invalidate() {
	iv, err := _I.Get(2409, "StyleContext", "invalidate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_style_context_list_classes
//
// [ result ] trans: container
//
func (v StyleContext) ListClasses() (result g.List) {
	iv, err := _I.Get(2410, "StyleContext", "list_classes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_context_list_regions
//
// [ result ] trans: container
//
func (v StyleContext) ListRegions() (result g.List) {
	iv, err := _I.Get(2411, "StyleContext", "list_regions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_context_lookup_color
//
// [ color_name ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v StyleContext) LookupColor(color_name string, color gdk.RGBA) (result bool) {
	iv, err := _I.Get(2412, "StyleContext", "lookup_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_color_name := gi.CString(color_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_color_name := gi.NewStringArgument(c_color_name)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color_name, arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_color_name)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_context_lookup_icon_set
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v StyleContext) LookupIconSet(stock_id string) (result IconSet) {
	iv, err := _I.Get(2413, "StyleContext", "lookup_icon_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_context_notify_state_change
//
// [ window ] trans: nothing
//
// [ region_id ] trans: nothing
//
// [ state ] trans: nothing
//
// [ state_value ] trans: nothing
//
func (v StyleContext) NotifyStateChange(window gdk.IWindow, region_id unsafe.Pointer, state StateTypeEnum, state_value bool) {
	iv, err := _I.Get(2414, "StyleContext", "notify_state_change")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	arg_region_id := gi.NewPointerArgument(region_id)
	arg_state := gi.NewIntArgument(int(state))
	arg_state_value := gi.NewBoolArgument(state_value)
	args := []gi.Argument{arg_v, arg_window, arg_region_id, arg_state, arg_state_value}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_pop_animatable_region
//
func (v StyleContext) PopAnimatableRegion() {
	iv, err := _I.Get(2415, "StyleContext", "pop_animatable_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_push_animatable_region
//
// [ region_id ] trans: nothing
//
func (v StyleContext) PushAnimatableRegion(region_id unsafe.Pointer) {
	iv, err := _I.Get(2416, "StyleContext", "push_animatable_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region_id := gi.NewPointerArgument(region_id)
	args := []gi.Argument{arg_v, arg_region_id}
	iv.Call(args, nil, nil)
}

// gtk_style_context_remove_class
//
// [ class_name ] trans: nothing
//
func (v StyleContext) RemoveClass(class_name string) {
	iv, err := _I.Get(2417, "StyleContext", "remove_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_class_name := gi.CString(class_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_class_name := gi.NewStringArgument(c_class_name)
	args := []gi.Argument{arg_v, arg_class_name}
	iv.Call(args, nil, nil)
	gi.Free(c_class_name)
}

// gtk_style_context_remove_provider
//
// [ provider ] trans: nothing
//
func (v StyleContext) RemoveProvider(provider IStyleProvider) {
	iv, err := _I.Get(2418, "StyleContext", "remove_provider")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if provider != nil {
		tmp = provider.P_StyleProvider()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_provider := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_provider}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_remove_region
//
// [ region_name ] trans: nothing
//
func (v StyleContext) RemoveRegion(region_name string) {
	iv, err := _I.Get(2419, "StyleContext", "remove_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_region_name := gi.CString(region_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_region_name := gi.NewStringArgument(c_region_name)
	args := []gi.Argument{arg_v, arg_region_name}
	iv.Call(args, nil, nil)
	gi.Free(c_region_name)
}

// gtk_style_context_restore
//
func (v StyleContext) Restore() {
	iv, err := _I.Get(2420, "StyleContext", "restore")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_style_context_save
//
func (v StyleContext) Save() {
	iv, err := _I.Get(2421, "StyleContext", "save")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_scroll_animations
//
// [ window ] trans: nothing
//
// [ dx ] trans: nothing
//
// [ dy ] trans: nothing
//
func (v StyleContext) ScrollAnimations(window gdk.IWindow, dx int32, dy int32) {
	iv, err := _I.Get(2422, "StyleContext", "scroll_animations")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	arg_dx := gi.NewInt32Argument(dx)
	arg_dy := gi.NewInt32Argument(dy)
	args := []gi.Argument{arg_v, arg_window, arg_dx, arg_dy}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_set_background
//
// [ window ] trans: nothing
//
func (v StyleContext) SetBackground(window gdk.IWindow) {
	iv, err := _I.Get(2423, "StyleContext", "set_background")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_set_direction
//
// [ direction ] trans: nothing
//
func (v StyleContext) SetDirection(direction TextDirectionEnum) {
	iv, err := _I.Get(2424, "StyleContext", "set_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_frame_clock
//
// [ frame_clock ] trans: nothing
//
func (v StyleContext) SetFrameClock(frame_clock gdk.IFrameClock) {
	iv, err := _I.Get(2425, "StyleContext", "set_frame_clock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if frame_clock != nil {
		tmp = frame_clock.P_FrameClock()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_frame_clock := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_frame_clock}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_junction_sides
//
// [ sides ] trans: nothing
//
func (v StyleContext) SetJunctionSides(sides JunctionSidesFlags) {
	iv, err := _I.Get(2426, "StyleContext", "set_junction_sides")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sides := gi.NewIntArgument(int(sides))
	args := []gi.Argument{arg_v, arg_sides}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_parent
//
// [ parent ] trans: nothing
//
func (v StyleContext) SetParent(parent IStyleContext) {
	iv, err := _I.Get(2427, "StyleContext", "set_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_StyleContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_path
//
// [ path ] trans: nothing
//
func (v StyleContext) SetPath(path WidgetPath) {
	iv, err := _I.Get(2428, "StyleContext", "set_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_scale
//
// [ scale ] trans: nothing
//
func (v StyleContext) SetScale(scale int32) {
	iv, err := _I.Get(2429, "StyleContext", "set_scale")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_scale := gi.NewInt32Argument(scale)
	args := []gi.Argument{arg_v, arg_scale}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_screen
//
// [ screen ] trans: nothing
//
func (v StyleContext) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(2430, "StyleContext", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// gtk_style_context_set_state
//
// [ flags ] trans: nothing
//
func (v StyleContext) SetState(flags StateFlags) {
	iv, err := _I.Get(2431, "StyleContext", "set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_context_state_is_running
//
// [ state ] trans: nothing
//
// [ progress ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v StyleContext) StateIsRunning(state StateTypeEnum) (result bool, progress float64) {
	iv, err := _I.Get(2432, "StyleContext", "state_is_running")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_progress := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_state, arg_progress}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	progress = outArgs[0].Double()
	result = ret.Bool()
	return
}

// gtk_style_context_to_string
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v StyleContext) ToString(flags StyleContextPrintFlags) (result string) {
	iv, err := _I.Get(2433, "StyleContext", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct StyleContextClass

// Flags StyleContextPrintFlags
type StyleContextPrintFlags int

const (
	StyleContextPrintFlagsNone      StyleContextPrintFlags = 0
	StyleContextPrintFlagsRecurse   StyleContextPrintFlags = 1
	StyleContextPrintFlagsShowStyle StyleContextPrintFlags = 2
)

func StyleContextPrintFlagsGetType() gi.GType {
	ret := _I.GetGType(526, "StyleContextPrintFlags")
	return ret
}

// Struct StyleContextPrivate
type StyleContextPrivate struct {
	P unsafe.Pointer
}

func StyleContextPrivateGetType() gi.GType {
	ret := _I.GetGType(527, "StyleContextPrivate")
	return ret
}

// Object StyleProperties
type StyleProperties struct {
	StyleProviderIfc
	g.Object
}

func WrapStyleProperties(p unsafe.Pointer) (r StyleProperties) { r.P = p; return }

type IStyleProperties interface{ P_StyleProperties() unsafe.Pointer }

func (v StyleProperties) P_StyleProperties() unsafe.Pointer { return v.P }
func (v StyleProperties) P_StyleProvider() unsafe.Pointer   { return v.P }
func StylePropertiesGetType() gi.GType {
	ret := _I.GetGType(528, "StyleProperties")
	return ret
}

// Deprecated
//
// gtk_style_properties_new
//
// [ result ] trans: everything
//
func NewStyleProperties() (result StyleProperties) {
	iv, err := _I.Get(2434, "StyleProperties", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_properties_clear
//
func (v StyleProperties) Clear() {
	iv, err := _I.Get(2435, "StyleProperties", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_properties_get_property
//
// [ property ] trans: nothing
//
// [ state ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v StyleProperties) GetProperty(property string, state StateFlags, value g.Value) (result bool) {
	iv, err := _I.Get(2436, "StyleProperties", "get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	arg_state := gi.NewIntArgument(int(state))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property, arg_state, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_property)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_style_properties_lookup_color
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v StyleProperties) LookupColor(name string) (result SymbolicColor) {
	iv, err := _I.Get(2437, "StyleProperties", "lookup_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_properties_map_color
//
// [ name ] trans: nothing
//
// [ color ] trans: nothing
//
func (v StyleProperties) MapColor(name string, color SymbolicColor) {
	iv, err := _I.Get(2438, "StyleProperties", "map_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_name, arg_color}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_style_properties_merge
//
// [ props_to_merge ] trans: nothing
//
// [ replace ] trans: nothing
//
func (v StyleProperties) Merge(props_to_merge IStyleProperties, replace bool) {
	iv, err := _I.Get(2439, "StyleProperties", "merge")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if props_to_merge != nil {
		tmp = props_to_merge.P_StyleProperties()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_props_to_merge := gi.NewPointerArgument(tmp)
	arg_replace := gi.NewBoolArgument(replace)
	args := []gi.Argument{arg_v, arg_props_to_merge, arg_replace}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_style_properties_set_property
//
// [ property ] trans: nothing
//
// [ state ] trans: nothing
//
// [ value ] trans: nothing
//
func (v StyleProperties) SetProperty(property string, state StateFlags, value g.Value) {
	iv, err := _I.Get(2440, "StyleProperties", "set_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	arg_state := gi.NewIntArgument(int(state))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property, arg_state, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// Deprecated
//
// gtk_style_properties_unset_property
//
// [ property ] trans: nothing
//
// [ state ] trans: nothing
//
func (v StyleProperties) UnsetProperty(property string, state StateFlags) {
	iv, err := _I.Get(2441, "StyleProperties", "unset_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_property, arg_state}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// ignore GType struct StylePropertiesClass

// Struct StylePropertiesPrivate
type StylePropertiesPrivate struct {
	P unsafe.Pointer
}

func StylePropertiesPrivateGetType() gi.GType {
	ret := _I.GetGType(529, "StylePropertiesPrivate")
	return ret
}

type StylePropertyParserStruct struct {
	F_string string
	F_value  g.Value
}

func GetPointer_myStylePropertyParser() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkStylePropertyParser())
}

//export myGtkStylePropertyParser
func myGtkStylePropertyParser(string *C.gchar, value *C.GValue) {
	// TODO: not found user_data
}

// Interface StyleProvider
type StyleProvider struct {
	StyleProviderIfc
	P unsafe.Pointer
}
type StyleProviderIfc struct{}
type IStyleProvider interface{ P_StyleProvider() unsafe.Pointer }

func (v StyleProvider) P_StyleProvider() unsafe.Pointer { return v.P }
func StyleProviderGetType() gi.GType {
	ret := _I.GetGType(530, "StyleProvider")
	return ret
}

// Deprecated
//
// gtk_style_provider_get_icon_factory
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *StyleProviderIfc) GetIconFactory(path WidgetPath) (result IconFactory) {
	iv, err := _I.Get(2442, "StyleProvider", "get_icon_factory")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_style_provider_get_style
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func (v *StyleProviderIfc) GetStyle(path WidgetPath) (result StyleProperties) {
	iv, err := _I.Get(2443, "StyleProvider", "get_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_style_provider_get_style_property
//
// [ path ] trans: nothing
//
// [ state ] trans: nothing
//
// [ pspec ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v *StyleProviderIfc) GetStyleProperty(path WidgetPath, state StateFlags, pspec g.IParamSpec, value g.Value) (result bool) {
	iv, err := _I.Get(2444, "StyleProvider", "get_style_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_path, arg_state, arg_pspec, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct StyleProviderIface

// Object Switch
type Switch struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Widget
}

func WrapSwitch(p unsafe.Pointer) (r Switch) { r.P = p; return }

type ISwitch interface{ P_Switch() unsafe.Pointer }

func (v Switch) P_Switch() unsafe.Pointer           { return v.P }
func (v Switch) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Switch) P_Actionable() unsafe.Pointer       { return v.P }
func (v Switch) P_Activatable() unsafe.Pointer      { return v.P }
func (v Switch) P_Buildable() unsafe.Pointer        { return v.P }
func SwitchGetType() gi.GType {
	ret := _I.GetGType(531, "Switch")
	return ret
}

// gtk_switch_new
//
// [ result ] trans: nothing
//
func NewSwitch() (result Switch) {
	iv, err := _I.Get(2445, "Switch", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_switch_get_active
//
// [ result ] trans: nothing
//
func (v Switch) GetActive() (result bool) {
	iv, err := _I.Get(2446, "Switch", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_switch_get_state
//
// [ result ] trans: nothing
//
func (v Switch) GetState() (result bool) {
	iv, err := _I.Get(2447, "Switch", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_switch_set_active
//
// [ is_active ] trans: nothing
//
func (v Switch) SetActive(is_active bool) {
	iv, err := _I.Get(2448, "Switch", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_active := gi.NewBoolArgument(is_active)
	args := []gi.Argument{arg_v, arg_is_active}
	iv.Call(args, nil, nil)
}

// gtk_switch_set_state
//
// [ state ] trans: nothing
//
func (v Switch) SetState(state bool) {
	iv, err := _I.Get(2449, "Switch", "set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewBoolArgument(state)
	args := []gi.Argument{arg_v, arg_state}
	iv.Call(args, nil, nil)
}

// Object SwitchAccessible
type SwitchAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	WidgetAccessible
}

func WrapSwitchAccessible(p unsafe.Pointer) (r SwitchAccessible) { r.P = p; return }

type ISwitchAccessible interface{ P_SwitchAccessible() unsafe.Pointer }

func (v SwitchAccessible) P_SwitchAccessible() unsafe.Pointer { return v.P }
func (v SwitchAccessible) P_Action() unsafe.Pointer           { return v.P }
func (v SwitchAccessible) P_Component() unsafe.Pointer        { return v.P }
func SwitchAccessibleGetType() gi.GType {
	ret := _I.GetGType(532, "SwitchAccessible")
	return ret
}

// ignore GType struct SwitchAccessibleClass

// Struct SwitchAccessiblePrivate
type SwitchAccessiblePrivate struct {
	P unsafe.Pointer
}

func SwitchAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(533, "SwitchAccessiblePrivate")
	return ret
}

// ignore GType struct SwitchClass

// Struct SwitchPrivate
type SwitchPrivate struct {
	P unsafe.Pointer
}

func SwitchPrivateGetType() gi.GType {
	ret := _I.GetGType(534, "SwitchPrivate")
	return ret
}

// Struct SymbolicColor
type SymbolicColor struct {
	P unsafe.Pointer
}

func SymbolicColorGetType() gi.GType {
	ret := _I.GetGType(535, "SymbolicColor")
	return ret
}

// Deprecated
//
// gtk_symbolic_color_new_alpha
//
// [ color ] trans: nothing
//
// [ factor ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorAlpha(color SymbolicColor, factor float64) (result SymbolicColor) {
	iv, err := _I.Get(2450, "SymbolicColor", "new_alpha")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_color := gi.NewPointerArgument(color.P)
	arg_factor := gi.NewDoubleArgument(factor)
	args := []gi.Argument{arg_color, arg_factor}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_new_literal
//
// [ color ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorLiteral(color gdk.RGBA) (result SymbolicColor) {
	iv, err := _I.Get(2451, "SymbolicColor", "new_literal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_new_mix
//
// [ color1 ] trans: nothing
//
// [ color2 ] trans: nothing
//
// [ factor ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorMix(color1 SymbolicColor, color2 SymbolicColor, factor float64) (result SymbolicColor) {
	iv, err := _I.Get(2452, "SymbolicColor", "new_mix")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_color1 := gi.NewPointerArgument(color1.P)
	arg_color2 := gi.NewPointerArgument(color2.P)
	arg_factor := gi.NewDoubleArgument(factor)
	args := []gi.Argument{arg_color1, arg_color2, arg_factor}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_new_name
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorName(name string) (result SymbolicColor) {
	iv, err := _I.Get(2453, "SymbolicColor", "new_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_new_shade
//
// [ color ] trans: nothing
//
// [ factor ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorShade(color SymbolicColor, factor float64) (result SymbolicColor) {
	iv, err := _I.Get(2454, "SymbolicColor", "new_shade")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_color := gi.NewPointerArgument(color.P)
	arg_factor := gi.NewDoubleArgument(factor)
	args := []gi.Argument{arg_color, arg_factor}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_new_win32
//
// [ theme_class ] trans: nothing
//
// [ id ] trans: nothing
//
// [ result ] trans: everything
//
func NewSymbolicColorWin32(theme_class string, id int32) (result SymbolicColor) {
	iv, err := _I.Get(2455, "SymbolicColor", "new_win32")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_theme_class := gi.CString(theme_class)
	arg_theme_class := gi.NewStringArgument(c_theme_class)
	arg_id := gi.NewInt32Argument(id)
	args := []gi.Argument{arg_theme_class, arg_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_theme_class)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_ref
//
// [ result ] trans: everything
//
func (v SymbolicColor) Ref() (result SymbolicColor) {
	iv, err := _I.Get(2456, "SymbolicColor", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_symbolic_color_resolve
//
// [ props ] trans: nothing
//
// [ resolved_color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v SymbolicColor) Resolve(props IStyleProperties, resolved_color gdk.RGBA) (result bool) {
	iv, err := _I.Get(2457, "SymbolicColor", "resolve")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if props != nil {
		tmp = props.P_StyleProperties()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_props := gi.NewPointerArgument(tmp)
	arg_resolved_color := gi.NewPointerArgument(resolved_color.P)
	args := []gi.Argument{arg_v, arg_props, arg_resolved_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_symbolic_color_to_string
//
// [ result ] trans: everything
//
func (v SymbolicColor) ToString() (result string) {
	iv, err := _I.Get(2458, "SymbolicColor", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_symbolic_color_unref
//
func (v SymbolicColor) Unref() {
	iv, err := _I.Get(2459, "SymbolicColor", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object Table
type Table struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Container
}

func WrapTable(p unsafe.Pointer) (r Table) { r.P = p; return }

type ITable interface{ P_Table() unsafe.Pointer }

func (v Table) P_Table() unsafe.Pointer            { return v.P }
func (v Table) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Table) P_Buildable() unsafe.Pointer        { return v.P }
func TableGetType() gi.GType {
	ret := _I.GetGType(536, "Table")
	return ret
}

// Deprecated
//
// gtk_table_new
//
// [ rows ] trans: nothing
//
// [ columns ] trans: nothing
//
// [ homogeneous ] trans: nothing
//
// [ result ] trans: nothing
//
func NewTable(rows uint32, columns uint32, homogeneous bool) (result Table) {
	iv, err := _I.Get(2460, "Table", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_rows := gi.NewUint32Argument(rows)
	arg_columns := gi.NewUint32Argument(columns)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_rows, arg_columns, arg_homogeneous}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_table_attach
//
// [ child ] trans: nothing
//
// [ left_attach ] trans: nothing
//
// [ right_attach ] trans: nothing
//
// [ top_attach ] trans: nothing
//
// [ bottom_attach ] trans: nothing
//
// [ xoptions ] trans: nothing
//
// [ yoptions ] trans: nothing
//
// [ xpadding ] trans: nothing
//
// [ ypadding ] trans: nothing
//
func (v Table) Attach(child IWidget, left_attach uint32, right_attach uint32, top_attach uint32, bottom_attach uint32, xoptions AttachOptionsFlags, yoptions AttachOptionsFlags, xpadding uint32, ypadding uint32) {
	iv, err := _I.Get(2461, "Table", "attach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_left_attach := gi.NewUint32Argument(left_attach)
	arg_right_attach := gi.NewUint32Argument(right_attach)
	arg_top_attach := gi.NewUint32Argument(top_attach)
	arg_bottom_attach := gi.NewUint32Argument(bottom_attach)
	arg_xoptions := gi.NewIntArgument(int(xoptions))
	arg_yoptions := gi.NewIntArgument(int(yoptions))
	arg_xpadding := gi.NewUint32Argument(xpadding)
	arg_ypadding := gi.NewUint32Argument(ypadding)
	args := []gi.Argument{arg_v, arg_child, arg_left_attach, arg_right_attach, arg_top_attach, arg_bottom_attach, arg_xoptions, arg_yoptions, arg_xpadding, arg_ypadding}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_attach_defaults
//
// [ widget ] trans: nothing
//
// [ left_attach ] trans: nothing
//
// [ right_attach ] trans: nothing
//
// [ top_attach ] trans: nothing
//
// [ bottom_attach ] trans: nothing
//
func (v Table) AttachDefaults(widget IWidget, left_attach uint32, right_attach uint32, top_attach uint32, bottom_attach uint32) {
	iv, err := _I.Get(2462, "Table", "attach_defaults")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_left_attach := gi.NewUint32Argument(left_attach)
	arg_right_attach := gi.NewUint32Argument(right_attach)
	arg_top_attach := gi.NewUint32Argument(top_attach)
	arg_bottom_attach := gi.NewUint32Argument(bottom_attach)
	args := []gi.Argument{arg_v, arg_widget, arg_left_attach, arg_right_attach, arg_top_attach, arg_bottom_attach}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_get_col_spacing
//
// [ column ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Table) GetColSpacing(column uint32) (result uint32) {
	iv, err := _I.Get(2463, "Table", "get_col_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewUint32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_table_get_default_col_spacing
//
// [ result ] trans: nothing
//
func (v Table) GetDefaultColSpacing() (result uint32) {
	iv, err := _I.Get(2464, "Table", "get_default_col_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_table_get_default_row_spacing
//
// [ result ] trans: nothing
//
func (v Table) GetDefaultRowSpacing() (result uint32) {
	iv, err := _I.Get(2465, "Table", "get_default_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_table_get_homogeneous
//
// [ result ] trans: nothing
//
func (v Table) GetHomogeneous() (result bool) {
	iv, err := _I.Get(2466, "Table", "get_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_table_get_row_spacing
//
// [ row ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Table) GetRowSpacing(row uint32) (result uint32) {
	iv, err := _I.Get(2467, "Table", "get_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewUint32Argument(row)
	args := []gi.Argument{arg_v, arg_row}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_table_get_size
//
// [ rows ] trans: everything, dir: out
//
// [ columns ] trans: everything, dir: out
//
func (v Table) GetSize() (rows uint32, columns uint32) {
	iv, err := _I.Get(2468, "Table", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_rows := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_columns := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_rows, arg_columns}
	iv.Call(args, nil, &outArgs[0])
	rows = outArgs[0].Uint32()
	columns = outArgs[1].Uint32()
	return
}

// Deprecated
//
// gtk_table_resize
//
// [ rows ] trans: nothing
//
// [ columns ] trans: nothing
//
func (v Table) Resize(rows uint32, columns uint32) {
	iv, err := _I.Get(2469, "Table", "resize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rows := gi.NewUint32Argument(rows)
	arg_columns := gi.NewUint32Argument(columns)
	args := []gi.Argument{arg_v, arg_rows, arg_columns}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_set_col_spacing
//
// [ column ] trans: nothing
//
// [ spacing ] trans: nothing
//
func (v Table) SetColSpacing(column uint32, spacing uint32) {
	iv, err := _I.Get(2470, "Table", "set_col_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewUint32Argument(column)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_column, arg_spacing}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_set_col_spacings
//
// [ spacing ] trans: nothing
//
func (v Table) SetColSpacings(spacing uint32) {
	iv, err := _I.Get(2471, "Table", "set_col_spacings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_set_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v Table) SetHomogeneous(homogeneous bool) {
	iv, err := _I.Get(2472, "Table", "set_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_set_row_spacing
//
// [ row ] trans: nothing
//
// [ spacing ] trans: nothing
//
func (v Table) SetRowSpacing(row uint32, spacing uint32) {
	iv, err := _I.Get(2473, "Table", "set_row_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_row := gi.NewUint32Argument(row)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_row, arg_spacing}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_table_set_row_spacings
//
// [ spacing ] trans: nothing
//
func (v Table) SetRowSpacings(spacing uint32) {
	iv, err := _I.Get(2474, "Table", "set_row_spacings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewUint32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// Struct TableChild
type TableChild struct {
	P unsafe.Pointer
}

const SizeOfStructTableChild = 48

func TableChildGetType() gi.GType {
	ret := _I.GetGType(537, "TableChild")
	return ret
}

// ignore GType struct TableClass

// Struct TablePrivate
type TablePrivate struct {
	P unsafe.Pointer
}

func TablePrivateGetType() gi.GType {
	ret := _I.GetGType(538, "TablePrivate")
	return ret
}

// Struct TableRowCol
type TableRowCol struct {
	P unsafe.Pointer
}

const SizeOfStructTableRowCol = 28

func TableRowColGetType() gi.GType {
	ret := _I.GetGType(539, "TableRowCol")
	return ret
}

// Struct TargetEntry
type TargetEntry struct {
	P unsafe.Pointer
}

const SizeOfStructTargetEntry = 16

func TargetEntryGetType() gi.GType {
	ret := _I.GetGType(540, "TargetEntry")
	return ret
}

// gtk_target_entry_new
//
// [ target ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
// [ result ] trans: everything
//
func NewTargetEntry(target string, flags uint32, info uint32) (result TargetEntry) {
	iv, err := _I.Get(2475, "TargetEntry", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_target := gi.CString(target)
	arg_target := gi.NewStringArgument(c_target)
	arg_flags := gi.NewUint32Argument(flags)
	arg_info := gi.NewUint32Argument(info)
	args := []gi.Argument{arg_target, arg_flags, arg_info}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_target)
	result.P = ret.Pointer()
	return
}

// gtk_target_entry_copy
//
// [ result ] trans: everything
//
func (v TargetEntry) Copy() (result TargetEntry) {
	iv, err := _I.Get(2476, "TargetEntry", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_target_entry_free
//
func (v TargetEntry) Free() {
	iv, err := _I.Get(2477, "TargetEntry", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Flags TargetFlags
type TargetFlags int

const (
	TargetFlagsSameApp     TargetFlags = 1
	TargetFlagsSameWidget  TargetFlags = 2
	TargetFlagsOtherApp    TargetFlags = 4
	TargetFlagsOtherWidget TargetFlags = 8
)

func TargetFlagsGetType() gi.GType {
	ret := _I.GetGType(541, "TargetFlags")
	return ret
}

// Struct TargetList
type TargetList struct {
	P unsafe.Pointer
}

func TargetListGetType() gi.GType {
	ret := _I.GetGType(542, "TargetList")
	return ret
}

// gtk_target_list_new
//
// [ targets ] trans: nothing
//
// [ ntargets ] trans: nothing
//
// [ result ] trans: everything
//
func NewTargetList(targets unsafe.Pointer, ntargets uint32) (result TargetList) {
	iv, err := _I.Get(2478, "TargetList", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_targets := gi.NewPointerArgument(targets)
	arg_ntargets := gi.NewUint32Argument(ntargets)
	args := []gi.Argument{arg_targets, arg_ntargets}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_target_list_add
//
// [ target ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
func (v TargetList) Add(target gdk.Atom, flags uint32, info uint32) {
	iv, err := _I.Get(2479, "TargetList", "add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	arg_flags := gi.NewUint32Argument(flags)
	arg_info := gi.NewUint32Argument(info)
	args := []gi.Argument{arg_v, arg_target, arg_flags, arg_info}
	iv.Call(args, nil, nil)
}

// gtk_target_list_add_image_targets
//
// [ info ] trans: nothing
//
// [ writable ] trans: nothing
//
func (v TargetList) AddImageTargets(info uint32, writable bool) {
	iv, err := _I.Get(2480, "TargetList", "add_image_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewUint32Argument(info)
	arg_writable := gi.NewBoolArgument(writable)
	args := []gi.Argument{arg_v, arg_info, arg_writable}
	iv.Call(args, nil, nil)
}

// gtk_target_list_add_rich_text_targets
//
// [ info ] trans: nothing
//
// [ deserializable ] trans: nothing
//
// [ buffer ] trans: nothing
//
func (v TargetList) AddRichTextTargets(info uint32, deserializable bool, buffer ITextBuffer) {
	iv, err := _I.Get(2481, "TargetList", "add_rich_text_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewUint32Argument(info)
	arg_deserializable := gi.NewBoolArgument(deserializable)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_info, arg_deserializable, arg_buffer}
	iv.Call(args, nil, nil)
}

// gtk_target_list_add_table
//
// [ targets ] trans: nothing
//
// [ ntargets ] trans: nothing
//
func (v TargetList) AddTable(targets unsafe.Pointer, ntargets uint32) {
	iv, err := _I.Get(2482, "TargetList", "add_table")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets)
	arg_ntargets := gi.NewUint32Argument(ntargets)
	args := []gi.Argument{arg_v, arg_targets, arg_ntargets}
	iv.Call(args, nil, nil)
}

// gtk_target_list_add_text_targets
//
// [ info ] trans: nothing
//
func (v TargetList) AddTextTargets(info uint32) {
	iv, err := _I.Get(2483, "TargetList", "add_text_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewUint32Argument(info)
	args := []gi.Argument{arg_v, arg_info}
	iv.Call(args, nil, nil)
}

// gtk_target_list_add_uri_targets
//
// [ info ] trans: nothing
//
func (v TargetList) AddUriTargets(info uint32) {
	iv, err := _I.Get(2484, "TargetList", "add_uri_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewUint32Argument(info)
	args := []gi.Argument{arg_v, arg_info}
	iv.Call(args, nil, nil)
}

// gtk_target_list_find
//
// [ target ] trans: nothing
//
// [ info ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TargetList) Find(target gdk.Atom) (result bool, info uint32) {
	iv, err := _I.Get(2485, "TargetList", "find")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	arg_info := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_target, arg_info}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	info = outArgs[0].Uint32()
	result = ret.Bool()
	return
}

// gtk_target_list_ref
//
// [ result ] trans: everything
//
func (v TargetList) Ref() (result TargetList) {
	iv, err := _I.Get(2486, "TargetList", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_target_list_remove
//
// [ target ] trans: nothing
//
func (v TargetList) Remove(target gdk.Atom) {
	iv, err := _I.Get(2487, "TargetList", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target := gi.NewPointerArgument(target.P)
	args := []gi.Argument{arg_v, arg_target}
	iv.Call(args, nil, nil)
}

// gtk_target_list_unref
//
func (v TargetList) Unref() {
	iv, err := _I.Get(2488, "TargetList", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct TargetPair
type TargetPair struct {
	P unsafe.Pointer
}

const SizeOfStructTargetPair = 16

func TargetPairGetType() gi.GType {
	ret := _I.GetGType(543, "TargetPair")
	return ret
}

// Object TearoffMenuItem
type TearoffMenuItem struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	MenuItem
}

func WrapTearoffMenuItem(p unsafe.Pointer) (r TearoffMenuItem) { r.P = p; return }

type ITearoffMenuItem interface{ P_TearoffMenuItem() unsafe.Pointer }

func (v TearoffMenuItem) P_TearoffMenuItem() unsafe.Pointer  { return v.P }
func (v TearoffMenuItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v TearoffMenuItem) P_Actionable() unsafe.Pointer       { return v.P }
func (v TearoffMenuItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v TearoffMenuItem) P_Buildable() unsafe.Pointer        { return v.P }
func TearoffMenuItemGetType() gi.GType {
	ret := _I.GetGType(544, "TearoffMenuItem")
	return ret
}

// Deprecated
//
// gtk_tearoff_menu_item_new
//
// [ result ] trans: nothing
//
func NewTearoffMenuItem() (result TearoffMenuItem) {
	iv, err := _I.Get(2489, "TearoffMenuItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct TearoffMenuItemClass

// Struct TearoffMenuItemPrivate
type TearoffMenuItemPrivate struct {
	P unsafe.Pointer
}

func TearoffMenuItemPrivateGetType() gi.GType {
	ret := _I.GetGType(545, "TearoffMenuItemPrivate")
	return ret
}

// Struct TextAppearance
type TextAppearance struct {
	P unsafe.Pointer
}

const SizeOfStructTextAppearance = 48

func TextAppearanceGetType() gi.GType {
	ret := _I.GetGType(546, "TextAppearance")
	return ret
}

// Struct TextAttributes
type TextAttributes struct {
	P unsafe.Pointer
}

const SizeOfStructTextAttributes = 168

func TextAttributesGetType() gi.GType {
	ret := _I.GetGType(547, "TextAttributes")
	return ret
}

// gtk_text_attributes_new
//
// [ result ] trans: everything
//
func NewTextAttributes() (result TextAttributes) {
	iv, err := _I.Get(2490, "TextAttributes", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_attributes_copy
//
// [ result ] trans: everything
//
func (v TextAttributes) Copy() (result TextAttributes) {
	iv, err := _I.Get(2491, "TextAttributes", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_attributes_copy_values
//
// [ dest ] trans: nothing
//
func (v TextAttributes) CopyValues(dest TextAttributes) {
	iv, err := _I.Get(2492, "TextAttributes", "copy_values")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_dest := gi.NewPointerArgument(dest.P)
	args := []gi.Argument{arg_v, arg_dest}
	iv.Call(args, nil, nil)
}

// gtk_text_attributes_ref
//
// [ result ] trans: everything
//
func (v TextAttributes) Ref() (result TextAttributes) {
	iv, err := _I.Get(2493, "TextAttributes", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_attributes_unref
//
func (v TextAttributes) Unref() {
	iv, err := _I.Get(2494, "TextAttributes", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct TextBTree
type TextBTree struct {
	P unsafe.Pointer
}

func TextBTreeGetType() gi.GType {
	ret := _I.GetGType(548, "TextBTree")
	return ret
}

// Object TextBuffer
type TextBuffer struct {
	g.Object
}

func WrapTextBuffer(p unsafe.Pointer) (r TextBuffer) { r.P = p; return }

type ITextBuffer interface{ P_TextBuffer() unsafe.Pointer }

func (v TextBuffer) P_TextBuffer() unsafe.Pointer { return v.P }
func TextBufferGetType() gi.GType {
	ret := _I.GetGType(549, "TextBuffer")
	return ret
}

// gtk_text_buffer_new
//
// [ table ] trans: nothing
//
// [ result ] trans: everything
//
func NewTextBuffer(table ITextTagTable) (result TextBuffer) {
	iv, err := _I.Get(2495, "TextBuffer", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if table != nil {
		tmp = table.P_TextTagTable()
	}
	arg_table := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_table}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_add_mark
//
// [ mark ] trans: nothing
//
// [ where ] trans: nothing
//
func (v TextBuffer) AddMark(mark ITextMark, where TextIter) {
	iv, err := _I.Get(2496, "TextBuffer", "add_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	arg_where := gi.NewPointerArgument(where.P)
	args := []gi.Argument{arg_v, arg_mark, arg_where}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_add_selection_clipboard
//
// [ clipboard ] trans: nothing
//
func (v TextBuffer) AddSelectionClipboard(clipboard IClipboard) {
	iv, err := _I.Get(2497, "TextBuffer", "add_selection_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if clipboard != nil {
		tmp = clipboard.P_Clipboard()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clipboard := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_clipboard}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_apply_tag
//
// [ tag ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) ApplyTag(tag ITextTag, start TextIter, end TextIter) {
	iv, err := _I.Get(2498, "TextBuffer", "apply_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_tag, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_apply_tag_by_name
//
// [ name ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) ApplyTagByName(name string, start TextIter, end TextIter) {
	iv, err := _I.Get(2499, "TextBuffer", "apply_tag_by_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_name, arg_start, arg_end}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_text_buffer_backspace
//
// [ iter ] trans: nothing
//
// [ interactive ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) Backspace(iter TextIter, interactive bool, default_editable bool) (result bool) {
	iv, err := _I.Get(2500, "TextBuffer", "backspace")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_interactive := gi.NewBoolArgument(interactive)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_iter, arg_interactive, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_begin_user_action
//
func (v TextBuffer) BeginUserAction() {
	iv, err := _I.Get(2501, "TextBuffer", "begin_user_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_copy_clipboard
//
// [ clipboard ] trans: nothing
//
func (v TextBuffer) CopyClipboard(clipboard IClipboard) {
	iv, err := _I.Get(2502, "TextBuffer", "copy_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if clipboard != nil {
		tmp = clipboard.P_Clipboard()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clipboard := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_clipboard}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_create_child_anchor
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) CreateChildAnchor(iter TextIter) (result TextChildAnchor) {
	iv, err := _I.Get(2503, "TextBuffer", "create_child_anchor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_create_mark
//
// [ mark_name ] trans: nothing
//
// [ where ] trans: nothing
//
// [ left_gravity ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) CreateMark(mark_name string, where TextIter, left_gravity bool) (result TextMark) {
	iv, err := _I.Get(2504, "TextBuffer", "create_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mark_name := gi.CString(mark_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark_name := gi.NewStringArgument(c_mark_name)
	arg_where := gi.NewPointerArgument(where.P)
	arg_left_gravity := gi.NewBoolArgument(left_gravity)
	args := []gi.Argument{arg_v, arg_mark_name, arg_where, arg_left_gravity}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mark_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_cut_clipboard
//
// [ clipboard ] trans: nothing
//
// [ default_editable ] trans: nothing
//
func (v TextBuffer) CutClipboard(clipboard IClipboard, default_editable bool) {
	iv, err := _I.Get(2505, "TextBuffer", "cut_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if clipboard != nil {
		tmp = clipboard.P_Clipboard()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clipboard := gi.NewPointerArgument(tmp)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_clipboard, arg_default_editable}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_delete
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) Delete(start TextIter, end TextIter) {
	iv, err := _I.Get(2506, "TextBuffer", "delete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_delete_interactive
//
// [ start_iter ] trans: nothing
//
// [ end_iter ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) DeleteInteractive(start_iter TextIter, end_iter TextIter, default_editable bool) (result bool) {
	iv, err := _I.Get(2507, "TextBuffer", "delete_interactive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_iter := gi.NewPointerArgument(start_iter.P)
	arg_end_iter := gi.NewPointerArgument(end_iter.P)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_start_iter, arg_end_iter, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_delete_mark
//
// [ mark ] trans: nothing
//
func (v TextBuffer) DeleteMark(mark ITextMark) {
	iv, err := _I.Get(2508, "TextBuffer", "delete_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_mark}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_delete_mark_by_name
//
// [ name ] trans: nothing
//
func (v TextBuffer) DeleteMarkByName(name string) {
	iv, err := _I.Get(2509, "TextBuffer", "delete_mark_by_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_text_buffer_delete_selection
//
// [ interactive ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) DeleteSelection(interactive bool, default_editable bool) (result bool) {
	iv, err := _I.Get(2510, "TextBuffer", "delete_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_interactive := gi.NewBoolArgument(interactive)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_interactive, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_deserialize
//
// [ content_buffer ] trans: nothing
//
// [ format ] trans: nothing
//
// [ iter ] trans: nothing
//
// [ data ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) Deserialize(content_buffer ITextBuffer, format gdk.Atom, iter TextIter, data gi.Uint8Array, length uint64) (result bool, err error) {
	iv, err := _I.Get(2511, "TextBuffer", "deserialize")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if content_buffer != nil {
		tmp = content_buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_content_buffer := gi.NewPointerArgument(tmp)
	arg_format := gi.NewPointerArgument(format.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_data := gi.NewPointerArgument(data.P)
	arg_length := gi.NewUint64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_buffer, arg_format, arg_iter, arg_data, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_text_buffer_deserialize_get_can_create_tags
//
// [ format ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) DeserializeGetCanCreateTags(format gdk.Atom) (result bool) {
	iv, err := _I.Get(2512, "TextBuffer", "deserialize_get_can_create_tags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_format := gi.NewPointerArgument(format.P)
	args := []gi.Argument{arg_v, arg_format}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_deserialize_set_can_create_tags
//
// [ format ] trans: nothing
//
// [ can_create_tags ] trans: nothing
//
func (v TextBuffer) DeserializeSetCanCreateTags(format gdk.Atom, can_create_tags bool) {
	iv, err := _I.Get(2513, "TextBuffer", "deserialize_set_can_create_tags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_format := gi.NewPointerArgument(format.P)
	arg_can_create_tags := gi.NewBoolArgument(can_create_tags)
	args := []gi.Argument{arg_v, arg_format, arg_can_create_tags}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_end_user_action
//
func (v TextBuffer) EndUserAction() {
	iv, err := _I.Get(2514, "TextBuffer", "end_user_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_bounds
//
// [ start ] trans: nothing, dir: out
//
// [ end ] trans: nothing, dir: out
//
func (v TextBuffer) GetBounds(start TextIter, end TextIter) {
	iv, err := _I.Get(2515, "TextBuffer", "get_bounds")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_char_count
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetCharCount() (result int32) {
	iv, err := _I.Get(2516, "TextBuffer", "get_char_count")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_buffer_get_copy_target_list
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetCopyTargetList() (result TargetList) {
	iv, err := _I.Get(2517, "TextBuffer", "get_copy_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_deserialize_formats
//
// [ n_formats ] trans: everything, dir: out
//
// [ result ] trans: container
//
func (v TextBuffer) GetDeserializeFormats() (result gi.PointerArray) {
	iv, err := _I.Get(2518, "TextBuffer", "get_deserialize_formats")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_formats := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_n_formats}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_formats int32
	_ = n_formats
	n_formats = outArgs[0].Int32()
	result = gi.PointerArray{P: ret.Pointer(), Len: int(n_formats)}
	return
}

// gtk_text_buffer_get_end_iter
//
// [ iter ] trans: nothing, dir: out
//
func (v TextBuffer) GetEndIter(iter TextIter) {
	iv, err := _I.Get(2519, "TextBuffer", "get_end_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_has_selection
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetHasSelection() (result bool) {
	iv, err := _I.Get(2520, "TextBuffer", "get_has_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_get_insert
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetInsert() (result TextMark) {
	iv, err := _I.Get(2521, "TextBuffer", "get_insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_iter_at_child_anchor
//
// [ iter ] trans: nothing, dir: out
//
// [ anchor ] trans: nothing
//
func (v TextBuffer) GetIterAtChildAnchor(iter TextIter, anchor ITextChildAnchor) {
	iv, err := _I.Get(2522, "TextBuffer", "get_iter_at_child_anchor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if anchor != nil {
		tmp = anchor.P_TextChildAnchor()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_anchor := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_iter, arg_anchor}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_iter_at_line
//
// [ iter ] trans: nothing, dir: out
//
// [ line_number ] trans: nothing
//
func (v TextBuffer) GetIterAtLine(iter TextIter, line_number int32) {
	iv, err := _I.Get(2523, "TextBuffer", "get_iter_at_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_line_number := gi.NewInt32Argument(line_number)
	args := []gi.Argument{arg_v, arg_iter, arg_line_number}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_iter_at_line_index
//
// [ iter ] trans: nothing, dir: out
//
// [ line_number ] trans: nothing
//
// [ byte_index ] trans: nothing
//
func (v TextBuffer) GetIterAtLineIndex(iter TextIter, line_number int32, byte_index int32) {
	iv, err := _I.Get(2524, "TextBuffer", "get_iter_at_line_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_line_number := gi.NewInt32Argument(line_number)
	arg_byte_index := gi.NewInt32Argument(byte_index)
	args := []gi.Argument{arg_v, arg_iter, arg_line_number, arg_byte_index}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_iter_at_line_offset
//
// [ iter ] trans: nothing, dir: out
//
// [ line_number ] trans: nothing
//
// [ char_offset ] trans: nothing
//
func (v TextBuffer) GetIterAtLineOffset(iter TextIter, line_number int32, char_offset int32) {
	iv, err := _I.Get(2525, "TextBuffer", "get_iter_at_line_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_line_number := gi.NewInt32Argument(line_number)
	arg_char_offset := gi.NewInt32Argument(char_offset)
	args := []gi.Argument{arg_v, arg_iter, arg_line_number, arg_char_offset}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_iter_at_mark
//
// [ iter ] trans: nothing, dir: out
//
// [ mark ] trans: nothing
//
func (v TextBuffer) GetIterAtMark(iter TextIter, mark ITextMark) {
	iv, err := _I.Get(2526, "TextBuffer", "get_iter_at_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_mark := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_iter, arg_mark}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_iter_at_offset
//
// [ iter ] trans: nothing, dir: out
//
// [ char_offset ] trans: nothing
//
func (v TextBuffer) GetIterAtOffset(iter TextIter, char_offset int32) {
	iv, err := _I.Get(2527, "TextBuffer", "get_iter_at_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_char_offset := gi.NewInt32Argument(char_offset)
	args := []gi.Argument{arg_v, arg_iter, arg_char_offset}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_line_count
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetLineCount() (result int32) {
	iv, err := _I.Get(2528, "TextBuffer", "get_line_count")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_buffer_get_mark
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetMark(name string) (result TextMark) {
	iv, err := _I.Get(2529, "TextBuffer", "get_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_modified
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetModified() (result bool) {
	iv, err := _I.Get(2530, "TextBuffer", "get_modified")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_get_paste_target_list
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetPasteTargetList() (result TargetList) {
	iv, err := _I.Get(2531, "TextBuffer", "get_paste_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_selection_bound
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetSelectionBound() (result TextMark) {
	iv, err := _I.Get(2532, "TextBuffer", "get_selection_bound")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_selection_bounds
//
// [ start ] trans: nothing, dir: out
//
// [ end ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetSelectionBounds(start TextIter, end TextIter) (result bool) {
	iv, err := _I.Get(2533, "TextBuffer", "get_selection_bounds")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_start, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_get_serialize_formats
//
// [ n_formats ] trans: everything, dir: out
//
// [ result ] trans: container
//
func (v TextBuffer) GetSerializeFormats() (result gi.PointerArray) {
	iv, err := _I.Get(2534, "TextBuffer", "get_serialize_formats")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_formats := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_n_formats}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_formats int32
	_ = n_formats
	n_formats = outArgs[0].Int32()
	result = gi.PointerArray{P: ret.Pointer(), Len: int(n_formats)}
	return
}

// gtk_text_buffer_get_slice
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
// [ include_hidden_chars ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextBuffer) GetSlice(start TextIter, end TextIter, include_hidden_chars bool) (result string) {
	iv, err := _I.Get(2535, "TextBuffer", "get_slice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	arg_include_hidden_chars := gi.NewBoolArgument(include_hidden_chars)
	args := []gi.Argument{arg_v, arg_start, arg_end, arg_include_hidden_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_buffer_get_start_iter
//
// [ iter ] trans: nothing, dir: out
//
func (v TextBuffer) GetStartIter(iter TextIter) {
	iv, err := _I.Get(2536, "TextBuffer", "get_start_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_get_tag_table
//
// [ result ] trans: nothing
//
func (v TextBuffer) GetTagTable() (result TextTagTable) {
	iv, err := _I.Get(2537, "TextBuffer", "get_tag_table")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_get_text
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
// [ include_hidden_chars ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextBuffer) GetText(start TextIter, end TextIter, include_hidden_chars bool) (result string) {
	iv, err := _I.Get(2538, "TextBuffer", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	arg_include_hidden_chars := gi.NewBoolArgument(include_hidden_chars)
	args := []gi.Argument{arg_v, arg_start, arg_end, arg_include_hidden_chars}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_buffer_insert
//
// [ iter ] trans: nothing
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
func (v TextBuffer) Insert(iter TextIter, text string, len1 int32) {
	iv, err := _I.Get(2539, "TextBuffer", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_iter, arg_text, arg_len1}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_text_buffer_insert_at_cursor
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
func (v TextBuffer) InsertAtCursor(text string, len1 int32) {
	iv, err := _I.Get(2540, "TextBuffer", "insert_at_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_text, arg_len1}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_text_buffer_insert_child_anchor
//
// [ iter ] trans: nothing
//
// [ anchor ] trans: nothing
//
func (v TextBuffer) InsertChildAnchor(iter TextIter, anchor ITextChildAnchor) {
	iv, err := _I.Get(2541, "TextBuffer", "insert_child_anchor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if anchor != nil {
		tmp = anchor.P_TextChildAnchor()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_anchor := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_iter, arg_anchor}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_insert_interactive
//
// [ iter ] trans: nothing
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) InsertInteractive(iter TextIter, text string, len1 int32, default_editable bool) (result bool) {
	iv, err := _I.Get(2542, "TextBuffer", "insert_interactive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_iter, arg_text, arg_len1, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_text)
	result = ret.Bool()
	return
}

// gtk_text_buffer_insert_interactive_at_cursor
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) InsertInteractiveAtCursor(text string, len1 int32, default_editable bool) (result bool) {
	iv, err := _I.Get(2543, "TextBuffer", "insert_interactive_at_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_text, arg_len1, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_text)
	result = ret.Bool()
	return
}

// gtk_text_buffer_insert_markup
//
// [ iter ] trans: nothing
//
// [ markup ] trans: nothing
//
// [ len1 ] trans: nothing
//
func (v TextBuffer) InsertMarkup(iter TextIter, markup string, len1 int32) {
	iv, err := _I.Get(2544, "TextBuffer", "insert_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_markup := gi.NewStringArgument(c_markup)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_iter, arg_markup, arg_len1}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_text_buffer_insert_pixbuf
//
// [ iter ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
func (v TextBuffer) InsertPixbuf(iter TextIter, pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(2545, "TextBuffer", "insert_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_iter, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_insert_range
//
// [ iter ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) InsertRange(iter TextIter, start TextIter, end TextIter) {
	iv, err := _I.Get(2546, "TextBuffer", "insert_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_iter, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_insert_range_interactive
//
// [ iter ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
// [ default_editable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) InsertRangeInteractive(iter TextIter, start TextIter, end TextIter, default_editable bool) (result bool) {
	iv, err := _I.Get(2547, "TextBuffer", "insert_range_interactive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_iter, arg_start, arg_end, arg_default_editable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_buffer_move_mark
//
// [ mark ] trans: nothing
//
// [ where ] trans: nothing
//
func (v TextBuffer) MoveMark(mark ITextMark, where TextIter) {
	iv, err := _I.Get(2548, "TextBuffer", "move_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	arg_where := gi.NewPointerArgument(where.P)
	args := []gi.Argument{arg_v, arg_mark, arg_where}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_move_mark_by_name
//
// [ name ] trans: nothing
//
// [ where ] trans: nothing
//
func (v TextBuffer) MoveMarkByName(name string, where TextIter) {
	iv, err := _I.Get(2549, "TextBuffer", "move_mark_by_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_where := gi.NewPointerArgument(where.P)
	args := []gi.Argument{arg_v, arg_name, arg_where}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_text_buffer_paste_clipboard
//
// [ clipboard ] trans: nothing
//
// [ override_location ] trans: nothing
//
// [ default_editable ] trans: nothing
//
func (v TextBuffer) PasteClipboard(clipboard IClipboard, override_location TextIter, default_editable bool) {
	iv, err := _I.Get(2550, "TextBuffer", "paste_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if clipboard != nil {
		tmp = clipboard.P_Clipboard()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clipboard := gi.NewPointerArgument(tmp)
	arg_override_location := gi.NewPointerArgument(override_location.P)
	arg_default_editable := gi.NewBoolArgument(default_editable)
	args := []gi.Argument{arg_v, arg_clipboard, arg_override_location, arg_default_editable}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_place_cursor
//
// [ where ] trans: nothing
//
func (v TextBuffer) PlaceCursor(where TextIter) {
	iv, err := _I.Get(2551, "TextBuffer", "place_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_where := gi.NewPointerArgument(where.P)
	args := []gi.Argument{arg_v, arg_where}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_register_deserialize_format
//
// [ mime_type ] trans: nothing
//
// [ function ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_destroy ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) RegisterDeserializeFormat(mime_type string, function int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, user_data_destroy int /*TODO_TYPE CALLBACK*/) (result gdk.Atom) {
	iv, err := _I.Get(2552, "TextBuffer", "register_deserialize_format")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mime_type := gi.CString(mime_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	arg_function := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTextBufferDeserializeFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_user_data_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_mime_type, arg_function, arg_user_data, arg_user_data_destroy}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mime_type)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_register_deserialize_tagset
//
// [ tagset_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) RegisterDeserializeTagset(tagset_name string) (result gdk.Atom) {
	iv, err := _I.Get(2553, "TextBuffer", "register_deserialize_tagset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_tagset_name := gi.CString(tagset_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_tagset_name := gi.NewStringArgument(c_tagset_name)
	args := []gi.Argument{arg_v, arg_tagset_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_tagset_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_register_serialize_format
//
// [ mime_type ] trans: nothing
//
// [ function ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_destroy ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) RegisterSerializeFormat(mime_type string, function int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, user_data_destroy int /*TODO_TYPE CALLBACK*/) (result gdk.Atom) {
	iv, err := _I.Get(2554, "TextBuffer", "register_serialize_format")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mime_type := gi.CString(mime_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	arg_function := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTextBufferSerializeFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_user_data_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_mime_type, arg_function, arg_user_data, arg_user_data_destroy}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mime_type)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_register_serialize_tagset
//
// [ tagset_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextBuffer) RegisterSerializeTagset(tagset_name string) (result gdk.Atom) {
	iv, err := _I.Get(2555, "TextBuffer", "register_serialize_tagset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_tagset_name := gi.CString(tagset_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_tagset_name := gi.NewStringArgument(c_tagset_name)
	args := []gi.Argument{arg_v, arg_tagset_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_tagset_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_buffer_remove_all_tags
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) RemoveAllTags(start TextIter, end TextIter) {
	iv, err := _I.Get(2556, "TextBuffer", "remove_all_tags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_remove_selection_clipboard
//
// [ clipboard ] trans: nothing
//
func (v TextBuffer) RemoveSelectionClipboard(clipboard IClipboard) {
	iv, err := _I.Get(2557, "TextBuffer", "remove_selection_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if clipboard != nil {
		tmp = clipboard.P_Clipboard()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clipboard := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_clipboard}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_remove_tag
//
// [ tag ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) RemoveTag(tag ITextTag, start TextIter, end TextIter) {
	iv, err := _I.Get(2558, "TextBuffer", "remove_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_tag, arg_start, arg_end}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_remove_tag_by_name
//
// [ name ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
func (v TextBuffer) RemoveTagByName(name string, start TextIter, end TextIter) {
	iv, err := _I.Get(2559, "TextBuffer", "remove_tag_by_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_name, arg_start, arg_end}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_text_buffer_select_range
//
// [ ins ] trans: nothing
//
// [ bound ] trans: nothing
//
func (v TextBuffer) SelectRange(ins TextIter, bound TextIter) {
	iv, err := _I.Get(2560, "TextBuffer", "select_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ins := gi.NewPointerArgument(ins.P)
	arg_bound := gi.NewPointerArgument(bound.P)
	args := []gi.Argument{arg_v, arg_ins, arg_bound}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_serialize
//
// [ content_buffer ] trans: nothing
//
// [ format ] trans: nothing
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v TextBuffer) Serialize(content_buffer ITextBuffer, format gdk.Atom, start TextIter, end TextIter) (result gi.Uint8Array) {
	iv, err := _I.Get(2561, "TextBuffer", "serialize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if content_buffer != nil {
		tmp = content_buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_content_buffer := gi.NewPointerArgument(tmp)
	arg_format := gi.NewPointerArgument(format.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_buffer, arg_format, arg_start, arg_end, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	length = outArgs[0].Uint64()
	result = gi.Uint8Array{P: ret.Pointer(), Len: int(length)}
	return
}

// gtk_text_buffer_set_modified
//
// [ setting ] trans: nothing
//
func (v TextBuffer) SetModified(setting bool) {
	iv, err := _I.Get(2562, "TextBuffer", "set_modified")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_set_text
//
// [ text ] trans: nothing
//
// [ len1 ] trans: nothing
//
func (v TextBuffer) SetText(text string, len1 int32) {
	iv, err := _I.Get(2563, "TextBuffer", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_v, arg_text, arg_len1}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_text_buffer_unregister_deserialize_format
//
// [ format ] trans: nothing
//
func (v TextBuffer) UnregisterDeserializeFormat(format gdk.Atom) {
	iv, err := _I.Get(2564, "TextBuffer", "unregister_deserialize_format")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_format := gi.NewPointerArgument(format.P)
	args := []gi.Argument{arg_v, arg_format}
	iv.Call(args, nil, nil)
}

// gtk_text_buffer_unregister_serialize_format
//
// [ format ] trans: nothing
//
func (v TextBuffer) UnregisterSerializeFormat(format gdk.Atom) {
	iv, err := _I.Get(2565, "TextBuffer", "unregister_serialize_format")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_format := gi.NewPointerArgument(format.P)
	args := []gi.Argument{arg_v, arg_format}
	iv.Call(args, nil, nil)
}

// ignore GType struct TextBufferClass

type TextBufferDeserializeFuncStruct struct {
	F_register_buffer TextBuffer
	F_content_buffer  TextBuffer
	F_iter            TextIter
	F_data            gi.Uint8Array
	F_length          uint64
	F_create_tags     bool
}

func GetPointer_myTextBufferDeserializeFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTextBufferDeserializeFunc())
}

//export myGtkTextBufferDeserializeFunc
func myGtkTextBufferDeserializeFunc(register_buffer *C.GtkTextBuffer, content_buffer *C.GtkTextBuffer, iter *C.GtkTextIter, data C.gpointer, length C.guint64, create_tags C.gboolean, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TextBufferDeserializeFuncStruct{
		F_register_buffer: WrapTextBuffer(unsafe.Pointer(register_buffer)),
		F_content_buffer:  WrapTextBuffer(unsafe.Pointer(content_buffer)),
		F_iter:            TextIter{P: unsafe.Pointer(iter)},
		F_data:            gi.Uint8Array{P: unsafe.Pointer(data)},
		F_length:          uint64(length),
		F_create_tags:     gi.Int2Bool(int(create_tags)),
	}
	fn(args)
}

// Struct TextBufferPrivate
type TextBufferPrivate struct {
	P unsafe.Pointer
}

func TextBufferPrivateGetType() gi.GType {
	ret := _I.GetGType(550, "TextBufferPrivate")
	return ret
}

type TextBufferSerializeFuncStruct struct {
	F_register_buffer TextBuffer
	F_content_buffer  TextBuffer
	F_start           TextIter
	F_end             TextIter
	F_length          *uint64
}

func GetPointer_myTextBufferSerializeFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTextBufferSerializeFunc())
}

//export myGtkTextBufferSerializeFunc
func myGtkTextBufferSerializeFunc(register_buffer *C.GtkTextBuffer, content_buffer *C.GtkTextBuffer, start *C.GtkTextIter, end *C.GtkTextIter, length *C.guint64, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TextBufferSerializeFuncStruct{
		F_register_buffer: WrapTextBuffer(unsafe.Pointer(register_buffer)),
		F_content_buffer:  WrapTextBuffer(unsafe.Pointer(content_buffer)),
		F_start:           TextIter{P: unsafe.Pointer(start)},
		F_end:             TextIter{P: unsafe.Pointer(end)},
		F_length:          (*uint64)(unsafe.Pointer(length)),
	}
	fn(args)
}

// Enum TextBufferTargetInfo
type TextBufferTargetInfoEnum int

const (
	TextBufferTargetInfoBufferContents TextBufferTargetInfoEnum = -1
	TextBufferTargetInfoRichText       TextBufferTargetInfoEnum = -2
	TextBufferTargetInfoText           TextBufferTargetInfoEnum = -3
)

func TextBufferTargetInfoGetType() gi.GType {
	ret := _I.GetGType(551, "TextBufferTargetInfo")
	return ret
}

// Object TextCellAccessible
type TextCellAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.TableCellIfc
	atk.TextIfc
	RendererCellAccessible
}

func WrapTextCellAccessible(p unsafe.Pointer) (r TextCellAccessible) { r.P = p; return }

type ITextCellAccessible interface{ P_TextCellAccessible() unsafe.Pointer }

func (v TextCellAccessible) P_TextCellAccessible() unsafe.Pointer { return v.P }
func (v TextCellAccessible) P_Action() unsafe.Pointer             { return v.P }
func (v TextCellAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v TextCellAccessible) P_TableCell() unsafe.Pointer          { return v.P }
func (v TextCellAccessible) P_Text() unsafe.Pointer               { return v.P }
func TextCellAccessibleGetType() gi.GType {
	ret := _I.GetGType(552, "TextCellAccessible")
	return ret
}

// ignore GType struct TextCellAccessibleClass

// Struct TextCellAccessiblePrivate
type TextCellAccessiblePrivate struct {
	P unsafe.Pointer
}

func TextCellAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(553, "TextCellAccessiblePrivate")
	return ret
}

type TextCharPredicateStruct struct {
	F_ch rune
}

func GetPointer_myTextCharPredicate() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTextCharPredicate())
}

//export myGtkTextCharPredicate
func myGtkTextCharPredicate(ch C.gunichar, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TextCharPredicateStruct{
		F_ch: rune(ch),
	}
	fn(args)
}

// Object TextChildAnchor
type TextChildAnchor struct {
	g.Object
}

func WrapTextChildAnchor(p unsafe.Pointer) (r TextChildAnchor) { r.P = p; return }

type ITextChildAnchor interface{ P_TextChildAnchor() unsafe.Pointer }

func (v TextChildAnchor) P_TextChildAnchor() unsafe.Pointer { return v.P }
func TextChildAnchorGetType() gi.GType {
	ret := _I.GetGType(554, "TextChildAnchor")
	return ret
}

// gtk_text_child_anchor_new
//
// [ result ] trans: everything
//
func NewTextChildAnchor() (result TextChildAnchor) {
	iv, err := _I.Get(2566, "TextChildAnchor", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_child_anchor_get_deleted
//
// [ result ] trans: nothing
//
func (v TextChildAnchor) GetDeleted() (result bool) {
	iv, err := _I.Get(2567, "TextChildAnchor", "get_deleted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_child_anchor_get_widgets
//
// [ result ] trans: container
//
func (v TextChildAnchor) GetWidgets() (result g.List) {
	iv, err := _I.Get(2568, "TextChildAnchor", "get_widgets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct TextChildAnchorClass

// Enum TextDirection
type TextDirectionEnum int

const (
	TextDirectionNone TextDirectionEnum = 0
	TextDirectionLtr  TextDirectionEnum = 1
	TextDirectionRtl  TextDirectionEnum = 2
)

func TextDirectionGetType() gi.GType {
	ret := _I.GetGType(555, "TextDirection")
	return ret
}

// Enum TextExtendSelection
type TextExtendSelectionEnum int

const (
	TextExtendSelectionWord TextExtendSelectionEnum = 0
	TextExtendSelectionLine TextExtendSelectionEnum = 1
)

func TextExtendSelectionGetType() gi.GType {
	ret := _I.GetGType(556, "TextExtendSelection")
	return ret
}

// Struct TextIter
type TextIter struct {
	P unsafe.Pointer
}

const SizeOfStructTextIter = 80

func TextIterGetType() gi.GType {
	ret := _I.GetGType(557, "TextIter")
	return ret
}

// gtk_text_iter_assign
//
// [ other ] trans: nothing
//
func (v TextIter) Assign(other TextIter) {
	iv, err := _I.Get(2569, "TextIter", "assign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_backward_char
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardChar() (result bool) {
	iv, err := _I.Get(2570, "TextIter", "backward_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_chars
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardChars(count int32) (result bool) {
	iv, err := _I.Get(2571, "TextIter", "backward_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_cursor_position
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardCursorPosition() (result bool) {
	iv, err := _I.Get(2572, "TextIter", "backward_cursor_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_cursor_positions
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardCursorPositions(count int32) (result bool) {
	iv, err := _I.Get(2573, "TextIter", "backward_cursor_positions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_find_char
//
// [ pred ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ limit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardFindChar(pred int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, limit TextIter) (result bool) {
	iv, err := _I.Get(2574, "TextIter", "backward_find_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pred := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTextCharPredicate()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_limit := gi.NewPointerArgument(limit.P)
	args := []gi.Argument{arg_v, arg_pred, arg_user_data, arg_limit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_line
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardLine() (result bool) {
	iv, err := _I.Get(2575, "TextIter", "backward_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_lines
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardLines(count int32) (result bool) {
	iv, err := _I.Get(2576, "TextIter", "backward_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_search
//
// [ str ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ match_start ] trans: nothing, dir: out
//
// [ match_end ] trans: nothing, dir: out
//
// [ limit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardSearch(str string, flags TextSearchFlags, match_start TextIter, match_end TextIter, limit TextIter) (result bool) {
	iv, err := _I.Get(2577, "TextIter", "backward_search")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_match_start := gi.NewPointerArgument(match_start.P)
	arg_match_end := gi.NewPointerArgument(match_end.P)
	arg_limit := gi.NewPointerArgument(limit.P)
	args := []gi.Argument{arg_v, arg_str, arg_flags, arg_match_start, arg_match_end, arg_limit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_sentence_start
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardSentenceStart() (result bool) {
	iv, err := _I.Get(2578, "TextIter", "backward_sentence_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_sentence_starts
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardSentenceStarts(count int32) (result bool) {
	iv, err := _I.Get(2579, "TextIter", "backward_sentence_starts")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_to_tag_toggle
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardToTagToggle(tag ITextTag) (result bool) {
	iv, err := _I.Get(2580, "TextIter", "backward_to_tag_toggle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_cursor_position
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleCursorPosition() (result bool) {
	iv, err := _I.Get(2581, "TextIter", "backward_visible_cursor_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_cursor_positions
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleCursorPositions(count int32) (result bool) {
	iv, err := _I.Get(2582, "TextIter", "backward_visible_cursor_positions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_line
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleLine() (result bool) {
	iv, err := _I.Get(2583, "TextIter", "backward_visible_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_lines
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleLines(count int32) (result bool) {
	iv, err := _I.Get(2584, "TextIter", "backward_visible_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_word_start
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleWordStart() (result bool) {
	iv, err := _I.Get(2585, "TextIter", "backward_visible_word_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_visible_word_starts
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardVisibleWordStarts(count int32) (result bool) {
	iv, err := _I.Get(2586, "TextIter", "backward_visible_word_starts")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_word_start
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardWordStart() (result bool) {
	iv, err := _I.Get(2587, "TextIter", "backward_word_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_backward_word_starts
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BackwardWordStarts(count int32) (result bool) {
	iv, err := _I.Get(2588, "TextIter", "backward_word_starts")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_text_iter_begins_tag
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) BeginsTag(tag ITextTag) (result bool) {
	iv, err := _I.Get(2589, "TextIter", "begins_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_can_insert
//
// [ default_editability ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) CanInsert(default_editability bool) (result bool) {
	iv, err := _I.Get(2590, "TextIter", "can_insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_editability := gi.NewBoolArgument(default_editability)
	args := []gi.Argument{arg_v, arg_default_editability}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_compare
//
// [ rhs ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) Compare(rhs TextIter) (result int32) {
	iv, err := _I.Get(2591, "TextIter", "compare")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rhs := gi.NewPointerArgument(rhs.P)
	args := []gi.Argument{arg_v, arg_rhs}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_copy
//
// [ result ] trans: everything
//
func (v TextIter) Copy() (result TextIter) {
	iv, err := _I.Get(2592, "TextIter", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_editable
//
// [ default_setting ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) EditableF(default_setting bool) (result bool) {
	iv, err := _I.Get(2593, "TextIter", "editable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_setting := gi.NewBoolArgument(default_setting)
	args := []gi.Argument{arg_v, arg_default_setting}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_ends_line
//
// [ result ] trans: nothing
//
func (v TextIter) EndsLine() (result bool) {
	iv, err := _I.Get(2594, "TextIter", "ends_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_ends_sentence
//
// [ result ] trans: nothing
//
func (v TextIter) EndsSentence() (result bool) {
	iv, err := _I.Get(2595, "TextIter", "ends_sentence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_ends_tag
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) EndsTag(tag ITextTag) (result bool) {
	iv, err := _I.Get(2596, "TextIter", "ends_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_ends_word
//
// [ result ] trans: nothing
//
func (v TextIter) EndsWord() (result bool) {
	iv, err := _I.Get(2597, "TextIter", "ends_word")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_equal
//
// [ rhs ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) Equal(rhs TextIter) (result bool) {
	iv, err := _I.Get(2598, "TextIter", "equal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rhs := gi.NewPointerArgument(rhs.P)
	args := []gi.Argument{arg_v, arg_rhs}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_char
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardChar() (result bool) {
	iv, err := _I.Get(2599, "TextIter", "forward_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_chars
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardChars(count int32) (result bool) {
	iv, err := _I.Get(2600, "TextIter", "forward_chars")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_cursor_position
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardCursorPosition() (result bool) {
	iv, err := _I.Get(2601, "TextIter", "forward_cursor_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_cursor_positions
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardCursorPositions(count int32) (result bool) {
	iv, err := _I.Get(2602, "TextIter", "forward_cursor_positions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_find_char
//
// [ pred ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ limit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardFindChar(pred int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, limit TextIter) (result bool) {
	iv, err := _I.Get(2603, "TextIter", "forward_find_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pred := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTextCharPredicate()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_limit := gi.NewPointerArgument(limit.P)
	args := []gi.Argument{arg_v, arg_pred, arg_user_data, arg_limit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_line
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardLine() (result bool) {
	iv, err := _I.Get(2604, "TextIter", "forward_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_lines
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardLines(count int32) (result bool) {
	iv, err := _I.Get(2605, "TextIter", "forward_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_search
//
// [ str ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ match_start ] trans: nothing, dir: out
//
// [ match_end ] trans: nothing, dir: out
//
// [ limit ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardSearch(str string, flags TextSearchFlags, match_start TextIter, match_end TextIter, limit TextIter) (result bool) {
	iv, err := _I.Get(2606, "TextIter", "forward_search")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_match_start := gi.NewPointerArgument(match_start.P)
	arg_match_end := gi.NewPointerArgument(match_end.P)
	arg_limit := gi.NewPointerArgument(limit.P)
	args := []gi.Argument{arg_v, arg_str, arg_flags, arg_match_start, arg_match_end, arg_limit}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_sentence_end
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardSentenceEnd() (result bool) {
	iv, err := _I.Get(2607, "TextIter", "forward_sentence_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_sentence_ends
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardSentenceEnds(count int32) (result bool) {
	iv, err := _I.Get(2608, "TextIter", "forward_sentence_ends")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_to_end
//
func (v TextIter) ForwardToEnd() {
	iv, err := _I.Get(2609, "TextIter", "forward_to_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_forward_to_line_end
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardToLineEnd() (result bool) {
	iv, err := _I.Get(2610, "TextIter", "forward_to_line_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_to_tag_toggle
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardToTagToggle(tag ITextTag) (result bool) {
	iv, err := _I.Get(2611, "TextIter", "forward_to_tag_toggle")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_cursor_position
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleCursorPosition() (result bool) {
	iv, err := _I.Get(2612, "TextIter", "forward_visible_cursor_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_cursor_positions
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleCursorPositions(count int32) (result bool) {
	iv, err := _I.Get(2613, "TextIter", "forward_visible_cursor_positions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_line
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleLine() (result bool) {
	iv, err := _I.Get(2614, "TextIter", "forward_visible_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_lines
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleLines(count int32) (result bool) {
	iv, err := _I.Get(2615, "TextIter", "forward_visible_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_word_end
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleWordEnd() (result bool) {
	iv, err := _I.Get(2616, "TextIter", "forward_visible_word_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_visible_word_ends
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardVisibleWordEnds(count int32) (result bool) {
	iv, err := _I.Get(2617, "TextIter", "forward_visible_word_ends")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_word_end
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardWordEnd() (result bool) {
	iv, err := _I.Get(2618, "TextIter", "forward_word_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_forward_word_ends
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) ForwardWordEnds(count int32) (result bool) {
	iv, err := _I.Get(2619, "TextIter", "forward_word_ends")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_free
//
func (v TextIter) Free() {
	iv, err := _I.Get(2620, "TextIter", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_get_attributes
//
// [ values ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v TextIter) GetAttributes(values TextAttributes) (result bool) {
	iv, err := _I.Get(2621, "TextIter", "get_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_values := gi.NewPointerArgument(values.P)
	args := []gi.Argument{arg_v, arg_values}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_get_buffer
//
// [ result ] trans: nothing
//
func (v TextIter) GetBuffer() (result TextBuffer) {
	iv, err := _I.Get(2622, "TextIter", "get_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_bytes_in_line
//
// [ result ] trans: nothing
//
func (v TextIter) GetBytesInLine() (result int32) {
	iv, err := _I.Get(2623, "TextIter", "get_bytes_in_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_char
//
// [ result ] trans: nothing
//
func (v TextIter) GetChar() (result rune) {
	iv, err := _I.Get(2624, "TextIter", "get_char")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = rune(ret.Uint32())
	return
}

// gtk_text_iter_get_chars_in_line
//
// [ result ] trans: nothing
//
func (v TextIter) GetCharsInLine() (result int32) {
	iv, err := _I.Get(2625, "TextIter", "get_chars_in_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_child_anchor
//
// [ result ] trans: nothing
//
func (v TextIter) GetChildAnchor() (result TextChildAnchor) {
	iv, err := _I.Get(2626, "TextIter", "get_child_anchor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_language
//
// [ result ] trans: everything
//
func (v TextIter) GetLanguage() (result pango.Language) {
	iv, err := _I.Get(2627, "TextIter", "get_language")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_line
//
// [ result ] trans: nothing
//
func (v TextIter) GetLine() (result int32) {
	iv, err := _I.Get(2628, "TextIter", "get_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_line_index
//
// [ result ] trans: nothing
//
func (v TextIter) GetLineIndex() (result int32) {
	iv, err := _I.Get(2629, "TextIter", "get_line_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_line_offset
//
// [ result ] trans: nothing
//
func (v TextIter) GetLineOffset() (result int32) {
	iv, err := _I.Get(2630, "TextIter", "get_line_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_marks
//
// [ result ] trans: container
//
func (v TextIter) GetMarks() (result g.SList) {
	iv, err := _I.Get(2631, "TextIter", "get_marks")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_offset
//
// [ result ] trans: nothing
//
func (v TextIter) GetOffset() (result int32) {
	iv, err := _I.Get(2632, "TextIter", "get_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_pixbuf
//
// [ result ] trans: nothing
//
func (v TextIter) GetPixbuf() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(2633, "TextIter", "get_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_slice
//
// [ end ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextIter) GetSlice(end TextIter) (result string) {
	iv, err := _I.Get(2634, "TextIter", "get_slice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_iter_get_tags
//
// [ result ] trans: container
//
func (v TextIter) GetTags() (result g.SList) {
	iv, err := _I.Get(2635, "TextIter", "get_tags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_text
//
// [ end ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextIter) GetText(end TextIter) (result string) {
	iv, err := _I.Get(2636, "TextIter", "get_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_iter_get_toggled_tags
//
// [ toggled_on ] trans: nothing
//
// [ result ] trans: container
//
func (v TextIter) GetToggledTags(toggled_on bool) (result g.SList) {
	iv, err := _I.Get(2637, "TextIter", "get_toggled_tags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_toggled_on := gi.NewBoolArgument(toggled_on)
	args := []gi.Argument{arg_v, arg_toggled_on}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_iter_get_visible_line_index
//
// [ result ] trans: nothing
//
func (v TextIter) GetVisibleLineIndex() (result int32) {
	iv, err := _I.Get(2638, "TextIter", "get_visible_line_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_visible_line_offset
//
// [ result ] trans: nothing
//
func (v TextIter) GetVisibleLineOffset() (result int32) {
	iv, err := _I.Get(2639, "TextIter", "get_visible_line_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_iter_get_visible_slice
//
// [ end ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextIter) GetVisibleSlice(end TextIter) (result string) {
	iv, err := _I.Get(2640, "TextIter", "get_visible_slice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_iter_get_visible_text
//
// [ end ] trans: nothing
//
// [ result ] trans: everything
//
func (v TextIter) GetVisibleText(end TextIter) (result string) {
	iv, err := _I.Get(2641, "TextIter", "get_visible_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_text_iter_has_tag
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) HasTag(tag ITextTag) (result bool) {
	iv, err := _I.Get(2642, "TextIter", "has_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_in_range
//
// [ start ] trans: nothing
//
// [ end ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) InRange(start TextIter, end TextIter) (result bool) {
	iv, err := _I.Get(2643, "TextIter", "in_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start := gi.NewPointerArgument(start.P)
	arg_end := gi.NewPointerArgument(end.P)
	args := []gi.Argument{arg_v, arg_start, arg_end}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_inside_sentence
//
// [ result ] trans: nothing
//
func (v TextIter) InsideSentence() (result bool) {
	iv, err := _I.Get(2644, "TextIter", "inside_sentence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_inside_word
//
// [ result ] trans: nothing
//
func (v TextIter) InsideWord() (result bool) {
	iv, err := _I.Get(2645, "TextIter", "inside_word")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_is_cursor_position
//
// [ result ] trans: nothing
//
func (v TextIter) IsCursorPosition() (result bool) {
	iv, err := _I.Get(2646, "TextIter", "is_cursor_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_is_end
//
// [ result ] trans: nothing
//
func (v TextIter) IsEnd() (result bool) {
	iv, err := _I.Get(2647, "TextIter", "is_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_is_start
//
// [ result ] trans: nothing
//
func (v TextIter) IsStart() (result bool) {
	iv, err := _I.Get(2648, "TextIter", "is_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_order
//
// [ second ] trans: nothing
//
func (v TextIter) Order(second TextIter) {
	iv, err := _I.Get(2649, "TextIter", "order")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_second := gi.NewPointerArgument(second.P)
	args := []gi.Argument{arg_v, arg_second}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_line
//
// [ line_number ] trans: nothing
//
func (v TextIter) SetLine(line_number int32) {
	iv, err := _I.Get(2650, "TextIter", "set_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_line_number := gi.NewInt32Argument(line_number)
	args := []gi.Argument{arg_v, arg_line_number}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_line_index
//
// [ byte_on_line ] trans: nothing
//
func (v TextIter) SetLineIndex(byte_on_line int32) {
	iv, err := _I.Get(2651, "TextIter", "set_line_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_byte_on_line := gi.NewInt32Argument(byte_on_line)
	args := []gi.Argument{arg_v, arg_byte_on_line}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_line_offset
//
// [ char_on_line ] trans: nothing
//
func (v TextIter) SetLineOffset(char_on_line int32) {
	iv, err := _I.Get(2652, "TextIter", "set_line_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_char_on_line := gi.NewInt32Argument(char_on_line)
	args := []gi.Argument{arg_v, arg_char_on_line}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_offset
//
// [ char_offset ] trans: nothing
//
func (v TextIter) SetOffset(char_offset int32) {
	iv, err := _I.Get(2653, "TextIter", "set_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_char_offset := gi.NewInt32Argument(char_offset)
	args := []gi.Argument{arg_v, arg_char_offset}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_visible_line_index
//
// [ byte_on_line ] trans: nothing
//
func (v TextIter) SetVisibleLineIndex(byte_on_line int32) {
	iv, err := _I.Get(2654, "TextIter", "set_visible_line_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_byte_on_line := gi.NewInt32Argument(byte_on_line)
	args := []gi.Argument{arg_v, arg_byte_on_line}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_set_visible_line_offset
//
// [ char_on_line ] trans: nothing
//
func (v TextIter) SetVisibleLineOffset(char_on_line int32) {
	iv, err := _I.Get(2655, "TextIter", "set_visible_line_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_char_on_line := gi.NewInt32Argument(char_on_line)
	args := []gi.Argument{arg_v, arg_char_on_line}
	iv.Call(args, nil, nil)
}

// gtk_text_iter_starts_line
//
// [ result ] trans: nothing
//
func (v TextIter) StartsLine() (result bool) {
	iv, err := _I.Get(2656, "TextIter", "starts_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_starts_sentence
//
// [ result ] trans: nothing
//
func (v TextIter) StartsSentence() (result bool) {
	iv, err := _I.Get(2657, "TextIter", "starts_sentence")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_starts_tag
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) StartsTag(tag ITextTag) (result bool) {
	iv, err := _I.Get(2658, "TextIter", "starts_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_starts_word
//
// [ result ] trans: nothing
//
func (v TextIter) StartsWord() (result bool) {
	iv, err := _I.Get(2659, "TextIter", "starts_word")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_iter_toggles_tag
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextIter) TogglesTag(tag ITextTag) (result bool) {
	iv, err := _I.Get(2660, "TextIter", "toggles_tag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Object TextMark
type TextMark struct {
	g.Object
}

func WrapTextMark(p unsafe.Pointer) (r TextMark) { r.P = p; return }

type ITextMark interface{ P_TextMark() unsafe.Pointer }

func (v TextMark) P_TextMark() unsafe.Pointer { return v.P }
func TextMarkGetType() gi.GType {
	ret := _I.GetGType(558, "TextMark")
	return ret
}

// gtk_text_mark_new
//
// [ name ] trans: nothing
//
// [ left_gravity ] trans: nothing
//
// [ result ] trans: everything
//
func NewTextMark(name string, left_gravity bool) (result TextMark) {
	iv, err := _I.Get(2661, "TextMark", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_left_gravity := gi.NewBoolArgument(left_gravity)
	args := []gi.Argument{arg_name, arg_left_gravity}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_mark_get_buffer
//
// [ result ] trans: nothing
//
func (v TextMark) GetBuffer() (result TextBuffer) {
	iv, err := _I.Get(2662, "TextMark", "get_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_mark_get_deleted
//
// [ result ] trans: nothing
//
func (v TextMark) GetDeleted() (result bool) {
	iv, err := _I.Get(2663, "TextMark", "get_deleted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_mark_get_left_gravity
//
// [ result ] trans: nothing
//
func (v TextMark) GetLeftGravity() (result bool) {
	iv, err := _I.Get(2664, "TextMark", "get_left_gravity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_mark_get_name
//
// [ result ] trans: nothing
//
func (v TextMark) GetName() (result string) {
	iv, err := _I.Get(2665, "TextMark", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_text_mark_get_visible
//
// [ result ] trans: nothing
//
func (v TextMark) GetVisible() (result bool) {
	iv, err := _I.Get(2666, "TextMark", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_mark_set_visible
//
// [ setting ] trans: nothing
//
func (v TextMark) SetVisible(setting bool) {
	iv, err := _I.Get(2667, "TextMark", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// ignore GType struct TextMarkClass

// Flags TextSearchFlags
type TextSearchFlags int

const (
	TextSearchFlagsVisibleOnly     TextSearchFlags = 1
	TextSearchFlagsTextOnly        TextSearchFlags = 2
	TextSearchFlagsCaseInsensitive TextSearchFlags = 4
)

func TextSearchFlagsGetType() gi.GType {
	ret := _I.GetGType(559, "TextSearchFlags")
	return ret
}

// Object TextTag
type TextTag struct {
	g.Object
}

func WrapTextTag(p unsafe.Pointer) (r TextTag) { r.P = p; return }

type ITextTag interface{ P_TextTag() unsafe.Pointer }

func (v TextTag) P_TextTag() unsafe.Pointer { return v.P }
func TextTagGetType() gi.GType {
	ret := _I.GetGType(560, "TextTag")
	return ret
}

// gtk_text_tag_new
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func NewTextTag(name string) (result TextTag) {
	iv, err := _I.Get(2668, "TextTag", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_tag_changed
//
// [ size_changed ] trans: nothing
//
func (v TextTag) Changed(size_changed bool) {
	iv, err := _I.Get(2669, "TextTag", "changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size_changed := gi.NewBoolArgument(size_changed)
	args := []gi.Argument{arg_v, arg_size_changed}
	iv.Call(args, nil, nil)
}

// gtk_text_tag_event
//
// [ event_object ] trans: nothing
//
// [ event ] trans: nothing
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextTag) Event(event_object g.IObject, event gdk.Event, iter TextIter) (result bool) {
	iv, err := _I.Get(2670, "TextTag", "event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if event_object != nil {
		tmp = event_object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event_object := gi.NewPointerArgument(tmp)
	arg_event := gi.NewPointerArgument(event.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_event_object, arg_event, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_tag_get_priority
//
// [ result ] trans: nothing
//
func (v TextTag) GetPriority() (result int32) {
	iv, err := _I.Get(2671, "TextTag", "get_priority")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_tag_set_priority
//
// [ priority ] trans: nothing
//
func (v TextTag) SetPriority(priority int32) {
	iv, err := _I.Get(2672, "TextTag", "set_priority")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_priority := gi.NewInt32Argument(priority)
	args := []gi.Argument{arg_v, arg_priority}
	iv.Call(args, nil, nil)
}

// ignore GType struct TextTagClass

// Struct TextTagPrivate
type TextTagPrivate struct {
	P unsafe.Pointer
}

func TextTagPrivateGetType() gi.GType {
	ret := _I.GetGType(561, "TextTagPrivate")
	return ret
}

// Object TextTagTable
type TextTagTable struct {
	BuildableIfc
	g.Object
}

func WrapTextTagTable(p unsafe.Pointer) (r TextTagTable) { r.P = p; return }

type ITextTagTable interface{ P_TextTagTable() unsafe.Pointer }

func (v TextTagTable) P_TextTagTable() unsafe.Pointer { return v.P }
func (v TextTagTable) P_Buildable() unsafe.Pointer    { return v.P }
func TextTagTableGetType() gi.GType {
	ret := _I.GetGType(562, "TextTagTable")
	return ret
}

// gtk_text_tag_table_new
//
// [ result ] trans: everything
//
func NewTextTagTable() (result TextTagTable) {
	iv, err := _I.Get(2673, "TextTagTable", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_tag_table_add
//
// [ tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextTagTable) Add(tag ITextTag) (result bool) {
	iv, err := _I.Get(2674, "TextTagTable", "add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_tag_table_foreach
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v TextTagTable) Foreach(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(2675, "TextTagTable", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTextTagTableForeach()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_text_tag_table_get_size
//
// [ result ] trans: nothing
//
func (v TextTagTable) GetSize() (result int32) {
	iv, err := _I.Get(2676, "TextTagTable", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_tag_table_lookup
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextTagTable) Lookup(name string) (result TextTag) {
	iv, err := _I.Get(2677, "TextTagTable", "lookup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_text_tag_table_remove
//
// [ tag ] trans: nothing
//
func (v TextTagTable) Remove(tag ITextTag) {
	iv, err := _I.Get(2678, "TextTagTable", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tag != nil {
		tmp = tag.P_TextTag()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tag := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_tag}
	iv.Call(args, nil, nil)
}

// ignore GType struct TextTagTableClass

type TextTagTableForeachStruct struct {
	F_tag  TextTag
	F_data unsafe.Pointer
}

func GetPointer_myTextTagTableForeach() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTextTagTableForeach())
}

//export myGtkTextTagTableForeach
func myGtkTextTagTableForeach(tag *C.GtkTextTag, data C.gpointer) {
	// TODO: not found user_data
}

// Struct TextTagTablePrivate
type TextTagTablePrivate struct {
	P unsafe.Pointer
}

func TextTagTablePrivateGetType() gi.GType {
	ret := _I.GetGType(563, "TextTagTablePrivate")
	return ret
}

// Object TextView
type TextView struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ScrollableIfc
	Container
}

func WrapTextView(p unsafe.Pointer) (r TextView) { r.P = p; return }

type ITextView interface{ P_TextView() unsafe.Pointer }

func (v TextView) P_TextView() unsafe.Pointer         { return v.P }
func (v TextView) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v TextView) P_Buildable() unsafe.Pointer        { return v.P }
func (v TextView) P_Scrollable() unsafe.Pointer       { return v.P }
func TextViewGetType() gi.GType {
	ret := _I.GetGType(564, "TextView")
	return ret
}

// gtk_text_view_new
//
// [ result ] trans: nothing
//
func NewTextView() (result TextView) {
	iv, err := _I.Get(2679, "TextView", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_new_with_buffer
//
// [ buffer ] trans: nothing
//
// [ result ] trans: nothing
//
func NewTextViewWithBuffer(buffer ITextBuffer) (result TextView) {
	iv, err := _I.Get(2680, "TextView", "new_with_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_buffer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_add_child_at_anchor
//
// [ child ] trans: nothing
//
// [ anchor ] trans: nothing
//
func (v TextView) AddChildAtAnchor(child IWidget, anchor ITextChildAnchor) {
	iv, err := _I.Get(2681, "TextView", "add_child_at_anchor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if anchor != nil {
		tmp1 = anchor.P_TextChildAnchor()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_anchor := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_child, arg_anchor}
	iv.Call(args, nil, nil)
}

// gtk_text_view_add_child_in_window
//
// [ child ] trans: nothing
//
// [ which_window ] trans: nothing
//
// [ xpos ] trans: nothing
//
// [ ypos ] trans: nothing
//
func (v TextView) AddChildInWindow(child IWidget, which_window TextWindowTypeEnum, xpos int32, ypos int32) {
	iv, err := _I.Get(2682, "TextView", "add_child_in_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_which_window := gi.NewIntArgument(int(which_window))
	arg_xpos := gi.NewInt32Argument(xpos)
	arg_ypos := gi.NewInt32Argument(ypos)
	args := []gi.Argument{arg_v, arg_child, arg_which_window, arg_xpos, arg_ypos}
	iv.Call(args, nil, nil)
}

// gtk_text_view_backward_display_line
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) BackwardDisplayLine(iter TextIter) (result bool) {
	iv, err := _I.Get(2683, "TextView", "backward_display_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_backward_display_line_start
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) BackwardDisplayLineStart(iter TextIter) (result bool) {
	iv, err := _I.Get(2684, "TextView", "backward_display_line_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_buffer_to_window_coords
//
// [ win ] trans: nothing
//
// [ buffer_x ] trans: nothing
//
// [ buffer_y ] trans: nothing
//
// [ window_x ] trans: everything, dir: out
//
// [ window_y ] trans: everything, dir: out
//
func (v TextView) BufferToWindowCoords(win TextWindowTypeEnum, buffer_x int32, buffer_y int32) (window_x int32, window_y int32) {
	iv, err := _I.Get(2685, "TextView", "buffer_to_window_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_win := gi.NewIntArgument(int(win))
	arg_buffer_x := gi.NewInt32Argument(buffer_x)
	arg_buffer_y := gi.NewInt32Argument(buffer_y)
	arg_window_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_window_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_win, arg_buffer_x, arg_buffer_y, arg_window_x, arg_window_y}
	iv.Call(args, nil, &outArgs[0])
	window_x = outArgs[0].Int32()
	window_y = outArgs[1].Int32()
	return
}

// gtk_text_view_forward_display_line
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) ForwardDisplayLine(iter TextIter) (result bool) {
	iv, err := _I.Get(2686, "TextView", "forward_display_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_forward_display_line_end
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) ForwardDisplayLineEnd(iter TextIter) (result bool) {
	iv, err := _I.Get(2687, "TextView", "forward_display_line_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_accepts_tab
//
// [ result ] trans: nothing
//
func (v TextView) GetAcceptsTab() (result bool) {
	iv, err := _I.Get(2688, "TextView", "get_accepts_tab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_border_window_size
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) GetBorderWindowSize(type1 TextWindowTypeEnum) (result int32) {
	iv, err := _I.Get(2689, "TextView", "get_border_window_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_bottom_margin
//
// [ result ] trans: nothing
//
func (v TextView) GetBottomMargin() (result int32) {
	iv, err := _I.Get(2690, "TextView", "get_bottom_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_buffer
//
// [ result ] trans: nothing
//
func (v TextView) GetBuffer() (result TextBuffer) {
	iv, err := _I.Get(2691, "TextView", "get_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_cursor_locations
//
// [ iter ] trans: nothing
//
// [ strong ] trans: nothing, dir: out
//
// [ weak ] trans: nothing, dir: out
//
func (v TextView) GetCursorLocations(iter TextIter, strong gdk.Rectangle, weak gdk.Rectangle) {
	iv, err := _I.Get(2692, "TextView", "get_cursor_locations")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_strong := gi.NewPointerArgument(strong.P)
	arg_weak := gi.NewPointerArgument(weak.P)
	args := []gi.Argument{arg_v, arg_iter, arg_strong, arg_weak}
	iv.Call(args, nil, nil)
}

// gtk_text_view_get_cursor_visible
//
// [ result ] trans: nothing
//
func (v TextView) GetCursorVisible() (result bool) {
	iv, err := _I.Get(2693, "TextView", "get_cursor_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_default_attributes
//
// [ result ] trans: everything
//
func (v TextView) GetDefaultAttributes() (result TextAttributes) {
	iv, err := _I.Get(2694, "TextView", "get_default_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_editable
//
// [ result ] trans: nothing
//
func (v TextView) GetEditable() (result bool) {
	iv, err := _I.Get(2695, "TextView", "get_editable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_text_view_get_hadjustment
//
// [ result ] trans: nothing
//
func (v TextView) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(2696, "TextView", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_indent
//
// [ result ] trans: nothing
//
func (v TextView) GetIndent() (result int32) {
	iv, err := _I.Get(2697, "TextView", "get_indent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_input_hints
//
// [ result ] trans: nothing
//
func (v TextView) GetInputHints() (result InputHintsFlags) {
	iv, err := _I.Get(2698, "TextView", "get_input_hints")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = InputHintsFlags(ret.Int())
	return
}

// gtk_text_view_get_input_purpose
//
// [ result ] trans: nothing
//
func (v TextView) GetInputPurpose() (result InputPurposeEnum) {
	iv, err := _I.Get(2699, "TextView", "get_input_purpose")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = InputPurposeEnum(ret.Int())
	return
}

// gtk_text_view_get_iter_at_location
//
// [ iter ] trans: nothing, dir: out
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) GetIterAtLocation(iter TextIter, x int32, y int32) (result bool) {
	iv, err := _I.Get(2700, "TextView", "get_iter_at_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_iter, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_iter_at_position
//
// [ iter ] trans: nothing, dir: out
//
// [ trailing ] trans: everything, dir: out
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) GetIterAtPosition(iter TextIter, x int32, y int32) (result bool, trailing int32) {
	iv, err := _I.Get(2701, "TextView", "get_iter_at_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_trailing := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_iter, arg_trailing, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	trailing = outArgs[0].Int32()
	result = ret.Bool()
	return
}

// gtk_text_view_get_iter_location
//
// [ iter ] trans: nothing
//
// [ location ] trans: nothing, dir: out
//
func (v TextView) GetIterLocation(iter TextIter, location gdk.Rectangle) {
	iv, err := _I.Get(2702, "TextView", "get_iter_location")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_location := gi.NewPointerArgument(location.P)
	args := []gi.Argument{arg_v, arg_iter, arg_location}
	iv.Call(args, nil, nil)
}

// gtk_text_view_get_justification
//
// [ result ] trans: nothing
//
func (v TextView) GetJustification() (result JustificationEnum) {
	iv, err := _I.Get(2703, "TextView", "get_justification")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = JustificationEnum(ret.Int())
	return
}

// gtk_text_view_get_left_margin
//
// [ result ] trans: nothing
//
func (v TextView) GetLeftMargin() (result int32) {
	iv, err := _I.Get(2704, "TextView", "get_left_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_line_at_y
//
// [ target_iter ] trans: nothing, dir: out
//
// [ y ] trans: nothing
//
// [ line_top ] trans: everything, dir: out
//
func (v TextView) GetLineAtY(target_iter TextIter, y int32) (line_top int32) {
	iv, err := _I.Get(2705, "TextView", "get_line_at_y")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_target_iter := gi.NewPointerArgument(target_iter.P)
	arg_y := gi.NewInt32Argument(y)
	arg_line_top := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_target_iter, arg_y, arg_line_top}
	iv.Call(args, nil, &outArgs[0])
	line_top = outArgs[0].Int32()
	return
}

// gtk_text_view_get_line_yrange
//
// [ iter ] trans: nothing
//
// [ y ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v TextView) GetLineYrange(iter TextIter) (y int32, height int32) {
	iv, err := _I.Get(2706, "TextView", "get_line_yrange")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_iter, arg_y, arg_height}
	iv.Call(args, nil, &outArgs[0])
	y = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// gtk_text_view_get_monospace
//
// [ result ] trans: nothing
//
func (v TextView) GetMonospace() (result bool) {
	iv, err := _I.Get(2707, "TextView", "get_monospace")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_overwrite
//
// [ result ] trans: nothing
//
func (v TextView) GetOverwrite() (result bool) {
	iv, err := _I.Get(2708, "TextView", "get_overwrite")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_get_pixels_above_lines
//
// [ result ] trans: nothing
//
func (v TextView) GetPixelsAboveLines() (result int32) {
	iv, err := _I.Get(2709, "TextView", "get_pixels_above_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_pixels_below_lines
//
// [ result ] trans: nothing
//
func (v TextView) GetPixelsBelowLines() (result int32) {
	iv, err := _I.Get(2710, "TextView", "get_pixels_below_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_pixels_inside_wrap
//
// [ result ] trans: nothing
//
func (v TextView) GetPixelsInsideWrap() (result int32) {
	iv, err := _I.Get(2711, "TextView", "get_pixels_inside_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_right_margin
//
// [ result ] trans: nothing
//
func (v TextView) GetRightMargin() (result int32) {
	iv, err := _I.Get(2712, "TextView", "get_right_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_text_view_get_tabs
//
// [ result ] trans: everything
//
func (v TextView) GetTabs() (result pango.TabArray) {
	iv, err := _I.Get(2713, "TextView", "get_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_top_margin
//
// [ result ] trans: nothing
//
func (v TextView) GetTopMargin() (result int32) {
	iv, err := _I.Get(2714, "TextView", "get_top_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_text_view_get_vadjustment
//
// [ result ] trans: nothing
//
func (v TextView) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(2715, "TextView", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_visible_rect
//
// [ visible_rect ] trans: nothing, dir: out
//
func (v TextView) GetVisibleRect(visible_rect gdk.Rectangle) {
	iv, err := _I.Get(2716, "TextView", "get_visible_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_rect := gi.NewPointerArgument(visible_rect.P)
	args := []gi.Argument{arg_v, arg_visible_rect}
	iv.Call(args, nil, nil)
}

// gtk_text_view_get_window
//
// [ win ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) GetWindow(win TextWindowTypeEnum) (result gdk.Window) {
	iv, err := _I.Get(2717, "TextView", "get_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_win := gi.NewIntArgument(int(win))
	args := []gi.Argument{arg_v, arg_win}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_text_view_get_window_type
//
// [ window ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) GetWindowType(window gdk.IWindow) (result TextWindowTypeEnum) {
	iv, err := _I.Get(2718, "TextView", "get_window_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TextWindowTypeEnum(ret.Int())
	return
}

// gtk_text_view_get_wrap_mode
//
// [ result ] trans: nothing
//
func (v TextView) GetWrapMode() (result WrapModeEnum) {
	iv, err := _I.Get(2719, "TextView", "get_wrap_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = WrapModeEnum(ret.Int())
	return
}

// gtk_text_view_im_context_filter_keypress
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) ImContextFilterKeypress(event gdk.EventKey) (result bool) {
	iv, err := _I.Get(2720, "TextView", "im_context_filter_keypress")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_move_child
//
// [ child ] trans: nothing
//
// [ xpos ] trans: nothing
//
// [ ypos ] trans: nothing
//
func (v TextView) MoveChild(child IWidget, xpos int32, ypos int32) {
	iv, err := _I.Get(2721, "TextView", "move_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_xpos := gi.NewInt32Argument(xpos)
	arg_ypos := gi.NewInt32Argument(ypos)
	args := []gi.Argument{arg_v, arg_child, arg_xpos, arg_ypos}
	iv.Call(args, nil, nil)
}

// gtk_text_view_move_mark_onscreen
//
// [ mark ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) MoveMarkOnscreen(mark ITextMark) (result bool) {
	iv, err := _I.Get(2722, "TextView", "move_mark_onscreen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_mark}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_move_visually
//
// [ iter ] trans: nothing
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) MoveVisually(iter TextIter, count int32) (result bool) {
	iv, err := _I.Get(2723, "TextView", "move_visually")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_count := gi.NewInt32Argument(count)
	args := []gi.Argument{arg_v, arg_iter, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_place_cursor_onscreen
//
// [ result ] trans: nothing
//
func (v TextView) PlaceCursorOnscreen() (result bool) {
	iv, err := _I.Get(2724, "TextView", "place_cursor_onscreen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_reset_cursor_blink
//
func (v TextView) ResetCursorBlink() {
	iv, err := _I.Get(2725, "TextView", "reset_cursor_blink")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_view_reset_im_context
//
func (v TextView) ResetImContext() {
	iv, err := _I.Get(2726, "TextView", "reset_im_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_text_view_scroll_mark_onscreen
//
// [ mark ] trans: nothing
//
func (v TextView) ScrollMarkOnscreen(mark ITextMark) {
	iv, err := _I.Get(2727, "TextView", "scroll_mark_onscreen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_mark}
	iv.Call(args, nil, nil)
}

// gtk_text_view_scroll_to_iter
//
// [ iter ] trans: nothing
//
// [ within_margin ] trans: nothing
//
// [ use_align ] trans: nothing
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) ScrollToIter(iter TextIter, within_margin float64, use_align bool, xalign float64, yalign float64) (result bool) {
	iv, err := _I.Get(2728, "TextView", "scroll_to_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_within_margin := gi.NewDoubleArgument(within_margin)
	arg_use_align := gi.NewBoolArgument(use_align)
	arg_xalign := gi.NewDoubleArgument(xalign)
	arg_yalign := gi.NewDoubleArgument(yalign)
	args := []gi.Argument{arg_v, arg_iter, arg_within_margin, arg_use_align, arg_xalign, arg_yalign}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_scroll_to_mark
//
// [ mark ] trans: nothing
//
// [ within_margin ] trans: nothing
//
// [ use_align ] trans: nothing
//
// [ xalign ] trans: nothing
//
// [ yalign ] trans: nothing
//
func (v TextView) ScrollToMark(mark ITextMark, within_margin float64, use_align bool, xalign float64, yalign float64) {
	iv, err := _I.Get(2729, "TextView", "scroll_to_mark")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mark != nil {
		tmp = mark.P_TextMark()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mark := gi.NewPointerArgument(tmp)
	arg_within_margin := gi.NewDoubleArgument(within_margin)
	arg_use_align := gi.NewBoolArgument(use_align)
	arg_xalign := gi.NewDoubleArgument(xalign)
	arg_yalign := gi.NewDoubleArgument(yalign)
	args := []gi.Argument{arg_v, arg_mark, arg_within_margin, arg_use_align, arg_xalign, arg_yalign}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_accepts_tab
//
// [ accepts_tab ] trans: nothing
//
func (v TextView) SetAcceptsTab(accepts_tab bool) {
	iv, err := _I.Get(2730, "TextView", "set_accepts_tab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accepts_tab := gi.NewBoolArgument(accepts_tab)
	args := []gi.Argument{arg_v, arg_accepts_tab}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_border_window_size
//
// [ type1 ] trans: nothing
//
// [ size ] trans: nothing
//
func (v TextView) SetBorderWindowSize(type1 TextWindowTypeEnum, size int32) {
	iv, err := _I.Get(2731, "TextView", "set_border_window_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_type1, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_bottom_margin
//
// [ bottom_margin ] trans: nothing
//
func (v TextView) SetBottomMargin(bottom_margin int32) {
	iv, err := _I.Get(2732, "TextView", "set_bottom_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bottom_margin := gi.NewInt32Argument(bottom_margin)
	args := []gi.Argument{arg_v, arg_bottom_margin}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_buffer
//
// [ buffer ] trans: nothing
//
func (v TextView) SetBuffer(buffer ITextBuffer) {
	iv, err := _I.Get(2733, "TextView", "set_buffer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_buffer}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_cursor_visible
//
// [ setting ] trans: nothing
//
func (v TextView) SetCursorVisible(setting bool) {
	iv, err := _I.Get(2734, "TextView", "set_cursor_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_editable
//
// [ setting ] trans: nothing
//
func (v TextView) SetEditable(setting bool) {
	iv, err := _I.Get(2735, "TextView", "set_editable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_indent
//
// [ indent ] trans: nothing
//
func (v TextView) SetIndent(indent int32) {
	iv, err := _I.Get(2736, "TextView", "set_indent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_indent := gi.NewInt32Argument(indent)
	args := []gi.Argument{arg_v, arg_indent}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_input_hints
//
// [ hints ] trans: nothing
//
func (v TextView) SetInputHints(hints InputHintsFlags) {
	iv, err := _I.Get(2737, "TextView", "set_input_hints")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hints := gi.NewIntArgument(int(hints))
	args := []gi.Argument{arg_v, arg_hints}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_input_purpose
//
// [ purpose ] trans: nothing
//
func (v TextView) SetInputPurpose(purpose InputPurposeEnum) {
	iv, err := _I.Get(2738, "TextView", "set_input_purpose")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_purpose := gi.NewIntArgument(int(purpose))
	args := []gi.Argument{arg_v, arg_purpose}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_justification
//
// [ justification ] trans: nothing
//
func (v TextView) SetJustification(justification JustificationEnum) {
	iv, err := _I.Get(2739, "TextView", "set_justification")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_justification := gi.NewIntArgument(int(justification))
	args := []gi.Argument{arg_v, arg_justification}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_left_margin
//
// [ left_margin ] trans: nothing
//
func (v TextView) SetLeftMargin(left_margin int32) {
	iv, err := _I.Get(2740, "TextView", "set_left_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_left_margin := gi.NewInt32Argument(left_margin)
	args := []gi.Argument{arg_v, arg_left_margin}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_monospace
//
// [ monospace ] trans: nothing
//
func (v TextView) SetMonospace(monospace bool) {
	iv, err := _I.Get(2741, "TextView", "set_monospace")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_monospace := gi.NewBoolArgument(monospace)
	args := []gi.Argument{arg_v, arg_monospace}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_overwrite
//
// [ overwrite ] trans: nothing
//
func (v TextView) SetOverwrite(overwrite bool) {
	iv, err := _I.Get(2742, "TextView", "set_overwrite")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_overwrite := gi.NewBoolArgument(overwrite)
	args := []gi.Argument{arg_v, arg_overwrite}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_pixels_above_lines
//
// [ pixels_above_lines ] trans: nothing
//
func (v TextView) SetPixelsAboveLines(pixels_above_lines int32) {
	iv, err := _I.Get(2743, "TextView", "set_pixels_above_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixels_above_lines := gi.NewInt32Argument(pixels_above_lines)
	args := []gi.Argument{arg_v, arg_pixels_above_lines}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_pixels_below_lines
//
// [ pixels_below_lines ] trans: nothing
//
func (v TextView) SetPixelsBelowLines(pixels_below_lines int32) {
	iv, err := _I.Get(2744, "TextView", "set_pixels_below_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixels_below_lines := gi.NewInt32Argument(pixels_below_lines)
	args := []gi.Argument{arg_v, arg_pixels_below_lines}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_pixels_inside_wrap
//
// [ pixels_inside_wrap ] trans: nothing
//
func (v TextView) SetPixelsInsideWrap(pixels_inside_wrap int32) {
	iv, err := _I.Get(2745, "TextView", "set_pixels_inside_wrap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixels_inside_wrap := gi.NewInt32Argument(pixels_inside_wrap)
	args := []gi.Argument{arg_v, arg_pixels_inside_wrap}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_right_margin
//
// [ right_margin ] trans: nothing
//
func (v TextView) SetRightMargin(right_margin int32) {
	iv, err := _I.Get(2746, "TextView", "set_right_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_right_margin := gi.NewInt32Argument(right_margin)
	args := []gi.Argument{arg_v, arg_right_margin}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_tabs
//
// [ tabs ] trans: nothing
//
func (v TextView) SetTabs(tabs pango.TabArray) {
	iv, err := _I.Get(2747, "TextView", "set_tabs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tabs := gi.NewPointerArgument(tabs.P)
	args := []gi.Argument{arg_v, arg_tabs}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_top_margin
//
// [ top_margin ] trans: nothing
//
func (v TextView) SetTopMargin(top_margin int32) {
	iv, err := _I.Get(2748, "TextView", "set_top_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_top_margin := gi.NewInt32Argument(top_margin)
	args := []gi.Argument{arg_v, arg_top_margin}
	iv.Call(args, nil, nil)
}

// gtk_text_view_set_wrap_mode
//
// [ wrap_mode ] trans: nothing
//
func (v TextView) SetWrapMode(wrap_mode WrapModeEnum) {
	iv, err := _I.Get(2749, "TextView", "set_wrap_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_wrap_mode := gi.NewIntArgument(int(wrap_mode))
	args := []gi.Argument{arg_v, arg_wrap_mode}
	iv.Call(args, nil, nil)
}

// gtk_text_view_starts_display_line
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TextView) StartsDisplayLine(iter TextIter) (result bool) {
	iv, err := _I.Get(2750, "TextView", "starts_display_line")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_text_view_window_to_buffer_coords
//
// [ win ] trans: nothing
//
// [ window_x ] trans: nothing
//
// [ window_y ] trans: nothing
//
// [ buffer_x ] trans: everything, dir: out
//
// [ buffer_y ] trans: everything, dir: out
//
func (v TextView) WindowToBufferCoords(win TextWindowTypeEnum, window_x int32, window_y int32) (buffer_x int32, buffer_y int32) {
	iv, err := _I.Get(2751, "TextView", "window_to_buffer_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_win := gi.NewIntArgument(int(win))
	arg_window_x := gi.NewInt32Argument(window_x)
	arg_window_y := gi.NewInt32Argument(window_y)
	arg_buffer_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_buffer_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_win, arg_window_x, arg_window_y, arg_buffer_x, arg_buffer_y}
	iv.Call(args, nil, &outArgs[0])
	buffer_x = outArgs[0].Int32()
	buffer_y = outArgs[1].Int32()
	return
}

// Object TextViewAccessible
type TextViewAccessible struct {
	atk.ComponentIfc
	atk.EditableTextIfc
	atk.StreamableContentIfc
	atk.TextIfc
	ContainerAccessible
}

func WrapTextViewAccessible(p unsafe.Pointer) (r TextViewAccessible) { r.P = p; return }

type ITextViewAccessible interface{ P_TextViewAccessible() unsafe.Pointer }

func (v TextViewAccessible) P_TextViewAccessible() unsafe.Pointer { return v.P }
func (v TextViewAccessible) P_Component() unsafe.Pointer          { return v.P }
func (v TextViewAccessible) P_EditableText() unsafe.Pointer       { return v.P }
func (v TextViewAccessible) P_StreamableContent() unsafe.Pointer  { return v.P }
func (v TextViewAccessible) P_Text() unsafe.Pointer               { return v.P }
func TextViewAccessibleGetType() gi.GType {
	ret := _I.GetGType(565, "TextViewAccessible")
	return ret
}

// ignore GType struct TextViewAccessibleClass

// Struct TextViewAccessiblePrivate
type TextViewAccessiblePrivate struct {
	P unsafe.Pointer
}

func TextViewAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(566, "TextViewAccessiblePrivate")
	return ret
}

// ignore GType struct TextViewClass

// Enum TextViewLayer
type TextViewLayerEnum int

const (
	TextViewLayerBelow     TextViewLayerEnum = 0
	TextViewLayerAbove     TextViewLayerEnum = 1
	TextViewLayerBelowText TextViewLayerEnum = 2
	TextViewLayerAboveText TextViewLayerEnum = 3
)

func TextViewLayerGetType() gi.GType {
	ret := _I.GetGType(567, "TextViewLayer")
	return ret
}

// Struct TextViewPrivate
type TextViewPrivate struct {
	P unsafe.Pointer
}

func TextViewPrivateGetType() gi.GType {
	ret := _I.GetGType(568, "TextViewPrivate")
	return ret
}

// Enum TextWindowType
type TextWindowTypeEnum int

const (
	TextWindowTypePrivate TextWindowTypeEnum = 0
	TextWindowTypeWidget  TextWindowTypeEnum = 1
	TextWindowTypeText    TextWindowTypeEnum = 2
	TextWindowTypeLeft    TextWindowTypeEnum = 3
	TextWindowTypeRight   TextWindowTypeEnum = 4
	TextWindowTypeTop     TextWindowTypeEnum = 5
	TextWindowTypeBottom  TextWindowTypeEnum = 6
)

func TextWindowTypeGetType() gi.GType {
	ret := _I.GetGType(569, "TextWindowType")
	return ret
}

// Struct ThemeEngine
type ThemeEngine struct {
	P unsafe.Pointer
}

func ThemeEngineGetType() gi.GType {
	ret := _I.GetGType(570, "ThemeEngine")
	return ret
}

// Object ThemingEngine
type ThemingEngine struct {
	g.Object
}

func WrapThemingEngine(p unsafe.Pointer) (r ThemingEngine) { r.P = p; return }

type IThemingEngine interface{ P_ThemingEngine() unsafe.Pointer }

func (v ThemingEngine) P_ThemingEngine() unsafe.Pointer { return v.P }
func ThemingEngineGetType() gi.GType {
	ret := _I.GetGType(571, "ThemingEngine")
	return ret
}

// Deprecated
//
// gtk_theming_engine_load
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func ThemingEngineLoad1(name string) (result ThemingEngine) {
	iv, err := _I.Get(2752, "ThemingEngine", "load")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_theming_engine_get_background_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v ThemingEngine) GetBackgroundColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2753, "ThemingEngine", "get_background_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_border
//
// [ state ] trans: nothing
//
// [ border ] trans: nothing, dir: out
//
func (v ThemingEngine) GetBorder(state StateFlags, border Border) {
	iv, err := _I.Get(2754, "ThemingEngine", "get_border")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_border := gi.NewPointerArgument(border.P)
	args := []gi.Argument{arg_v, arg_state, arg_border}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_border_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v ThemingEngine) GetBorderColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2755, "ThemingEngine", "get_border_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
func (v ThemingEngine) GetColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(2756, "ThemingEngine", "get_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_direction
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetDirection() (result TextDirectionEnum) {
	iv, err := _I.Get(2757, "ThemingEngine", "get_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TextDirectionEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_theming_engine_get_font
//
// [ state ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetFont(state StateFlags) (result pango.FontDescription) {
	iv, err := _I.Get(2758, "ThemingEngine", "get_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_theming_engine_get_junction_sides
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetJunctionSides() (result JunctionSidesFlags) {
	iv, err := _I.Get(2759, "ThemingEngine", "get_junction_sides")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = JunctionSidesFlags(ret.Int())
	return
}

// Deprecated
//
// gtk_theming_engine_get_margin
//
// [ state ] trans: nothing
//
// [ margin ] trans: nothing, dir: out
//
func (v ThemingEngine) GetMargin(state StateFlags, margin Border) {
	iv, err := _I.Get(2760, "ThemingEngine", "get_margin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_margin := gi.NewPointerArgument(margin.P)
	args := []gi.Argument{arg_v, arg_state, arg_margin}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_padding
//
// [ state ] trans: nothing
//
// [ padding ] trans: nothing, dir: out
//
func (v ThemingEngine) GetPadding(state StateFlags, padding Border) {
	iv, err := _I.Get(2761, "ThemingEngine", "get_padding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_padding := gi.NewPointerArgument(padding.P)
	args := []gi.Argument{arg_v, arg_state, arg_padding}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_theming_engine_get_path
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetPath() (result WidgetPath) {
	iv, err := _I.Get(2762, "ThemingEngine", "get_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_theming_engine_get_property
//
// [ property ] trans: nothing
//
// [ state ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
func (v ThemingEngine) GetProperty(property string, state StateFlags, value g.Value) {
	iv, err := _I.Get(2763, "ThemingEngine", "get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property := gi.NewStringArgument(c_property)
	arg_state := gi.NewIntArgument(int(state))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property, arg_state, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// Deprecated
//
// gtk_theming_engine_get_screen
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(2764, "ThemingEngine", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_theming_engine_get_state
//
// [ result ] trans: nothing
//
func (v ThemingEngine) GetState() (result StateFlags) {
	iv, err := _I.Get(2765, "ThemingEngine", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateFlags(ret.Int())
	return
}

// Deprecated
//
// gtk_theming_engine_get_style_property
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
func (v ThemingEngine) GetStyleProperty(property_name string, value g.Value) {
	iv, err := _I.Get(2766, "ThemingEngine", "get_style_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// Deprecated
//
// gtk_theming_engine_has_class
//
// [ style_class ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ThemingEngine) HasClass(style_class string) (result bool) {
	iv, err := _I.Get(2767, "ThemingEngine", "has_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_style_class := gi.CString(style_class)
	arg_v := gi.NewPointerArgument(v.P)
	arg_style_class := gi.NewStringArgument(c_style_class)
	args := []gi.Argument{arg_v, arg_style_class}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_style_class)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_theming_engine_has_region
//
// [ style_region ] trans: nothing
//
// [ flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v ThemingEngine) HasRegion(style_region string) (result bool, flags RegionFlags) {
	iv, err := _I.Get(2768, "ThemingEngine", "has_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_style_region := gi.CString(style_region)
	arg_v := gi.NewPointerArgument(v.P)
	arg_style_region := gi.NewStringArgument(c_style_region)
	arg_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_style_region, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_style_region)
	flags = RegionFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_theming_engine_lookup_color
//
// [ color_name ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v ThemingEngine) LookupColor(color_name string, color gdk.RGBA) (result bool) {
	iv, err := _I.Get(2769, "ThemingEngine", "lookup_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_color_name := gi.CString(color_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_color_name := gi.NewStringArgument(c_color_name)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_color_name, arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_color_name)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_theming_engine_state_is_running
//
// [ state ] trans: nothing
//
// [ progress ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v ThemingEngine) StateIsRunning(state StateTypeEnum) (result bool, progress float64) {
	iv, err := _I.Get(2770, "ThemingEngine", "state_is_running")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_progress := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_state, arg_progress}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	progress = outArgs[0].Double()
	result = ret.Bool()
	return
}

// ignore GType struct ThemingEngineClass

// Struct ThemingEnginePrivate
type ThemingEnginePrivate struct {
	P unsafe.Pointer
}

func ThemingEnginePrivateGetType() gi.GType {
	ret := _I.GetGType(572, "ThemingEnginePrivate")
	return ret
}

type TickCallbackStruct struct {
	F_widget      Widget
	F_frame_clock gdk.FrameClock
}

func GetPointer_myTickCallback() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTickCallback())
}

//export myGtkTickCallback
func myGtkTickCallback(widget *C.GtkWidget, frame_clock *C.GdkFrameClock, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TickCallbackStruct{
		F_widget:      WrapWidget(unsafe.Pointer(widget)),
		F_frame_clock: gdk.WrapFrameClock(unsafe.Pointer(frame_clock)),
	}
	fn(args)
}

// Object ToggleAction
type ToggleAction struct {
	BuildableIfc
	Action
}

func WrapToggleAction(p unsafe.Pointer) (r ToggleAction) { r.P = p; return }

type IToggleAction interface{ P_ToggleAction() unsafe.Pointer }

func (v ToggleAction) P_ToggleAction() unsafe.Pointer { return v.P }
func (v ToggleAction) P_Buildable() unsafe.Pointer    { return v.P }
func ToggleActionGetType() gi.GType {
	ret := _I.GetGType(573, "ToggleAction")
	return ret
}

// Deprecated
//
// gtk_toggle_action_new
//
// [ name ] trans: nothing
//
// [ label ] trans: nothing
//
// [ tooltip ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewToggleAction(name string, label string, tooltip string, stock_id string) (result ToggleAction) {
	iv, err := _I.Get(2771, "ToggleAction", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_label := gi.CString(label)
	c_tooltip := gi.CString(tooltip)
	c_stock_id := gi.CString(stock_id)
	arg_name := gi.NewStringArgument(c_name)
	arg_label := gi.NewStringArgument(c_label)
	arg_tooltip := gi.NewStringArgument(c_tooltip)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_name, arg_label, arg_tooltip, arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_label)
	gi.Free(c_tooltip)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_toggle_action_get_active
//
// [ result ] trans: nothing
//
func (v ToggleAction) GetActive() (result bool) {
	iv, err := _I.Get(2772, "ToggleAction", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_toggle_action_get_draw_as_radio
//
// [ result ] trans: nothing
//
func (v ToggleAction) GetDrawAsRadio() (result bool) {
	iv, err := _I.Get(2773, "ToggleAction", "get_draw_as_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_toggle_action_set_active
//
// [ is_active ] trans: nothing
//
func (v ToggleAction) SetActive(is_active bool) {
	iv, err := _I.Get(2774, "ToggleAction", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_active := gi.NewBoolArgument(is_active)
	args := []gi.Argument{arg_v, arg_is_active}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_toggle_action_set_draw_as_radio
//
// [ draw_as_radio ] trans: nothing
//
func (v ToggleAction) SetDrawAsRadio(draw_as_radio bool) {
	iv, err := _I.Get(2775, "ToggleAction", "set_draw_as_radio")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw_as_radio := gi.NewBoolArgument(draw_as_radio)
	args := []gi.Argument{arg_v, arg_draw_as_radio}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_toggle_action_toggled
//
func (v ToggleAction) Toggled() {
	iv, err := _I.Get(2776, "ToggleAction", "toggled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToggleActionClass

// Deprecated
//
// Struct ToggleActionEntry
type ToggleActionEntry struct {
	P unsafe.Pointer
}

const SizeOfStructToggleActionEntry = 56

func ToggleActionEntryGetType() gi.GType {
	ret := _I.GetGType(574, "ToggleActionEntry")
	return ret
}

// Struct ToggleActionPrivate
type ToggleActionPrivate struct {
	P unsafe.Pointer
}

func ToggleActionPrivateGetType() gi.GType {
	ret := _I.GetGType(575, "ToggleActionPrivate")
	return ret
}

// Object ToggleButton
type ToggleButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	Button
}

func WrapToggleButton(p unsafe.Pointer) (r ToggleButton) { r.P = p; return }

type IToggleButton interface{ P_ToggleButton() unsafe.Pointer }

func (v ToggleButton) P_ToggleButton() unsafe.Pointer     { return v.P }
func (v ToggleButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToggleButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ToggleButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ToggleButton) P_Buildable() unsafe.Pointer        { return v.P }
func ToggleButtonGetType() gi.GType {
	ret := _I.GetGType(576, "ToggleButton")
	return ret
}

// gtk_toggle_button_new
//
// [ result ] trans: nothing
//
func NewToggleButton() (result ToggleButton) {
	iv, err := _I.Get(2777, "ToggleButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_toggle_button_new_with_label
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToggleButtonWithLabel(label string) (result ToggleButton) {
	iv, err := _I.Get(2778, "ToggleButton", "new_with_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_toggle_button_new_with_mnemonic
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToggleButtonWithMnemonic(label string) (result ToggleButton) {
	iv, err := _I.Get(2779, "ToggleButton", "new_with_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_toggle_button_get_active
//
// [ result ] trans: nothing
//
func (v ToggleButton) GetActive() (result bool) {
	iv, err := _I.Get(2780, "ToggleButton", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_toggle_button_get_inconsistent
//
// [ result ] trans: nothing
//
func (v ToggleButton) GetInconsistent() (result bool) {
	iv, err := _I.Get(2781, "ToggleButton", "get_inconsistent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_toggle_button_get_mode
//
// [ result ] trans: nothing
//
func (v ToggleButton) GetMode() (result bool) {
	iv, err := _I.Get(2782, "ToggleButton", "get_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_toggle_button_set_active
//
// [ is_active ] trans: nothing
//
func (v ToggleButton) SetActive(is_active bool) {
	iv, err := _I.Get(2783, "ToggleButton", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_active := gi.NewBoolArgument(is_active)
	args := []gi.Argument{arg_v, arg_is_active}
	iv.Call(args, nil, nil)
}

// gtk_toggle_button_set_inconsistent
//
// [ setting ] trans: nothing
//
func (v ToggleButton) SetInconsistent(setting bool) {
	iv, err := _I.Get(2784, "ToggleButton", "set_inconsistent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_toggle_button_set_mode
//
// [ draw_indicator ] trans: nothing
//
func (v ToggleButton) SetMode(draw_indicator bool) {
	iv, err := _I.Get(2785, "ToggleButton", "set_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_draw_indicator := gi.NewBoolArgument(draw_indicator)
	args := []gi.Argument{arg_v, arg_draw_indicator}
	iv.Call(args, nil, nil)
}

// gtk_toggle_button_toggled
//
func (v ToggleButton) Toggled() {
	iv, err := _I.Get(2786, "ToggleButton", "toggled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object ToggleButtonAccessible
type ToggleButtonAccessible struct {
	atk.ActionIfc
	atk.ComponentIfc
	atk.ImageIfc
	ButtonAccessible
}

func WrapToggleButtonAccessible(p unsafe.Pointer) (r ToggleButtonAccessible) { r.P = p; return }

type IToggleButtonAccessible interface{ P_ToggleButtonAccessible() unsafe.Pointer }

func (v ToggleButtonAccessible) P_ToggleButtonAccessible() unsafe.Pointer { return v.P }
func (v ToggleButtonAccessible) P_Action() unsafe.Pointer                 { return v.P }
func (v ToggleButtonAccessible) P_Component() unsafe.Pointer              { return v.P }
func (v ToggleButtonAccessible) P_Image() unsafe.Pointer                  { return v.P }
func ToggleButtonAccessibleGetType() gi.GType {
	ret := _I.GetGType(577, "ToggleButtonAccessible")
	return ret
}

// ignore GType struct ToggleButtonAccessibleClass

// Struct ToggleButtonAccessiblePrivate
type ToggleButtonAccessiblePrivate struct {
	P unsafe.Pointer
}

func ToggleButtonAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(578, "ToggleButtonAccessiblePrivate")
	return ret
}

// ignore GType struct ToggleButtonClass

// Struct ToggleButtonPrivate
type ToggleButtonPrivate struct {
	P unsafe.Pointer
}

func ToggleButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(579, "ToggleButtonPrivate")
	return ret
}

// Object ToggleToolButton
type ToggleToolButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToolButton
}

func WrapToggleToolButton(p unsafe.Pointer) (r ToggleToolButton) { r.P = p; return }

type IToggleToolButton interface{ P_ToggleToolButton() unsafe.Pointer }

func (v ToggleToolButton) P_ToggleToolButton() unsafe.Pointer { return v.P }
func (v ToggleToolButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToggleToolButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ToggleToolButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ToggleToolButton) P_Buildable() unsafe.Pointer        { return v.P }
func ToggleToolButtonGetType() gi.GType {
	ret := _I.GetGType(580, "ToggleToolButton")
	return ret
}

// gtk_toggle_tool_button_new
//
// [ result ] trans: nothing
//
func NewToggleToolButton() (result ToggleToolButton) {
	iv, err := _I.Get(2787, "ToggleToolButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_toggle_tool_button_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToggleToolButtonFromStock(stock_id string) (result ToggleToolButton) {
	iv, err := _I.Get(2788, "ToggleToolButton", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_toggle_tool_button_get_active
//
// [ result ] trans: nothing
//
func (v ToggleToolButton) GetActive() (result bool) {
	iv, err := _I.Get(2789, "ToggleToolButton", "get_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_toggle_tool_button_set_active
//
// [ is_active ] trans: nothing
//
func (v ToggleToolButton) SetActive(is_active bool) {
	iv, err := _I.Get(2790, "ToggleToolButton", "set_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_active := gi.NewBoolArgument(is_active)
	args := []gi.Argument{arg_v, arg_is_active}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToggleToolButtonClass

// Struct ToggleToolButtonPrivate
type ToggleToolButtonPrivate struct {
	P unsafe.Pointer
}

func ToggleToolButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(581, "ToggleToolButtonPrivate")
	return ret
}

// Object ToolButton
type ToolButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	ToolItem
}

func WrapToolButton(p unsafe.Pointer) (r ToolButton) { r.P = p; return }

type IToolButton interface{ P_ToolButton() unsafe.Pointer }

func (v ToolButton) P_ToolButton() unsafe.Pointer       { return v.P }
func (v ToolButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToolButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v ToolButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v ToolButton) P_Buildable() unsafe.Pointer        { return v.P }
func ToolButtonGetType() gi.GType {
	ret := _I.GetGType(582, "ToolButton")
	return ret
}

// gtk_tool_button_new
//
// [ icon_widget ] trans: nothing
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToolButton(icon_widget IWidget, label string) (result ToolButton) {
	iv, err := _I.Get(2791, "ToolButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon_widget != nil {
		tmp = icon_widget.P_Widget()
	}
	c_label := gi.CString(label)
	arg_icon_widget := gi.NewPointerArgument(tmp)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_icon_widget, arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_tool_button_new_from_stock
//
// [ stock_id ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToolButtonFromStock(stock_id string) (result ToolButton) {
	iv, err := _I.Get(2792, "ToolButton", "new_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_stock_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// gtk_tool_button_get_icon_name
//
// [ result ] trans: nothing
//
func (v ToolButton) GetIconName() (result string) {
	iv, err := _I.Get(2793, "ToolButton", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_tool_button_get_icon_widget
//
// [ result ] trans: nothing
//
func (v ToolButton) GetIconWidget() (result Widget) {
	iv, err := _I.Get(2794, "ToolButton", "get_icon_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_button_get_label
//
// [ result ] trans: nothing
//
func (v ToolButton) GetLabel() (result string) {
	iv, err := _I.Get(2795, "ToolButton", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_tool_button_get_label_widget
//
// [ result ] trans: nothing
//
func (v ToolButton) GetLabelWidget() (result Widget) {
	iv, err := _I.Get(2796, "ToolButton", "get_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_tool_button_get_stock_id
//
// [ result ] trans: nothing
//
func (v ToolButton) GetStockId() (result string) {
	iv, err := _I.Get(2797, "ToolButton", "get_stock_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_tool_button_get_use_underline
//
// [ result ] trans: nothing
//
func (v ToolButton) GetUseUnderline() (result bool) {
	iv, err := _I.Get(2798, "ToolButton", "get_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_button_set_icon_name
//
// [ icon_name ] trans: nothing
//
func (v ToolButton) SetIconName(icon_name string) {
	iv, err := _I.Get(2799, "ToolButton", "set_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_tool_button_set_icon_widget
//
// [ icon_widget ] trans: nothing
//
func (v ToolButton) SetIconWidget(icon_widget IWidget) {
	iv, err := _I.Get(2800, "ToolButton", "set_icon_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon_widget != nil {
		tmp = icon_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon_widget}
	iv.Call(args, nil, nil)
}

// gtk_tool_button_set_label
//
// [ label ] trans: nothing
//
func (v ToolButton) SetLabel(label string) {
	iv, err := _I.Get(2801, "ToolButton", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_tool_button_set_label_widget
//
// [ label_widget ] trans: nothing
//
func (v ToolButton) SetLabelWidget(label_widget IWidget) {
	iv, err := _I.Get(2802, "ToolButton", "set_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label_widget != nil {
		tmp = label_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label_widget}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_tool_button_set_stock_id
//
// [ stock_id ] trans: nothing
//
func (v ToolButton) SetStockId(stock_id string) {
	iv, err := _I.Get(2803, "ToolButton", "set_stock_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_tool_button_set_use_underline
//
// [ use_underline ] trans: nothing
//
func (v ToolButton) SetUseUnderline(use_underline bool) {
	iv, err := _I.Get(2804, "ToolButton", "set_use_underline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_underline := gi.NewBoolArgument(use_underline)
	args := []gi.Argument{arg_v, arg_use_underline}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolButtonClass

// Struct ToolButtonPrivate
type ToolButtonPrivate struct {
	P unsafe.Pointer
}

func ToolButtonPrivateGetType() gi.GType {
	ret := _I.GetGType(583, "ToolButtonPrivate")
	return ret
}

// Object ToolItem
type ToolItem struct {
	atk.ImplementorIfaceIfc
	ActivatableIfc
	BuildableIfc
	Bin
}

func WrapToolItem(p unsafe.Pointer) (r ToolItem) { r.P = p; return }

type IToolItem interface{ P_ToolItem() unsafe.Pointer }

func (v ToolItem) P_ToolItem() unsafe.Pointer         { return v.P }
func (v ToolItem) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToolItem) P_Activatable() unsafe.Pointer      { return v.P }
func (v ToolItem) P_Buildable() unsafe.Pointer        { return v.P }
func ToolItemGetType() gi.GType {
	ret := _I.GetGType(584, "ToolItem")
	return ret
}

// gtk_tool_item_new
//
// [ result ] trans: nothing
//
func NewToolItem() (result ToolItem) {
	iv, err := _I.Get(2805, "ToolItem", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_get_ellipsize_mode
//
// [ result ] trans: nothing
//
func (v ToolItem) GetEllipsizeMode() (result pango.EllipsizeModeEnum) {
	iv, err := _I.Get(2806, "ToolItem", "get_ellipsize_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.EllipsizeModeEnum(ret.Int())
	return
}

// gtk_tool_item_get_expand
//
// [ result ] trans: nothing
//
func (v ToolItem) GetExpand() (result bool) {
	iv, err := _I.Get(2807, "ToolItem", "get_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_get_homogeneous
//
// [ result ] trans: nothing
//
func (v ToolItem) GetHomogeneous() (result bool) {
	iv, err := _I.Get(2808, "ToolItem", "get_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_get_icon_size
//
// [ result ] trans: nothing
//
func (v ToolItem) GetIconSize() (result int32) {
	iv, err := _I.Get(2809, "ToolItem", "get_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tool_item_get_is_important
//
// [ result ] trans: nothing
//
func (v ToolItem) GetIsImportant() (result bool) {
	iv, err := _I.Get(2810, "ToolItem", "get_is_important")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_get_orientation
//
// [ result ] trans: nothing
//
func (v ToolItem) GetOrientation() (result OrientationEnum) {
	iv, err := _I.Get(2811, "ToolItem", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_tool_item_get_proxy_menu_item
//
// [ menu_item_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolItem) GetProxyMenuItem(menu_item_id string) (result Widget) {
	iv, err := _I.Get(2812, "ToolItem", "get_proxy_menu_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_menu_item_id := gi.CString(menu_item_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu_item_id := gi.NewStringArgument(c_menu_item_id)
	args := []gi.Argument{arg_v, arg_menu_item_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_menu_item_id)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_get_relief_style
//
// [ result ] trans: nothing
//
func (v ToolItem) GetReliefStyle() (result ReliefStyleEnum) {
	iv, err := _I.Get(2813, "ToolItem", "get_relief_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ReliefStyleEnum(ret.Int())
	return
}

// gtk_tool_item_get_text_alignment
//
// [ result ] trans: nothing
//
func (v ToolItem) GetTextAlignment() (result float32) {
	iv, err := _I.Get(2814, "ToolItem", "get_text_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_tool_item_get_text_orientation
//
// [ result ] trans: nothing
//
func (v ToolItem) GetTextOrientation() (result OrientationEnum) {
	iv, err := _I.Get(2815, "ToolItem", "get_text_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_tool_item_get_text_size_group
//
// [ result ] trans: nothing
//
func (v ToolItem) GetTextSizeGroup() (result SizeGroup) {
	iv, err := _I.Get(2816, "ToolItem", "get_text_size_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_get_toolbar_style
//
// [ result ] trans: nothing
//
func (v ToolItem) GetToolbarStyle() (result ToolbarStyleEnum) {
	iv, err := _I.Get(2817, "ToolItem", "get_toolbar_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ToolbarStyleEnum(ret.Int())
	return
}

// gtk_tool_item_get_use_drag_window
//
// [ result ] trans: nothing
//
func (v ToolItem) GetUseDragWindow() (result bool) {
	iv, err := _I.Get(2818, "ToolItem", "get_use_drag_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_get_visible_horizontal
//
// [ result ] trans: nothing
//
func (v ToolItem) GetVisibleHorizontal() (result bool) {
	iv, err := _I.Get(2819, "ToolItem", "get_visible_horizontal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_get_visible_vertical
//
// [ result ] trans: nothing
//
func (v ToolItem) GetVisibleVertical() (result bool) {
	iv, err := _I.Get(2820, "ToolItem", "get_visible_vertical")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_rebuild_menu
//
func (v ToolItem) RebuildMenu() {
	iv, err := _I.Get(2821, "ToolItem", "rebuild_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_retrieve_proxy_menu_item
//
// [ result ] trans: nothing
//
func (v ToolItem) RetrieveProxyMenuItem() (result Widget) {
	iv, err := _I.Get(2822, "ToolItem", "retrieve_proxy_menu_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_set_expand
//
// [ expand ] trans: nothing
//
func (v ToolItem) SetExpand(expand bool) {
	iv, err := _I.Get(2823, "ToolItem", "set_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_set_homogeneous
//
// [ homogeneous ] trans: nothing
//
func (v ToolItem) SetHomogeneous(homogeneous bool) {
	iv, err := _I.Get(2824, "ToolItem", "set_homogeneous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	args := []gi.Argument{arg_v, arg_homogeneous}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_set_is_important
//
// [ is_important ] trans: nothing
//
func (v ToolItem) SetIsImportant(is_important bool) {
	iv, err := _I.Get(2825, "ToolItem", "set_is_important")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_important := gi.NewBoolArgument(is_important)
	args := []gi.Argument{arg_v, arg_is_important}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_set_proxy_menu_item
//
// [ menu_item_id ] trans: nothing
//
// [ menu_item ] trans: nothing
//
func (v ToolItem) SetProxyMenuItem(menu_item_id string, menu_item IWidget) {
	iv, err := _I.Get(2826, "ToolItem", "set_proxy_menu_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_menu_item_id := gi.CString(menu_item_id)
	var tmp unsafe.Pointer
	if menu_item != nil {
		tmp = menu_item.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_menu_item_id := gi.NewStringArgument(c_menu_item_id)
	arg_menu_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_menu_item_id, arg_menu_item}
	iv.Call(args, nil, nil)
	gi.Free(c_menu_item_id)
}

// gtk_tool_item_set_tooltip_markup
//
// [ markup ] trans: nothing
//
func (v ToolItem) SetTooltipMarkup(markup string) {
	iv, err := _I.Get(2827, "ToolItem", "set_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_tool_item_set_tooltip_text
//
// [ text ] trans: nothing
//
func (v ToolItem) SetTooltipText(text string) {
	iv, err := _I.Get(2828, "ToolItem", "set_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_tool_item_set_use_drag_window
//
// [ use_drag_window ] trans: nothing
//
func (v ToolItem) SetUseDragWindow(use_drag_window bool) {
	iv, err := _I.Get(2829, "ToolItem", "set_use_drag_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_drag_window := gi.NewBoolArgument(use_drag_window)
	args := []gi.Argument{arg_v, arg_use_drag_window}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_set_visible_horizontal
//
// [ visible_horizontal ] trans: nothing
//
func (v ToolItem) SetVisibleHorizontal(visible_horizontal bool) {
	iv, err := _I.Get(2830, "ToolItem", "set_visible_horizontal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_horizontal := gi.NewBoolArgument(visible_horizontal)
	args := []gi.Argument{arg_v, arg_visible_horizontal}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_set_visible_vertical
//
// [ visible_vertical ] trans: nothing
//
func (v ToolItem) SetVisibleVertical(visible_vertical bool) {
	iv, err := _I.Get(2831, "ToolItem", "set_visible_vertical")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_vertical := gi.NewBoolArgument(visible_vertical)
	args := []gi.Argument{arg_v, arg_visible_vertical}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_toolbar_reconfigured
//
func (v ToolItem) ToolbarReconfigured() {
	iv, err := _I.Get(2832, "ToolItem", "toolbar_reconfigured")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolItemClass

// Object ToolItemGroup
type ToolItemGroup struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ToolShellIfc
	Container
}

func WrapToolItemGroup(p unsafe.Pointer) (r ToolItemGroup) { r.P = p; return }

type IToolItemGroup interface{ P_ToolItemGroup() unsafe.Pointer }

func (v ToolItemGroup) P_ToolItemGroup() unsafe.Pointer    { return v.P }
func (v ToolItemGroup) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToolItemGroup) P_Buildable() unsafe.Pointer        { return v.P }
func (v ToolItemGroup) P_ToolShell() unsafe.Pointer        { return v.P }
func ToolItemGroupGetType() gi.GType {
	ret := _I.GetGType(585, "ToolItemGroup")
	return ret
}

// gtk_tool_item_group_new
//
// [ label ] trans: nothing
//
// [ result ] trans: nothing
//
func NewToolItemGroup(label string) (result ToolItemGroup) {
	iv, err := _I.Get(2833, "ToolItemGroup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_label}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_group_get_collapsed
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetCollapsed() (result bool) {
	iv, err := _I.Get(2834, "ToolItemGroup", "get_collapsed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_item_group_get_drop_item
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetDropItem(x int32, y int32) (result ToolItem) {
	iv, err := _I.Get(2835, "ToolItemGroup", "get_drop_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_group_get_ellipsize
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetEllipsize() (result pango.EllipsizeModeEnum) {
	iv, err := _I.Get(2836, "ToolItemGroup", "get_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.EllipsizeModeEnum(ret.Int())
	return
}

// gtk_tool_item_group_get_header_relief
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetHeaderRelief() (result ReliefStyleEnum) {
	iv, err := _I.Get(2837, "ToolItemGroup", "get_header_relief")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ReliefStyleEnum(ret.Int())
	return
}

// gtk_tool_item_group_get_item_position
//
// [ item ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetItemPosition(item IToolItem) (result int32) {
	iv, err := _I.Get(2838, "ToolItemGroup", "get_item_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_item}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tool_item_group_get_label
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetLabel() (result string) {
	iv, err := _I.Get(2839, "ToolItemGroup", "get_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_tool_item_group_get_label_widget
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetLabelWidget() (result Widget) {
	iv, err := _I.Get(2840, "ToolItemGroup", "get_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_group_get_n_items
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetNItems() (result uint32) {
	iv, err := _I.Get(2841, "ToolItemGroup", "get_n_items")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_tool_item_group_get_nth_item
//
// [ index ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolItemGroup) GetNthItem(index uint32) (result ToolItem) {
	iv, err := _I.Get(2842, "ToolItemGroup", "get_nth_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index := gi.NewUint32Argument(index)
	args := []gi.Argument{arg_v, arg_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_item_group_insert
//
// [ item ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ToolItemGroup) Insert(item IToolItem, position int32) {
	iv, err := _I.Get(2843, "ToolItemGroup", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_item, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_group_set_collapsed
//
// [ collapsed ] trans: nothing
//
func (v ToolItemGroup) SetCollapsed(collapsed bool) {
	iv, err := _I.Get(2844, "ToolItemGroup", "set_collapsed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_collapsed := gi.NewBoolArgument(collapsed)
	args := []gi.Argument{arg_v, arg_collapsed}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_group_set_ellipsize
//
// [ ellipsize ] trans: nothing
//
func (v ToolItemGroup) SetEllipsize(ellipsize pango.EllipsizeModeEnum) {
	iv, err := _I.Get(2845, "ToolItemGroup", "set_ellipsize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ellipsize := gi.NewIntArgument(int(ellipsize))
	args := []gi.Argument{arg_v, arg_ellipsize}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_group_set_header_relief
//
// [ style ] trans: nothing
//
func (v ToolItemGroup) SetHeaderRelief(style ReliefStyleEnum) {
	iv, err := _I.Get(2846, "ToolItemGroup", "set_header_relief")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewIntArgument(int(style))
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_group_set_item_position
//
// [ item ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ToolItemGroup) SetItemPosition(item IToolItem, position int32) {
	iv, err := _I.Get(2847, "ToolItemGroup", "set_item_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_item, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tool_item_group_set_label
//
// [ label ] trans: nothing
//
func (v ToolItemGroup) SetLabel(label string) {
	iv, err := _I.Get(2848, "ToolItemGroup", "set_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// gtk_tool_item_group_set_label_widget
//
// [ label_widget ] trans: nothing
//
func (v ToolItemGroup) SetLabelWidget(label_widget IWidget) {
	iv, err := _I.Get(2849, "ToolItemGroup", "set_label_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label_widget != nil {
		tmp = label_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label_widget}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolItemGroupClass

// Struct ToolItemGroupPrivate
type ToolItemGroupPrivate struct {
	P unsafe.Pointer
}

func ToolItemGroupPrivateGetType() gi.GType {
	ret := _I.GetGType(586, "ToolItemGroupPrivate")
	return ret
}

// Struct ToolItemPrivate
type ToolItemPrivate struct {
	P unsafe.Pointer
}

func ToolItemPrivateGetType() gi.GType {
	ret := _I.GetGType(587, "ToolItemPrivate")
	return ret
}

// Object ToolPalette
type ToolPalette struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	ScrollableIfc
	Container
}

func WrapToolPalette(p unsafe.Pointer) (r ToolPalette) { r.P = p; return }

type IToolPalette interface{ P_ToolPalette() unsafe.Pointer }

func (v ToolPalette) P_ToolPalette() unsafe.Pointer      { return v.P }
func (v ToolPalette) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v ToolPalette) P_Buildable() unsafe.Pointer        { return v.P }
func (v ToolPalette) P_Orientable() unsafe.Pointer       { return v.P }
func (v ToolPalette) P_Scrollable() unsafe.Pointer       { return v.P }
func ToolPaletteGetType() gi.GType {
	ret := _I.GetGType(588, "ToolPalette")
	return ret
}

// gtk_tool_palette_new
//
// [ result ] trans: nothing
//
func NewToolPalette() (result ToolPalette) {
	iv, err := _I.Get(2850, "ToolPalette", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_add_drag_dest
//
// [ widget ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v ToolPalette) AddDragDest(widget IWidget, flags DestDefaultsFlags, targets ToolPaletteDragTargetsFlags, actions gdk.DragActionFlags) {
	iv, err := _I.Get(2853, "ToolPalette", "add_drag_dest")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_targets := gi.NewIntArgument(int(targets))
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_widget, arg_flags, arg_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_get_drag_item
//
// [ selection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetDragItem(selection SelectionData) (result Widget) {
	iv, err := _I.Get(2854, "ToolPalette", "get_drag_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_selection := gi.NewPointerArgument(selection.P)
	args := []gi.Argument{arg_v, arg_selection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_get_drop_group
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetDropGroup(x int32, y int32) (result ToolItemGroup) {
	iv, err := _I.Get(2855, "ToolPalette", "get_drop_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_get_drop_item
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetDropItem(x int32, y int32) (result ToolItem) {
	iv, err := _I.Get(2856, "ToolPalette", "get_drop_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_get_exclusive
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetExclusive(group IToolItemGroup) (result bool) {
	iv, err := _I.Get(2857, "ToolPalette", "get_exclusive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_palette_get_expand
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetExpand(group IToolItemGroup) (result bool) {
	iv, err := _I.Get(2858, "ToolPalette", "get_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tool_palette_get_group_position
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetGroupPosition(group IToolItemGroup) (result int32) {
	iv, err := _I.Get(2859, "ToolPalette", "get_group_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_tool_palette_get_hadjustment
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(2860, "ToolPalette", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_get_icon_size
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetIconSize() (result int32) {
	iv, err := _I.Get(2861, "ToolPalette", "get_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tool_palette_get_style
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetStyle() (result ToolbarStyleEnum) {
	iv, err := _I.Get(2862, "ToolPalette", "get_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ToolbarStyleEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_tool_palette_get_vadjustment
//
// [ result ] trans: nothing
//
func (v ToolPalette) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(2863, "ToolPalette", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_palette_set_drag_source
//
// [ targets ] trans: nothing
//
func (v ToolPalette) SetDragSource(targets ToolPaletteDragTargetsFlags) {
	iv, err := _I.Get(2864, "ToolPalette", "set_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewIntArgument(int(targets))
	args := []gi.Argument{arg_v, arg_targets}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_set_exclusive
//
// [ group ] trans: nothing
//
// [ exclusive ] trans: nothing
//
func (v ToolPalette) SetExclusive(group IToolItemGroup, exclusive bool) {
	iv, err := _I.Get(2865, "ToolPalette", "set_exclusive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_exclusive := gi.NewBoolArgument(exclusive)
	args := []gi.Argument{arg_v, arg_group, arg_exclusive}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_set_expand
//
// [ group ] trans: nothing
//
// [ expand ] trans: nothing
//
func (v ToolPalette) SetExpand(group IToolItemGroup, expand bool) {
	iv, err := _I.Get(2866, "ToolPalette", "set_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_group, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_set_group_position
//
// [ group ] trans: nothing
//
// [ position ] trans: nothing
//
func (v ToolPalette) SetGroupPosition(group IToolItemGroup, position int32) {
	iv, err := _I.Get(2867, "ToolPalette", "set_group_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ToolItemGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_group, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_set_icon_size
//
// [ icon_size ] trans: nothing
//
func (v ToolPalette) SetIconSize(icon_size int32) {
	iv, err := _I.Get(2868, "ToolPalette", "set_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_size := gi.NewInt32Argument(icon_size)
	args := []gi.Argument{arg_v, arg_icon_size}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_set_style
//
// [ style ] trans: nothing
//
func (v ToolPalette) SetStyle(style ToolbarStyleEnum) {
	iv, err := _I.Get(2869, "ToolPalette", "set_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewIntArgument(int(style))
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_unset_icon_size
//
func (v ToolPalette) UnsetIconSize() {
	iv, err := _I.Get(2870, "ToolPalette", "unset_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tool_palette_unset_style
//
func (v ToolPalette) UnsetStyle() {
	iv, err := _I.Get(2871, "ToolPalette", "unset_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolPaletteClass

// Flags ToolPaletteDragTargets
type ToolPaletteDragTargetsFlags int

const (
	ToolPaletteDragTargetsItems  ToolPaletteDragTargetsFlags = 1
	ToolPaletteDragTargetsGroups ToolPaletteDragTargetsFlags = 2
)

func ToolPaletteDragTargetsGetType() gi.GType {
	ret := _I.GetGType(589, "ToolPaletteDragTargets")
	return ret
}

// Struct ToolPalettePrivate
type ToolPalettePrivate struct {
	P unsafe.Pointer
}

func ToolPalettePrivateGetType() gi.GType {
	ret := _I.GetGType(590, "ToolPalettePrivate")
	return ret
}

// Interface ToolShell
type ToolShell struct {
	ToolShellIfc
	P unsafe.Pointer
}
type ToolShellIfc struct{}
type IToolShell interface{ P_ToolShell() unsafe.Pointer }

func (v ToolShell) P_ToolShell() unsafe.Pointer { return v.P }
func ToolShellGetType() gi.GType {
	ret := _I.GetGType(591, "ToolShell")
	return ret
}

// gtk_tool_shell_get_ellipsize_mode
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetEllipsizeMode() (result pango.EllipsizeModeEnum) {
	iv, err := _I.Get(2872, "ToolShell", "get_ellipsize_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = pango.EllipsizeModeEnum(ret.Int())
	return
}

// gtk_tool_shell_get_icon_size
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetIconSize() (result int32) {
	iv, err := _I.Get(2873, "ToolShell", "get_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tool_shell_get_orientation
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetOrientation() (result OrientationEnum) {
	iv, err := _I.Get(2874, "ToolShell", "get_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_tool_shell_get_relief_style
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetReliefStyle() (result ReliefStyleEnum) {
	iv, err := _I.Get(2875, "ToolShell", "get_relief_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ReliefStyleEnum(ret.Int())
	return
}

// gtk_tool_shell_get_style
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetStyle() (result ToolbarStyleEnum) {
	iv, err := _I.Get(2876, "ToolShell", "get_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ToolbarStyleEnum(ret.Int())
	return
}

// gtk_tool_shell_get_text_alignment
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetTextAlignment() (result float32) {
	iv, err := _I.Get(2877, "ToolShell", "get_text_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_tool_shell_get_text_orientation
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetTextOrientation() (result OrientationEnum) {
	iv, err := _I.Get(2878, "ToolShell", "get_text_orientation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = OrientationEnum(ret.Int())
	return
}

// gtk_tool_shell_get_text_size_group
//
// [ result ] trans: nothing
//
func (v *ToolShellIfc) GetTextSizeGroup() (result SizeGroup) {
	iv, err := _I.Get(2879, "ToolShell", "get_text_size_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tool_shell_rebuild_menu
//
func (v *ToolShellIfc) RebuildMenu() {
	iv, err := _I.Get(2880, "ToolShell", "rebuild_menu")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolShellIface

// Object Toolbar
type Toolbar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	ToolShellIfc
	Container
}

func WrapToolbar(p unsafe.Pointer) (r Toolbar) { r.P = p; return }

type IToolbar interface{ P_Toolbar() unsafe.Pointer }

func (v Toolbar) P_Toolbar() unsafe.Pointer          { return v.P }
func (v Toolbar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Toolbar) P_Buildable() unsafe.Pointer        { return v.P }
func (v Toolbar) P_Orientable() unsafe.Pointer       { return v.P }
func (v Toolbar) P_ToolShell() unsafe.Pointer        { return v.P }
func ToolbarGetType() gi.GType {
	ret := _I.GetGType(592, "Toolbar")
	return ret
}

// gtk_toolbar_new
//
// [ result ] trans: nothing
//
func NewToolbar() (result Toolbar) {
	iv, err := _I.Get(2881, "Toolbar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_toolbar_get_drop_index
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Toolbar) GetDropIndex(x int32, y int32) (result int32) {
	iv, err := _I.Get(2882, "Toolbar", "get_drop_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_toolbar_get_icon_size
//
// [ result ] trans: nothing
//
func (v Toolbar) GetIconSize() (result IconSizeEnum) {
	iv, err := _I.Get(2883, "Toolbar", "get_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IconSizeEnum(ret.Int())
	return
}

// gtk_toolbar_get_item_index
//
// [ item ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Toolbar) GetItemIndex(item IToolItem) (result int32) {
	iv, err := _I.Get(2884, "Toolbar", "get_item_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_item}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_toolbar_get_n_items
//
// [ result ] trans: nothing
//
func (v Toolbar) GetNItems() (result int32) {
	iv, err := _I.Get(2885, "Toolbar", "get_n_items")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_toolbar_get_nth_item
//
// [ n ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Toolbar) GetNthItem(n int32) (result ToolItem) {
	iv, err := _I.Get(2886, "Toolbar", "get_nth_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n := gi.NewInt32Argument(n)
	args := []gi.Argument{arg_v, arg_n}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_toolbar_get_relief_style
//
// [ result ] trans: nothing
//
func (v Toolbar) GetReliefStyle() (result ReliefStyleEnum) {
	iv, err := _I.Get(2887, "Toolbar", "get_relief_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ReliefStyleEnum(ret.Int())
	return
}

// gtk_toolbar_get_show_arrow
//
// [ result ] trans: nothing
//
func (v Toolbar) GetShowArrow() (result bool) {
	iv, err := _I.Get(2888, "Toolbar", "get_show_arrow")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_toolbar_get_style
//
// [ result ] trans: nothing
//
func (v Toolbar) GetStyle() (result ToolbarStyleEnum) {
	iv, err := _I.Get(2889, "Toolbar", "get_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ToolbarStyleEnum(ret.Int())
	return
}

// gtk_toolbar_insert
//
// [ item ] trans: nothing
//
// [ pos ] trans: nothing
//
func (v Toolbar) Insert(item IToolItem, pos int32) {
	iv, err := _I.Get(2890, "Toolbar", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_item, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_set_drop_highlight_item
//
// [ tool_item ] trans: nothing
//
// [ index_ ] trans: nothing
//
func (v Toolbar) SetDropHighlightItem(tool_item IToolItem, index_ int32) {
	iv, err := _I.Get(2891, "Toolbar", "set_drop_highlight_item")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tool_item != nil {
		tmp = tool_item.P_ToolItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tool_item := gi.NewPointerArgument(tmp)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_tool_item, arg_index_}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_set_icon_size
//
// [ icon_size ] trans: nothing
//
func (v Toolbar) SetIconSize(icon_size IconSizeEnum) {
	iv, err := _I.Get(2892, "Toolbar", "set_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_size := gi.NewIntArgument(int(icon_size))
	args := []gi.Argument{arg_v, arg_icon_size}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_set_show_arrow
//
// [ show_arrow ] trans: nothing
//
func (v Toolbar) SetShowArrow(show_arrow bool) {
	iv, err := _I.Get(2893, "Toolbar", "set_show_arrow")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_show_arrow := gi.NewBoolArgument(show_arrow)
	args := []gi.Argument{arg_v, arg_show_arrow}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_set_style
//
// [ style ] trans: nothing
//
func (v Toolbar) SetStyle(style ToolbarStyleEnum) {
	iv, err := _I.Get(2894, "Toolbar", "set_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewIntArgument(int(style))
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_unset_icon_size
//
func (v Toolbar) UnsetIconSize() {
	iv, err := _I.Get(2895, "Toolbar", "unset_icon_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_toolbar_unset_style
//
func (v Toolbar) UnsetStyle() {
	iv, err := _I.Get(2896, "Toolbar", "unset_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ToolbarClass

// Struct ToolbarPrivate
type ToolbarPrivate struct {
	P unsafe.Pointer
}

func ToolbarPrivateGetType() gi.GType {
	ret := _I.GetGType(593, "ToolbarPrivate")
	return ret
}

// Deprecated
//
// Enum ToolbarSpaceStyle
type ToolbarSpaceStyleEnum int

const (
	ToolbarSpaceStyleEmpty ToolbarSpaceStyleEnum = 0
	ToolbarSpaceStyleLine  ToolbarSpaceStyleEnum = 1
)

func ToolbarSpaceStyleGetType() gi.GType {
	ret := _I.GetGType(594, "ToolbarSpaceStyle")
	return ret
}

// Enum ToolbarStyle
type ToolbarStyleEnum int

const (
	ToolbarStyleIcons     ToolbarStyleEnum = 0
	ToolbarStyleText      ToolbarStyleEnum = 1
	ToolbarStyleBoth      ToolbarStyleEnum = 2
	ToolbarStyleBothHoriz ToolbarStyleEnum = 3
)

func ToolbarStyleGetType() gi.GType {
	ret := _I.GetGType(595, "ToolbarStyle")
	return ret
}

// Object Tooltip
type Tooltip struct {
	g.Object
}

func WrapTooltip(p unsafe.Pointer) (r Tooltip) { r.P = p; return }

type ITooltip interface{ P_Tooltip() unsafe.Pointer }

func (v Tooltip) P_Tooltip() unsafe.Pointer { return v.P }
func TooltipGetType() gi.GType {
	ret := _I.GetGType(596, "Tooltip")
	return ret
}

// gtk_tooltip_trigger_tooltip_query
//
// [ display ] trans: nothing
//
func TooltipTriggerTooltipQuery1(display gdk.IDisplay) {
	iv, err := _I.Get(2897, "Tooltip", "trigger_tooltip_query")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_display}
	iv.Call(args, nil, nil)
}

// gtk_tooltip_set_custom
//
// [ custom_widget ] trans: nothing
//
func (v Tooltip) SetCustom(custom_widget IWidget) {
	iv, err := _I.Get(2898, "Tooltip", "set_custom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if custom_widget != nil {
		tmp = custom_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_custom_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_custom_widget}
	iv.Call(args, nil, nil)
}

// gtk_tooltip_set_icon
//
// [ pixbuf ] trans: nothing
//
func (v Tooltip) SetIcon(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(2899, "Tooltip", "set_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// gtk_tooltip_set_icon_from_gicon
//
// [ gicon ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Tooltip) SetIconFromGicon(gicon g.IIcon, size int32) {
	iv, err := _I.Get(2900, "Tooltip", "set_icon_from_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if gicon != nil {
		tmp = gicon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_gicon := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_gicon, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_tooltip_set_icon_from_icon_name
//
// [ icon_name ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Tooltip) SetIconFromIconName(icon_name string, size int32) {
	iv, err := _I.Get(2901, "Tooltip", "set_icon_from_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_icon_name, arg_size}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// Deprecated
//
// gtk_tooltip_set_icon_from_stock
//
// [ stock_id ] trans: nothing
//
// [ size ] trans: nothing
//
func (v Tooltip) SetIconFromStock(stock_id string, size int32) {
	iv, err := _I.Get(2902, "Tooltip", "set_icon_from_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_stock_id, arg_size}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_tooltip_set_markup
//
// [ markup ] trans: nothing
//
func (v Tooltip) SetMarkup(markup string) {
	iv, err := _I.Get(2903, "Tooltip", "set_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_tooltip_set_text
//
// [ text ] trans: nothing
//
func (v Tooltip) SetText(text string) {
	iv, err := _I.Get(2904, "Tooltip", "set_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_tooltip_set_tip_area
//
// [ rect ] trans: nothing
//
func (v Tooltip) SetTipArea(rect gdk.Rectangle) {
	iv, err := _I.Get(2905, "Tooltip", "set_tip_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	iv.Call(args, nil, nil)
}

// Object ToplevelAccessible
type ToplevelAccessible struct {
	atk.Object
}

func WrapToplevelAccessible(p unsafe.Pointer) (r ToplevelAccessible) { r.P = p; return }

type IToplevelAccessible interface{ P_ToplevelAccessible() unsafe.Pointer }

func (v ToplevelAccessible) P_ToplevelAccessible() unsafe.Pointer { return v.P }
func ToplevelAccessibleGetType() gi.GType {
	ret := _I.GetGType(597, "ToplevelAccessible")
	return ret
}

// gtk_toplevel_accessible_get_children
//
// [ result ] trans: nothing
//
func (v ToplevelAccessible) GetChildren() (result g.List) {
	iv, err := _I.Get(2906, "ToplevelAccessible", "get_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ToplevelAccessibleClass

// Struct ToplevelAccessiblePrivate
type ToplevelAccessiblePrivate struct {
	P unsafe.Pointer
}

func ToplevelAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(598, "ToplevelAccessiblePrivate")
	return ret
}

type TranslateFuncStruct struct {
	F_path      string
	F_func_data unsafe.Pointer
}

func GetPointer_myTranslateFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTranslateFunc())
}

//export myGtkTranslateFunc
func myGtkTranslateFunc(path *C.gchar, func_data C.gpointer) {
	// TODO: not found user_data
}

type TreeCellDataFuncStruct struct {
	F_tree_column TreeViewColumn
	F_cell        CellRenderer
	F_tree_model  TreeModel
	F_iter        TreeIter
	F_data        unsafe.Pointer
}

func GetPointer_myTreeCellDataFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeCellDataFunc())
}

//export myGtkTreeCellDataFunc
func myGtkTreeCellDataFunc(tree_column *C.GtkTreeViewColumn, cell *C.GtkCellRenderer, tree_model *C.GtkTreeModel, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

type TreeDestroyCountFuncStruct struct {
	F_tree_view TreeView
	F_path      TreePath
	F_children  int32
}

func GetPointer_myTreeDestroyCountFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeDestroyCountFunc())
}

//export myGtkTreeDestroyCountFunc
func myGtkTreeDestroyCountFunc(tree_view *C.GtkTreeView, path *C.GtkTreePath, children C.gint32, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TreeDestroyCountFuncStruct{
		F_tree_view: WrapTreeView(unsafe.Pointer(tree_view)),
		F_path:      TreePath{P: unsafe.Pointer(path)},
		F_children:  int32(children),
	}
	fn(args)
}

// Interface TreeDragDest
type TreeDragDest struct {
	TreeDragDestIfc
	P unsafe.Pointer
}
type TreeDragDestIfc struct{}
type ITreeDragDest interface{ P_TreeDragDest() unsafe.Pointer }

func (v TreeDragDest) P_TreeDragDest() unsafe.Pointer { return v.P }
func TreeDragDestGetType() gi.GType {
	ret := _I.GetGType(599, "TreeDragDest")
	return ret
}

// gtk_tree_drag_dest_drag_data_received
//
// [ dest ] trans: nothing
//
// [ selection_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeDragDestIfc) DragDataReceived(dest TreePath, selection_data SelectionData) (result bool) {
	iv, err := _I.Get(2907, "TreeDragDest", "drag_data_received")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_dest := gi.NewPointerArgument(dest.P)
	arg_selection_data := gi.NewPointerArgument(selection_data.P)
	args := []gi.Argument{arg_v, arg_dest, arg_selection_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_drag_dest_row_drop_possible
//
// [ dest_path ] trans: nothing
//
// [ selection_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeDragDestIfc) RowDropPossible(dest_path TreePath, selection_data SelectionData) (result bool) {
	iv, err := _I.Get(2908, "TreeDragDest", "row_drop_possible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_dest_path := gi.NewPointerArgument(dest_path.P)
	arg_selection_data := gi.NewPointerArgument(selection_data.P)
	args := []gi.Argument{arg_v, arg_dest_path, arg_selection_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct TreeDragDestIface

// Interface TreeDragSource
type TreeDragSource struct {
	TreeDragSourceIfc
	P unsafe.Pointer
}
type TreeDragSourceIfc struct{}
type ITreeDragSource interface{ P_TreeDragSource() unsafe.Pointer }

func (v TreeDragSource) P_TreeDragSource() unsafe.Pointer { return v.P }
func TreeDragSourceGetType() gi.GType {
	ret := _I.GetGType(600, "TreeDragSource")
	return ret
}

// gtk_tree_drag_source_drag_data_delete
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeDragSourceIfc) DragDataDelete(path TreePath) (result bool) {
	iv, err := _I.Get(2909, "TreeDragSource", "drag_data_delete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_drag_source_drag_data_get
//
// [ path ] trans: nothing
//
// [ selection_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeDragSourceIfc) DragDataGet(path TreePath, selection_data SelectionData) (result bool) {
	iv, err := _I.Get(2910, "TreeDragSource", "drag_data_get")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_selection_data := gi.NewPointerArgument(selection_data.P)
	args := []gi.Argument{arg_v, arg_path, arg_selection_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_drag_source_row_draggable
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeDragSourceIfc) RowDraggable(path TreePath) (result bool) {
	iv, err := _I.Get(2911, "TreeDragSource", "row_draggable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct TreeDragSourceIface

// Struct TreeIter
type TreeIter struct {
	P unsafe.Pointer
}

const SizeOfStructTreeIter = 32

func TreeIterGetType() gi.GType {
	ret := _I.GetGType(601, "TreeIter")
	return ret
}

// gtk_tree_iter_copy
//
// [ result ] trans: everything
//
func (v TreeIter) Copy() (result TreeIter) {
	iv, err := _I.Get(2912, "TreeIter", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_iter_free
//
func (v TreeIter) Free() {
	iv, err := _I.Get(2913, "TreeIter", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

type TreeIterCompareFuncStruct struct {
	F_model TreeModel
	F_a     TreeIter
	F_b     TreeIter
}

func GetPointer_myTreeIterCompareFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeIterCompareFunc())
}

//export myGtkTreeIterCompareFunc
func myGtkTreeIterCompareFunc(model *C.GtkTreeModel, a *C.GtkTreeIter, b *C.GtkTreeIter, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TreeIterCompareFuncStruct{
		F_model: TreeModel{P: unsafe.Pointer(model)},
		F_a:     TreeIter{P: unsafe.Pointer(a)},
		F_b:     TreeIter{P: unsafe.Pointer(b)},
	}
	fn(args)
}

// Interface TreeModel
type TreeModel struct {
	TreeModelIfc
	P unsafe.Pointer
}
type TreeModelIfc struct{}
type ITreeModel interface{ P_TreeModel() unsafe.Pointer }

func (v TreeModel) P_TreeModel() unsafe.Pointer { return v.P }
func TreeModelGetType() gi.GType {
	ret := _I.GetGType(602, "TreeModel")
	return ret
}

// gtk_tree_model_filter_new
//
// [ root ] trans: nothing
//
// [ result ] trans: everything
//
func (v *TreeModelIfc) FilterNew(root TreePath) (result TreeModel) {
	iv, err := _I.Get(2914, "TreeModel", "filter_new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_root := gi.NewPointerArgument(root.P)
	args := []gi.Argument{arg_v, arg_root}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_foreach
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *TreeModelIfc) Foreach(func1 int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer) {
	iv, err := _I.Get(2915, "TreeModel", "foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeModelForeachFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_get_column_type
//
// [ index_ ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetColumnType(index_ int32) (result gi.GType) {
	iv, err := _I.Get(2916, "TreeModel", "get_column_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// gtk_tree_model_get_flags
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetFlags() (result TreeModelFlags) {
	iv, err := _I.Get(2917, "TreeModel", "get_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TreeModelFlags(ret.Int())
	return
}

// gtk_tree_model_get_iter
//
// [ iter ] trans: nothing, dir: out
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetIter(iter TreeIter, path TreePath) (result bool) {
	iv, err := _I.Get(2918, "TreeModel", "get_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_iter, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_get_iter_first
//
// [ iter ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetIterFirst(iter TreeIter) (result bool) {
	iv, err := _I.Get(2919, "TreeModel", "get_iter_first")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_get_iter_from_string
//
// [ iter ] trans: nothing, dir: out
//
// [ path_string ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetIterFromString(iter TreeIter, path_string string) (result bool) {
	iv, err := _I.Get(2920, "TreeModel", "get_iter_from_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path_string := gi.CString(path_string)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_path_string := gi.NewStringArgument(c_path_string)
	args := []gi.Argument{arg_v, arg_iter, arg_path_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path_string)
	result = ret.Bool()
	return
}

// gtk_tree_model_get_n_columns
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) GetNColumns() (result int32) {
	iv, err := _I.Get(2921, "TreeModel", "get_n_columns")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_model_get_path
//
// [ iter ] trans: nothing
//
// [ result ] trans: everything
//
func (v *TreeModelIfc) GetPath(iter TreeIter) (result TreePath) {
	iv, err := _I.Get(2922, "TreeModel", "get_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_get_string_from_iter
//
// [ iter ] trans: nothing
//
// [ result ] trans: everything
//
func (v *TreeModelIfc) GetStringFromIter(iter TreeIter) (result string) {
	iv, err := _I.Get(2923, "TreeModel", "get_string_from_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_tree_model_get_value
//
// [ iter ] trans: nothing
//
// [ column ] trans: nothing
//
// [ value ] trans: nothing, dir: out
//
func (v *TreeModelIfc) GetValue(iter TreeIter, column int32, value g.Value) {
	iv, err := _I.Get(2924, "TreeModel", "get_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_column := gi.NewInt32Argument(column)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_iter, arg_column, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_iter_children
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterChildren(iter TreeIter, parent TreeIter) (result bool) {
	iv, err := _I.Get(2925, "TreeModel", "iter_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	args := []gi.Argument{arg_v, arg_iter, arg_parent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_iter_has_child
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterHasChild(iter TreeIter) (result bool) {
	iv, err := _I.Get(2926, "TreeModel", "iter_has_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_iter_n_children
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterNChildren(iter TreeIter) (result int32) {
	iv, err := _I.Get(2927, "TreeModel", "iter_n_children")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_model_iter_next
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterNext(iter TreeIter) (result bool) {
	iv, err := _I.Get(2928, "TreeModel", "iter_next")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_iter_nth_child
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ n ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterNthChild(iter TreeIter, parent TreeIter, n int32) (result bool) {
	iv, err := _I.Get(2929, "TreeModel", "iter_nth_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_n := gi.NewInt32Argument(n)
	args := []gi.Argument{arg_v, arg_iter, arg_parent, arg_n}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_iter_parent
//
// [ iter ] trans: nothing, dir: out
//
// [ child ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterParent(iter TreeIter, child TreeIter) (result bool) {
	iv, err := _I.Get(2930, "TreeModel", "iter_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_child := gi.NewPointerArgument(child.P)
	args := []gi.Argument{arg_v, arg_iter, arg_child}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_iter_previous
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *TreeModelIfc) IterPrevious(iter TreeIter) (result bool) {
	iv, err := _I.Get(2931, "TreeModel", "iter_previous")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_ref_node
//
// [ iter ] trans: nothing
//
func (v *TreeModelIfc) RefNode(iter TreeIter) {
	iv, err := _I.Get(2932, "TreeModel", "ref_node")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_row_changed
//
// [ path ] trans: nothing
//
// [ iter ] trans: nothing
//
func (v *TreeModelIfc) RowChanged(path TreePath, iter TreeIter) {
	iv, err := _I.Get(2933, "TreeModel", "row_changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_path, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_row_deleted
//
// [ path ] trans: nothing
//
func (v *TreeModelIfc) RowDeleted(path TreePath) {
	iv, err := _I.Get(2934, "TreeModel", "row_deleted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_row_has_child_toggled
//
// [ path ] trans: nothing
//
// [ iter ] trans: nothing
//
func (v *TreeModelIfc) RowHasChildToggled(path TreePath, iter TreeIter) {
	iv, err := _I.Get(2935, "TreeModel", "row_has_child_toggled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_path, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_row_inserted
//
// [ path ] trans: nothing
//
// [ iter ] trans: nothing
//
func (v *TreeModelIfc) RowInserted(path TreePath, iter TreeIter) {
	iv, err := _I.Get(2936, "TreeModel", "row_inserted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_path, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_rows_reordered_with_length
//
// [ path ] trans: nothing
//
// [ iter ] trans: nothing
//
// [ new_order ] trans: nothing
//
// [ length ] trans: nothing
//
func (v *TreeModelIfc) RowsReordered(path TreePath, iter TreeIter, new_order gi.Int32Array, length int32) {
	iv, err := _I.Get(2937, "TreeModel", "rows_reordered")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewPointerArgument(path.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_new_order := gi.NewPointerArgument(new_order.P)
	arg_length := gi.NewInt32Argument(length)
	args := []gi.Argument{arg_v, arg_path, arg_iter, arg_new_order, arg_length}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_sort_new_with_model
//
// [ result ] trans: everything
//
func (v *TreeModelIfc) SortNewWithModel() (result TreeModel) {
	iv, err := _I.Get(2938, "TreeModel", "sort_new_with_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_unref_node
//
// [ iter ] trans: nothing
//
func (v *TreeModelIfc) UnrefNode(iter TreeIter) {
	iv, err := _I.Get(2939, "TreeModel", "unref_node")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// Object TreeModelFilter
type TreeModelFilter struct {
	TreeDragSourceIfc
	TreeModelIfc
	g.Object
}

func WrapTreeModelFilter(p unsafe.Pointer) (r TreeModelFilter) { r.P = p; return }

type ITreeModelFilter interface{ P_TreeModelFilter() unsafe.Pointer }

func (v TreeModelFilter) P_TreeModelFilter() unsafe.Pointer { return v.P }
func (v TreeModelFilter) P_TreeDragSource() unsafe.Pointer  { return v.P }
func (v TreeModelFilter) P_TreeModel() unsafe.Pointer       { return v.P }
func TreeModelFilterGetType() gi.GType {
	ret := _I.GetGType(603, "TreeModelFilter")
	return ret
}

// gtk_tree_model_filter_clear_cache
//
func (v TreeModelFilter) ClearCache() {
	iv, err := _I.Get(2940, "TreeModelFilter", "clear_cache")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_filter_convert_child_iter_to_iter
//
// [ filter_iter ] trans: nothing, dir: out
//
// [ child_iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeModelFilter) ConvertChildIterToIter(filter_iter TreeIter, child_iter TreeIter) (result bool) {
	iv, err := _I.Get(2941, "TreeModelFilter", "convert_child_iter_to_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_iter := gi.NewPointerArgument(filter_iter.P)
	arg_child_iter := gi.NewPointerArgument(child_iter.P)
	args := []gi.Argument{arg_v, arg_filter_iter, arg_child_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_filter_convert_child_path_to_path
//
// [ child_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v TreeModelFilter) ConvertChildPathToPath(child_path TreePath) (result TreePath) {
	iv, err := _I.Get(2942, "TreeModelFilter", "convert_child_path_to_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_path := gi.NewPointerArgument(child_path.P)
	args := []gi.Argument{arg_v, arg_child_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_filter_convert_iter_to_child_iter
//
// [ child_iter ] trans: nothing, dir: out
//
// [ filter_iter ] trans: nothing
//
func (v TreeModelFilter) ConvertIterToChildIter(child_iter TreeIter, filter_iter TreeIter) {
	iv, err := _I.Get(2943, "TreeModelFilter", "convert_iter_to_child_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_iter := gi.NewPointerArgument(child_iter.P)
	arg_filter_iter := gi.NewPointerArgument(filter_iter.P)
	args := []gi.Argument{arg_v, arg_child_iter, arg_filter_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_filter_convert_path_to_child_path
//
// [ filter_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v TreeModelFilter) ConvertPathToChildPath(filter_path TreePath) (result TreePath) {
	iv, err := _I.Get(2944, "TreeModelFilter", "convert_path_to_child_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_path := gi.NewPointerArgument(filter_path.P)
	args := []gi.Argument{arg_v, arg_filter_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_filter_get_model
//
// [ result ] trans: nothing
//
func (v TreeModelFilter) GetModel() (result TreeModel) {
	iv, err := _I.Get(2945, "TreeModelFilter", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_filter_refilter
//
func (v TreeModelFilter) Refilter() {
	iv, err := _I.Get(2946, "TreeModelFilter", "refilter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_filter_set_modify_func
//
// [ n_columns ] trans: nothing
//
// [ types ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeModelFilter) SetModifyFunc(n_columns int32, types gi.GTypeArray, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2947, "TreeModelFilter", "set_modify_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_columns := gi.NewInt32Argument(n_columns)
	arg_types := gi.NewPointerArgument(types.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeModelFilterModifyFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_n_columns, arg_types, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_filter_set_visible_column
//
// [ column ] trans: nothing
//
func (v TreeModelFilter) SetVisibleColumn(column int32) {
	iv, err := _I.Get(2948, "TreeModelFilter", "set_visible_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_filter_set_visible_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeModelFilter) SetVisibleFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2949, "TreeModelFilter", "set_visible_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeModelFilterVisibleFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeModelFilterClass

type TreeModelFilterModifyFuncStruct struct {
	F_model  TreeModel
	F_iter   TreeIter
	F_value  unsafe.Pointer /*TODO_CB tag: interface, isPtr: false*/
	F_column int32
	F_data   unsafe.Pointer
}

func GetPointer_myTreeModelFilterModifyFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeModelFilterModifyFunc())
}

//export myGtkTreeModelFilterModifyFunc
func myGtkTreeModelFilterModifyFunc(model *C.GtkTreeModel, iter *C.GtkTreeIter, value C.gpointer, column C.gint32, data C.gpointer) {
	// TODO: not found user_data
}

// Struct TreeModelFilterPrivate
type TreeModelFilterPrivate struct {
	P unsafe.Pointer
}

func TreeModelFilterPrivateGetType() gi.GType {
	ret := _I.GetGType(604, "TreeModelFilterPrivate")
	return ret
}

type TreeModelFilterVisibleFuncStruct struct {
	F_model TreeModel
	F_iter  TreeIter
	F_data  unsafe.Pointer
}

func GetPointer_myTreeModelFilterVisibleFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeModelFilterVisibleFunc())
}

//export myGtkTreeModelFilterVisibleFunc
func myGtkTreeModelFilterVisibleFunc(model *C.GtkTreeModel, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

// Flags TreeModelFlags
type TreeModelFlags int

const (
	TreeModelFlagsItersPersist TreeModelFlags = 1
	TreeModelFlagsListOnly     TreeModelFlags = 2
)

func TreeModelFlagsGetType() gi.GType {
	ret := _I.GetGType(605, "TreeModelFlags")
	return ret
}

type TreeModelForeachFuncStruct struct {
	F_model TreeModel
	F_path  TreePath
	F_iter  TreeIter
	F_data  unsafe.Pointer
}

func GetPointer_myTreeModelForeachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeModelForeachFunc())
}

//export myGtkTreeModelForeachFunc
func myGtkTreeModelForeachFunc(model *C.GtkTreeModel, path *C.GtkTreePath, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

// ignore GType struct TreeModelIface

// Object TreeModelSort
type TreeModelSort struct {
	TreeDragSourceIfc
	TreeModelIfc
	TreeSortableIfc
	g.Object
}

func WrapTreeModelSort(p unsafe.Pointer) (r TreeModelSort) { r.P = p; return }

type ITreeModelSort interface{ P_TreeModelSort() unsafe.Pointer }

func (v TreeModelSort) P_TreeModelSort() unsafe.Pointer  { return v.P }
func (v TreeModelSort) P_TreeDragSource() unsafe.Pointer { return v.P }
func (v TreeModelSort) P_TreeModel() unsafe.Pointer      { return v.P }
func (v TreeModelSort) P_TreeSortable() unsafe.Pointer   { return v.P }
func TreeModelSortGetType() gi.GType {
	ret := _I.GetGType(606, "TreeModelSort")
	return ret
}

// gtk_tree_model_sort_clear_cache
//
func (v TreeModelSort) ClearCache() {
	iv, err := _I.Get(2950, "TreeModelSort", "clear_cache")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_sort_convert_child_iter_to_iter
//
// [ sort_iter ] trans: nothing, dir: out
//
// [ child_iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeModelSort) ConvertChildIterToIter(sort_iter TreeIter, child_iter TreeIter) (result bool) {
	iv, err := _I.Get(2951, "TreeModelSort", "convert_child_iter_to_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sort_iter := gi.NewPointerArgument(sort_iter.P)
	arg_child_iter := gi.NewPointerArgument(child_iter.P)
	args := []gi.Argument{arg_v, arg_sort_iter, arg_child_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_sort_convert_child_path_to_path
//
// [ child_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v TreeModelSort) ConvertChildPathToPath(child_path TreePath) (result TreePath) {
	iv, err := _I.Get(2952, "TreeModelSort", "convert_child_path_to_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_path := gi.NewPointerArgument(child_path.P)
	args := []gi.Argument{arg_v, arg_child_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_sort_convert_iter_to_child_iter
//
// [ child_iter ] trans: nothing, dir: out
//
// [ sorted_iter ] trans: nothing
//
func (v TreeModelSort) ConvertIterToChildIter(child_iter TreeIter, sorted_iter TreeIter) {
	iv, err := _I.Get(2953, "TreeModelSort", "convert_iter_to_child_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_iter := gi.NewPointerArgument(child_iter.P)
	arg_sorted_iter := gi.NewPointerArgument(sorted_iter.P)
	args := []gi.Argument{arg_v, arg_child_iter, arg_sorted_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_model_sort_convert_path_to_child_path
//
// [ sorted_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v TreeModelSort) ConvertPathToChildPath(sorted_path TreePath) (result TreePath) {
	iv, err := _I.Get(2954, "TreeModelSort", "convert_path_to_child_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sorted_path := gi.NewPointerArgument(sorted_path.P)
	args := []gi.Argument{arg_v, arg_sorted_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_sort_get_model
//
// [ result ] trans: nothing
//
func (v TreeModelSort) GetModel() (result TreeModel) {
	iv, err := _I.Get(2955, "TreeModelSort", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_model_sort_iter_is_valid
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeModelSort) IterIsValid(iter TreeIter) (result bool) {
	iv, err := _I.Get(2956, "TreeModelSort", "iter_is_valid")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_model_sort_reset_default_sort_func
//
func (v TreeModelSort) ResetDefaultSortFunc() {
	iv, err := _I.Get(2957, "TreeModelSort", "reset_default_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeModelSortClass

// Struct TreeModelSortPrivate
type TreeModelSortPrivate struct {
	P unsafe.Pointer
}

func TreeModelSortPrivateGetType() gi.GType {
	ret := _I.GetGType(607, "TreeModelSortPrivate")
	return ret
}

// Struct TreePath
type TreePath struct {
	P unsafe.Pointer
}

func TreePathGetType() gi.GType {
	ret := _I.GetGType(608, "TreePath")
	return ret
}

// gtk_tree_path_new
//
// [ result ] trans: everything
//
func NewTreePath() (result TreePath) {
	iv, err := _I.Get(2958, "TreePath", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_path_new_first
//
// [ result ] trans: everything
//
func NewTreePathFirst() (result TreePath) {
	iv, err := _I.Get(2959, "TreePath", "new_first")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_path_new_from_indicesv
//
// [ indices ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func NewTreePathFromIndices(indices gi.Int32Array, length uint64) (result TreePath) {
	iv, err := _I.Get(2960, "TreePath", "new_from_indices")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_indices := gi.NewPointerArgument(indices.P)
	arg_length := gi.NewUint64Argument(length)
	args := []gi.Argument{arg_indices, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_path_new_from_string
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewTreePathFromString(path string) (result TreePath) {
	iv, err := _I.Get(2961, "TreePath", "new_from_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// gtk_tree_path_append_index
//
// [ index_ ] trans: nothing
//
func (v TreePath) AppendIndex(index_ int32) {
	iv, err := _I.Get(2962, "TreePath", "append_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	iv.Call(args, nil, nil)
}

// gtk_tree_path_compare
//
// [ b ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreePath) Compare(b TreePath) (result int32) {
	iv, err := _I.Get(2963, "TreePath", "compare")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_b := gi.NewPointerArgument(b.P)
	args := []gi.Argument{arg_v, arg_b}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_path_copy
//
// [ result ] trans: everything
//
func (v TreePath) Copy() (result TreePath) {
	iv, err := _I.Get(2964, "TreePath", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_path_down
//
func (v TreePath) Down() {
	iv, err := _I.Get(2965, "TreePath", "down")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_path_free
//
func (v TreePath) Free() {
	iv, err := _I.Get(2966, "TreePath", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_path_get_depth
//
// [ result ] trans: nothing
//
func (v TreePath) GetDepth() (result int32) {
	iv, err := _I.Get(2967, "TreePath", "get_depth")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_path_get_indices_with_depth
//
// [ depth ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreePath) GetIndices() (result gi.Int32Array) {
	iv, err := _I.Get(2968, "TreePath", "get_indices")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_depth := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_depth}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var depth int32
	_ = depth
	depth = outArgs[0].Int32()
	result = gi.Int32Array{P: ret.Pointer(), Len: int(depth)}
	return
}

// gtk_tree_path_is_ancestor
//
// [ descendant ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreePath) IsAncestor(descendant TreePath) (result bool) {
	iv, err := _I.Get(2969, "TreePath", "is_ancestor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_descendant := gi.NewPointerArgument(descendant.P)
	args := []gi.Argument{arg_v, arg_descendant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_path_is_descendant
//
// [ ancestor ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreePath) IsDescendant(ancestor TreePath) (result bool) {
	iv, err := _I.Get(2970, "TreePath", "is_descendant")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ancestor := gi.NewPointerArgument(ancestor.P)
	args := []gi.Argument{arg_v, arg_ancestor}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_path_next
//
func (v TreePath) Next() {
	iv, err := _I.Get(2971, "TreePath", "next")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_path_prepend_index
//
// [ index_ ] trans: nothing
//
func (v TreePath) PrependIndex(index_ int32) {
	iv, err := _I.Get(2972, "TreePath", "prepend_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	args := []gi.Argument{arg_v, arg_index_}
	iv.Call(args, nil, nil)
}

// gtk_tree_path_prev
//
// [ result ] trans: nothing
//
func (v TreePath) Prev() (result bool) {
	iv, err := _I.Get(2973, "TreePath", "prev")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_path_to_string
//
// [ result ] trans: everything
//
func (v TreePath) ToString() (result string) {
	iv, err := _I.Get(2974, "TreePath", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_tree_path_up
//
// [ result ] trans: nothing
//
func (v TreePath) Up() (result bool) {
	iv, err := _I.Get(2975, "TreePath", "up")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Struct TreeRowReference
type TreeRowReference struct {
	P unsafe.Pointer
}

func TreeRowReferenceGetType() gi.GType {
	ret := _I.GetGType(609, "TreeRowReference")
	return ret
}

// gtk_tree_row_reference_new
//
// [ model ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewTreeRowReference(model ITreeModel, path TreePath) (result TreeRowReference) {
	iv, err := _I.Get(2976, "TreeRowReference", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_model, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_row_reference_new_proxy
//
// [ proxy ] trans: nothing
//
// [ model ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewTreeRowReferenceProxy(proxy g.IObject, model ITreeModel, path TreePath) (result TreeRowReference) {
	iv, err := _I.Get(2977, "TreeRowReference", "new_proxy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy != nil {
		tmp = proxy.P_Object()
	}
	var tmp1 unsafe.Pointer
	if model != nil {
		tmp1 = model.P_TreeModel()
	}
	arg_proxy := gi.NewPointerArgument(tmp)
	arg_model := gi.NewPointerArgument(tmp1)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_proxy, arg_model, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_row_reference_copy
//
// [ result ] trans: everything
//
func (v TreeRowReference) Copy() (result TreeRowReference) {
	iv, err := _I.Get(2978, "TreeRowReference", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_row_reference_free
//
func (v TreeRowReference) Free() {
	iv, err := _I.Get(2979, "TreeRowReference", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_row_reference_get_model
//
// [ result ] trans: nothing
//
func (v TreeRowReference) GetModel() (result TreeModel) {
	iv, err := _I.Get(2980, "TreeRowReference", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_row_reference_get_path
//
// [ result ] trans: everything
//
func (v TreeRowReference) GetPath() (result TreePath) {
	iv, err := _I.Get(2981, "TreeRowReference", "get_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_row_reference_valid
//
// [ result ] trans: nothing
//
func (v TreeRowReference) Valid() (result bool) {
	iv, err := _I.Get(2982, "TreeRowReference", "valid")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_row_reference_deleted
//
// [ proxy ] trans: nothing
//
// [ path ] trans: nothing
//
func TreeRowReferenceDeleted1(proxy g.IObject, path TreePath) {
	iv, err := _I.Get(2983, "TreeRowReference", "deleted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy != nil {
		tmp = proxy.P_Object()
	}
	arg_proxy := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_proxy, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_row_reference_inserted
//
// [ proxy ] trans: nothing
//
// [ path ] trans: nothing
//
func TreeRowReferenceInserted1(proxy g.IObject, path TreePath) {
	iv, err := _I.Get(2984, "TreeRowReference", "inserted")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy != nil {
		tmp = proxy.P_Object()
	}
	arg_proxy := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_proxy, arg_path}
	iv.Call(args, nil, nil)
}

// Object TreeSelection
type TreeSelection struct {
	g.Object
}

func WrapTreeSelection(p unsafe.Pointer) (r TreeSelection) { r.P = p; return }

type ITreeSelection interface{ P_TreeSelection() unsafe.Pointer }

func (v TreeSelection) P_TreeSelection() unsafe.Pointer { return v.P }
func TreeSelectionGetType() gi.GType {
	ret := _I.GetGType(610, "TreeSelection")
	return ret
}

// gtk_tree_selection_count_selected_rows
//
// [ result ] trans: nothing
//
func (v TreeSelection) CountSelectedRows() (result int32) {
	iv, err := _I.Get(2985, "TreeSelection", "count_selected_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_selection_get_mode
//
// [ result ] trans: nothing
//
func (v TreeSelection) GetMode() (result SelectionModeEnum) {
	iv, err := _I.Get(2986, "TreeSelection", "get_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SelectionModeEnum(ret.Int())
	return
}

// gtk_tree_selection_get_selected
//
// [ model ] trans: nothing, dir: out
//
// [ iter ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v TreeSelection) GetSelected(iter TreeIter) (result bool, model TreeModel) {
	iv, err := _I.Get(2987, "TreeSelection", "get_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_model, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	model.P = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// gtk_tree_selection_get_selected_rows
//
// [ model ] trans: nothing, dir: out
//
// [ result ] trans: everything
//
func (v TreeSelection) GetSelectedRows() (result g.List, model TreeModel) {
	iv, err := _I.Get(2988, "TreeSelection", "get_selected_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	model.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// gtk_tree_selection_get_tree_view
//
// [ result ] trans: nothing
//
func (v TreeSelection) GetTreeView() (result TreeView) {
	iv, err := _I.Get(2989, "TreeSelection", "get_tree_view")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_selection_iter_is_selected
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeSelection) IterIsSelected(iter TreeIter) (result bool) {
	iv, err := _I.Get(2990, "TreeSelection", "iter_is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_selection_path_is_selected
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeSelection) PathIsSelected(path TreePath) (result bool) {
	iv, err := _I.Get(2991, "TreeSelection", "path_is_selected")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_selection_select_all
//
func (v TreeSelection) SelectAll() {
	iv, err := _I.Get(2992, "TreeSelection", "select_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_select_iter
//
// [ iter ] trans: nothing
//
func (v TreeSelection) SelectIter(iter TreeIter) {
	iv, err := _I.Get(2993, "TreeSelection", "select_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_select_path
//
// [ path ] trans: nothing
//
func (v TreeSelection) SelectPath(path TreePath) {
	iv, err := _I.Get(2994, "TreeSelection", "select_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_select_range
//
// [ start_path ] trans: nothing
//
// [ end_path ] trans: nothing
//
func (v TreeSelection) SelectRange(start_path TreePath, end_path TreePath) {
	iv, err := _I.Get(2995, "TreeSelection", "select_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_path := gi.NewPointerArgument(start_path.P)
	arg_end_path := gi.NewPointerArgument(end_path.P)
	args := []gi.Argument{arg_v, arg_start_path, arg_end_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_selected_foreach
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v TreeSelection) SelectedForeach(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(2996, "TreeSelection", "selected_foreach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeSelectionForeachFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_set_mode
//
// [ type1 ] trans: nothing
//
func (v TreeSelection) SetMode(type1 SelectionModeEnum) {
	iv, err := _I.Get(2997, "TreeSelection", "set_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_set_select_function
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeSelection) SetSelectFunction(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(2998, "TreeSelection", "set_select_function")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeSelectionFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_unselect_all
//
func (v TreeSelection) UnselectAll() {
	iv, err := _I.Get(2999, "TreeSelection", "unselect_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_unselect_iter
//
// [ iter ] trans: nothing
//
func (v TreeSelection) UnselectIter(iter TreeIter) {
	iv, err := _I.Get(3000, "TreeSelection", "unselect_iter")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_unselect_path
//
// [ path ] trans: nothing
//
func (v TreeSelection) UnselectPath(path TreePath) {
	iv, err := _I.Get(3001, "TreeSelection", "unselect_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_selection_unselect_range
//
// [ start_path ] trans: nothing
//
// [ end_path ] trans: nothing
//
func (v TreeSelection) UnselectRange(start_path TreePath, end_path TreePath) {
	iv, err := _I.Get(3002, "TreeSelection", "unselect_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_path := gi.NewPointerArgument(start_path.P)
	arg_end_path := gi.NewPointerArgument(end_path.P)
	args := []gi.Argument{arg_v, arg_start_path, arg_end_path}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeSelectionClass

type TreeSelectionForeachFuncStruct struct {
	F_model TreeModel
	F_path  TreePath
	F_iter  TreeIter
	F_data  unsafe.Pointer
}

func GetPointer_myTreeSelectionForeachFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeSelectionForeachFunc())
}

//export myGtkTreeSelectionForeachFunc
func myGtkTreeSelectionForeachFunc(model *C.GtkTreeModel, path *C.GtkTreePath, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

type TreeSelectionFuncStruct struct {
	F_selection               TreeSelection
	F_model                   TreeModel
	F_path                    TreePath
	F_path_currently_selected bool
	F_data                    unsafe.Pointer
}

func GetPointer_myTreeSelectionFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeSelectionFunc())
}

//export myGtkTreeSelectionFunc
func myGtkTreeSelectionFunc(selection *C.GtkTreeSelection, model *C.GtkTreeModel, path *C.GtkTreePath, path_currently_selected C.gboolean, data C.gpointer) {
	// TODO: not found user_data
}

// Struct TreeSelectionPrivate
type TreeSelectionPrivate struct {
	P unsafe.Pointer
}

func TreeSelectionPrivateGetType() gi.GType {
	ret := _I.GetGType(611, "TreeSelectionPrivate")
	return ret
}

// Interface TreeSortable
type TreeSortable struct {
	TreeSortableIfc
	P unsafe.Pointer
}
type TreeSortableIfc struct{}
type ITreeSortable interface{ P_TreeSortable() unsafe.Pointer }

func (v TreeSortable) P_TreeSortable() unsafe.Pointer { return v.P }
func TreeSortableGetType() gi.GType {
	ret := _I.GetGType(612, "TreeSortable")
	return ret
}

// gtk_tree_sortable_get_sort_column_id
//
// [ sort_column_id ] trans: everything, dir: out
//
// [ order ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *TreeSortableIfc) GetSortColumnId() (result bool, sort_column_id int32, order SortTypeEnum) {
	iv, err := _I.Get(3003, "TreeSortable", "get_sort_column_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_column_id := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_order := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_sort_column_id, arg_order}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	sort_column_id = outArgs[0].Int32()
	order = SortTypeEnum(outArgs[1].Int())
	result = ret.Bool()
	return
}

// gtk_tree_sortable_has_default_sort_func
//
// [ result ] trans: nothing
//
func (v *TreeSortableIfc) HasDefaultSortFunc() (result bool) {
	iv, err := _I.Get(3004, "TreeSortable", "has_default_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_sortable_set_default_sort_func
//
// [ sort_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v *TreeSortableIfc) SetDefaultSortFunc(sort_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3005, "TreeSortable", "set_default_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeIterCompareFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_sort_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_sortable_set_sort_column_id
//
// [ sort_column_id ] trans: nothing
//
// [ order ] trans: nothing
//
func (v *TreeSortableIfc) SetSortColumnId(sort_column_id int32, order SortTypeEnum) {
	iv, err := _I.Get(3006, "TreeSortable", "set_sort_column_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_column_id := gi.NewInt32Argument(sort_column_id)
	arg_order := gi.NewIntArgument(int(order))
	args := []gi.Argument{arg_v, arg_sort_column_id, arg_order}
	iv.Call(args, nil, nil)
}

// gtk_tree_sortable_set_sort_func
//
// [ sort_column_id ] trans: nothing
//
// [ sort_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v *TreeSortableIfc) SetSortFunc(sort_column_id int32, sort_func int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3007, "TreeSortable", "set_sort_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_sort_column_id := gi.NewInt32Argument(sort_column_id)
	arg_sort_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeIterCompareFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_sort_column_id, arg_sort_func, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_sortable_sort_column_changed
//
func (v *TreeSortableIfc) SortColumnChanged() {
	iv, err := _I.Get(3008, "TreeSortable", "sort_column_changed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeSortableIface

// Object TreeStore
type TreeStore struct {
	BuildableIfc
	TreeDragDestIfc
	TreeDragSourceIfc
	TreeModelIfc
	TreeSortableIfc
	g.Object
}

func WrapTreeStore(p unsafe.Pointer) (r TreeStore) { r.P = p; return }

type ITreeStore interface{ P_TreeStore() unsafe.Pointer }

func (v TreeStore) P_TreeStore() unsafe.Pointer      { return v.P }
func (v TreeStore) P_Buildable() unsafe.Pointer      { return v.P }
func (v TreeStore) P_TreeDragDest() unsafe.Pointer   { return v.P }
func (v TreeStore) P_TreeDragSource() unsafe.Pointer { return v.P }
func (v TreeStore) P_TreeModel() unsafe.Pointer      { return v.P }
func (v TreeStore) P_TreeSortable() unsafe.Pointer   { return v.P }
func TreeStoreGetType() gi.GType {
	ret := _I.GetGType(613, "TreeStore")
	return ret
}

// gtk_tree_store_newv
//
// [ n_columns ] trans: nothing
//
// [ types ] trans: nothing
//
// [ result ] trans: everything
//
func NewTreeStore(n_columns int32, types gi.GTypeArray) (result TreeStore) {
	iv, err := _I.Get(3009, "TreeStore", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_n_columns := gi.NewInt32Argument(n_columns)
	arg_types := gi.NewPointerArgument(types.P)
	args := []gi.Argument{arg_n_columns, arg_types}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_store_append
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
func (v TreeStore) Append(iter TreeIter, parent TreeIter) {
	iv, err := _I.Get(3010, "TreeStore", "append")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	args := []gi.Argument{arg_v, arg_iter, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_clear
//
func (v TreeStore) Clear() {
	iv, err := _I.Get(3011, "TreeStore", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_insert
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ position ] trans: nothing
//
func (v TreeStore) Insert(iter TreeIter, parent TreeIter, position int32) {
	iv, err := _I.Get(3012, "TreeStore", "insert")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_iter, arg_parent, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_insert_after
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ sibling ] trans: nothing
//
func (v TreeStore) InsertAfter(iter TreeIter, parent TreeIter, sibling TreeIter) {
	iv, err := _I.Get(3013, "TreeStore", "insert_after")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_sibling := gi.NewPointerArgument(sibling.P)
	args := []gi.Argument{arg_v, arg_iter, arg_parent, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_insert_before
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ sibling ] trans: nothing
//
func (v TreeStore) InsertBefore(iter TreeIter, parent TreeIter, sibling TreeIter) {
	iv, err := _I.Get(3014, "TreeStore", "insert_before")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_sibling := gi.NewPointerArgument(sibling.P)
	args := []gi.Argument{arg_v, arg_iter, arg_parent, arg_sibling}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_insert_with_valuesv
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
// [ position ] trans: nothing
//
// [ columns ] trans: nothing
//
// [ values ] trans: nothing
//
// [ n_values ] trans: nothing
//
func (v TreeStore) InsertWithValues(iter TreeIter, parent TreeIter, position int32, columns gi.Int32Array, values unsafe.Pointer, n_values int32) {
	iv, err := _I.Get(3015, "TreeStore", "insert_with_values")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_position := gi.NewInt32Argument(position)
	arg_columns := gi.NewPointerArgument(columns.P)
	arg_values := gi.NewPointerArgument(values)
	arg_n_values := gi.NewInt32Argument(n_values)
	args := []gi.Argument{arg_v, arg_iter, arg_parent, arg_position, arg_columns, arg_values, arg_n_values}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_is_ancestor
//
// [ iter ] trans: nothing
//
// [ descendant ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeStore) IsAncestor(iter TreeIter, descendant TreeIter) (result bool) {
	iv, err := _I.Get(3016, "TreeStore", "is_ancestor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_descendant := gi.NewPointerArgument(descendant.P)
	args := []gi.Argument{arg_v, arg_iter, arg_descendant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_store_iter_depth
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeStore) IterDepth(iter TreeIter) (result int32) {
	iv, err := _I.Get(3017, "TreeStore", "iter_depth")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_store_iter_is_valid
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeStore) IterIsValid(iter TreeIter) (result bool) {
	iv, err := _I.Get(3018, "TreeStore", "iter_is_valid")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_store_move_after
//
// [ iter ] trans: nothing
//
// [ position ] trans: nothing
//
func (v TreeStore) MoveAfter(iter TreeIter, position TreeIter) {
	iv, err := _I.Get(3019, "TreeStore", "move_after")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewPointerArgument(position.P)
	args := []gi.Argument{arg_v, arg_iter, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_move_before
//
// [ iter ] trans: nothing
//
// [ position ] trans: nothing
//
func (v TreeStore) MoveBefore(iter TreeIter, position TreeIter) {
	iv, err := _I.Get(3020, "TreeStore", "move_before")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_position := gi.NewPointerArgument(position.P)
	args := []gi.Argument{arg_v, arg_iter, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_prepend
//
// [ iter ] trans: nothing, dir: out
//
// [ parent ] trans: nothing
//
func (v TreeStore) Prepend(iter TreeIter, parent TreeIter) {
	iv, err := _I.Get(3021, "TreeStore", "prepend")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_parent := gi.NewPointerArgument(parent.P)
	args := []gi.Argument{arg_v, arg_iter, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_remove
//
// [ iter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeStore) Remove(iter TreeIter) (result bool) {
	iv, err := _I.Get(3022, "TreeStore", "remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_store_set_column_types
//
// [ n_columns ] trans: nothing
//
// [ types ] trans: nothing
//
func (v TreeStore) SetColumnTypes(n_columns int32, types gi.GTypeArray) {
	iv, err := _I.Get(3023, "TreeStore", "set_column_types")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n_columns := gi.NewInt32Argument(n_columns)
	arg_types := gi.NewPointerArgument(types.P)
	args := []gi.Argument{arg_v, arg_n_columns, arg_types}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_set_value
//
// [ iter ] trans: nothing
//
// [ column ] trans: nothing
//
// [ value ] trans: nothing
//
func (v TreeStore) SetValue(iter TreeIter, column int32, value g.Value) {
	iv, err := _I.Get(3024, "TreeStore", "set_value")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_column := gi.NewInt32Argument(column)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_iter, arg_column, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_set_valuesv
//
// [ iter ] trans: nothing
//
// [ columns ] trans: nothing
//
// [ values ] trans: nothing
//
// [ n_values ] trans: nothing
//
func (v TreeStore) Set(iter TreeIter, columns gi.Int32Array, values unsafe.Pointer, n_values int32) {
	iv, err := _I.Get(3025, "TreeStore", "set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_columns := gi.NewPointerArgument(columns.P)
	arg_values := gi.NewPointerArgument(values)
	arg_n_values := gi.NewInt32Argument(n_values)
	args := []gi.Argument{arg_v, arg_iter, arg_columns, arg_values, arg_n_values}
	iv.Call(args, nil, nil)
}

// gtk_tree_store_swap
//
// [ a ] trans: nothing
//
// [ b ] trans: nothing
//
func (v TreeStore) Swap(a TreeIter, b TreeIter) {
	iv, err := _I.Get(3026, "TreeStore", "swap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_a := gi.NewPointerArgument(a.P)
	arg_b := gi.NewPointerArgument(b.P)
	args := []gi.Argument{arg_v, arg_a, arg_b}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeStoreClass

// Struct TreeStorePrivate
type TreeStorePrivate struct {
	P unsafe.Pointer
}

func TreeStorePrivateGetType() gi.GType {
	ret := _I.GetGType(614, "TreeStorePrivate")
	return ret
}

// Object TreeView
type TreeView struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ScrollableIfc
	Container
}

func WrapTreeView(p unsafe.Pointer) (r TreeView) { r.P = p; return }

type ITreeView interface{ P_TreeView() unsafe.Pointer }

func (v TreeView) P_TreeView() unsafe.Pointer         { return v.P }
func (v TreeView) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v TreeView) P_Buildable() unsafe.Pointer        { return v.P }
func (v TreeView) P_Scrollable() unsafe.Pointer       { return v.P }
func TreeViewGetType() gi.GType {
	ret := _I.GetGType(615, "TreeView")
	return ret
}

// gtk_tree_view_new
//
// [ result ] trans: nothing
//
func NewTreeView() (result TreeView) {
	iv, err := _I.Get(3027, "TreeView", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_new_with_model
//
// [ model ] trans: nothing
//
// [ result ] trans: nothing
//
func NewTreeViewWithModel(model ITreeModel) (result TreeView) {
	iv, err := _I.Get(3028, "TreeView", "new_with_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_model}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_append_column
//
// [ column ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) AppendColumn(column ITreeViewColumn) (result int32) {
	iv, err := _I.Get(3029, "TreeView", "append_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_column}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_collapse_all
//
func (v TreeView) CollapseAll() {
	iv, err := _I.Get(3030, "TreeView", "collapse_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_collapse_row
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) CollapseRow(path TreePath) (result bool) {
	iv, err := _I.Get(3031, "TreeView", "collapse_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_columns_autosize
//
func (v TreeView) ColumnsAutosize() {
	iv, err := _I.Get(3032, "TreeView", "columns_autosize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_convert_bin_window_to_tree_coords
//
// [ bx ] trans: nothing
//
// [ by ] trans: nothing
//
// [ tx ] trans: everything, dir: out
//
// [ ty ] trans: everything, dir: out
//
func (v TreeView) ConvertBinWindowToTreeCoords(bx int32, by int32) (tx int32, ty int32) {
	iv, err := _I.Get(3033, "TreeView", "convert_bin_window_to_tree_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_bx := gi.NewInt32Argument(bx)
	arg_by := gi.NewInt32Argument(by)
	arg_tx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_ty := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_bx, arg_by, arg_tx, arg_ty}
	iv.Call(args, nil, &outArgs[0])
	tx = outArgs[0].Int32()
	ty = outArgs[1].Int32()
	return
}

// gtk_tree_view_convert_bin_window_to_widget_coords
//
// [ bx ] trans: nothing
//
// [ by ] trans: nothing
//
// [ wx ] trans: everything, dir: out
//
// [ wy ] trans: everything, dir: out
//
func (v TreeView) ConvertBinWindowToWidgetCoords(bx int32, by int32) (wx int32, wy int32) {
	iv, err := _I.Get(3034, "TreeView", "convert_bin_window_to_widget_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_bx := gi.NewInt32Argument(bx)
	arg_by := gi.NewInt32Argument(by)
	arg_wx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_wy := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_bx, arg_by, arg_wx, arg_wy}
	iv.Call(args, nil, &outArgs[0])
	wx = outArgs[0].Int32()
	wy = outArgs[1].Int32()
	return
}

// gtk_tree_view_convert_tree_to_bin_window_coords
//
// [ tx ] trans: nothing
//
// [ ty ] trans: nothing
//
// [ bx ] trans: everything, dir: out
//
// [ by ] trans: everything, dir: out
//
func (v TreeView) ConvertTreeToBinWindowCoords(tx int32, ty int32) (bx int32, by int32) {
	iv, err := _I.Get(3035, "TreeView", "convert_tree_to_bin_window_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_tx := gi.NewInt32Argument(tx)
	arg_ty := gi.NewInt32Argument(ty)
	arg_bx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_by := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_tx, arg_ty, arg_bx, arg_by}
	iv.Call(args, nil, &outArgs[0])
	bx = outArgs[0].Int32()
	by = outArgs[1].Int32()
	return
}

// gtk_tree_view_convert_tree_to_widget_coords
//
// [ tx ] trans: nothing
//
// [ ty ] trans: nothing
//
// [ wx ] trans: everything, dir: out
//
// [ wy ] trans: everything, dir: out
//
func (v TreeView) ConvertTreeToWidgetCoords(tx int32, ty int32) (wx int32, wy int32) {
	iv, err := _I.Get(3036, "TreeView", "convert_tree_to_widget_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_tx := gi.NewInt32Argument(tx)
	arg_ty := gi.NewInt32Argument(ty)
	arg_wx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_wy := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_tx, arg_ty, arg_wx, arg_wy}
	iv.Call(args, nil, &outArgs[0])
	wx = outArgs[0].Int32()
	wy = outArgs[1].Int32()
	return
}

// gtk_tree_view_convert_widget_to_bin_window_coords
//
// [ wx ] trans: nothing
//
// [ wy ] trans: nothing
//
// [ bx ] trans: everything, dir: out
//
// [ by ] trans: everything, dir: out
//
func (v TreeView) ConvertWidgetToBinWindowCoords(wx int32, wy int32) (bx int32, by int32) {
	iv, err := _I.Get(3037, "TreeView", "convert_widget_to_bin_window_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_wx := gi.NewInt32Argument(wx)
	arg_wy := gi.NewInt32Argument(wy)
	arg_bx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_by := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_wx, arg_wy, arg_bx, arg_by}
	iv.Call(args, nil, &outArgs[0])
	bx = outArgs[0].Int32()
	by = outArgs[1].Int32()
	return
}

// gtk_tree_view_convert_widget_to_tree_coords
//
// [ wx ] trans: nothing
//
// [ wy ] trans: nothing
//
// [ tx ] trans: everything, dir: out
//
// [ ty ] trans: everything, dir: out
//
func (v TreeView) ConvertWidgetToTreeCoords(wx int32, wy int32) (tx int32, ty int32) {
	iv, err := _I.Get(3038, "TreeView", "convert_widget_to_tree_coords")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_wx := gi.NewInt32Argument(wx)
	arg_wy := gi.NewInt32Argument(wy)
	arg_tx := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_ty := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_wx, arg_wy, arg_tx, arg_ty}
	iv.Call(args, nil, &outArgs[0])
	tx = outArgs[0].Int32()
	ty = outArgs[1].Int32()
	return
}

// gtk_tree_view_create_row_drag_icon
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func (v TreeView) CreateRowDragIcon(path TreePath) (result cairo.Surface) {
	iv, err := _I.Get(3039, "TreeView", "create_row_drag_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_enable_model_drag_dest
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v TreeView) EnableModelDragDest(targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(3040, "TreeView", "enable_model_drag_dest")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_enable_model_drag_source
//
// [ start_button_mask ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v TreeView) EnableModelDragSource(start_button_mask gdk.ModifierTypeFlags, targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(3041, "TreeView", "enable_model_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_button_mask := gi.NewIntArgument(int(start_button_mask))
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_start_button_mask, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_expand_all
//
func (v TreeView) ExpandAll() {
	iv, err := _I.Get(3042, "TreeView", "expand_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_expand_row
//
// [ path ] trans: nothing
//
// [ open_all ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) ExpandRow(path TreePath, open_all bool) (result bool) {
	iv, err := _I.Get(3043, "TreeView", "expand_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_open_all := gi.NewBoolArgument(open_all)
	args := []gi.Argument{arg_v, arg_path, arg_open_all}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_expand_to_path
//
// [ path ] trans: nothing
//
func (v TreeView) ExpandToPath(path TreePath) {
	iv, err := _I.Get(3044, "TreeView", "expand_to_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_get_activate_on_single_click
//
// [ result ] trans: nothing
//
func (v TreeView) GetActivateOnSingleClick() (result bool) {
	iv, err := _I.Get(3045, "TreeView", "get_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_background_area
//
// [ path ] trans: nothing
//
// [ column ] trans: nothing
//
// [ rect ] trans: nothing, dir: out
//
func (v TreeView) GetBackgroundArea(path TreePath, column ITreeViewColumn, rect gdk.Rectangle) {
	iv, err := _I.Get(3046, "TreeView", "get_background_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_column := gi.NewPointerArgument(tmp)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_path, arg_column, arg_rect}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_get_bin_window
//
// [ result ] trans: nothing
//
func (v TreeView) GetBinWindow() (result gdk.Window) {
	iv, err := _I.Get(3047, "TreeView", "get_bin_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_cell_area
//
// [ path ] trans: nothing
//
// [ column ] trans: nothing
//
// [ rect ] trans: nothing, dir: out
//
func (v TreeView) GetCellArea(path TreePath, column ITreeViewColumn, rect gdk.Rectangle) {
	iv, err := _I.Get(3048, "TreeView", "get_cell_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_column := gi.NewPointerArgument(tmp)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_path, arg_column, arg_rect}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_get_column
//
// [ n ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) GetColumn(n int32) (result TreeViewColumn) {
	iv, err := _I.Get(3049, "TreeView", "get_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_n := gi.NewInt32Argument(n)
	args := []gi.Argument{arg_v, arg_n}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_columns
//
// [ result ] trans: container
//
func (v TreeView) GetColumns() (result g.List) {
	iv, err := _I.Get(3050, "TreeView", "get_columns")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_cursor
//
// [ path ] trans: everything, dir: out
//
// [ focus_column ] trans: nothing, dir: out
//
func (v TreeView) GetCursor() (path TreePath, focus_column TreeViewColumn) {
	iv, err := _I.Get(3051, "TreeView", "get_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_focus_column := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_path, arg_focus_column}
	iv.Call(args, nil, &outArgs[0])
	path.P = outArgs[0].Pointer()
	focus_column.P = outArgs[1].Pointer()
	return
}

// gtk_tree_view_get_dest_row_at_pos
//
// [ drag_x ] trans: nothing
//
// [ drag_y ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ pos ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreeView) GetDestRowAtPos(drag_x int32, drag_y int32) (result bool, path TreePath, pos TreeViewDropPositionEnum) {
	iv, err := _I.Get(3052, "TreeView", "get_dest_row_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_drag_x := gi.NewInt32Argument(drag_x)
	arg_drag_y := gi.NewInt32Argument(drag_y)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_drag_x, arg_drag_y, arg_path, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	pos = TreeViewDropPositionEnum(outArgs[1].Int())
	result = ret.Bool()
	return
}

// gtk_tree_view_get_drag_dest_row
//
// [ path ] trans: everything, dir: out
//
// [ pos ] trans: everything, dir: out
//
func (v TreeView) GetDragDestRow() (path TreePath, pos TreeViewDropPositionEnum) {
	iv, err := _I.Get(3053, "TreeView", "get_drag_dest_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_pos := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_path, arg_pos}
	iv.Call(args, nil, &outArgs[0])
	path.P = outArgs[0].Pointer()
	pos = TreeViewDropPositionEnum(outArgs[1].Int())
	return
}

// gtk_tree_view_get_enable_search
//
// [ result ] trans: nothing
//
func (v TreeView) GetEnableSearch() (result bool) {
	iv, err := _I.Get(3054, "TreeView", "get_enable_search")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_enable_tree_lines
//
// [ result ] trans: nothing
//
func (v TreeView) GetEnableTreeLines() (result bool) {
	iv, err := _I.Get(3055, "TreeView", "get_enable_tree_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_expander_column
//
// [ result ] trans: nothing
//
func (v TreeView) GetExpanderColumn() (result TreeViewColumn) {
	iv, err := _I.Get(3056, "TreeView", "get_expander_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_fixed_height_mode
//
// [ result ] trans: nothing
//
func (v TreeView) GetFixedHeightMode() (result bool) {
	iv, err := _I.Get(3057, "TreeView", "get_fixed_height_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_grid_lines
//
// [ result ] trans: nothing
//
func (v TreeView) GetGridLines() (result TreeViewGridLinesEnum) {
	iv, err := _I.Get(3058, "TreeView", "get_grid_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TreeViewGridLinesEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_tree_view_get_hadjustment
//
// [ result ] trans: nothing
//
func (v TreeView) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(3059, "TreeView", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_headers_clickable
//
// [ result ] trans: nothing
//
func (v TreeView) GetHeadersClickable() (result bool) {
	iv, err := _I.Get(3060, "TreeView", "get_headers_clickable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_headers_visible
//
// [ result ] trans: nothing
//
func (v TreeView) GetHeadersVisible() (result bool) {
	iv, err := _I.Get(3061, "TreeView", "get_headers_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_hover_expand
//
// [ result ] trans: nothing
//
func (v TreeView) GetHoverExpand() (result bool) {
	iv, err := _I.Get(3062, "TreeView", "get_hover_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_hover_selection
//
// [ result ] trans: nothing
//
func (v TreeView) GetHoverSelection() (result bool) {
	iv, err := _I.Get(3063, "TreeView", "get_hover_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_level_indentation
//
// [ result ] trans: nothing
//
func (v TreeView) GetLevelIndentation() (result int32) {
	iv, err := _I.Get(3064, "TreeView", "get_level_indentation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_get_model
//
// [ result ] trans: nothing
//
func (v TreeView) GetModel() (result TreeModel) {
	iv, err := _I.Get(3065, "TreeView", "get_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_n_columns
//
// [ result ] trans: nothing
//
func (v TreeView) GetNColumns() (result uint32) {
	iv, err := _I.Get(3066, "TreeView", "get_n_columns")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_tree_view_get_path_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ column ] trans: nothing, dir: out
//
// [ cell_x ] trans: everything, dir: out
//
// [ cell_y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreeView) GetPathAtPos(x int32, y int32) (result bool, path TreePath, column TreeViewColumn, cell_x int32, cell_y int32) {
	iv, err := _I.Get(3067, "TreeView", "get_path_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_column := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_cell_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_cell_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_x, arg_y, arg_path, arg_column, arg_cell_x, arg_cell_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	column.P = outArgs[1].Pointer()
	cell_x = outArgs[2].Int32()
	cell_y = outArgs[3].Int32()
	result = ret.Bool()
	return
}

// gtk_tree_view_get_reorderable
//
// [ result ] trans: nothing
//
func (v TreeView) GetReorderable() (result bool) {
	iv, err := _I.Get(3068, "TreeView", "get_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_rubber_banding
//
// [ result ] trans: nothing
//
func (v TreeView) GetRubberBanding() (result bool) {
	iv, err := _I.Get(3069, "TreeView", "get_rubber_banding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_tree_view_get_rules_hint
//
// [ result ] trans: nothing
//
func (v TreeView) GetRulesHint() (result bool) {
	iv, err := _I.Get(3070, "TreeView", "get_rules_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_search_column
//
// [ result ] trans: nothing
//
func (v TreeView) GetSearchColumn() (result int32) {
	iv, err := _I.Get(3071, "TreeView", "get_search_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_get_search_entry
//
// [ result ] trans: nothing
//
func (v TreeView) GetSearchEntry() (result Entry) {
	iv, err := _I.Get(3072, "TreeView", "get_search_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_selection
//
// [ result ] trans: nothing
//
func (v TreeView) GetSelection() (result TreeSelection) {
	iv, err := _I.Get(3073, "TreeView", "get_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_show_expanders
//
// [ result ] trans: nothing
//
func (v TreeView) GetShowExpanders() (result bool) {
	iv, err := _I.Get(3074, "TreeView", "get_show_expanders")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_get_tooltip_column
//
// [ result ] trans: nothing
//
func (v TreeView) GetTooltipColumn() (result int32) {
	iv, err := _I.Get(3075, "TreeView", "get_tooltip_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_get_tooltip_context
//
// [ x ] trans: everything, dir: inout
//
// [ y ] trans: everything, dir: inout
//
// [ keyboard_tip ] trans: nothing
//
// [ model ] trans: nothing, dir: out
//
// [ path ] trans: everything, dir: out
//
// [ iter ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v TreeView) GetTooltipContext(x int /*TODO:TYPE*/, y int /*TODO:TYPE*/, keyboard_tip bool, iter TreeIter) (result bool, model TreeModel, path TreePath) {
	iv, err := _I.Get(3076, "TreeView", "get_tooltip_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyboard_tip := gi.NewBoolArgument(keyboard_tip)
	arg_model := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_iter := gi.NewPointerArgument(iter.P)
	args := []gi.Argument{arg_v, arg_keyboard_tip, arg_model, arg_path, arg_iter}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	model.P = outArgs[0].Pointer()
	path.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_tree_view_get_vadjustment
//
// [ result ] trans: nothing
//
func (v TreeView) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(3077, "TreeView", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_get_visible_range
//
// [ start_path ] trans: everything, dir: out
//
// [ end_path ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreeView) GetVisibleRange() (result bool, start_path TreePath, end_path TreePath) {
	iv, err := _I.Get(3078, "TreeView", "get_visible_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_end_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_start_path, arg_end_path}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	start_path.P = outArgs[0].Pointer()
	end_path.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_tree_view_get_visible_rect
//
// [ visible_rect ] trans: nothing, dir: out
//
func (v TreeView) GetVisibleRect(visible_rect gdk.Rectangle) {
	iv, err := _I.Get(3079, "TreeView", "get_visible_rect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible_rect := gi.NewPointerArgument(visible_rect.P)
	args := []gi.Argument{arg_v, arg_visible_rect}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_insert_column
//
// [ column ] trans: nothing
//
// [ position ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) InsertColumn(column ITreeViewColumn, position int32) (result int32) {
	iv, err := _I.Get(3080, "TreeView", "insert_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewPointerArgument(tmp)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_column, arg_position}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_insert_column_with_data_func
//
// [ position ] trans: nothing
//
// [ title ] trans: nothing
//
// [ cell ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ dnotify ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) InsertColumnWithDataFunc(position int32, title string, cell ICellRenderer, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, dnotify int /*TODO_TYPE CALLBACK*/) (result int32) {
	iv, err := _I.Get(3081, "TreeView", "insert_column_with_data_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_title := gi.NewStringArgument(c_title)
	arg_cell := gi.NewPointerArgument(tmp)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeCellDataFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_dnotify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_position, arg_title, arg_cell, arg_func1, arg_data, arg_dnotify}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result = ret.Int32()
	return
}

// gtk_tree_view_is_blank_at_pos
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ column ] trans: nothing, dir: out
//
// [ cell_x ] trans: everything, dir: out
//
// [ cell_y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreeView) IsBlankAtPos(x int32, y int32) (result bool, path TreePath, column TreeViewColumn, cell_x int32, cell_y int32) {
	iv, err := _I.Get(3082, "TreeView", "is_blank_at_pos")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_column := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_cell_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_cell_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_x, arg_y, arg_path, arg_column, arg_cell_x, arg_cell_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	path.P = outArgs[0].Pointer()
	column.P = outArgs[1].Pointer()
	cell_x = outArgs[2].Int32()
	cell_y = outArgs[3].Int32()
	result = ret.Bool()
	return
}

// gtk_tree_view_is_rubber_banding_active
//
// [ result ] trans: nothing
//
func (v TreeView) IsRubberBandingActive() (result bool) {
	iv, err := _I.Get(3083, "TreeView", "is_rubber_banding_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_map_expanded_rows
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
func (v TreeView) MapExpandedRows(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(3084, "TreeView", "map_expanded_rows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewMappingFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_func1, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_move_column_after
//
// [ column ] trans: nothing
//
// [ base_column ] trans: nothing
//
func (v TreeView) MoveColumnAfter(column ITreeViewColumn, base_column ITreeViewColumn) {
	iv, err := _I.Get(3085, "TreeView", "move_column_after")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	var tmp1 unsafe.Pointer
	if base_column != nil {
		tmp1 = base_column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewPointerArgument(tmp)
	arg_base_column := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_column, arg_base_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_remove_column
//
// [ column ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) RemoveColumn(column ITreeViewColumn) (result int32) {
	iv, err := _I.Get(3086, "TreeView", "remove_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_column}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_row_activated
//
// [ path ] trans: nothing
//
// [ column ] trans: nothing
//
func (v TreeView) RowActivated(path TreePath, column ITreeViewColumn) {
	iv, err := _I.Get(3087, "TreeView", "row_activated")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_column := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_path, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_row_expanded
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TreeView) RowExpanded(path TreePath) (result bool) {
	iv, err := _I.Get(3088, "TreeView", "row_expanded")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_scroll_to_cell
//
// [ path ] trans: nothing
//
// [ column ] trans: nothing
//
// [ use_align ] trans: nothing
//
// [ row_align ] trans: nothing
//
// [ col_align ] trans: nothing
//
func (v TreeView) ScrollToCell(path TreePath, column ITreeViewColumn, use_align bool, row_align float32, col_align float32) {
	iv, err := _I.Get(3089, "TreeView", "scroll_to_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_column := gi.NewPointerArgument(tmp)
	arg_use_align := gi.NewBoolArgument(use_align)
	arg_row_align := gi.NewFloatArgument(row_align)
	arg_col_align := gi.NewFloatArgument(col_align)
	args := []gi.Argument{arg_v, arg_path, arg_column, arg_use_align, arg_row_align, arg_col_align}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_scroll_to_point
//
// [ tree_x ] trans: nothing
//
// [ tree_y ] trans: nothing
//
func (v TreeView) ScrollToPoint(tree_x int32, tree_y int32) {
	iv, err := _I.Get(3090, "TreeView", "scroll_to_point")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tree_x := gi.NewInt32Argument(tree_x)
	arg_tree_y := gi.NewInt32Argument(tree_y)
	args := []gi.Argument{arg_v, arg_tree_x, arg_tree_y}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_activate_on_single_click
//
// [ single ] trans: nothing
//
func (v TreeView) SetActivateOnSingleClick(single bool) {
	iv, err := _I.Get(3091, "TreeView", "set_activate_on_single_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_single := gi.NewBoolArgument(single)
	args := []gi.Argument{arg_v, arg_single}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_column_drag_function
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeView) SetColumnDragFunction(func1 int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3092, "TreeView", "set_column_drag_function")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewColumnDropFunc()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_user_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_cursor
//
// [ path ] trans: nothing
//
// [ focus_column ] trans: nothing
//
// [ start_editing ] trans: nothing
//
func (v TreeView) SetCursor(path TreePath, focus_column ITreeViewColumn, start_editing bool) {
	iv, err := _I.Get(3093, "TreeView", "set_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if focus_column != nil {
		tmp = focus_column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_focus_column := gi.NewPointerArgument(tmp)
	arg_start_editing := gi.NewBoolArgument(start_editing)
	args := []gi.Argument{arg_v, arg_path, arg_focus_column, arg_start_editing}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_cursor_on_cell
//
// [ path ] trans: nothing
//
// [ focus_column ] trans: nothing
//
// [ focus_cell ] trans: nothing
//
// [ start_editing ] trans: nothing
//
func (v TreeView) SetCursorOnCell(path TreePath, focus_column ITreeViewColumn, focus_cell ICellRenderer, start_editing bool) {
	iv, err := _I.Get(3094, "TreeView", "set_cursor_on_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if focus_column != nil {
		tmp = focus_column.P_TreeViewColumn()
	}
	var tmp1 unsafe.Pointer
	if focus_cell != nil {
		tmp1 = focus_cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_focus_column := gi.NewPointerArgument(tmp)
	arg_focus_cell := gi.NewPointerArgument(tmp1)
	arg_start_editing := gi.NewBoolArgument(start_editing)
	args := []gi.Argument{arg_v, arg_path, arg_focus_column, arg_focus_cell, arg_start_editing}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_tree_view_set_destroy_count_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeView) SetDestroyCountFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3095, "TreeView", "set_destroy_count_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeDestroyCountFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_drag_dest_row
//
// [ path ] trans: nothing
//
// [ pos ] trans: nothing
//
func (v TreeView) SetDragDestRow(path TreePath, pos TreeViewDropPositionEnum) {
	iv, err := _I.Get(3096, "TreeView", "set_drag_dest_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewPointerArgument(path.P)
	arg_pos := gi.NewIntArgument(int(pos))
	args := []gi.Argument{arg_v, arg_path, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_enable_search
//
// [ enable_search ] trans: nothing
//
func (v TreeView) SetEnableSearch(enable_search bool) {
	iv, err := _I.Get(3097, "TreeView", "set_enable_search")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enable_search := gi.NewBoolArgument(enable_search)
	args := []gi.Argument{arg_v, arg_enable_search}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_enable_tree_lines
//
// [ enabled ] trans: nothing
//
func (v TreeView) SetEnableTreeLines(enabled bool) {
	iv, err := _I.Get(3098, "TreeView", "set_enable_tree_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_expander_column
//
// [ column ] trans: nothing
//
func (v TreeView) SetExpanderColumn(column ITreeViewColumn) {
	iv, err := _I.Get(3099, "TreeView", "set_expander_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if column != nil {
		tmp = column.P_TreeViewColumn()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_fixed_height_mode
//
// [ enable ] trans: nothing
//
func (v TreeView) SetFixedHeightMode(enable bool) {
	iv, err := _I.Get(3100, "TreeView", "set_fixed_height_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enable := gi.NewBoolArgument(enable)
	args := []gi.Argument{arg_v, arg_enable}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_grid_lines
//
// [ grid_lines ] trans: nothing
//
func (v TreeView) SetGridLines(grid_lines TreeViewGridLinesEnum) {
	iv, err := _I.Get(3101, "TreeView", "set_grid_lines")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_grid_lines := gi.NewIntArgument(int(grid_lines))
	args := []gi.Argument{arg_v, arg_grid_lines}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_tree_view_set_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v TreeView) SetHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(3102, "TreeView", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_headers_clickable
//
// [ setting ] trans: nothing
//
func (v TreeView) SetHeadersClickable(setting bool) {
	iv, err := _I.Get(3103, "TreeView", "set_headers_clickable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_headers_visible
//
// [ headers_visible ] trans: nothing
//
func (v TreeView) SetHeadersVisible(headers_visible bool) {
	iv, err := _I.Get(3104, "TreeView", "set_headers_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_headers_visible := gi.NewBoolArgument(headers_visible)
	args := []gi.Argument{arg_v, arg_headers_visible}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_hover_expand
//
// [ expand ] trans: nothing
//
func (v TreeView) SetHoverExpand(expand bool) {
	iv, err := _I.Get(3105, "TreeView", "set_hover_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_hover_selection
//
// [ hover ] trans: nothing
//
func (v TreeView) SetHoverSelection(hover bool) {
	iv, err := _I.Get(3106, "TreeView", "set_hover_selection")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hover := gi.NewBoolArgument(hover)
	args := []gi.Argument{arg_v, arg_hover}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_level_indentation
//
// [ indentation ] trans: nothing
//
func (v TreeView) SetLevelIndentation(indentation int32) {
	iv, err := _I.Get(3107, "TreeView", "set_level_indentation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_indentation := gi.NewInt32Argument(indentation)
	args := []gi.Argument{arg_v, arg_indentation}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_model
//
// [ model ] trans: nothing
//
func (v TreeView) SetModel(model ITreeModel) {
	iv, err := _I.Get(3108, "TreeView", "set_model")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_model}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_reorderable
//
// [ reorderable ] trans: nothing
//
func (v TreeView) SetReorderable(reorderable bool) {
	iv, err := _I.Get(3109, "TreeView", "set_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reorderable := gi.NewBoolArgument(reorderable)
	args := []gi.Argument{arg_v, arg_reorderable}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_row_separator_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeView) SetRowSeparatorFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3110, "TreeView", "set_row_separator_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewRowSeparatorFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_rubber_banding
//
// [ enable ] trans: nothing
//
func (v TreeView) SetRubberBanding(enable bool) {
	iv, err := _I.Get(3111, "TreeView", "set_rubber_banding")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enable := gi.NewBoolArgument(enable)
	args := []gi.Argument{arg_v, arg_enable}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_tree_view_set_rules_hint
//
// [ setting ] trans: nothing
//
func (v TreeView) SetRulesHint(setting bool) {
	iv, err := _I.Get(3112, "TreeView", "set_rules_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_search_column
//
// [ column ] trans: nothing
//
func (v TreeView) SetSearchColumn(column int32) {
	iv, err := _I.Get(3113, "TreeView", "set_search_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_search_entry
//
// [ entry ] trans: nothing
//
func (v TreeView) SetSearchEntry(entry IEntry) {
	iv, err := _I.Get(3114, "TreeView", "set_search_entry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if entry != nil {
		tmp = entry.P_Entry()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_entry := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_entry}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_search_equal_func
//
// [ search_equal_func ] trans: nothing
//
// [ search_user_data ] trans: nothing
//
// [ search_destroy ] trans: nothing
//
func (v TreeView) SetSearchEqualFunc(search_equal_func int /*TODO_TYPE CALLBACK*/, search_user_data unsafe.Pointer, search_destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3115, "TreeView", "set_search_equal_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_search_equal_func := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewSearchEqualFunc()))
	arg_search_user_data := gi.NewPointerArgument(search_user_data)
	arg_search_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_search_equal_func, arg_search_user_data, arg_search_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_search_position_func
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeView) SetSearchPositionFunc(func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3116, "TreeView", "set_search_position_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeViewSearchPositionFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_func1, arg_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_show_expanders
//
// [ enabled ] trans: nothing
//
func (v TreeView) SetShowExpanders(enabled bool) {
	iv, err := _I.Get(3117, "TreeView", "set_show_expanders")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_tooltip_cell
//
// [ tooltip ] trans: nothing
//
// [ path ] trans: nothing
//
// [ column ] trans: nothing
//
// [ cell ] trans: nothing
//
func (v TreeView) SetTooltipCell(tooltip ITooltip, path TreePath, column ITreeViewColumn, cell ICellRenderer) {
	iv, err := _I.Get(3118, "TreeView", "set_tooltip_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tooltip != nil {
		tmp = tooltip.P_Tooltip()
	}
	var tmp1 unsafe.Pointer
	if column != nil {
		tmp1 = column.P_TreeViewColumn()
	}
	var tmp2 unsafe.Pointer
	if cell != nil {
		tmp2 = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tooltip := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	arg_column := gi.NewPointerArgument(tmp1)
	arg_cell := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_v, arg_tooltip, arg_path, arg_column, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_tooltip_column
//
// [ column ] trans: nothing
//
func (v TreeView) SetTooltipColumn(column int32) {
	iv, err := _I.Get(3119, "TreeView", "set_tooltip_column")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_column}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_set_tooltip_row
//
// [ tooltip ] trans: nothing
//
// [ path ] trans: nothing
//
func (v TreeView) SetTooltipRow(tooltip ITooltip, path TreePath) {
	iv, err := _I.Get(3120, "TreeView", "set_tooltip_row")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tooltip != nil {
		tmp = tooltip.P_Tooltip()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tooltip := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_v, arg_tooltip, arg_path}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_tree_view_set_vadjustment
//
// [ adjustment ] trans: nothing
//
func (v TreeView) SetVadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(3121, "TreeView", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_unset_rows_drag_dest
//
func (v TreeView) UnsetRowsDragDest() {
	iv, err := _I.Get(3122, "TreeView", "unset_rows_drag_dest")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_unset_rows_drag_source
//
func (v TreeView) UnsetRowsDragSource() {
	iv, err := _I.Get(3123, "TreeView", "unset_rows_drag_source")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object TreeViewAccessible
type TreeViewAccessible struct {
	atk.ComponentIfc
	atk.SelectionIfc
	atk.TableIfc
	CellAccessibleParentIfc
	ContainerAccessible
}

func WrapTreeViewAccessible(p unsafe.Pointer) (r TreeViewAccessible) { r.P = p; return }

type ITreeViewAccessible interface{ P_TreeViewAccessible() unsafe.Pointer }

func (v TreeViewAccessible) P_TreeViewAccessible() unsafe.Pointer   { return v.P }
func (v TreeViewAccessible) P_Component() unsafe.Pointer            { return v.P }
func (v TreeViewAccessible) P_Selection() unsafe.Pointer            { return v.P }
func (v TreeViewAccessible) P_Table() unsafe.Pointer                { return v.P }
func (v TreeViewAccessible) P_CellAccessibleParent() unsafe.Pointer { return v.P }
func TreeViewAccessibleGetType() gi.GType {
	ret := _I.GetGType(616, "TreeViewAccessible")
	return ret
}

// ignore GType struct TreeViewAccessibleClass

// Struct TreeViewAccessiblePrivate
type TreeViewAccessiblePrivate struct {
	P unsafe.Pointer
}

func TreeViewAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(617, "TreeViewAccessiblePrivate")
	return ret
}

// ignore GType struct TreeViewClass

// Object TreeViewColumn
type TreeViewColumn struct {
	BuildableIfc
	CellLayoutIfc
	g.InitiallyUnowned
}

func WrapTreeViewColumn(p unsafe.Pointer) (r TreeViewColumn) { r.P = p; return }

type ITreeViewColumn interface{ P_TreeViewColumn() unsafe.Pointer }

func (v TreeViewColumn) P_TreeViewColumn() unsafe.Pointer { return v.P }
func (v TreeViewColumn) P_Buildable() unsafe.Pointer      { return v.P }
func (v TreeViewColumn) P_CellLayout() unsafe.Pointer     { return v.P }
func TreeViewColumnGetType() gi.GType {
	ret := _I.GetGType(618, "TreeViewColumn")
	return ret
}

// gtk_tree_view_column_new
//
// [ result ] trans: nothing
//
func NewTreeViewColumn() (result TreeViewColumn) {
	iv, err := _I.Get(3124, "TreeViewColumn", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_column_new_with_area
//
// [ area ] trans: nothing
//
// [ result ] trans: nothing
//
func NewTreeViewColumnWithArea(area ICellArea) (result TreeViewColumn) {
	iv, err := _I.Get(3125, "TreeViewColumn", "new_with_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if area != nil {
		tmp = area.P_CellArea()
	}
	arg_area := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_area}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_column_add_attribute
//
// [ cell_renderer ] trans: nothing
//
// [ attribute ] trans: nothing
//
// [ column ] trans: nothing
//
func (v TreeViewColumn) AddAttribute(cell_renderer ICellRenderer, attribute string, column int32) {
	iv, err := _I.Get(3126, "TreeViewColumn", "add_attribute")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell_renderer != nil {
		tmp = cell_renderer.P_CellRenderer()
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell_renderer := gi.NewPointerArgument(tmp)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_column := gi.NewInt32Argument(column)
	args := []gi.Argument{arg_v, arg_cell_renderer, arg_attribute, arg_column}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// gtk_tree_view_column_cell_get_position
//
// [ cell_renderer ] trans: nothing
//
// [ x_offset ] trans: everything, dir: out
//
// [ width ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) CellGetPosition(cell_renderer ICellRenderer) (result bool, x_offset int32, width int32) {
	iv, err := _I.Get(3127, "TreeViewColumn", "cell_get_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cell_renderer != nil {
		tmp = cell_renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell_renderer := gi.NewPointerArgument(tmp)
	arg_x_offset := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_cell_renderer, arg_x_offset, arg_width}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	x_offset = outArgs[0].Int32()
	width = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_tree_view_column_cell_get_size
//
// [ cell_area ] trans: nothing
//
// [ x_offset ] trans: everything, dir: out
//
// [ y_offset ] trans: everything, dir: out
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v TreeViewColumn) CellGetSize(cell_area gdk.Rectangle) (x_offset int32, y_offset int32, width int32, height int32) {
	iv, err := _I.Get(3128, "TreeViewColumn", "cell_get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell_area := gi.NewPointerArgument(cell_area.P)
	arg_x_offset := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y_offset := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_cell_area, arg_x_offset, arg_y_offset, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	x_offset = outArgs[0].Int32()
	y_offset = outArgs[1].Int32()
	width = outArgs[2].Int32()
	height = outArgs[3].Int32()
	return
}

// gtk_tree_view_column_cell_is_visible
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) CellIsVisible() (result bool) {
	iv, err := _I.Get(3129, "TreeViewColumn", "cell_is_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_cell_set_cell_data
//
// [ tree_model ] trans: nothing
//
// [ iter ] trans: nothing
//
// [ is_expander ] trans: nothing
//
// [ is_expanded ] trans: nothing
//
func (v TreeViewColumn) CellSetCellData(tree_model ITreeModel, iter TreeIter, is_expander bool, is_expanded bool) {
	iv, err := _I.Get(3130, "TreeViewColumn", "cell_set_cell_data")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tree_model != nil {
		tmp = tree_model.P_TreeModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tree_model := gi.NewPointerArgument(tmp)
	arg_iter := gi.NewPointerArgument(iter.P)
	arg_is_expander := gi.NewBoolArgument(is_expander)
	arg_is_expanded := gi.NewBoolArgument(is_expanded)
	args := []gi.Argument{arg_v, arg_tree_model, arg_iter, arg_is_expander, arg_is_expanded}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_clear
//
func (v TreeViewColumn) Clear() {
	iv, err := _I.Get(3131, "TreeViewColumn", "clear")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_clear_attributes
//
// [ cell_renderer ] trans: nothing
//
func (v TreeViewColumn) ClearAttributes(cell_renderer ICellRenderer) {
	iv, err := _I.Get(3132, "TreeViewColumn", "clear_attributes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell_renderer != nil {
		tmp = cell_renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell_renderer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell_renderer}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_clicked
//
func (v TreeViewColumn) Clicked() {
	iv, err := _I.Get(3133, "TreeViewColumn", "clicked")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_focus_cell
//
// [ cell ] trans: nothing
//
func (v TreeViewColumn) FocusCell(cell ICellRenderer) {
	iv, err := _I.Get(3134, "TreeViewColumn", "focus_cell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cell}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_get_alignment
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetAlignment() (result float32) {
	iv, err := _I.Get(3135, "TreeViewColumn", "get_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Float()
	return
}

// gtk_tree_view_column_get_button
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetButton() (result Widget) {
	iv, err := _I.Get(3136, "TreeViewColumn", "get_button")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_column_get_clickable
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetClickable() (result bool) {
	iv, err := _I.Get(3137, "TreeViewColumn", "get_clickable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_expand
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetExpand() (result bool) {
	iv, err := _I.Get(3138, "TreeViewColumn", "get_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_fixed_width
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetFixedWidth() (result int32) {
	iv, err := _I.Get(3139, "TreeViewColumn", "get_fixed_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_max_width
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetMaxWidth() (result int32) {
	iv, err := _I.Get(3140, "TreeViewColumn", "get_max_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_min_width
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetMinWidth() (result int32) {
	iv, err := _I.Get(3141, "TreeViewColumn", "get_min_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_reorderable
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetReorderable() (result bool) {
	iv, err := _I.Get(3142, "TreeViewColumn", "get_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_resizable
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetResizable() (result bool) {
	iv, err := _I.Get(3143, "TreeViewColumn", "get_resizable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_sizing
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetSizing() (result TreeViewColumnSizingEnum) {
	iv, err := _I.Get(3144, "TreeViewColumn", "get_sizing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TreeViewColumnSizingEnum(ret.Int())
	return
}

// gtk_tree_view_column_get_sort_column_id
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetSortColumnId() (result int32) {
	iv, err := _I.Get(3145, "TreeViewColumn", "get_sort_column_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_sort_indicator
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetSortIndicator() (result bool) {
	iv, err := _I.Get(3146, "TreeViewColumn", "get_sort_indicator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_sort_order
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetSortOrder() (result SortTypeEnum) {
	iv, err := _I.Get(3147, "TreeViewColumn", "get_sort_order")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SortTypeEnum(ret.Int())
	return
}

// gtk_tree_view_column_get_spacing
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetSpacing() (result int32) {
	iv, err := _I.Get(3148, "TreeViewColumn", "get_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_title
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetTitle() (result string) {
	iv, err := _I.Get(3149, "TreeViewColumn", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_tree_view_column_get_tree_view
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetTreeView() (result Widget) {
	iv, err := _I.Get(3150, "TreeViewColumn", "get_tree_view")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_column_get_visible
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetVisible() (result bool) {
	iv, err := _I.Get(3151, "TreeViewColumn", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_tree_view_column_get_widget
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetWidget() (result Widget) {
	iv, err := _I.Get(3152, "TreeViewColumn", "get_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_tree_view_column_get_width
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetWidth() (result int32) {
	iv, err := _I.Get(3153, "TreeViewColumn", "get_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_get_x_offset
//
// [ result ] trans: nothing
//
func (v TreeViewColumn) GetXOffset() (result int32) {
	iv, err := _I.Get(3154, "TreeViewColumn", "get_x_offset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_tree_view_column_pack_end
//
// [ cell ] trans: nothing
//
// [ expand ] trans: nothing
//
func (v TreeViewColumn) PackEnd(cell ICellRenderer, expand bool) {
	iv, err := _I.Get(3155, "TreeViewColumn", "pack_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_cell, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_pack_start
//
// [ cell ] trans: nothing
//
// [ expand ] trans: nothing
//
func (v TreeViewColumn) PackStart(cell ICellRenderer, expand bool) {
	iv, err := _I.Get(3156, "TreeViewColumn", "pack_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell != nil {
		tmp = cell.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell := gi.NewPointerArgument(tmp)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_cell, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_queue_resize
//
func (v TreeViewColumn) QueueResize() {
	iv, err := _I.Get(3157, "TreeViewColumn", "queue_resize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_alignment
//
// [ xalign ] trans: nothing
//
func (v TreeViewColumn) SetAlignment(xalign float32) {
	iv, err := _I.Get(3158, "TreeViewColumn", "set_alignment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_xalign := gi.NewFloatArgument(xalign)
	args := []gi.Argument{arg_v, arg_xalign}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_cell_data_func
//
// [ cell_renderer ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ func_data ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TreeViewColumn) SetCellDataFunc(cell_renderer ICellRenderer, func1 int /*TODO_TYPE CALLBACK*/, func_data unsafe.Pointer, destroy int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3159, "TreeViewColumn", "set_cell_data_func")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cell_renderer != nil {
		tmp = cell_renderer.P_CellRenderer()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cell_renderer := gi.NewPointerArgument(tmp)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTreeCellDataFunc()))
	arg_func_data := gi.NewPointerArgument(func_data)
	arg_destroy := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_cell_renderer, arg_func1, arg_func_data, arg_destroy}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_clickable
//
// [ clickable ] trans: nothing
//
func (v TreeViewColumn) SetClickable(clickable bool) {
	iv, err := _I.Get(3160, "TreeViewColumn", "set_clickable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clickable := gi.NewBoolArgument(clickable)
	args := []gi.Argument{arg_v, arg_clickable}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_expand
//
// [ expand ] trans: nothing
//
func (v TreeViewColumn) SetExpand(expand bool) {
	iv, err := _I.Get(3161, "TreeViewColumn", "set_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_fixed_width
//
// [ fixed_width ] trans: nothing
//
func (v TreeViewColumn) SetFixedWidth(fixed_width int32) {
	iv, err := _I.Get(3162, "TreeViewColumn", "set_fixed_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fixed_width := gi.NewInt32Argument(fixed_width)
	args := []gi.Argument{arg_v, arg_fixed_width}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_max_width
//
// [ max_width ] trans: nothing
//
func (v TreeViewColumn) SetMaxWidth(max_width int32) {
	iv, err := _I.Get(3163, "TreeViewColumn", "set_max_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_max_width := gi.NewInt32Argument(max_width)
	args := []gi.Argument{arg_v, arg_max_width}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_min_width
//
// [ min_width ] trans: nothing
//
func (v TreeViewColumn) SetMinWidth(min_width int32) {
	iv, err := _I.Get(3164, "TreeViewColumn", "set_min_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_min_width := gi.NewInt32Argument(min_width)
	args := []gi.Argument{arg_v, arg_min_width}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_reorderable
//
// [ reorderable ] trans: nothing
//
func (v TreeViewColumn) SetReorderable(reorderable bool) {
	iv, err := _I.Get(3165, "TreeViewColumn", "set_reorderable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reorderable := gi.NewBoolArgument(reorderable)
	args := []gi.Argument{arg_v, arg_reorderable}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_resizable
//
// [ resizable ] trans: nothing
//
func (v TreeViewColumn) SetResizable(resizable bool) {
	iv, err := _I.Get(3166, "TreeViewColumn", "set_resizable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resizable := gi.NewBoolArgument(resizable)
	args := []gi.Argument{arg_v, arg_resizable}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_sizing
//
// [ type1 ] trans: nothing
//
func (v TreeViewColumn) SetSizing(type1 TreeViewColumnSizingEnum) {
	iv, err := _I.Get(3167, "TreeViewColumn", "set_sizing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_sort_column_id
//
// [ sort_column_id ] trans: nothing
//
func (v TreeViewColumn) SetSortColumnId(sort_column_id int32) {
	iv, err := _I.Get(3168, "TreeViewColumn", "set_sort_column_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sort_column_id := gi.NewInt32Argument(sort_column_id)
	args := []gi.Argument{arg_v, arg_sort_column_id}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_sort_indicator
//
// [ setting ] trans: nothing
//
func (v TreeViewColumn) SetSortIndicator(setting bool) {
	iv, err := _I.Get(3169, "TreeViewColumn", "set_sort_indicator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_sort_order
//
// [ order ] trans: nothing
//
func (v TreeViewColumn) SetSortOrder(order SortTypeEnum) {
	iv, err := _I.Get(3170, "TreeViewColumn", "set_sort_order")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_order := gi.NewIntArgument(int(order))
	args := []gi.Argument{arg_v, arg_order}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_spacing
//
// [ spacing ] trans: nothing
//
func (v TreeViewColumn) SetSpacing(spacing int32) {
	iv, err := _I.Get(3171, "TreeViewColumn", "set_spacing")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_v, arg_spacing}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_title
//
// [ title ] trans: nothing
//
func (v TreeViewColumn) SetTitle(title string) {
	iv, err := _I.Get(3172, "TreeViewColumn", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_tree_view_column_set_visible
//
// [ visible ] trans: nothing
//
func (v TreeViewColumn) SetVisible(visible bool) {
	iv, err := _I.Get(3173, "TreeViewColumn", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// gtk_tree_view_column_set_widget
//
// [ widget ] trans: nothing
//
func (v TreeViewColumn) SetWidget(widget IWidget) {
	iv, err := _I.Get(3174, "TreeViewColumn", "set_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	iv.Call(args, nil, nil)
}

// ignore GType struct TreeViewColumnClass

type TreeViewColumnDropFuncStruct struct {
	F_tree_view   TreeView
	F_column      TreeViewColumn
	F_prev_column TreeViewColumn
	F_next_column TreeViewColumn
	F_data        unsafe.Pointer
}

func GetPointer_myTreeViewColumnDropFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeViewColumnDropFunc())
}

//export myGtkTreeViewColumnDropFunc
func myGtkTreeViewColumnDropFunc(tree_view *C.GtkTreeView, column *C.GtkTreeViewColumn, prev_column *C.GtkTreeViewColumn, next_column *C.GtkTreeViewColumn, data C.gpointer) {
	// TODO: not found user_data
}

// Struct TreeViewColumnPrivate
type TreeViewColumnPrivate struct {
	P unsafe.Pointer
}

func TreeViewColumnPrivateGetType() gi.GType {
	ret := _I.GetGType(619, "TreeViewColumnPrivate")
	return ret
}

// Enum TreeViewColumnSizing
type TreeViewColumnSizingEnum int

const (
	TreeViewColumnSizingGrowOnly TreeViewColumnSizingEnum = 0
	TreeViewColumnSizingAutosize TreeViewColumnSizingEnum = 1
	TreeViewColumnSizingFixed    TreeViewColumnSizingEnum = 2
)

func TreeViewColumnSizingGetType() gi.GType {
	ret := _I.GetGType(620, "TreeViewColumnSizing")
	return ret
}

// Enum TreeViewDropPosition
type TreeViewDropPositionEnum int

const (
	TreeViewDropPositionBefore       TreeViewDropPositionEnum = 0
	TreeViewDropPositionAfter        TreeViewDropPositionEnum = 1
	TreeViewDropPositionIntoOrBefore TreeViewDropPositionEnum = 2
	TreeViewDropPositionIntoOrAfter  TreeViewDropPositionEnum = 3
)

func TreeViewDropPositionGetType() gi.GType {
	ret := _I.GetGType(621, "TreeViewDropPosition")
	return ret
}

// Enum TreeViewGridLines
type TreeViewGridLinesEnum int

const (
	TreeViewGridLinesNone       TreeViewGridLinesEnum = 0
	TreeViewGridLinesHorizontal TreeViewGridLinesEnum = 1
	TreeViewGridLinesVertical   TreeViewGridLinesEnum = 2
	TreeViewGridLinesBoth       TreeViewGridLinesEnum = 3
)

func TreeViewGridLinesGetType() gi.GType {
	ret := _I.GetGType(622, "TreeViewGridLines")
	return ret
}

type TreeViewMappingFuncStruct struct {
	F_tree_view TreeView
	F_path      TreePath
}

func GetPointer_myTreeViewMappingFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeViewMappingFunc())
}

//export myGtkTreeViewMappingFunc
func myGtkTreeViewMappingFunc(tree_view *C.GtkTreeView, path *C.GtkTreePath, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TreeViewMappingFuncStruct{
		F_tree_view: WrapTreeView(unsafe.Pointer(tree_view)),
		F_path:      TreePath{P: unsafe.Pointer(path)},
	}
	fn(args)
}

// Struct TreeViewPrivate
type TreeViewPrivate struct {
	P unsafe.Pointer
}

func TreeViewPrivateGetType() gi.GType {
	ret := _I.GetGType(623, "TreeViewPrivate")
	return ret
}

type TreeViewRowSeparatorFuncStruct struct {
	F_model TreeModel
	F_iter  TreeIter
	F_data  unsafe.Pointer
}

func GetPointer_myTreeViewRowSeparatorFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeViewRowSeparatorFunc())
}

//export myGtkTreeViewRowSeparatorFunc
func myGtkTreeViewRowSeparatorFunc(model *C.GtkTreeModel, iter *C.GtkTreeIter, data C.gpointer) {
	// TODO: not found user_data
}

type TreeViewSearchEqualFuncStruct struct {
	F_model       TreeModel
	F_column      int32
	F_key         string
	F_iter        TreeIter
	F_search_data unsafe.Pointer
}

func GetPointer_myTreeViewSearchEqualFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeViewSearchEqualFunc())
}

//export myGtkTreeViewSearchEqualFunc
func myGtkTreeViewSearchEqualFunc(model *C.GtkTreeModel, column C.gint32, key *C.gchar, iter *C.GtkTreeIter, search_data C.gpointer) {
	// TODO: not found user_data
}

type TreeViewSearchPositionFuncStruct struct {
	F_tree_view     TreeView
	F_search_dialog Widget
}

func GetPointer_myTreeViewSearchPositionFunc() unsafe.Pointer {
	return unsafe.Pointer(C.getPointer_myGtkTreeViewSearchPositionFunc())
}

//export myGtkTreeViewSearchPositionFunc
func myGtkTreeViewSearchPositionFunc(tree_view *C.GtkTreeView, search_dialog *C.GtkWidget, user_data C.gpointer) {
	fn := gi.GetFunc(uint(uintptr(user_data)))
	args := &TreeViewSearchPositionFuncStruct{
		F_tree_view:     WrapTreeView(unsafe.Pointer(tree_view)),
		F_search_dialog: WrapWidget(unsafe.Pointer(search_dialog)),
	}
	fn(args)
}

// Object UIManager
type UIManager struct {
	BuildableIfc
	g.Object
}

func WrapUIManager(p unsafe.Pointer) (r UIManager) { r.P = p; return }

type IUIManager interface{ P_UIManager() unsafe.Pointer }

func (v UIManager) P_UIManager() unsafe.Pointer { return v.P }
func (v UIManager) P_Buildable() unsafe.Pointer { return v.P }
func UIManagerGetType() gi.GType {
	ret := _I.GetGType(624, "UIManager")
	return ret
}

// Deprecated
//
// gtk_ui_manager_new
//
// [ result ] trans: everything
//
func NewUIManager() (result UIManager) {
	iv, err := _I.Get(3175, "UIManager", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_add_ui
//
// [ merge_id ] trans: nothing
//
// [ path ] trans: nothing
//
// [ name ] trans: nothing
//
// [ action ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ top ] trans: nothing
//
func (v UIManager) AddUi(merge_id uint32, path string, name string, action string, type1 UIManagerItemTypeFlags, top bool) {
	iv, err := _I.Get(3176, "UIManager", "add_ui")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	c_name := gi.CString(name)
	c_action := gi.CString(action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_merge_id := gi.NewUint32Argument(merge_id)
	arg_path := gi.NewStringArgument(c_path)
	arg_name := gi.NewStringArgument(c_name)
	arg_action := gi.NewStringArgument(c_action)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_top := gi.NewBoolArgument(top)
	args := []gi.Argument{arg_v, arg_merge_id, arg_path, arg_name, arg_action, arg_type1, arg_top}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
	gi.Free(c_name)
	gi.Free(c_action)
}

// Deprecated
//
// gtk_ui_manager_add_ui_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UIManager) AddUiFromFile(filename string) (result uint32, err error) {
	iv, err := _I.Get(3177, "UIManager", "add_ui_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_ui_manager_add_ui_from_resource
//
// [ resource_path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UIManager) AddUiFromResource(resource_path string) (result uint32, err error) {
	iv, err := _I.Get(3178, "UIManager", "add_ui_from_resource")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_resource_path, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_resource_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_ui_manager_add_ui_from_string
//
// [ buffer ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UIManager) AddUiFromString(buffer string, length int64) (result uint32, err error) {
	iv, err := _I.Get(3179, "UIManager", "add_ui_from_string")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_buffer := gi.CString(buffer)
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewStringArgument(c_buffer)
	arg_length := gi.NewInt64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_buffer)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_ui_manager_ensure_update
//
func (v UIManager) EnsureUpdate() {
	iv, err := _I.Get(3180, "UIManager", "ensure_update")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_ui_manager_get_accel_group
//
// [ result ] trans: nothing
//
func (v UIManager) GetAccelGroup() (result AccelGroup) {
	iv, err := _I.Get(3181, "UIManager", "get_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_get_action
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UIManager) GetAction(path string) (result Action) {
	iv, err := _I.Get(3182, "UIManager", "get_action")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_get_action_groups
//
// [ result ] trans: nothing
//
func (v UIManager) GetActionGroups() (result g.List) {
	iv, err := _I.Get(3183, "UIManager", "get_action_groups")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_get_add_tearoffs
//
// [ result ] trans: nothing
//
func (v UIManager) GetAddTearoffs() (result bool) {
	iv, err := _I.Get(3184, "UIManager", "get_add_tearoffs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_ui_manager_get_toplevels
//
// [ types ] trans: nothing
//
// [ result ] trans: container
//
func (v UIManager) GetToplevels(types UIManagerItemTypeFlags) (result g.SList) {
	iv, err := _I.Get(3185, "UIManager", "get_toplevels")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_types := gi.NewIntArgument(int(types))
	args := []gi.Argument{arg_v, arg_types}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_get_ui
//
// [ result ] trans: everything
//
func (v UIManager) GetUi() (result string) {
	iv, err := _I.Get(3186, "UIManager", "get_ui")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_ui_manager_get_widget
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UIManager) GetWidget(path string) (result Widget) {
	iv, err := _I.Get(3187, "UIManager", "get_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_ui_manager_insert_action_group
//
// [ action_group ] trans: nothing
//
// [ pos ] trans: nothing
//
func (v UIManager) InsertActionGroup(action_group IActionGroup, pos int32) {
	iv, err := _I.Get(3188, "UIManager", "insert_action_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action_group != nil {
		tmp = action_group.P_ActionGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_group := gi.NewPointerArgument(tmp)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_action_group, arg_pos}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_ui_manager_new_merge_id
//
// [ result ] trans: nothing
//
func (v UIManager) NewMergeId() (result uint32) {
	iv, err := _I.Get(3189, "UIManager", "new_merge_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_ui_manager_remove_action_group
//
// [ action_group ] trans: nothing
//
func (v UIManager) RemoveActionGroup(action_group IActionGroup) {
	iv, err := _I.Get(3190, "UIManager", "remove_action_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action_group != nil {
		tmp = action_group.P_ActionGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action_group}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_ui_manager_remove_ui
//
// [ merge_id ] trans: nothing
//
func (v UIManager) RemoveUi(merge_id uint32) {
	iv, err := _I.Get(3191, "UIManager", "remove_ui")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_merge_id := gi.NewUint32Argument(merge_id)
	args := []gi.Argument{arg_v, arg_merge_id}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_ui_manager_set_add_tearoffs
//
// [ add_tearoffs ] trans: nothing
//
func (v UIManager) SetAddTearoffs(add_tearoffs bool) {
	iv, err := _I.Get(3192, "UIManager", "set_add_tearoffs")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_add_tearoffs := gi.NewBoolArgument(add_tearoffs)
	args := []gi.Argument{arg_v, arg_add_tearoffs}
	iv.Call(args, nil, nil)
}

// ignore GType struct UIManagerClass

// Deprecated
//
// Flags UIManagerItemType
type UIManagerItemTypeFlags int

const (
	UIManagerItemTypeAuto            UIManagerItemTypeFlags = 0
	UIManagerItemTypeMenubar         UIManagerItemTypeFlags = 1
	UIManagerItemTypeMenu            UIManagerItemTypeFlags = 2
	UIManagerItemTypeToolbar         UIManagerItemTypeFlags = 4
	UIManagerItemTypePlaceholder     UIManagerItemTypeFlags = 8
	UIManagerItemTypePopup           UIManagerItemTypeFlags = 16
	UIManagerItemTypeMenuitem        UIManagerItemTypeFlags = 32
	UIManagerItemTypeToolitem        UIManagerItemTypeFlags = 64
	UIManagerItemTypeSeparator       UIManagerItemTypeFlags = 128
	UIManagerItemTypeAccelerator     UIManagerItemTypeFlags = 256
	UIManagerItemTypePopupWithAccels UIManagerItemTypeFlags = 512
)

func UIManagerItemTypeGetType() gi.GType {
	ret := _I.GetGType(625, "UIManagerItemType")
	return ret
}

// Struct UIManagerPrivate
type UIManagerPrivate struct {
	P unsafe.Pointer
}

func UIManagerPrivateGetType() gi.GType {
	ret := _I.GetGType(626, "UIManagerPrivate")
	return ret
}

// Enum Unit
type UnitEnum int

const (
	UnitNone   UnitEnum = 0
	UnitPoints UnitEnum = 1
	UnitInch   UnitEnum = 2
	UnitMm     UnitEnum = 3
)

func UnitGetType() gi.GType {
	ret := _I.GetGType(627, "Unit")
	return ret
}

// Object VBox
type VBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Box
}

func WrapVBox(p unsafe.Pointer) (r VBox) { r.P = p; return }

type IVBox interface{ P_VBox() unsafe.Pointer }

func (v VBox) P_VBox() unsafe.Pointer             { return v.P }
func (v VBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v VBox) P_Orientable() unsafe.Pointer       { return v.P }
func VBoxGetType() gi.GType {
	ret := _I.GetGType(628, "VBox")
	return ret
}

// Deprecated
//
// gtk_vbox_new
//
// [ homogeneous ] trans: nothing
//
// [ spacing ] trans: nothing
//
// [ result ] trans: nothing
//
func NewVBox(homogeneous bool, spacing int32) (result VBox) {
	iv, err := _I.Get(3193, "VBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_homogeneous := gi.NewBoolArgument(homogeneous)
	arg_spacing := gi.NewInt32Argument(spacing)
	args := []gi.Argument{arg_homogeneous, arg_spacing}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VBoxClass

// Object VButtonBox
type VButtonBox struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	ButtonBox
}

func WrapVButtonBox(p unsafe.Pointer) (r VButtonBox) { r.P = p; return }

type IVButtonBox interface{ P_VButtonBox() unsafe.Pointer }

func (v VButtonBox) P_VButtonBox() unsafe.Pointer       { return v.P }
func (v VButtonBox) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VButtonBox) P_Buildable() unsafe.Pointer        { return v.P }
func (v VButtonBox) P_Orientable() unsafe.Pointer       { return v.P }
func VButtonBoxGetType() gi.GType {
	ret := _I.GetGType(629, "VButtonBox")
	return ret
}

// Deprecated
//
// gtk_vbutton_box_new
//
// [ result ] trans: nothing
//
func NewVButtonBox() (result VButtonBox) {
	iv, err := _I.Get(3194, "VButtonBox", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VButtonBoxClass

// Object VPaned
type VPaned struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Paned
}

func WrapVPaned(p unsafe.Pointer) (r VPaned) { r.P = p; return }

type IVPaned interface{ P_VPaned() unsafe.Pointer }

func (v VPaned) P_VPaned() unsafe.Pointer           { return v.P }
func (v VPaned) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VPaned) P_Buildable() unsafe.Pointer        { return v.P }
func (v VPaned) P_Orientable() unsafe.Pointer       { return v.P }
func VPanedGetType() gi.GType {
	ret := _I.GetGType(630, "VPaned")
	return ret
}

// Deprecated
//
// gtk_vpaned_new
//
// [ result ] trans: nothing
//
func NewVPaned() (result VPaned) {
	iv, err := _I.Get(3195, "VPaned", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VPanedClass

// Object VScale
type VScale struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Scale
}

func WrapVScale(p unsafe.Pointer) (r VScale) { r.P = p; return }

type IVScale interface{ P_VScale() unsafe.Pointer }

func (v VScale) P_VScale() unsafe.Pointer           { return v.P }
func (v VScale) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VScale) P_Buildable() unsafe.Pointer        { return v.P }
func (v VScale) P_Orientable() unsafe.Pointer       { return v.P }
func VScaleGetType() gi.GType {
	ret := _I.GetGType(631, "VScale")
	return ret
}

// Deprecated
//
// gtk_vscale_new
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewVScale(adjustment IAdjustment) (result VScale) {
	iv, err := _I.Get(3196, "VScale", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_vscale_new_with_range
//
// [ min ] trans: nothing
//
// [ max ] trans: nothing
//
// [ step ] trans: nothing
//
// [ result ] trans: nothing
//
func NewVScaleWithRange(min float64, max float64, step float64) (result VScale) {
	iv, err := _I.Get(3197, "VScale", "new_with_range")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_min := gi.NewDoubleArgument(min)
	arg_max := gi.NewDoubleArgument(max)
	arg_step := gi.NewDoubleArgument(step)
	args := []gi.Argument{arg_min, arg_max, arg_step}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VScaleClass

// Object VScrollbar
type VScrollbar struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Scrollbar
}

func WrapVScrollbar(p unsafe.Pointer) (r VScrollbar) { r.P = p; return }

type IVScrollbar interface{ P_VScrollbar() unsafe.Pointer }

func (v VScrollbar) P_VScrollbar() unsafe.Pointer       { return v.P }
func (v VScrollbar) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VScrollbar) P_Buildable() unsafe.Pointer        { return v.P }
func (v VScrollbar) P_Orientable() unsafe.Pointer       { return v.P }
func VScrollbarGetType() gi.GType {
	ret := _I.GetGType(632, "VScrollbar")
	return ret
}

// Deprecated
//
// gtk_vscrollbar_new
//
// [ adjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewVScrollbar(adjustment IAdjustment) (result VScrollbar) {
	iv, err := _I.Get(3198, "VScrollbar", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_adjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VScrollbarClass

// Object VSeparator
type VSeparator struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	OrientableIfc
	Separator
}

func WrapVSeparator(p unsafe.Pointer) (r VSeparator) { r.P = p; return }

type IVSeparator interface{ P_VSeparator() unsafe.Pointer }

func (v VSeparator) P_VSeparator() unsafe.Pointer       { return v.P }
func (v VSeparator) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VSeparator) P_Buildable() unsafe.Pointer        { return v.P }
func (v VSeparator) P_Orientable() unsafe.Pointer       { return v.P }
func VSeparatorGetType() gi.GType {
	ret := _I.GetGType(633, "VSeparator")
	return ret
}

// Deprecated
//
// gtk_vseparator_new
//
// [ result ] trans: nothing
//
func NewVSeparator() (result VSeparator) {
	iv, err := _I.Get(3199, "VSeparator", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VSeparatorClass

// Object Viewport
type Viewport struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	ScrollableIfc
	Bin
}

func WrapViewport(p unsafe.Pointer) (r Viewport) { r.P = p; return }

type IViewport interface{ P_Viewport() unsafe.Pointer }

func (v Viewport) P_Viewport() unsafe.Pointer         { return v.P }
func (v Viewport) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Viewport) P_Buildable() unsafe.Pointer        { return v.P }
func (v Viewport) P_Scrollable() unsafe.Pointer       { return v.P }
func ViewportGetType() gi.GType {
	ret := _I.GetGType(634, "Viewport")
	return ret
}

// gtk_viewport_new
//
// [ hadjustment ] trans: nothing
//
// [ vadjustment ] trans: nothing
//
// [ result ] trans: nothing
//
func NewViewport(hadjustment IAdjustment, vadjustment IAdjustment) (result Viewport) {
	iv, err := _I.Get(3200, "Viewport", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if hadjustment != nil {
		tmp = hadjustment.P_Adjustment()
	}
	var tmp1 unsafe.Pointer
	if vadjustment != nil {
		tmp1 = vadjustment.P_Adjustment()
	}
	arg_hadjustment := gi.NewPointerArgument(tmp)
	arg_vadjustment := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_hadjustment, arg_vadjustment}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_viewport_get_bin_window
//
// [ result ] trans: nothing
//
func (v Viewport) GetBinWindow() (result gdk.Window) {
	iv, err := _I.Get(3201, "Viewport", "get_bin_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_viewport_get_hadjustment
//
// [ result ] trans: nothing
//
func (v Viewport) GetHadjustment() (result Adjustment) {
	iv, err := _I.Get(3202, "Viewport", "get_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_viewport_get_shadow_type
//
// [ result ] trans: nothing
//
func (v Viewport) GetShadowType() (result ShadowTypeEnum) {
	iv, err := _I.Get(3203, "Viewport", "get_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ShadowTypeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_viewport_get_vadjustment
//
// [ result ] trans: nothing
//
func (v Viewport) GetVadjustment() (result Adjustment) {
	iv, err := _I.Get(3204, "Viewport", "get_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_viewport_get_view_window
//
// [ result ] trans: nothing
//
func (v Viewport) GetViewWindow() (result gdk.Window) {
	iv, err := _I.Get(3205, "Viewport", "get_view_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_viewport_set_hadjustment
//
// [ adjustment ] trans: nothing
//
func (v Viewport) SetHadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(3206, "Viewport", "set_hadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// gtk_viewport_set_shadow_type
//
// [ type1 ] trans: nothing
//
func (v Viewport) SetShadowType(type1 ShadowTypeEnum) {
	iv, err := _I.Get(3207, "Viewport", "set_shadow_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_viewport_set_vadjustment
//
// [ adjustment ] trans: nothing
//
func (v Viewport) SetVadjustment(adjustment IAdjustment) {
	iv, err := _I.Get(3208, "Viewport", "set_vadjustment")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if adjustment != nil {
		tmp = adjustment.P_Adjustment()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_adjustment := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_adjustment}
	iv.Call(args, nil, nil)
}

// ignore GType struct ViewportClass

// Struct ViewportPrivate
type ViewportPrivate struct {
	P unsafe.Pointer
}

func ViewportPrivateGetType() gi.GType {
	ret := _I.GetGType(635, "ViewportPrivate")
	return ret
}

// Object VolumeButton
type VolumeButton struct {
	atk.ImplementorIfaceIfc
	ActionableIfc
	ActivatableIfc
	BuildableIfc
	OrientableIfc
	ScaleButton
}

func WrapVolumeButton(p unsafe.Pointer) (r VolumeButton) { r.P = p; return }

type IVolumeButton interface{ P_VolumeButton() unsafe.Pointer }

func (v VolumeButton) P_VolumeButton() unsafe.Pointer     { return v.P }
func (v VolumeButton) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v VolumeButton) P_Actionable() unsafe.Pointer       { return v.P }
func (v VolumeButton) P_Activatable() unsafe.Pointer      { return v.P }
func (v VolumeButton) P_Buildable() unsafe.Pointer        { return v.P }
func (v VolumeButton) P_Orientable() unsafe.Pointer       { return v.P }
func VolumeButtonGetType() gi.GType {
	ret := _I.GetGType(636, "VolumeButton")
	return ret
}

// gtk_volume_button_new
//
// [ result ] trans: nothing
//
func NewVolumeButton() (result VolumeButton) {
	iv, err := _I.Get(3209, "VolumeButton", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VolumeButtonClass

// Object Widget
type Widget struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	g.InitiallyUnowned
}

func WrapWidget(p unsafe.Pointer) (r Widget) { r.P = p; return }

type IWidget interface{ P_Widget() unsafe.Pointer }

func (v Widget) P_Widget() unsafe.Pointer           { return v.P }
func (v Widget) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Widget) P_Buildable() unsafe.Pointer        { return v.P }
func WidgetGetType() gi.GType {
	ret := _I.GetGType(637, "Widget")
	return ret
}

// Deprecated
//
// Deprecated
//
// Deprecated
//
// gtk_widget_set_default_direction
//
// [ dir ] trans: nothing
//
func WidgetSetDefaultDirection1(dir TextDirectionEnum) {
	iv, err := _I.Get(3214, "Widget", "set_default_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_dir := gi.NewIntArgument(int(dir))
	args := []gi.Argument{arg_dir}
	iv.Call(args, nil, nil)
}

// gtk_widget_activate
//
// [ result ] trans: nothing
//
func (v Widget) Activate() (result bool) {
	iv, err := _I.Get(3215, "Widget", "activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_add_accelerator
//
// [ accel_signal ] trans: nothing
//
// [ accel_group ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ accel_flags ] trans: nothing
//
func (v Widget) AddAccelerator(accel_signal string, accel_group IAccelGroup, accel_key uint32, accel_mods gdk.ModifierTypeFlags, accel_flags AccelFlags) {
	iv, err := _I.Get(3216, "Widget", "add_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_signal := gi.CString(accel_signal)
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_signal := gi.NewStringArgument(c_accel_signal)
	arg_accel_group := gi.NewPointerArgument(tmp)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	arg_accel_flags := gi.NewIntArgument(int(accel_flags))
	args := []gi.Argument{arg_v, arg_accel_signal, arg_accel_group, arg_accel_key, arg_accel_mods, arg_accel_flags}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_signal)
}

// gtk_widget_add_device_events
//
// [ device ] trans: nothing
//
// [ events ] trans: nothing
//
func (v Widget) AddDeviceEvents(device gdk.IDevice, events gdk.EventMaskFlags) {
	iv, err := _I.Get(3217, "Widget", "add_device_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	arg_events := gi.NewIntArgument(int(events))
	args := []gi.Argument{arg_v, arg_device, arg_events}
	iv.Call(args, nil, nil)
}

// gtk_widget_add_events
//
// [ events ] trans: nothing
//
func (v Widget) AddEvents(events int32) {
	iv, err := _I.Get(3218, "Widget", "add_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_events := gi.NewInt32Argument(events)
	args := []gi.Argument{arg_v, arg_events}
	iv.Call(args, nil, nil)
}

// gtk_widget_add_mnemonic_label
//
// [ label ] trans: nothing
//
func (v Widget) AddMnemonicLabel(label IWidget) {
	iv, err := _I.Get(3219, "Widget", "add_mnemonic_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label != nil {
		tmp = label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
}

// gtk_widget_add_tick_callback
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ notify ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) AddTickCallback(callback int /*TODO_TYPE CALLBACK*/, user_data unsafe.Pointer, notify int /*TODO_TYPE CALLBACK*/) (result uint32) {
	iv, err := _I.Get(3220, "Widget", "add_tick_callback")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTickCallback()))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_notify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_v, arg_callback, arg_user_data, arg_notify}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_widget_can_activate_accel
//
// [ signal_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) CanActivateAccel(signal_id uint32) (result bool) {
	iv, err := _I.Get(3221, "Widget", "can_activate_accel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_signal_id := gi.NewUint32Argument(signal_id)
	args := []gi.Argument{arg_v, arg_signal_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_child_focus
//
// [ direction ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) ChildFocus(direction DirectionTypeEnum) (result bool) {
	iv, err := _I.Get(3222, "Widget", "child_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_child_notify
//
// [ child_property ] trans: nothing
//
func (v Widget) ChildNotify(child_property string) {
	iv, err := _I.Get(3223, "Widget", "child_notify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_child_property := gi.CString(child_property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_child_property := gi.NewStringArgument(c_child_property)
	args := []gi.Argument{arg_v, arg_child_property}
	iv.Call(args, nil, nil)
	gi.Free(c_child_property)
}

// Deprecated
//
// gtk_widget_class_path
//
// [ path_length ] trans: everything, dir: out
//
// [ path ] trans: everything, dir: out
//
// [ path_reversed ] trans: everything, dir: out
//
func (v Widget) ClassPath() (path_length uint32, path string, path_reversed string) {
	iv, err := _I.Get(3224, "Widget", "class_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_path_reversed := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_path_length, arg_path, arg_path_reversed}
	iv.Call(args, nil, &outArgs[0])
	path_length = outArgs[0].Uint32()
	path = outArgs[1].String().Take()
	path_reversed = outArgs[2].String().Take()
	return
}

// gtk_widget_compute_expand
//
// [ orientation ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) ComputeExpand(orientation OrientationEnum) (result bool) {
	iv, err := _I.Get(3225, "Widget", "compute_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_v, arg_orientation}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_create_pango_context
//
// [ result ] trans: everything
//
func (v Widget) CreatePangoContext() (result pango.Context) {
	iv, err := _I.Get(3226, "Widget", "create_pango_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_create_pango_layout
//
// [ text ] trans: nothing
//
// [ result ] trans: everything
//
func (v Widget) CreatePangoLayout(text string) (result pango.Layout) {
	iv, err := _I.Get(3227, "Widget", "create_pango_layout")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_text)
	result.P = ret.Pointer()
	return
}

// gtk_widget_destroy
//
func (v Widget) Destroy() {
	iv, err := _I.Get(3228, "Widget", "destroy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_destroyed
//
// [ widget_pointer ] trans: nothing, dir: inout
//
func (v Widget) Destroyed(widget_pointer int /*TODO:TYPE*/) {
	iv, err := _I.Get(3229, "Widget", "destroyed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, &outArgs[0])
}

// gtk_widget_device_is_shadowed
//
// [ device ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) DeviceIsShadowed(device gdk.IDevice) (result bool) {
	iv, err := _I.Get(3230, "Widget", "device_is_shadowed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_device}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_drag_begin
//
// [ targets ] trans: nothing
//
// [ actions ] trans: nothing
//
// [ button ] trans: nothing
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) DragBegin(targets TargetList, actions gdk.DragActionFlags, button int32, event gdk.Event) (result gdk.DragContext) {
	iv, err := _I.Get(3231, "Widget", "drag_begin")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_actions := gi.NewIntArgument(int(actions))
	arg_button := gi.NewInt32Argument(button)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_targets, arg_actions, arg_button, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_begin_with_coordinates
//
// [ targets ] trans: nothing
//
// [ actions ] trans: nothing
//
// [ button ] trans: nothing
//
// [ event ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) DragBeginWithCoordinates(targets TargetList, actions gdk.DragActionFlags, button int32, event gdk.Event, x int32, y int32) (result gdk.DragContext) {
	iv, err := _I.Get(3232, "Widget", "drag_begin_with_coordinates")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_actions := gi.NewIntArgument(int(actions))
	arg_button := gi.NewInt32Argument(button)
	arg_event := gi.NewPointerArgument(event.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_targets, arg_actions, arg_button, arg_event, arg_x, arg_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_check_threshold
//
// [ start_x ] trans: nothing
//
// [ start_y ] trans: nothing
//
// [ current_x ] trans: nothing
//
// [ current_y ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) DragCheckThreshold(start_x int32, start_y int32, current_x int32, current_y int32) (result bool) {
	iv, err := _I.Get(3233, "Widget", "drag_check_threshold")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_x := gi.NewInt32Argument(start_x)
	arg_start_y := gi.NewInt32Argument(start_y)
	arg_current_x := gi.NewInt32Argument(current_x)
	arg_current_y := gi.NewInt32Argument(current_y)
	args := []gi.Argument{arg_v, arg_start_x, arg_start_y, arg_current_x, arg_current_y}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_drag_dest_add_image_targets
//
func (v Widget) DragDestAddImageTargets() {
	iv, err := _I.Get(3234, "Widget", "drag_dest_add_image_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_add_text_targets
//
func (v Widget) DragDestAddTextTargets() {
	iv, err := _I.Get(3235, "Widget", "drag_dest_add_text_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_add_uri_targets
//
func (v Widget) DragDestAddUriTargets() {
	iv, err := _I.Get(3236, "Widget", "drag_dest_add_uri_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_find_target
//
// [ context ] trans: nothing
//
// [ target_list ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) DragDestFindTarget(context gdk.IDragContext, target_list TargetList) (result gdk.Atom) {
	iv, err := _I.Get(3237, "Widget", "drag_dest_find_target")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_target_list := gi.NewPointerArgument(target_list.P)
	args := []gi.Argument{arg_v, arg_context, arg_target_list}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_dest_get_target_list
//
// [ result ] trans: nothing
//
func (v Widget) DragDestGetTargetList() (result TargetList) {
	iv, err := _I.Get(3238, "Widget", "drag_dest_get_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_dest_get_track_motion
//
// [ result ] trans: nothing
//
func (v Widget) DragDestGetTrackMotion() (result bool) {
	iv, err := _I.Get(3239, "Widget", "drag_dest_get_track_motion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_drag_dest_set
//
// [ flags ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v Widget) DragDestSet(flags DestDefaultsFlags, targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(3240, "Widget", "drag_dest_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_flags, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_drag_dest_set_proxy
//
// [ proxy_window ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ use_coordinates ] trans: nothing
//
func (v Widget) DragDestSetProxy(proxy_window gdk.IWindow, protocol gdk.DragProtocolEnum, use_coordinates bool) {
	iv, err := _I.Get(3241, "Widget", "drag_dest_set_proxy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy_window != nil {
		tmp = proxy_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_proxy_window := gi.NewPointerArgument(tmp)
	arg_protocol := gi.NewIntArgument(int(protocol))
	arg_use_coordinates := gi.NewBoolArgument(use_coordinates)
	args := []gi.Argument{arg_v, arg_proxy_window, arg_protocol, arg_use_coordinates}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_set_target_list
//
// [ target_list ] trans: nothing
//
func (v Widget) DragDestSetTargetList(target_list TargetList) {
	iv, err := _I.Get(3242, "Widget", "drag_dest_set_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target_list := gi.NewPointerArgument(target_list.P)
	args := []gi.Argument{arg_v, arg_target_list}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_set_track_motion
//
// [ track_motion ] trans: nothing
//
func (v Widget) DragDestSetTrackMotion(track_motion bool) {
	iv, err := _I.Get(3243, "Widget", "drag_dest_set_track_motion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_track_motion := gi.NewBoolArgument(track_motion)
	args := []gi.Argument{arg_v, arg_track_motion}
	iv.Call(args, nil, nil)
}

// gtk_drag_dest_unset
//
func (v Widget) DragDestUnset() {
	iv, err := _I.Get(3244, "Widget", "drag_dest_unset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_get_data
//
// [ context ] trans: nothing
//
// [ target ] trans: nothing
//
// [ time_ ] trans: nothing
//
func (v Widget) DragGetData(context gdk.IDragContext, target gdk.Atom, time_ uint32) {
	iv, err := _I.Get(3245, "Widget", "drag_get_data")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_target := gi.NewPointerArgument(target.P)
	arg_time_ := gi.NewUint32Argument(time_)
	args := []gi.Argument{arg_v, arg_context, arg_target, arg_time_}
	iv.Call(args, nil, nil)
}

// gtk_drag_highlight
//
func (v Widget) DragHighlight() {
	iv, err := _I.Get(3246, "Widget", "drag_highlight")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_add_image_targets
//
func (v Widget) DragSourceAddImageTargets() {
	iv, err := _I.Get(3247, "Widget", "drag_source_add_image_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_add_text_targets
//
func (v Widget) DragSourceAddTextTargets() {
	iv, err := _I.Get(3248, "Widget", "drag_source_add_text_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_add_uri_targets
//
func (v Widget) DragSourceAddUriTargets() {
	iv, err := _I.Get(3249, "Widget", "drag_source_add_uri_targets")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_get_target_list
//
// [ result ] trans: nothing
//
func (v Widget) DragSourceGetTargetList() (result TargetList) {
	iv, err := _I.Get(3250, "Widget", "drag_source_get_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_source_set
//
// [ start_button_mask ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ actions ] trans: nothing
//
func (v Widget) DragSourceSet(start_button_mask gdk.ModifierTypeFlags, targets unsafe.Pointer, n_targets int32, actions gdk.DragActionFlags) {
	iv, err := _I.Get(3251, "Widget", "drag_source_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_start_button_mask := gi.NewIntArgument(int(start_button_mask))
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_actions := gi.NewIntArgument(int(actions))
	args := []gi.Argument{arg_v, arg_start_button_mask, arg_targets, arg_n_targets, arg_actions}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_set_icon_gicon
//
// [ icon ] trans: nothing
//
func (v Widget) DragSourceSetIconGicon(icon g.IIcon) {
	iv, err := _I.Get(3252, "Widget", "drag_source_set_icon_gicon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_set_icon_name
//
// [ icon_name ] trans: nothing
//
func (v Widget) DragSourceSetIconName(icon_name string) {
	iv, err := _I.Get(3253, "Widget", "drag_source_set_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_icon_name := gi.CString(icon_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	args := []gi.Argument{arg_v, arg_icon_name}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_drag_source_set_icon_pixbuf
//
// [ pixbuf ] trans: nothing
//
func (v Widget) DragSourceSetIconPixbuf(pixbuf gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(3254, "Widget", "drag_source_set_icon_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pixbuf != nil {
		tmp = pixbuf.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pixbuf := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_pixbuf}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_drag_source_set_icon_stock
//
// [ stock_id ] trans: nothing
//
func (v Widget) DragSourceSetIconStock(stock_id string) {
	iv, err := _I.Get(3255, "Widget", "drag_source_set_icon_stock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	args := []gi.Argument{arg_v, arg_stock_id}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_drag_source_set_target_list
//
// [ target_list ] trans: nothing
//
func (v Widget) DragSourceSetTargetList(target_list TargetList) {
	iv, err := _I.Get(3256, "Widget", "drag_source_set_target_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_target_list := gi.NewPointerArgument(target_list.P)
	args := []gi.Argument{arg_v, arg_target_list}
	iv.Call(args, nil, nil)
}

// gtk_drag_source_unset
//
func (v Widget) DragSourceUnset() {
	iv, err := _I.Get(3257, "Widget", "drag_source_unset")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_drag_unhighlight
//
func (v Widget) DragUnhighlight() {
	iv, err := _I.Get(3258, "Widget", "drag_unhighlight")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_draw
//
// [ cr ] trans: nothing
//
func (v Widget) Draw(cr cairo.Context) {
	iv, err := _I.Get(3259, "Widget", "draw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cr := gi.NewPointerArgument(cr.P)
	args := []gi.Argument{arg_v, arg_cr}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_ensure_style
//
func (v Widget) EnsureStyle() {
	iv, err := _I.Get(3260, "Widget", "ensure_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_error_bell
//
func (v Widget) ErrorBell() {
	iv, err := _I.Get(3261, "Widget", "error_bell")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_event
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) Event(event gdk.Event) (result bool) {
	iv, err := _I.Get(3262, "Widget", "event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_freeze_child_notify
//
func (v Widget) FreezeChildNotify() {
	iv, err := _I.Get(3263, "Widget", "freeze_child_notify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_get_accessible
//
// [ result ] trans: nothing
//
func (v Widget) GetAccessible() (result atk.Object) {
	iv, err := _I.Get(3264, "Widget", "get_accessible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_action_group
//
// [ prefix ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetActionGroup(prefix string) (result g.ActionGroup) {
	iv, err := _I.Get(3265, "Widget", "get_action_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_prefix := gi.CString(prefix)
	arg_v := gi.NewPointerArgument(v.P)
	arg_prefix := gi.NewStringArgument(c_prefix)
	args := []gi.Argument{arg_v, arg_prefix}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_prefix)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_allocated_baseline
//
// [ result ] trans: nothing
//
func (v Widget) GetAllocatedBaseline() (result int32) {
	iv, err := _I.Get(3266, "Widget", "get_allocated_baseline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_allocated_height
//
// [ result ] trans: nothing
//
func (v Widget) GetAllocatedHeight() (result int32) {
	iv, err := _I.Get(3267, "Widget", "get_allocated_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_allocated_size
//
// [ allocation ] trans: nothing, dir: out
//
// [ baseline ] trans: everything, dir: out
//
func (v Widget) GetAllocatedSize(allocation gdk.Rectangle) (baseline int32) {
	iv, err := _I.Get(3268, "Widget", "get_allocated_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	arg_baseline := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_allocation, arg_baseline}
	iv.Call(args, nil, &outArgs[0])
	baseline = outArgs[0].Int32()
	return
}

// gtk_widget_get_allocated_width
//
// [ result ] trans: nothing
//
func (v Widget) GetAllocatedWidth() (result int32) {
	iv, err := _I.Get(3269, "Widget", "get_allocated_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_allocation
//
// [ allocation ] trans: nothing, dir: out
//
func (v Widget) GetAllocation(allocation gdk.Rectangle) {
	iv, err := _I.Get(3270, "Widget", "get_allocation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	args := []gi.Argument{arg_v, arg_allocation}
	iv.Call(args, nil, nil)
}

// gtk_widget_get_ancestor
//
// [ widget_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetAncestor(widget_type gi.GType) (result Widget) {
	iv, err := _I.Get(3271, "Widget", "get_ancestor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget_type := gi.NewUintArgument(uint(widget_type))
	args := []gi.Argument{arg_v, arg_widget_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_app_paintable
//
// [ result ] trans: nothing
//
func (v Widget) GetAppPaintable() (result bool) {
	iv, err := _I.Get(3272, "Widget", "get_app_paintable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_can_default
//
// [ result ] trans: nothing
//
func (v Widget) GetCanDefault() (result bool) {
	iv, err := _I.Get(3273, "Widget", "get_can_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_can_focus
//
// [ result ] trans: nothing
//
func (v Widget) GetCanFocus() (result bool) {
	iv, err := _I.Get(3274, "Widget", "get_can_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_get_child_requisition
//
// [ requisition ] trans: nothing, dir: out
//
func (v Widget) GetChildRequisition(requisition Requisition) {
	iv, err := _I.Get(3275, "Widget", "get_child_requisition")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_requisition := gi.NewPointerArgument(requisition.P)
	args := []gi.Argument{arg_v, arg_requisition}
	iv.Call(args, nil, nil)
}

// gtk_widget_get_child_visible
//
// [ result ] trans: nothing
//
func (v Widget) GetChildVisible() (result bool) {
	iv, err := _I.Get(3276, "Widget", "get_child_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_clip
//
// [ clip ] trans: nothing, dir: out
//
func (v Widget) GetClip(clip gdk.Rectangle) {
	iv, err := _I.Get(3277, "Widget", "get_clip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clip := gi.NewPointerArgument(clip.P)
	args := []gi.Argument{arg_v, arg_clip}
	iv.Call(args, nil, nil)
}

// gtk_widget_get_clipboard
//
// [ selection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetClipboard(selection gdk.Atom) (result Clipboard) {
	iv, err := _I.Get(3278, "Widget", "get_clipboard")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_selection := gi.NewPointerArgument(selection.P)
	args := []gi.Argument{arg_v, arg_selection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_widget_get_composite_name
//
// [ result ] trans: everything
//
func (v Widget) GetCompositeName() (result string) {
	iv, err := _I.Get(3279, "Widget", "get_composite_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_widget_get_device_enabled
//
// [ device ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetDeviceEnabled(device gdk.IDevice) (result bool) {
	iv, err := _I.Get(3280, "Widget", "get_device_enabled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_device}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_device_events
//
// [ device ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetDeviceEvents(device gdk.IDevice) (result gdk.EventMaskFlags) {
	iv, err := _I.Get(3281, "Widget", "get_device_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_device}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.EventMaskFlags(ret.Int())
	return
}

// gtk_widget_get_direction
//
// [ result ] trans: nothing
//
func (v Widget) GetDirection() (result TextDirectionEnum) {
	iv, err := _I.Get(3282, "Widget", "get_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TextDirectionEnum(ret.Int())
	return
}

// gtk_widget_get_display
//
// [ result ] trans: nothing
//
func (v Widget) GetDisplay() (result gdk.Display) {
	iv, err := _I.Get(3283, "Widget", "get_display")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_double_buffered
//
// [ result ] trans: nothing
//
func (v Widget) GetDoubleBuffered() (result bool) {
	iv, err := _I.Get(3284, "Widget", "get_double_buffered")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_events
//
// [ result ] trans: nothing
//
func (v Widget) GetEvents() (result int32) {
	iv, err := _I.Get(3285, "Widget", "get_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_focus_on_click
//
// [ result ] trans: nothing
//
func (v Widget) GetFocusOnClick() (result bool) {
	iv, err := _I.Get(3286, "Widget", "get_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_font_map
//
// [ result ] trans: nothing
//
func (v Widget) GetFontMap() (result pango.FontMap) {
	iv, err := _I.Get(3287, "Widget", "get_font_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_font_options
//
// [ result ] trans: nothing
//
func (v Widget) GetFontOptions() (result cairo.FontOptions) {
	iv, err := _I.Get(3288, "Widget", "get_font_options")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_frame_clock
//
// [ result ] trans: nothing
//
func (v Widget) GetFrameClock() (result gdk.FrameClock) {
	iv, err := _I.Get(3289, "Widget", "get_frame_clock")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_halign
//
// [ result ] trans: nothing
//
func (v Widget) GetHalign() (result AlignEnum) {
	iv, err := _I.Get(3290, "Widget", "get_halign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = AlignEnum(ret.Int())
	return
}

// gtk_widget_get_has_tooltip
//
// [ result ] trans: nothing
//
func (v Widget) GetHasTooltip() (result bool) {
	iv, err := _I.Get(3291, "Widget", "get_has_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_has_window
//
// [ result ] trans: nothing
//
func (v Widget) GetHasWindow() (result bool) {
	iv, err := _I.Get(3292, "Widget", "get_has_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_hexpand
//
// [ result ] trans: nothing
//
func (v Widget) GetHexpand() (result bool) {
	iv, err := _I.Get(3293, "Widget", "get_hexpand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_hexpand_set
//
// [ result ] trans: nothing
//
func (v Widget) GetHexpandSet() (result bool) {
	iv, err := _I.Get(3294, "Widget", "get_hexpand_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_mapped
//
// [ result ] trans: nothing
//
func (v Widget) GetMapped() (result bool) {
	iv, err := _I.Get(3295, "Widget", "get_mapped")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_margin_bottom
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginBottom() (result int32) {
	iv, err := _I.Get(3296, "Widget", "get_margin_bottom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_margin_end
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginEnd() (result int32) {
	iv, err := _I.Get(3297, "Widget", "get_margin_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_widget_get_margin_left
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginLeft() (result int32) {
	iv, err := _I.Get(3298, "Widget", "get_margin_left")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_widget_get_margin_right
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginRight() (result int32) {
	iv, err := _I.Get(3299, "Widget", "get_margin_right")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_margin_start
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginStart() (result int32) {
	iv, err := _I.Get(3300, "Widget", "get_margin_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_margin_top
//
// [ result ] trans: nothing
//
func (v Widget) GetMarginTop() (result int32) {
	iv, err := _I.Get(3301, "Widget", "get_margin_top")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_modifier_mask
//
// [ intent ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetModifierMask(intent gdk.ModifierIntentEnum) (result gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3302, "Widget", "get_modifier_mask")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_intent := gi.NewIntArgument(int(intent))
	args := []gi.Argument{arg_v, arg_intent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.ModifierTypeFlags(ret.Int())
	return
}

// Deprecated
//
// gtk_widget_get_modifier_style
//
// [ result ] trans: nothing
//
func (v Widget) GetModifierStyle() (result RcStyle) {
	iv, err := _I.Get(3303, "Widget", "get_modifier_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_name
//
// [ result ] trans: nothing
//
func (v Widget) GetName() (result string) {
	iv, err := _I.Get(3304, "Widget", "get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_widget_get_no_show_all
//
// [ result ] trans: nothing
//
func (v Widget) GetNoShowAll() (result bool) {
	iv, err := _I.Get(3305, "Widget", "get_no_show_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_opacity
//
// [ result ] trans: nothing
//
func (v Widget) GetOpacity() (result float64) {
	iv, err := _I.Get(3306, "Widget", "get_opacity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_widget_get_pango_context
//
// [ result ] trans: nothing
//
func (v Widget) GetPangoContext() (result pango.Context) {
	iv, err := _I.Get(3307, "Widget", "get_pango_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_parent
//
// [ result ] trans: nothing
//
func (v Widget) GetParent() (result Widget) {
	iv, err := _I.Get(3308, "Widget", "get_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_parent_window
//
// [ result ] trans: nothing
//
func (v Widget) GetParentWindow() (result gdk.Window) {
	iv, err := _I.Get(3309, "Widget", "get_parent_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_path
//
// [ result ] trans: nothing
//
func (v Widget) GetPath() (result WidgetPath) {
	iv, err := _I.Get(3310, "Widget", "get_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_widget_get_pointer
//
// [ x ] trans: everything, dir: out
//
// [ y ] trans: everything, dir: out
//
func (v Widget) GetPointer() (x int32, y int32) {
	iv, err := _I.Get(3311, "Widget", "get_pointer")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_x, arg_y}
	iv.Call(args, nil, &outArgs[0])
	x = outArgs[0].Int32()
	y = outArgs[1].Int32()
	return
}

// gtk_widget_get_preferred_height
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v Widget) GetPreferredHeight() (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(3312, "Widget", "get_preferred_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_widget_get_preferred_height_and_baseline_for_width
//
// [ width ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
// [ minimum_baseline ] trans: everything, dir: out
//
// [ natural_baseline ] trans: everything, dir: out
//
func (v Widget) GetPreferredHeightAndBaselineForWidth(width int32) (minimum_height int32, natural_height int32, minimum_baseline int32, natural_baseline int32) {
	iv, err := _I.Get(3313, "Widget", "get_preferred_height_and_baseline_for_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [4]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_minimum_baseline := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_natural_baseline := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_width, arg_minimum_height, arg_natural_height, arg_minimum_baseline, arg_natural_baseline}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	minimum_baseline = outArgs[2].Int32()
	natural_baseline = outArgs[3].Int32()
	return
}

// gtk_widget_get_preferred_height_for_width
//
// [ width ] trans: nothing
//
// [ minimum_height ] trans: everything, dir: out
//
// [ natural_height ] trans: everything, dir: out
//
func (v Widget) GetPreferredHeightForWidth(width int32) (minimum_height int32, natural_height int32) {
	iv, err := _I.Get(3314, "Widget", "get_preferred_height_for_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_minimum_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_minimum_height, arg_natural_height}
	iv.Call(args, nil, &outArgs[0])
	minimum_height = outArgs[0].Int32()
	natural_height = outArgs[1].Int32()
	return
}

// gtk_widget_get_preferred_size
//
// [ minimum_size ] trans: nothing, dir: out
//
// [ natural_size ] trans: nothing, dir: out
//
func (v Widget) GetPreferredSize(minimum_size Requisition, natural_size Requisition) {
	iv, err := _I.Get(3315, "Widget", "get_preferred_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_size := gi.NewPointerArgument(minimum_size.P)
	arg_natural_size := gi.NewPointerArgument(natural_size.P)
	args := []gi.Argument{arg_v, arg_minimum_size, arg_natural_size}
	iv.Call(args, nil, nil)
}

// gtk_widget_get_preferred_width
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v Widget) GetPreferredWidth() (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(3316, "Widget", "get_preferred_width")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_widget_get_preferred_width_for_height
//
// [ height ] trans: nothing
//
// [ minimum_width ] trans: everything, dir: out
//
// [ natural_width ] trans: everything, dir: out
//
func (v Widget) GetPreferredWidthForHeight(height int32) (minimum_width int32, natural_width int32) {
	iv, err := _I.Get(3317, "Widget", "get_preferred_width_for_height")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_height := gi.NewInt32Argument(height)
	arg_minimum_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_natural_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_height, arg_minimum_width, arg_natural_width}
	iv.Call(args, nil, &outArgs[0])
	minimum_width = outArgs[0].Int32()
	natural_width = outArgs[1].Int32()
	return
}

// gtk_widget_get_realized
//
// [ result ] trans: nothing
//
func (v Widget) GetRealized() (result bool) {
	iv, err := _I.Get(3318, "Widget", "get_realized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_receives_default
//
// [ result ] trans: nothing
//
func (v Widget) GetReceivesDefault() (result bool) {
	iv, err := _I.Get(3319, "Widget", "get_receives_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_request_mode
//
// [ result ] trans: nothing
//
func (v Widget) GetRequestMode() (result SizeRequestModeEnum) {
	iv, err := _I.Get(3320, "Widget", "get_request_mode")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SizeRequestModeEnum(ret.Int())
	return
}

// Deprecated
//
// gtk_widget_get_requisition
//
// [ requisition ] trans: nothing, dir: out
//
func (v Widget) GetRequisition(requisition Requisition) {
	iv, err := _I.Get(3321, "Widget", "get_requisition")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_requisition := gi.NewPointerArgument(requisition.P)
	args := []gi.Argument{arg_v, arg_requisition}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_get_root_window
//
// [ result ] trans: nothing
//
func (v Widget) GetRootWindow() (result gdk.Window) {
	iv, err := _I.Get(3322, "Widget", "get_root_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_scale_factor
//
// [ result ] trans: nothing
//
func (v Widget) GetScaleFactor() (result int32) {
	iv, err := _I.Get(3323, "Widget", "get_scale_factor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_get_screen
//
// [ result ] trans: nothing
//
func (v Widget) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(3324, "Widget", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_sensitive
//
// [ result ] trans: nothing
//
func (v Widget) GetSensitive() (result bool) {
	iv, err := _I.Get(3325, "Widget", "get_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_settings
//
// [ result ] trans: nothing
//
func (v Widget) GetSettings() (result Settings) {
	iv, err := _I.Get(3326, "Widget", "get_settings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_size_request
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v Widget) GetSizeRequest() (width int32, height int32) {
	iv, err := _I.Get(3327, "Widget", "get_size_request")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// Deprecated
//
// gtk_widget_get_state
//
// [ result ] trans: nothing
//
func (v Widget) GetState() (result StateTypeEnum) {
	iv, err := _I.Get(3328, "Widget", "get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateTypeEnum(ret.Int())
	return
}

// gtk_widget_get_state_flags
//
// [ result ] trans: nothing
//
func (v Widget) GetStateFlags() (result StateFlags) {
	iv, err := _I.Get(3329, "Widget", "get_state_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateFlags(ret.Int())
	return
}

// Deprecated
//
// gtk_widget_get_style
//
// [ result ] trans: nothing
//
func (v Widget) GetStyle() (result Style) {
	iv, err := _I.Get(3330, "Widget", "get_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_style_context
//
// [ result ] trans: nothing
//
func (v Widget) GetStyleContext() (result StyleContext) {
	iv, err := _I.Get(3331, "Widget", "get_style_context")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_support_multidevice
//
// [ result ] trans: nothing
//
func (v Widget) GetSupportMultidevice() (result bool) {
	iv, err := _I.Get(3332, "Widget", "get_support_multidevice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_template_child
//
// [ widget_type ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) GetTemplateChild(widget_type gi.GType, name string) (result g.Object) {
	iv, err := _I.Get(3333, "Widget", "get_template_child")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget_type := gi.NewUintArgument(uint(widget_type))
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_widget_type, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_tooltip_markup
//
// [ result ] trans: everything
//
func (v Widget) GetTooltipMarkup() (result string) {
	iv, err := _I.Get(3334, "Widget", "get_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_widget_get_tooltip_text
//
// [ result ] trans: everything
//
func (v Widget) GetTooltipText() (result string) {
	iv, err := _I.Get(3335, "Widget", "get_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_widget_get_tooltip_window
//
// [ result ] trans: nothing
//
func (v Widget) GetTooltipWindow() (result Window) {
	iv, err := _I.Get(3336, "Widget", "get_tooltip_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_toplevel
//
// [ result ] trans: nothing
//
func (v Widget) GetToplevel() (result Widget) {
	iv, err := _I.Get(3337, "Widget", "get_toplevel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_valign
//
// [ result ] trans: nothing
//
func (v Widget) GetValign() (result AlignEnum) {
	iv, err := _I.Get(3338, "Widget", "get_valign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = AlignEnum(ret.Int())
	return
}

// gtk_widget_get_valign_with_baseline
//
// [ result ] trans: nothing
//
func (v Widget) GetValignWithBaseline() (result AlignEnum) {
	iv, err := _I.Get(3339, "Widget", "get_valign_with_baseline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = AlignEnum(ret.Int())
	return
}

// gtk_widget_get_vexpand
//
// [ result ] trans: nothing
//
func (v Widget) GetVexpand() (result bool) {
	iv, err := _I.Get(3340, "Widget", "get_vexpand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_vexpand_set
//
// [ result ] trans: nothing
//
func (v Widget) GetVexpandSet() (result bool) {
	iv, err := _I.Get(3341, "Widget", "get_vexpand_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_visible
//
// [ result ] trans: nothing
//
func (v Widget) GetVisible() (result bool) {
	iv, err := _I.Get(3342, "Widget", "get_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_get_visual
//
// [ result ] trans: nothing
//
func (v Widget) GetVisual() (result gdk.Visual) {
	iv, err := _I.Get(3343, "Widget", "get_visual")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_get_window
//
// [ result ] trans: nothing
//
func (v Widget) GetWindow() (result gdk.Window) {
	iv, err := _I.Get(3344, "Widget", "get_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_grab_add
//
func (v Widget) GrabAdd() {
	iv, err := _I.Get(3345, "Widget", "grab_add")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_grab_default
//
func (v Widget) GrabDefault() {
	iv, err := _I.Get(3346, "Widget", "grab_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_grab_focus
//
func (v Widget) GrabFocus() {
	iv, err := _I.Get(3347, "Widget", "grab_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_grab_remove
//
func (v Widget) GrabRemove() {
	iv, err := _I.Get(3348, "Widget", "grab_remove")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_has_default
//
// [ result ] trans: nothing
//
func (v Widget) HasDefault() (result bool) {
	iv, err := _I.Get(3349, "Widget", "has_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_has_focus
//
// [ result ] trans: nothing
//
func (v Widget) HasFocus() (result bool) {
	iv, err := _I.Get(3350, "Widget", "has_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_has_grab
//
// [ result ] trans: nothing
//
func (v Widget) HasGrab() (result bool) {
	iv, err := _I.Get(3351, "Widget", "has_grab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_has_rc_style
//
// [ result ] trans: nothing
//
func (v Widget) HasRcStyle() (result bool) {
	iv, err := _I.Get(3352, "Widget", "has_rc_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_has_screen
//
// [ result ] trans: nothing
//
func (v Widget) HasScreen() (result bool) {
	iv, err := _I.Get(3353, "Widget", "has_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_has_visible_focus
//
// [ result ] trans: nothing
//
func (v Widget) HasVisibleFocus() (result bool) {
	iv, err := _I.Get(3354, "Widget", "has_visible_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_hide
//
func (v Widget) Hide() {
	iv, err := _I.Get(3355, "Widget", "hide")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_hide_on_delete
//
// [ result ] trans: nothing
//
func (v Widget) HideOnDelete() (result bool) {
	iv, err := _I.Get(3356, "Widget", "hide_on_delete")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_in_destruction
//
// [ result ] trans: nothing
//
func (v Widget) InDestruction() (result bool) {
	iv, err := _I.Get(3357, "Widget", "in_destruction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_init_template
//
func (v Widget) InitTemplate() {
	iv, err := _I.Get(3358, "Widget", "init_template")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_input_shape_combine_region
//
// [ region ] trans: nothing
//
func (v Widget) InputShapeCombineRegion(region cairo.Region) {
	iv, err := _I.Get(3359, "Widget", "input_shape_combine_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region := gi.NewPointerArgument(region.P)
	args := []gi.Argument{arg_v, arg_region}
	iv.Call(args, nil, nil)
}

// gtk_widget_insert_action_group
//
// [ name ] trans: nothing
//
// [ group ] trans: nothing
//
func (v Widget) InsertActionGroup(name string, group g.IActionGroup) {
	iv, err := _I.Get(3360, "Widget", "insert_action_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_ActionGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_name, arg_group}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_intersect
//
// [ area ] trans: nothing
//
// [ intersection ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Widget) Intersect(area gdk.Rectangle, intersection gdk.Rectangle) (result bool) {
	iv, err := _I.Get(3361, "Widget", "intersect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_area := gi.NewPointerArgument(area.P)
	arg_intersection := gi.NewPointerArgument(intersection.P)
	args := []gi.Argument{arg_v, arg_area, arg_intersection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_ancestor
//
// [ ancestor ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) IsAncestor(ancestor IWidget) (result bool) {
	iv, err := _I.Get(3362, "Widget", "is_ancestor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if ancestor != nil {
		tmp = ancestor.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ancestor := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_ancestor}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_is_composited
//
// [ result ] trans: nothing
//
func (v Widget) IsComposited() (result bool) {
	iv, err := _I.Get(3363, "Widget", "is_composited")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_drawable
//
// [ result ] trans: nothing
//
func (v Widget) IsDrawable() (result bool) {
	iv, err := _I.Get(3364, "Widget", "is_drawable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_focus
//
// [ result ] trans: nothing
//
func (v Widget) IsFocus() (result bool) {
	iv, err := _I.Get(3365, "Widget", "is_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_sensitive
//
// [ result ] trans: nothing
//
func (v Widget) IsSensitive() (result bool) {
	iv, err := _I.Get(3366, "Widget", "is_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_toplevel
//
// [ result ] trans: nothing
//
func (v Widget) IsToplevel() (result bool) {
	iv, err := _I.Get(3367, "Widget", "is_toplevel")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_is_visible
//
// [ result ] trans: nothing
//
func (v Widget) IsVisible() (result bool) {
	iv, err := _I.Get(3368, "Widget", "is_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_keynav_failed
//
// [ direction ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) KeynavFailed(direction DirectionTypeEnum) (result bool) {
	iv, err := _I.Get(3369, "Widget", "keynav_failed")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_v, arg_direction}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_list_accel_closures
//
// [ result ] trans: container
//
func (v Widget) ListAccelClosures() (result g.List) {
	iv, err := _I.Get(3370, "Widget", "list_accel_closures")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_list_action_prefixes
//
// [ result ] trans: container
//
func (v Widget) ListActionPrefixes() (result gi.CStrArray) {
	iv, err := _I.Get(3371, "Widget", "list_action_prefixes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// gtk_widget_list_mnemonic_labels
//
// [ result ] trans: container
//
func (v Widget) ListMnemonicLabels() (result g.List) {
	iv, err := _I.Get(3372, "Widget", "list_mnemonic_labels")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_map
//
func (v Widget) Map() {
	iv, err := _I.Get(3373, "Widget", "map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_mnemonic_activate
//
// [ group_cycling ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) MnemonicActivate(group_cycling bool) (result bool) {
	iv, err := _I.Get(3374, "Widget", "mnemonic_activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_cycling := gi.NewBoolArgument(group_cycling)
	args := []gi.Argument{arg_v, arg_group_cycling}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_modify_base
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) ModifyBase(state StateTypeEnum, color gdk.Color) {
	iv, err := _I.Get(3375, "Widget", "modify_base")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_bg
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) ModifyBg(state StateTypeEnum, color gdk.Color) {
	iv, err := _I.Get(3376, "Widget", "modify_bg")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_cursor
//
// [ primary ] trans: nothing
//
// [ secondary ] trans: nothing
//
func (v Widget) ModifyCursor(primary gdk.Color, secondary gdk.Color) {
	iv, err := _I.Get(3377, "Widget", "modify_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_primary := gi.NewPointerArgument(primary.P)
	arg_secondary := gi.NewPointerArgument(secondary.P)
	args := []gi.Argument{arg_v, arg_primary, arg_secondary}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_fg
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) ModifyFg(state StateTypeEnum, color gdk.Color) {
	iv, err := _I.Get(3378, "Widget", "modify_fg")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_font
//
// [ font_desc ] trans: nothing
//
func (v Widget) ModifyFont(font_desc pango.FontDescription) {
	iv, err := _I.Get(3379, "Widget", "modify_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_font_desc := gi.NewPointerArgument(font_desc.P)
	args := []gi.Argument{arg_v, arg_font_desc}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_style
//
// [ style ] trans: nothing
//
func (v Widget) ModifyStyle(style IRcStyle) {
	iv, err := _I.Get(3380, "Widget", "modify_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_RcStyle()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_modify_text
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) ModifyText(state StateTypeEnum, color gdk.Color) {
	iv, err := _I.Get(3381, "Widget", "modify_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_override_background_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) OverrideBackgroundColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(3382, "Widget", "override_background_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_override_color
//
// [ state ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) OverrideColor(state StateFlags, color gdk.RGBA) {
	iv, err := _I.Get(3383, "Widget", "override_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_state, arg_color}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_override_cursor
//
// [ cursor ] trans: nothing
//
// [ secondary_cursor ] trans: nothing
//
func (v Widget) OverrideCursor(cursor gdk.RGBA, secondary_cursor gdk.RGBA) {
	iv, err := _I.Get(3384, "Widget", "override_cursor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cursor := gi.NewPointerArgument(cursor.P)
	arg_secondary_cursor := gi.NewPointerArgument(secondary_cursor.P)
	args := []gi.Argument{arg_v, arg_cursor, arg_secondary_cursor}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_override_font
//
// [ font_desc ] trans: nothing
//
func (v Widget) OverrideFont(font_desc pango.FontDescription) {
	iv, err := _I.Get(3385, "Widget", "override_font")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_font_desc := gi.NewPointerArgument(font_desc.P)
	args := []gi.Argument{arg_v, arg_font_desc}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_override_symbolic_color
//
// [ name ] trans: nothing
//
// [ color ] trans: nothing
//
func (v Widget) OverrideSymbolicColor(name string, color gdk.RGBA) {
	iv, err := _I.Get(3386, "Widget", "override_symbolic_color")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_v, arg_name, arg_color}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_widget_path
//
// [ path_length ] trans: everything, dir: out
//
// [ path ] trans: everything, dir: out
//
// [ path_reversed ] trans: everything, dir: out
//
func (v Widget) Path() (path_length uint32, path string, path_reversed string) {
	iv, err := _I.Get(3387, "Widget", "path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_path_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_path_reversed := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_path_length, arg_path, arg_path_reversed}
	iv.Call(args, nil, &outArgs[0])
	path_length = outArgs[0].Uint32()
	path = outArgs[1].String().Take()
	path_reversed = outArgs[2].String().Take()
	return
}

// gtk_widget_queue_allocate
//
func (v Widget) QueueAllocate() {
	iv, err := _I.Get(3388, "Widget", "queue_allocate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_compute_expand
//
func (v Widget) QueueComputeExpand() {
	iv, err := _I.Get(3389, "Widget", "queue_compute_expand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_draw
//
func (v Widget) QueueDraw() {
	iv, err := _I.Get(3390, "Widget", "queue_draw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_draw_area
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Widget) QueueDrawArea(x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3391, "Widget", "queue_draw_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_draw_region
//
// [ region ] trans: nothing
//
func (v Widget) QueueDrawRegion(region cairo.Region) {
	iv, err := _I.Get(3392, "Widget", "queue_draw_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region := gi.NewPointerArgument(region.P)
	args := []gi.Argument{arg_v, arg_region}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_resize
//
func (v Widget) QueueResize() {
	iv, err := _I.Get(3393, "Widget", "queue_resize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_queue_resize_no_redraw
//
func (v Widget) QueueResizeNoRedraw() {
	iv, err := _I.Get(3394, "Widget", "queue_resize_no_redraw")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_realize
//
func (v Widget) Realize() {
	iv, err := _I.Get(3395, "Widget", "realize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_region_intersect
//
// [ region ] trans: nothing
//
// [ result ] trans: everything
//
func (v Widget) RegionIntersect(region cairo.Region) (result cairo.Region) {
	iv, err := _I.Get(3396, "Widget", "region_intersect")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region := gi.NewPointerArgument(region.P)
	args := []gi.Argument{arg_v, arg_region}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_register_window
//
// [ window ] trans: nothing
//
func (v Widget) RegisterWindow(window gdk.IWindow) {
	iv, err := _I.Get(3397, "Widget", "register_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_remove_accelerator
//
// [ accel_group ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) RemoveAccelerator(accel_group IAccelGroup, accel_key uint32, accel_mods gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3398, "Widget", "remove_accelerator")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	args := []gi.Argument{arg_v, arg_accel_group, arg_accel_key, arg_accel_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_remove_mnemonic_label
//
// [ label ] trans: nothing
//
func (v Widget) RemoveMnemonicLabel(label IWidget) {
	iv, err := _I.Get(3399, "Widget", "remove_mnemonic_label")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if label != nil {
		tmp = label.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
}

// gtk_widget_remove_tick_callback
//
// [ id ] trans: nothing
//
func (v Widget) RemoveTickCallback(id uint32) {
	iv, err := _I.Get(3400, "Widget", "remove_tick_callback")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewUint32Argument(id)
	args := []gi.Argument{arg_v, arg_id}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_render_icon
//
// [ stock_id ] trans: nothing
//
// [ size ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ result ] trans: everything
//
func (v Widget) RenderIcon(stock_id string, size int32, detail string) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(3401, "Widget", "render_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	c_detail := gi.CString(detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_size := gi.NewInt32Argument(size)
	arg_detail := gi.NewStringArgument(c_detail)
	args := []gi.Argument{arg_v, arg_stock_id, arg_size, arg_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	gi.Free(c_detail)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_widget_render_icon_pixbuf
//
// [ stock_id ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func (v Widget) RenderIconPixbuf(stock_id string, size int32) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(3402, "Widget", "render_icon_pixbuf")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_v, arg_stock_id, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_widget_reparent
//
// [ new_parent ] trans: nothing
//
func (v Widget) Reparent(new_parent IWidget) {
	iv, err := _I.Get(3403, "Widget", "reparent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if new_parent != nil {
		tmp = new_parent.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_new_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_new_parent}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_reset_rc_styles
//
func (v Widget) ResetRcStyles() {
	iv, err := _I.Get(3404, "Widget", "reset_rc_styles")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_reset_style
//
func (v Widget) ResetStyle() {
	iv, err := _I.Get(3405, "Widget", "reset_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_send_expose
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) SendExpose(event gdk.Event) (result int32) {
	iv, err := _I.Get(3406, "Widget", "send_expose")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_send_focus_change
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Widget) SendFocusChange(event gdk.Event) (result bool) {
	iv, err := _I.Get(3407, "Widget", "send_focus_change")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_set_accel_path
//
// [ accel_path ] trans: nothing
//
// [ accel_group ] trans: nothing
//
func (v Widget) SetAccelPath(accel_path string, accel_group IAccelGroup) {
	iv, err := _I.Get(3408, "Widget", "set_accel_path")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_accel_path := gi.CString(accel_path)
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_path := gi.NewStringArgument(c_accel_path)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_path, arg_accel_group}
	iv.Call(args, nil, nil)
	gi.Free(c_accel_path)
}

// gtk_widget_set_allocation
//
// [ allocation ] trans: nothing
//
func (v Widget) SetAllocation(allocation gdk.Rectangle) {
	iv, err := _I.Get(3409, "Widget", "set_allocation")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	args := []gi.Argument{arg_v, arg_allocation}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_app_paintable
//
// [ app_paintable ] trans: nothing
//
func (v Widget) SetAppPaintable(app_paintable bool) {
	iv, err := _I.Get(3410, "Widget", "set_app_paintable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_app_paintable := gi.NewBoolArgument(app_paintable)
	args := []gi.Argument{arg_v, arg_app_paintable}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_can_default
//
// [ can_default ] trans: nothing
//
func (v Widget) SetCanDefault(can_default bool) {
	iv, err := _I.Get(3411, "Widget", "set_can_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_can_default := gi.NewBoolArgument(can_default)
	args := []gi.Argument{arg_v, arg_can_default}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_can_focus
//
// [ can_focus ] trans: nothing
//
func (v Widget) SetCanFocus(can_focus bool) {
	iv, err := _I.Get(3412, "Widget", "set_can_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_can_focus := gi.NewBoolArgument(can_focus)
	args := []gi.Argument{arg_v, arg_can_focus}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_child_visible
//
// [ is_visible ] trans: nothing
//
func (v Widget) SetChildVisible(is_visible bool) {
	iv, err := _I.Get(3413, "Widget", "set_child_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_visible := gi.NewBoolArgument(is_visible)
	args := []gi.Argument{arg_v, arg_is_visible}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_clip
//
// [ clip ] trans: nothing
//
func (v Widget) SetClip(clip gdk.Rectangle) {
	iv, err := _I.Get(3414, "Widget", "set_clip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_clip := gi.NewPointerArgument(clip.P)
	args := []gi.Argument{arg_v, arg_clip}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_composite_name
//
// [ name ] trans: nothing
//
func (v Widget) SetCompositeName(name string) {
	iv, err := _I.Get(3415, "Widget", "set_composite_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_set_device_enabled
//
// [ device ] trans: nothing
//
// [ enabled ] trans: nothing
//
func (v Widget) SetDeviceEnabled(device gdk.IDevice, enabled bool) {
	iv, err := _I.Get(3416, "Widget", "set_device_enabled")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_device, arg_enabled}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_device_events
//
// [ device ] trans: nothing
//
// [ events ] trans: nothing
//
func (v Widget) SetDeviceEvents(device gdk.IDevice, events gdk.EventMaskFlags) {
	iv, err := _I.Get(3417, "Widget", "set_device_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	arg_events := gi.NewIntArgument(int(events))
	args := []gi.Argument{arg_v, arg_device, arg_events}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_direction
//
// [ dir ] trans: nothing
//
func (v Widget) SetDirection(dir TextDirectionEnum) {
	iv, err := _I.Get(3418, "Widget", "set_direction")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_dir := gi.NewIntArgument(int(dir))
	args := []gi.Argument{arg_v, arg_dir}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_double_buffered
//
// [ double_buffered ] trans: nothing
//
func (v Widget) SetDoubleBuffered(double_buffered bool) {
	iv, err := _I.Get(3419, "Widget", "set_double_buffered")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_double_buffered := gi.NewBoolArgument(double_buffered)
	args := []gi.Argument{arg_v, arg_double_buffered}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_events
//
// [ events ] trans: nothing
//
func (v Widget) SetEvents(events int32) {
	iv, err := _I.Get(3420, "Widget", "set_events")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_events := gi.NewInt32Argument(events)
	args := []gi.Argument{arg_v, arg_events}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_focus_on_click
//
// [ focus_on_click ] trans: nothing
//
func (v Widget) SetFocusOnClick(focus_on_click bool) {
	iv, err := _I.Get(3421, "Widget", "set_focus_on_click")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focus_on_click := gi.NewBoolArgument(focus_on_click)
	args := []gi.Argument{arg_v, arg_focus_on_click}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_font_map
//
// [ font_map ] trans: nothing
//
func (v Widget) SetFontMap(font_map pango.IFontMap) {
	iv, err := _I.Get(3422, "Widget", "set_font_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if font_map != nil {
		tmp = font_map.P_FontMap()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_font_map := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_font_map}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_font_options
//
// [ options ] trans: nothing
//
func (v Widget) SetFontOptions(options cairo.FontOptions) {
	iv, err := _I.Get(3423, "Widget", "set_font_options")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_options := gi.NewPointerArgument(options.P)
	args := []gi.Argument{arg_v, arg_options}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_halign
//
// [ align ] trans: nothing
//
func (v Widget) SetHalign(align AlignEnum) {
	iv, err := _I.Get(3424, "Widget", "set_halign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_align := gi.NewIntArgument(int(align))
	args := []gi.Argument{arg_v, arg_align}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_has_tooltip
//
// [ has_tooltip ] trans: nothing
//
func (v Widget) SetHasTooltip(has_tooltip bool) {
	iv, err := _I.Get(3425, "Widget", "set_has_tooltip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_tooltip := gi.NewBoolArgument(has_tooltip)
	args := []gi.Argument{arg_v, arg_has_tooltip}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_has_window
//
// [ has_window ] trans: nothing
//
func (v Widget) SetHasWindow(has_window bool) {
	iv, err := _I.Get(3426, "Widget", "set_has_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_has_window := gi.NewBoolArgument(has_window)
	args := []gi.Argument{arg_v, arg_has_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_hexpand
//
// [ expand ] trans: nothing
//
func (v Widget) SetHexpand(expand bool) {
	iv, err := _I.Get(3427, "Widget", "set_hexpand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_hexpand_set
//
// [ set ] trans: nothing
//
func (v Widget) SetHexpandSet(set bool) {
	iv, err := _I.Get(3428, "Widget", "set_hexpand_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_set := gi.NewBoolArgument(set)
	args := []gi.Argument{arg_v, arg_set}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_mapped
//
// [ mapped ] trans: nothing
//
func (v Widget) SetMapped(mapped bool) {
	iv, err := _I.Get(3429, "Widget", "set_mapped")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mapped := gi.NewBoolArgument(mapped)
	args := []gi.Argument{arg_v, arg_mapped}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_margin_bottom
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginBottom(margin int32) {
	iv, err := _I.Get(3430, "Widget", "set_margin_bottom")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_margin_end
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginEnd(margin int32) {
	iv, err := _I.Get(3431, "Widget", "set_margin_end")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_margin_left
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginLeft(margin int32) {
	iv, err := _I.Get(3432, "Widget", "set_margin_left")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_margin_right
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginRight(margin int32) {
	iv, err := _I.Get(3433, "Widget", "set_margin_right")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_margin_start
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginStart(margin int32) {
	iv, err := _I.Get(3434, "Widget", "set_margin_start")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_margin_top
//
// [ margin ] trans: nothing
//
func (v Widget) SetMarginTop(margin int32) {
	iv, err := _I.Get(3435, "Widget", "set_margin_top")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_margin := gi.NewInt32Argument(margin)
	args := []gi.Argument{arg_v, arg_margin}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_name
//
// [ name ] trans: nothing
//
func (v Widget) SetName(name string) {
	iv, err := _I.Get(3436, "Widget", "set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_set_no_show_all
//
// [ no_show_all ] trans: nothing
//
func (v Widget) SetNoShowAll(no_show_all bool) {
	iv, err := _I.Get(3437, "Widget", "set_no_show_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_no_show_all := gi.NewBoolArgument(no_show_all)
	args := []gi.Argument{arg_v, arg_no_show_all}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_opacity
//
// [ opacity ] trans: nothing
//
func (v Widget) SetOpacity(opacity float64) {
	iv, err := _I.Get(3438, "Widget", "set_opacity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_opacity := gi.NewDoubleArgument(opacity)
	args := []gi.Argument{arg_v, arg_opacity}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_parent
//
// [ parent ] trans: nothing
//
func (v Widget) SetParent(parent IWidget) {
	iv, err := _I.Get(3439, "Widget", "set_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_parent_window
//
// [ parent_window ] trans: nothing
//
func (v Widget) SetParentWindow(parent_window gdk.IWindow) {
	iv, err := _I.Get(3440, "Widget", "set_parent_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent_window != nil {
		tmp = parent_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_realized
//
// [ realized ] trans: nothing
//
func (v Widget) SetRealized(realized bool) {
	iv, err := _I.Get(3441, "Widget", "set_realized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_realized := gi.NewBoolArgument(realized)
	args := []gi.Argument{arg_v, arg_realized}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_receives_default
//
// [ receives_default ] trans: nothing
//
func (v Widget) SetReceivesDefault(receives_default bool) {
	iv, err := _I.Get(3442, "Widget", "set_receives_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_receives_default := gi.NewBoolArgument(receives_default)
	args := []gi.Argument{arg_v, arg_receives_default}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_redraw_on_allocate
//
// [ redraw_on_allocate ] trans: nothing
//
func (v Widget) SetRedrawOnAllocate(redraw_on_allocate bool) {
	iv, err := _I.Get(3443, "Widget", "set_redraw_on_allocate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_redraw_on_allocate := gi.NewBoolArgument(redraw_on_allocate)
	args := []gi.Argument{arg_v, arg_redraw_on_allocate}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_sensitive
//
// [ sensitive ] trans: nothing
//
func (v Widget) SetSensitive(sensitive bool) {
	iv, err := _I.Get(3444, "Widget", "set_sensitive")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sensitive := gi.NewBoolArgument(sensitive)
	args := []gi.Argument{arg_v, arg_sensitive}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_size_request
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Widget) SetSizeRequest(width int32, height int32) {
	iv, err := _I.Get(3445, "Widget", "set_size_request")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_state
//
// [ state ] trans: nothing
//
func (v Widget) SetState(state StateTypeEnum) {
	iv, err := _I.Get(3446, "Widget", "set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_state_flags
//
// [ flags ] trans: nothing
//
// [ clear ] trans: nothing
//
func (v Widget) SetStateFlags(flags StateFlags, clear bool) {
	iv, err := _I.Get(3447, "Widget", "set_state_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_clear := gi.NewBoolArgument(clear)
	args := []gi.Argument{arg_v, arg_flags, arg_clear}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_set_style
//
// [ style ] trans: nothing
//
func (v Widget) SetStyle(style IStyle) {
	iv, err := _I.Get(3448, "Widget", "set_style")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_style := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_style}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_support_multidevice
//
// [ support_multidevice ] trans: nothing
//
func (v Widget) SetSupportMultidevice(support_multidevice bool) {
	iv, err := _I.Get(3449, "Widget", "set_support_multidevice")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_support_multidevice := gi.NewBoolArgument(support_multidevice)
	args := []gi.Argument{arg_v, arg_support_multidevice}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_tooltip_markup
//
// [ markup ] trans: nothing
//
func (v Widget) SetTooltipMarkup(markup string) {
	iv, err := _I.Get(3450, "Widget", "set_tooltip_markup")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_markup := gi.CString(markup)
	arg_v := gi.NewPointerArgument(v.P)
	arg_markup := gi.NewStringArgument(c_markup)
	args := []gi.Argument{arg_v, arg_markup}
	iv.Call(args, nil, nil)
	gi.Free(c_markup)
}

// gtk_widget_set_tooltip_text
//
// [ text ] trans: nothing
//
func (v Widget) SetTooltipText(text string) {
	iv, err := _I.Get(3451, "Widget", "set_tooltip_text")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_text := gi.CString(text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_text := gi.NewStringArgument(c_text)
	args := []gi.Argument{arg_v, arg_text}
	iv.Call(args, nil, nil)
	gi.Free(c_text)
}

// gtk_widget_set_tooltip_window
//
// [ custom_window ] trans: nothing
//
func (v Widget) SetTooltipWindow(custom_window IWindow) {
	iv, err := _I.Get(3452, "Widget", "set_tooltip_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if custom_window != nil {
		tmp = custom_window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_custom_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_custom_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_valign
//
// [ align ] trans: nothing
//
func (v Widget) SetValign(align AlignEnum) {
	iv, err := _I.Get(3453, "Widget", "set_valign")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_align := gi.NewIntArgument(int(align))
	args := []gi.Argument{arg_v, arg_align}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_vexpand
//
// [ expand ] trans: nothing
//
func (v Widget) SetVexpand(expand bool) {
	iv, err := _I.Get(3454, "Widget", "set_vexpand")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_expand := gi.NewBoolArgument(expand)
	args := []gi.Argument{arg_v, arg_expand}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_vexpand_set
//
// [ set ] trans: nothing
//
func (v Widget) SetVexpandSet(set bool) {
	iv, err := _I.Get(3455, "Widget", "set_vexpand_set")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_set := gi.NewBoolArgument(set)
	args := []gi.Argument{arg_v, arg_set}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_visible
//
// [ visible ] trans: nothing
//
func (v Widget) SetVisible(visible bool) {
	iv, err := _I.Get(3456, "Widget", "set_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visible := gi.NewBoolArgument(visible)
	args := []gi.Argument{arg_v, arg_visible}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_visual
//
// [ visual ] trans: nothing
//
func (v Widget) SetVisual(visual gdk.IVisual) {
	iv, err := _I.Get(3457, "Widget", "set_visual")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if visual != nil {
		tmp = visual.P_Visual()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_visual := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_visual}
	iv.Call(args, nil, nil)
}

// gtk_widget_set_window
//
// [ window ] trans: everything
//
func (v Widget) SetWindow(window gdk.IWindow) {
	iv, err := _I.Get(3458, "Widget", "set_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_shape_combine_region
//
// [ region ] trans: nothing
//
func (v Widget) ShapeCombineRegion(region cairo.Region) {
	iv, err := _I.Get(3459, "Widget", "shape_combine_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_region := gi.NewPointerArgument(region.P)
	args := []gi.Argument{arg_v, arg_region}
	iv.Call(args, nil, nil)
}

// gtk_widget_show
//
func (v Widget) Show() {
	iv, err := _I.Get(3460, "Widget", "show")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_show_all
//
func (v Widget) ShowAll() {
	iv, err := _I.Get(3461, "Widget", "show_all")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_show_now
//
func (v Widget) ShowNow() {
	iv, err := _I.Get(3462, "Widget", "show_now")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_size_allocate
//
// [ allocation ] trans: nothing
//
func (v Widget) SizeAllocate(allocation gdk.Rectangle) {
	iv, err := _I.Get(3463, "Widget", "size_allocate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	args := []gi.Argument{arg_v, arg_allocation}
	iv.Call(args, nil, nil)
}

// gtk_widget_size_allocate_with_baseline
//
// [ allocation ] trans: nothing
//
// [ baseline ] trans: nothing
//
func (v Widget) SizeAllocateWithBaseline(allocation gdk.Rectangle, baseline int32) {
	iv, err := _I.Get(3464, "Widget", "size_allocate_with_baseline")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allocation := gi.NewPointerArgument(allocation.P)
	arg_baseline := gi.NewInt32Argument(baseline)
	args := []gi.Argument{arg_v, arg_allocation, arg_baseline}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_size_request
//
// [ requisition ] trans: nothing, dir: out
//
func (v Widget) SizeRequest(requisition Requisition) {
	iv, err := _I.Get(3465, "Widget", "size_request")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_requisition := gi.NewPointerArgument(requisition.P)
	args := []gi.Argument{arg_v, arg_requisition}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_style_attach
//
func (v Widget) StyleAttach() {
	iv, err := _I.Get(3466, "Widget", "style_attach")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_style_get_property
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v Widget) StyleGetProperty(property_name string, value g.Value) {
	iv, err := _I.Get(3467, "Widget", "style_get_property")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// gtk_widget_thaw_child_notify
//
func (v Widget) ThawChildNotify() {
	iv, err := _I.Get(3468, "Widget", "thaw_child_notify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_translate_coordinates
//
// [ dest_widget ] trans: nothing
//
// [ src_x ] trans: nothing
//
// [ src_y ] trans: nothing
//
// [ dest_x ] trans: everything, dir: out
//
// [ dest_y ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Widget) TranslateCoordinates(dest_widget IWidget, src_x int32, src_y int32) (result bool, dest_x int32, dest_y int32) {
	iv, err := _I.Get(3469, "Widget", "translate_coordinates")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if dest_widget != nil {
		tmp = dest_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_dest_widget := gi.NewPointerArgument(tmp)
	arg_src_x := gi.NewInt32Argument(src_x)
	arg_src_y := gi.NewInt32Argument(src_y)
	arg_dest_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_dest_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_dest_widget, arg_src_x, arg_src_y, arg_dest_x, arg_dest_y}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	dest_x = outArgs[0].Int32()
	dest_y = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// gtk_widget_trigger_tooltip_query
//
func (v Widget) TriggerTooltipQuery() {
	iv, err := _I.Get(3470, "Widget", "trigger_tooltip_query")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_unmap
//
func (v Widget) Unmap() {
	iv, err := _I.Get(3471, "Widget", "unmap")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_unparent
//
func (v Widget) Unparent() {
	iv, err := _I.Get(3472, "Widget", "unparent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_unrealize
//
func (v Widget) Unrealize() {
	iv, err := _I.Get(3473, "Widget", "unrealize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_unregister_window
//
// [ window ] trans: nothing
//
func (v Widget) UnregisterWindow(window gdk.IWindow) {
	iv, err := _I.Get(3474, "Widget", "unregister_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_widget_unset_state_flags
//
// [ flags ] trans: nothing
//
func (v Widget) UnsetStateFlags(flags StateFlags) {
	iv, err := _I.Get(3475, "Widget", "unset_state_flags")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// Object WidgetAccessible
type WidgetAccessible struct {
	atk.ComponentIfc
	Accessible
}

func WrapWidgetAccessible(p unsafe.Pointer) (r WidgetAccessible) { r.P = p; return }

type IWidgetAccessible interface{ P_WidgetAccessible() unsafe.Pointer }

func (v WidgetAccessible) P_WidgetAccessible() unsafe.Pointer { return v.P }
func (v WidgetAccessible) P_Component() unsafe.Pointer        { return v.P }
func WidgetAccessibleGetType() gi.GType {
	ret := _I.GetGType(638, "WidgetAccessible")
	return ret
}

// ignore GType struct WidgetAccessibleClass

// Struct WidgetAccessiblePrivate
type WidgetAccessiblePrivate struct {
	P unsafe.Pointer
}

func WidgetAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(639, "WidgetAccessiblePrivate")
	return ret
}

// ignore GType struct WidgetClass

// Struct WidgetClassPrivate
type WidgetClassPrivate struct {
	P unsafe.Pointer
}

func WidgetClassPrivateGetType() gi.GType {
	ret := _I.GetGType(640, "WidgetClassPrivate")
	return ret
}

// Enum WidgetHelpType
type WidgetHelpTypeEnum int

const (
	WidgetHelpTypeTooltip   WidgetHelpTypeEnum = 0
	WidgetHelpTypeWhatsThis WidgetHelpTypeEnum = 1
)

func WidgetHelpTypeGetType() gi.GType {
	ret := _I.GetGType(641, "WidgetHelpType")
	return ret
}

// Struct WidgetPath
type WidgetPath struct {
	P unsafe.Pointer
}

func WidgetPathGetType() gi.GType {
	ret := _I.GetGType(642, "WidgetPath")
	return ret
}

// gtk_widget_path_new
//
// [ result ] trans: everything
//
func NewWidgetPath() (result WidgetPath) {
	iv, err := _I.Get(3476, "WidgetPath", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_path_append_for_widget
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) AppendForWidget(widget IWidget) (result int32) {
	iv, err := _I.Get(3477, "WidgetPath", "append_for_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_path_append_type
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) AppendType(type1 gi.GType) (result int32) {
	iv, err := _I.Get(3478, "WidgetPath", "append_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_path_append_with_siblings
//
// [ siblings ] trans: nothing
//
// [ sibling_index ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) AppendWithSiblings(siblings WidgetPath, sibling_index uint32) (result int32) {
	iv, err := _I.Get(3479, "WidgetPath", "append_with_siblings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_siblings := gi.NewPointerArgument(siblings.P)
	arg_sibling_index := gi.NewUint32Argument(sibling_index)
	args := []gi.Argument{arg_v, arg_siblings, arg_sibling_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_path_copy
//
// [ result ] trans: everything
//
func (v WidgetPath) Copy() (result WidgetPath) {
	iv, err := _I.Get(3480, "WidgetPath", "copy")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_path_free
//
func (v WidgetPath) Free() {
	iv, err := _I.Get(3481, "WidgetPath", "free")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_widget_path_get_object_type
//
// [ result ] trans: nothing
//
func (v WidgetPath) GetObjectType() (result gi.GType) {
	iv, err := _I.Get(3482, "WidgetPath", "get_object_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// gtk_widget_path_has_parent
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) HasParent(type1 gi.GType) (result bool) {
	iv, err := _I.Get(3483, "WidgetPath", "has_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_path_is_type
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IsType(type1 gi.GType) (result bool) {
	iv, err := _I.Get(3484, "WidgetPath", "is_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_path_iter_add_class
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
func (v WidgetPath) IterAddClass(pos int32, name string) {
	iv, err := _I.Get(3485, "WidgetPath", "iter_add_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_widget_path_iter_add_region
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: nothing
//
func (v WidgetPath) IterAddRegion(pos int32, name string, flags RegionFlags) {
	iv, err := _I.Get(3486, "WidgetPath", "iter_add_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_pos, arg_name, arg_flags}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_path_iter_clear_classes
//
// [ pos ] trans: nothing
//
func (v WidgetPath) IterClearClasses(pos int32) {
	iv, err := _I.Get(3487, "WidgetPath", "iter_clear_classes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_widget_path_iter_clear_regions
//
// [ pos ] trans: nothing
//
func (v WidgetPath) IterClearRegions(pos int32) {
	iv, err := _I.Get(3488, "WidgetPath", "iter_clear_regions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	iv.Call(args, nil, nil)
}

// gtk_widget_path_iter_get_name
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetName(pos int32) (result string) {
	iv, err := _I.Get(3489, "WidgetPath", "iter_get_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_widget_path_iter_get_object_name
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetObjectName(pos int32) (result string) {
	iv, err := _I.Get(3490, "WidgetPath", "iter_get_object_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_widget_path_iter_get_object_type
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetObjectType(pos int32) (result gi.GType) {
	iv, err := _I.Get(3491, "WidgetPath", "iter_get_object_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// gtk_widget_path_iter_get_sibling_index
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetSiblingIndex(pos int32) (result uint32) {
	iv, err := _I.Get(3492, "WidgetPath", "iter_get_sibling_index")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_widget_path_iter_get_siblings
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetSiblings(pos int32) (result WidgetPath) {
	iv, err := _I.Get(3493, "WidgetPath", "iter_get_siblings")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_path_iter_get_state
//
// [ pos ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterGetState(pos int32) (result StateFlags) {
	iv, err := _I.Get(3494, "WidgetPath", "iter_get_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateFlags(ret.Int())
	return
}

// gtk_widget_path_iter_has_class
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasClass(pos int32, name string) (result bool) {
	iv, err := _I.Get(3495, "WidgetPath", "iter_has_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// gtk_widget_path_iter_has_name
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasName(pos int32, name string) (result bool) {
	iv, err := _I.Get(3496, "WidgetPath", "iter_has_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// gtk_widget_path_iter_has_qclass
//
// [ pos ] trans: nothing
//
// [ qname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasQclass(pos int32, qname uint32) (result bool) {
	iv, err := _I.Get(3497, "WidgetPath", "iter_has_qclass")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_qname := gi.NewUint32Argument(qname)
	args := []gi.Argument{arg_v, arg_pos, arg_qname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_widget_path_iter_has_qname
//
// [ pos ] trans: nothing
//
// [ qname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasQname(pos int32, qname uint32) (result bool) {
	iv, err := _I.Get(3498, "WidgetPath", "iter_has_qname")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_qname := gi.NewUint32Argument(qname)
	args := []gi.Argument{arg_v, arg_pos, arg_qname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_path_iter_has_qregion
//
// [ pos ] trans: nothing
//
// [ qname ] trans: nothing
//
// [ flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasQregion(pos int32, qname uint32) (result bool, flags RegionFlags) {
	iv, err := _I.Get(3499, "WidgetPath", "iter_has_qregion")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_qname := gi.NewUint32Argument(qname)
	arg_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_pos, arg_qname, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	flags = RegionFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_widget_path_iter_has_region
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v WidgetPath) IterHasRegion(pos int32, name string) (result bool, flags RegionFlags) {
	iv, err := _I.Get(3500, "WidgetPath", "iter_has_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_pos, arg_name, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	flags = RegionFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// gtk_widget_path_iter_list_classes
//
// [ pos ] trans: nothing
//
// [ result ] trans: container
//
func (v WidgetPath) IterListClasses(pos int32) (result g.SList) {
	iv, err := _I.Get(3501, "WidgetPath", "iter_list_classes")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_widget_path_iter_list_regions
//
// [ pos ] trans: nothing
//
// [ result ] trans: container
//
func (v WidgetPath) IterListRegions(pos int32) (result g.SList) {
	iv, err := _I.Get(3502, "WidgetPath", "iter_list_regions")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	args := []gi.Argument{arg_v, arg_pos}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_path_iter_remove_class
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
func (v WidgetPath) IterRemoveClass(pos int32, name string) {
	iv, err := _I.Get(3503, "WidgetPath", "iter_remove_class")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// Deprecated
//
// gtk_widget_path_iter_remove_region
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
func (v WidgetPath) IterRemoveRegion(pos int32, name string) {
	iv, err := _I.Get(3504, "WidgetPath", "iter_remove_region")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_path_iter_set_name
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
func (v WidgetPath) IterSetName(pos int32, name string) {
	iv, err := _I.Get(3505, "WidgetPath", "iter_set_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_path_iter_set_object_name
//
// [ pos ] trans: nothing
//
// [ name ] trans: nothing
//
func (v WidgetPath) IterSetObjectName(pos int32, name string) {
	iv, err := _I.Get(3506, "WidgetPath", "iter_set_object_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_pos, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_widget_path_iter_set_object_type
//
// [ pos ] trans: nothing
//
// [ type1 ] trans: nothing
//
func (v WidgetPath) IterSetObjectType(pos int32, type1 gi.GType) {
	iv, err := _I.Get(3507, "WidgetPath", "iter_set_object_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_pos, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_widget_path_iter_set_state
//
// [ pos ] trans: nothing
//
// [ state ] trans: nothing
//
func (v WidgetPath) IterSetState(pos int32, state StateFlags) {
	iv, err := _I.Get(3508, "WidgetPath", "iter_set_state")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pos := gi.NewInt32Argument(pos)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_pos, arg_state}
	iv.Call(args, nil, nil)
}

// gtk_widget_path_length
//
// [ result ] trans: nothing
//
func (v WidgetPath) Length() (result int32) {
	iv, err := _I.Get(3509, "WidgetPath", "length")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_widget_path_prepend_type
//
// [ type1 ] trans: nothing
//
func (v WidgetPath) PrependType(type1 gi.GType) {
	iv, err := _I.Get(3510, "WidgetPath", "prepend_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// gtk_widget_path_ref
//
// [ result ] trans: everything
//
func (v WidgetPath) Ref() (result WidgetPath) {
	iv, err := _I.Get(3511, "WidgetPath", "ref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_widget_path_to_string
//
// [ result ] trans: everything
//
func (v WidgetPath) ToString() (result string) {
	iv, err := _I.Get(3512, "WidgetPath", "to_string")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_widget_path_unref
//
func (v WidgetPath) Unref() {
	iv, err := _I.Get(3513, "WidgetPath", "unref")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct WidgetPrivate
type WidgetPrivate struct {
	P unsafe.Pointer
}

func WidgetPrivateGetType() gi.GType {
	ret := _I.GetGType(643, "WidgetPrivate")
	return ret
}

// Object Window
type Window struct {
	atk.ImplementorIfaceIfc
	BuildableIfc
	Bin
}

func WrapWindow(p unsafe.Pointer) (r Window) { r.P = p; return }

type IWindow interface{ P_Window() unsafe.Pointer }

func (v Window) P_Window() unsafe.Pointer           { return v.P }
func (v Window) P_ImplementorIface() unsafe.Pointer { return v.P }
func (v Window) P_Buildable() unsafe.Pointer        { return v.P }
func WindowGetType() gi.GType {
	ret := _I.GetGType(644, "Window")
	return ret
}

// gtk_window_new
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func NewWindow(type1 WindowTypeEnum) (result Window) {
	iv, err := _I.Get(3514, "Window", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_set_auto_startup_notification
//
// [ setting ] trans: nothing
//
func WindowSetAutoStartupNotification1(setting bool) {
	iv, err := _I.Get(3518, "Window", "set_auto_startup_notification")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_default_icon
//
// [ icon ] trans: nothing
//
func WindowSetDefaultIcon1(icon gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(3519, "Window", "set_default_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Pixbuf()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_icon}
	iv.Call(args, nil, nil)
}

// gtk_window_set_default_icon_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func WindowSetDefaultIconFromFile1(filename string) (result bool, err error) {
	iv, err := _I.Get(3520, "Window", "set_default_icon_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_window_set_default_icon_list
//
// [ list ] trans: container
//
func WindowSetDefaultIconList1(list g.List) {
	iv, err := _I.Get(3521, "Window", "set_default_icon_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_list := gi.NewPointerArgument(list.P)
	args := []gi.Argument{arg_list}
	iv.Call(args, nil, nil)
}

// gtk_window_set_default_icon_name
//
// [ name ] trans: nothing
//
func WindowSetDefaultIconName1(name string) {
	iv, err := _I.Get(3522, "Window", "set_default_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_window_set_interactive_debugging
//
// [ enable ] trans: nothing
//
func WindowSetInteractiveDebugging1(enable bool) {
	iv, err := _I.Get(3523, "Window", "set_interactive_debugging")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_enable := gi.NewBoolArgument(enable)
	args := []gi.Argument{arg_enable}
	iv.Call(args, nil, nil)
}

// gtk_window_activate_default
//
// [ result ] trans: nothing
//
func (v Window) ActivateDefault() (result bool) {
	iv, err := _I.Get(3524, "Window", "activate_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_activate_focus
//
// [ result ] trans: nothing
//
func (v Window) ActivateFocus() (result bool) {
	iv, err := _I.Get(3525, "Window", "activate_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_activate_key
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Window) ActivateKey(event gdk.EventKey) (result bool) {
	iv, err := _I.Get(3526, "Window", "activate_key")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_add_accel_group
//
// [ accel_group ] trans: nothing
//
func (v Window) AddAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(3527, "Window", "add_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// gtk_window_add_mnemonic
//
// [ keyval ] trans: nothing
//
// [ target ] trans: nothing
//
func (v Window) AddMnemonic(keyval uint32, target IWidget) {
	iv, err := _I.Get(3528, "Window", "add_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if target != nil {
		tmp = target.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_target := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_keyval, arg_target}
	iv.Call(args, nil, nil)
}

// gtk_window_begin_move_drag
//
// [ button ] trans: nothing
//
// [ root_x ] trans: nothing
//
// [ root_y ] trans: nothing
//
// [ timestamp ] trans: nothing
//
func (v Window) BeginMoveDrag(button int32, root_x int32, root_y int32, timestamp uint32) {
	iv, err := _I.Get(3529, "Window", "begin_move_drag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_button := gi.NewInt32Argument(button)
	arg_root_x := gi.NewInt32Argument(root_x)
	arg_root_y := gi.NewInt32Argument(root_y)
	arg_timestamp := gi.NewUint32Argument(timestamp)
	args := []gi.Argument{arg_v, arg_button, arg_root_x, arg_root_y, arg_timestamp}
	iv.Call(args, nil, nil)
}

// gtk_window_begin_resize_drag
//
// [ edge ] trans: nothing
//
// [ button ] trans: nothing
//
// [ root_x ] trans: nothing
//
// [ root_y ] trans: nothing
//
// [ timestamp ] trans: nothing
//
func (v Window) BeginResizeDrag(edge gdk.WindowEdgeEnum, button int32, root_x int32, root_y int32, timestamp uint32) {
	iv, err := _I.Get(3530, "Window", "begin_resize_drag")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_edge := gi.NewIntArgument(int(edge))
	arg_button := gi.NewInt32Argument(button)
	arg_root_x := gi.NewInt32Argument(root_x)
	arg_root_y := gi.NewInt32Argument(root_y)
	arg_timestamp := gi.NewUint32Argument(timestamp)
	args := []gi.Argument{arg_v, arg_edge, arg_button, arg_root_x, arg_root_y, arg_timestamp}
	iv.Call(args, nil, nil)
}

// gtk_window_close
//
func (v Window) Close() {
	iv, err := _I.Get(3531, "Window", "close")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_deiconify
//
func (v Window) Deiconify() {
	iv, err := _I.Get(3532, "Window", "deiconify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_fullscreen
//
func (v Window) Fullscreen() {
	iv, err := _I.Get(3533, "Window", "fullscreen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_fullscreen_on_monitor
//
// [ screen ] trans: nothing
//
// [ monitor ] trans: nothing
//
func (v Window) FullscreenOnMonitor(screen gdk.IScreen, monitor int32) {
	iv, err := _I.Get(3534, "Window", "fullscreen_on_monitor")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	arg_monitor := gi.NewInt32Argument(monitor)
	args := []gi.Argument{arg_v, arg_screen, arg_monitor}
	iv.Call(args, nil, nil)
}

// gtk_window_get_accept_focus
//
// [ result ] trans: nothing
//
func (v Window) GetAcceptFocus() (result bool) {
	iv, err := _I.Get(3535, "Window", "get_accept_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_application
//
// [ result ] trans: nothing
//
func (v Window) GetApplication() (result Application) {
	iv, err := _I.Get(3536, "Window", "get_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_attached_to
//
// [ result ] trans: nothing
//
func (v Window) GetAttachedTo() (result Widget) {
	iv, err := _I.Get(3537, "Window", "get_attached_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_decorated
//
// [ result ] trans: nothing
//
func (v Window) GetDecorated() (result bool) {
	iv, err := _I.Get(3538, "Window", "get_decorated")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_default_size
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v Window) GetDefaultSize() (width int32, height int32) {
	iv, err := _I.Get(3539, "Window", "get_default_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// gtk_window_get_default_widget
//
// [ result ] trans: nothing
//
func (v Window) GetDefaultWidget() (result Widget) {
	iv, err := _I.Get(3540, "Window", "get_default_widget")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_deletable
//
// [ result ] trans: nothing
//
func (v Window) GetDeletable() (result bool) {
	iv, err := _I.Get(3541, "Window", "get_deletable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_destroy_with_parent
//
// [ result ] trans: nothing
//
func (v Window) GetDestroyWithParent() (result bool) {
	iv, err := _I.Get(3542, "Window", "get_destroy_with_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_focus
//
// [ result ] trans: nothing
//
func (v Window) GetFocus() (result Widget) {
	iv, err := _I.Get(3543, "Window", "get_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_focus_on_map
//
// [ result ] trans: nothing
//
func (v Window) GetFocusOnMap() (result bool) {
	iv, err := _I.Get(3544, "Window", "get_focus_on_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_focus_visible
//
// [ result ] trans: nothing
//
func (v Window) GetFocusVisible() (result bool) {
	iv, err := _I.Get(3545, "Window", "get_focus_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_gravity
//
// [ result ] trans: nothing
//
func (v Window) GetGravity() (result gdk.GravityEnum) {
	iv, err := _I.Get(3546, "Window", "get_gravity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.GravityEnum(ret.Int())
	return
}

// gtk_window_get_group
//
// [ result ] trans: nothing
//
func (v Window) GetGroup() (result WindowGroup) {
	iv, err := _I.Get(3547, "Window", "get_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_window_get_has_resize_grip
//
// [ result ] trans: nothing
//
func (v Window) GetHasResizeGrip() (result bool) {
	iv, err := _I.Get(3548, "Window", "get_has_resize_grip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_hide_titlebar_when_maximized
//
// [ result ] trans: nothing
//
func (v Window) GetHideTitlebarWhenMaximized() (result bool) {
	iv, err := _I.Get(3549, "Window", "get_hide_titlebar_when_maximized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_icon
//
// [ result ] trans: nothing
//
func (v Window) GetIcon() (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(3550, "Window", "get_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_icon_list
//
// [ result ] trans: container
//
func (v Window) GetIconList() (result g.List) {
	iv, err := _I.Get(3551, "Window", "get_icon_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_icon_name
//
// [ result ] trans: nothing
//
func (v Window) GetIconName() (result string) {
	iv, err := _I.Get(3552, "Window", "get_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_window_get_mnemonic_modifier
//
// [ result ] trans: nothing
//
func (v Window) GetMnemonicModifier() (result gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3553, "Window", "get_mnemonic_modifier")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.ModifierTypeFlags(ret.Int())
	return
}

// gtk_window_get_mnemonics_visible
//
// [ result ] trans: nothing
//
func (v Window) GetMnemonicsVisible() (result bool) {
	iv, err := _I.Get(3554, "Window", "get_mnemonics_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_modal
//
// [ result ] trans: nothing
//
func (v Window) GetModal() (result bool) {
	iv, err := _I.Get(3555, "Window", "get_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_window_get_opacity
//
// [ result ] trans: nothing
//
func (v Window) GetOpacity() (result float64) {
	iv, err := _I.Get(3556, "Window", "get_opacity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// gtk_window_get_position
//
// [ root_x ] trans: everything, dir: out
//
// [ root_y ] trans: everything, dir: out
//
func (v Window) GetPosition() (root_x int32, root_y int32) {
	iv, err := _I.Get(3557, "Window", "get_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_root_x := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_root_y := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_root_x, arg_root_y}
	iv.Call(args, nil, &outArgs[0])
	root_x = outArgs[0].Int32()
	root_y = outArgs[1].Int32()
	return
}

// gtk_window_get_resizable
//
// [ result ] trans: nothing
//
func (v Window) GetResizable() (result bool) {
	iv, err := _I.Get(3558, "Window", "get_resizable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_window_get_resize_grip_area
//
// [ rect ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v Window) GetResizeGripArea(rect gdk.Rectangle) (result bool) {
	iv, err := _I.Get(3559, "Window", "get_resize_grip_area")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rect := gi.NewPointerArgument(rect.P)
	args := []gi.Argument{arg_v, arg_rect}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_role
//
// [ result ] trans: nothing
//
func (v Window) GetRole() (result string) {
	iv, err := _I.Get(3560, "Window", "get_role")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_window_get_screen
//
// [ result ] trans: nothing
//
func (v Window) GetScreen() (result gdk.Screen) {
	iv, err := _I.Get(3561, "Window", "get_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_size
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
func (v Window) GetSize() (width int32, height int32) {
	iv, err := _I.Get(3562, "Window", "get_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	return
}

// gtk_window_get_skip_pager_hint
//
// [ result ] trans: nothing
//
func (v Window) GetSkipPagerHint() (result bool) {
	iv, err := _I.Get(3563, "Window", "get_skip_pager_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_skip_taskbar_hint
//
// [ result ] trans: nothing
//
func (v Window) GetSkipTaskbarHint() (result bool) {
	iv, err := _I.Get(3564, "Window", "get_skip_taskbar_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_title
//
// [ result ] trans: nothing
//
func (v Window) GetTitle() (result string) {
	iv, err := _I.Get(3565, "Window", "get_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_window_get_titlebar
//
// [ result ] trans: nothing
//
func (v Window) GetTitlebar() (result Widget) {
	iv, err := _I.Get(3566, "Window", "get_titlebar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_transient_for
//
// [ result ] trans: nothing
//
func (v Window) GetTransientFor() (result Window) {
	iv, err := _I.Get(3567, "Window", "get_transient_for")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_get_type_hint
//
// [ result ] trans: nothing
//
func (v Window) GetTypeHint() (result gdk.WindowTypeHintEnum) {
	iv, err := _I.Get(3568, "Window", "get_type_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gdk.WindowTypeHintEnum(ret.Int())
	return
}

// gtk_window_get_urgency_hint
//
// [ result ] trans: nothing
//
func (v Window) GetUrgencyHint() (result bool) {
	iv, err := _I.Get(3569, "Window", "get_urgency_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_get_window_type
//
// [ result ] trans: nothing
//
func (v Window) GetWindowType() (result WindowTypeEnum) {
	iv, err := _I.Get(3570, "Window", "get_window_type")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = WindowTypeEnum(ret.Int())
	return
}

// gtk_window_has_group
//
// [ result ] trans: nothing
//
func (v Window) HasGroup() (result bool) {
	iv, err := _I.Get(3571, "Window", "has_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_has_toplevel_focus
//
// [ result ] trans: nothing
//
func (v Window) HasToplevelFocus() (result bool) {
	iv, err := _I.Get(3572, "Window", "has_toplevel_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_iconify
//
func (v Window) Iconify() {
	iv, err := _I.Get(3573, "Window", "iconify")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_is_active
//
// [ result ] trans: nothing
//
func (v Window) IsActive() (result bool) {
	iv, err := _I.Get(3574, "Window", "is_active")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_is_maximized
//
// [ result ] trans: nothing
//
func (v Window) IsMaximized() (result bool) {
	iv, err := _I.Get(3575, "Window", "is_maximized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_maximize
//
func (v Window) Maximize() {
	iv, err := _I.Get(3576, "Window", "maximize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_mnemonic_activate
//
// [ keyval ] trans: nothing
//
// [ modifier ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Window) MnemonicActivate(keyval uint32, modifier gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3577, "Window", "mnemonic_activate")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifier := gi.NewIntArgument(int(modifier))
	args := []gi.Argument{arg_v, arg_keyval, arg_modifier}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_move
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func (v Window) Move(x int32, y int32) {
	iv, err := _I.Get(3578, "Window", "move")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_v, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_parse_geometry
//
// [ geometry ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Window) ParseGeometry(geometry string) (result bool) {
	iv, err := _I.Get(3579, "Window", "parse_geometry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_geometry := gi.CString(geometry)
	arg_v := gi.NewPointerArgument(v.P)
	arg_geometry := gi.NewStringArgument(c_geometry)
	args := []gi.Argument{arg_v, arg_geometry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_geometry)
	result = ret.Bool()
	return
}

// gtk_window_present
//
func (v Window) Present() {
	iv, err := _I.Get(3580, "Window", "present")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_present_with_time
//
// [ timestamp ] trans: nothing
//
func (v Window) PresentWithTime(timestamp uint32) {
	iv, err := _I.Get(3581, "Window", "present_with_time")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_timestamp := gi.NewUint32Argument(timestamp)
	args := []gi.Argument{arg_v, arg_timestamp}
	iv.Call(args, nil, nil)
}

// gtk_window_propagate_key_event
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Window) PropagateKeyEvent(event gdk.EventKey) (result bool) {
	iv, err := _I.Get(3582, "Window", "propagate_key_event")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_v, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_window_remove_accel_group
//
// [ accel_group ] trans: nothing
//
func (v Window) RemoveAccelGroup(accel_group IAccelGroup) {
	iv, err := _I.Get(3583, "Window", "remove_accel_group")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if accel_group != nil {
		tmp = accel_group.P_AccelGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_accel_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_accel_group}
	iv.Call(args, nil, nil)
}

// gtk_window_remove_mnemonic
//
// [ keyval ] trans: nothing
//
// [ target ] trans: nothing
//
func (v Window) RemoveMnemonic(keyval uint32, target IWidget) {
	iv, err := _I.Get(3584, "Window", "remove_mnemonic")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if target != nil {
		tmp = target.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_target := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_keyval, arg_target}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_reshow_with_initial_size
//
func (v Window) ReshowWithInitialSize() {
	iv, err := _I.Get(3585, "Window", "reshow_with_initial_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_resize
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Window) Resize(width int32, height int32) {
	iv, err := _I.Get(3586, "Window", "resize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_resize_grip_is_visible
//
// [ result ] trans: nothing
//
func (v Window) ResizeGripIsVisible() (result bool) {
	iv, err := _I.Get(3587, "Window", "resize_grip_is_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_window_resize_to_geometry
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Window) ResizeToGeometry(width int32, height int32) {
	iv, err := _I.Get(3588, "Window", "resize_to_geometry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_window_set_accept_focus
//
// [ setting ] trans: nothing
//
func (v Window) SetAcceptFocus(setting bool) {
	iv, err := _I.Get(3589, "Window", "set_accept_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_application
//
// [ application ] trans: nothing
//
func (v Window) SetApplication(application IApplication) {
	iv, err := _I.Get(3590, "Window", "set_application")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if application != nil {
		tmp = application.P_Application()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_application := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_application}
	iv.Call(args, nil, nil)
}

// gtk_window_set_attached_to
//
// [ attach_widget ] trans: nothing
//
func (v Window) SetAttachedTo(attach_widget IWidget) {
	iv, err := _I.Get(3591, "Window", "set_attached_to")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if attach_widget != nil {
		tmp = attach_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attach_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_attach_widget}
	iv.Call(args, nil, nil)
}

// gtk_window_set_decorated
//
// [ setting ] trans: nothing
//
func (v Window) SetDecorated(setting bool) {
	iv, err := _I.Get(3592, "Window", "set_decorated")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_default
//
// [ default_widget ] trans: nothing
//
func (v Window) SetDefault(default_widget IWidget) {
	iv, err := _I.Get(3593, "Window", "set_default")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if default_widget != nil {
		tmp = default_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_default_widget}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_set_default_geometry
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Window) SetDefaultGeometry(width int32, height int32) {
	iv, err := _I.Get(3594, "Window", "set_default_geometry")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_window_set_default_size
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func (v Window) SetDefaultSize(width int32, height int32) {
	iv, err := _I.Get(3595, "Window", "set_default_size")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_v, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_window_set_deletable
//
// [ setting ] trans: nothing
//
func (v Window) SetDeletable(setting bool) {
	iv, err := _I.Get(3596, "Window", "set_deletable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_destroy_with_parent
//
// [ setting ] trans: nothing
//
func (v Window) SetDestroyWithParent(setting bool) {
	iv, err := _I.Get(3597, "Window", "set_destroy_with_parent")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_focus
//
// [ focus ] trans: nothing
//
func (v Window) SetFocus(focus IWidget) {
	iv, err := _I.Get(3598, "Window", "set_focus")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if focus != nil {
		tmp = focus.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_focus := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_focus}
	iv.Call(args, nil, nil)
}

// gtk_window_set_focus_on_map
//
// [ setting ] trans: nothing
//
func (v Window) SetFocusOnMap(setting bool) {
	iv, err := _I.Get(3599, "Window", "set_focus_on_map")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_focus_visible
//
// [ setting ] trans: nothing
//
func (v Window) SetFocusVisible(setting bool) {
	iv, err := _I.Get(3600, "Window", "set_focus_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_geometry_hints
//
// [ geometry_widget ] trans: nothing
//
// [ geometry ] trans: nothing
//
// [ geom_mask ] trans: nothing
//
func (v Window) SetGeometryHints(geometry_widget IWidget, geometry gdk.Geometry, geom_mask gdk.WindowHintsFlags) {
	iv, err := _I.Get(3601, "Window", "set_geometry_hints")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if geometry_widget != nil {
		tmp = geometry_widget.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_geometry_widget := gi.NewPointerArgument(tmp)
	arg_geometry := gi.NewPointerArgument(geometry.P)
	arg_geom_mask := gi.NewIntArgument(int(geom_mask))
	args := []gi.Argument{arg_v, arg_geometry_widget, arg_geometry, arg_geom_mask}
	iv.Call(args, nil, nil)
}

// gtk_window_set_gravity
//
// [ gravity ] trans: nothing
//
func (v Window) SetGravity(gravity gdk.GravityEnum) {
	iv, err := _I.Get(3602, "Window", "set_gravity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_gravity := gi.NewIntArgument(int(gravity))
	args := []gi.Argument{arg_v, arg_gravity}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_set_has_resize_grip
//
// [ value ] trans: nothing
//
func (v Window) SetHasResizeGrip(value bool) {
	iv, err := _I.Get(3603, "Window", "set_has_resize_grip")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewBoolArgument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// gtk_window_set_has_user_ref_count
//
// [ setting ] trans: nothing
//
func (v Window) SetHasUserRefCount(setting bool) {
	iv, err := _I.Get(3604, "Window", "set_has_user_ref_count")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_hide_titlebar_when_maximized
//
// [ setting ] trans: nothing
//
func (v Window) SetHideTitlebarWhenMaximized(setting bool) {
	iv, err := _I.Get(3605, "Window", "set_hide_titlebar_when_maximized")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_icon
//
// [ icon ] trans: nothing
//
func (v Window) SetIcon(icon gdkpixbuf.IPixbuf) {
	iv, err := _I.Get(3606, "Window", "set_icon")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Pixbuf()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// gtk_window_set_icon_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Window) SetIconFromFile(filename string) (result bool, err error) {
	iv, err := _I.Get(3607, "Window", "set_icon_from_file")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_window_set_icon_list
//
// [ list ] trans: nothing
//
func (v Window) SetIconList(list g.List) {
	iv, err := _I.Get(3608, "Window", "set_icon_list")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_list := gi.NewPointerArgument(list.P)
	args := []gi.Argument{arg_v, arg_list}
	iv.Call(args, nil, nil)
}

// gtk_window_set_icon_name
//
// [ name ] trans: nothing
//
func (v Window) SetIconName(name string) {
	iv, err := _I.Get(3609, "Window", "set_icon_name")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// gtk_window_set_keep_above
//
// [ setting ] trans: nothing
//
func (v Window) SetKeepAbove(setting bool) {
	iv, err := _I.Get(3610, "Window", "set_keep_above")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_keep_below
//
// [ setting ] trans: nothing
//
func (v Window) SetKeepBelow(setting bool) {
	iv, err := _I.Get(3611, "Window", "set_keep_below")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_mnemonic_modifier
//
// [ modifier ] trans: nothing
//
func (v Window) SetMnemonicModifier(modifier gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3612, "Window", "set_mnemonic_modifier")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_modifier := gi.NewIntArgument(int(modifier))
	args := []gi.Argument{arg_v, arg_modifier}
	iv.Call(args, nil, nil)
}

// gtk_window_set_mnemonics_visible
//
// [ setting ] trans: nothing
//
func (v Window) SetMnemonicsVisible(setting bool) {
	iv, err := _I.Get(3613, "Window", "set_mnemonics_visible")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_modal
//
// [ modal ] trans: nothing
//
func (v Window) SetModal(modal bool) {
	iv, err := _I.Get(3614, "Window", "set_modal")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_modal := gi.NewBoolArgument(modal)
	args := []gi.Argument{arg_v, arg_modal}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_set_opacity
//
// [ opacity ] trans: nothing
//
func (v Window) SetOpacity(opacity float64) {
	iv, err := _I.Get(3615, "Window", "set_opacity")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_opacity := gi.NewDoubleArgument(opacity)
	args := []gi.Argument{arg_v, arg_opacity}
	iv.Call(args, nil, nil)
}

// gtk_window_set_position
//
// [ position ] trans: nothing
//
func (v Window) SetPosition(position WindowPositionEnum) {
	iv, err := _I.Get(3616, "Window", "set_position")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewIntArgument(int(position))
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// gtk_window_set_resizable
//
// [ resizable ] trans: nothing
//
func (v Window) SetResizable(resizable bool) {
	iv, err := _I.Get(3617, "Window", "set_resizable")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_resizable := gi.NewBoolArgument(resizable)
	args := []gi.Argument{arg_v, arg_resizable}
	iv.Call(args, nil, nil)
}

// gtk_window_set_role
//
// [ role ] trans: nothing
//
func (v Window) SetRole(role string) {
	iv, err := _I.Get(3618, "Window", "set_role")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_role := gi.CString(role)
	arg_v := gi.NewPointerArgument(v.P)
	arg_role := gi.NewStringArgument(c_role)
	args := []gi.Argument{arg_v, arg_role}
	iv.Call(args, nil, nil)
	gi.Free(c_role)
}

// gtk_window_set_screen
//
// [ screen ] trans: nothing
//
func (v Window) SetScreen(screen gdk.IScreen) {
	iv, err := _I.Get(3619, "Window", "set_screen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_screen}
	iv.Call(args, nil, nil)
}

// gtk_window_set_skip_pager_hint
//
// [ setting ] trans: nothing
//
func (v Window) SetSkipPagerHint(setting bool) {
	iv, err := _I.Get(3620, "Window", "set_skip_pager_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_skip_taskbar_hint
//
// [ setting ] trans: nothing
//
func (v Window) SetSkipTaskbarHint(setting bool) {
	iv, err := _I.Get(3621, "Window", "set_skip_taskbar_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// gtk_window_set_startup_id
//
// [ startup_id ] trans: nothing
//
func (v Window) SetStartupId(startup_id string) {
	iv, err := _I.Get(3622, "Window", "set_startup_id")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_startup_id := gi.CString(startup_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_startup_id := gi.NewStringArgument(c_startup_id)
	args := []gi.Argument{arg_v, arg_startup_id}
	iv.Call(args, nil, nil)
	gi.Free(c_startup_id)
}

// gtk_window_set_title
//
// [ title ] trans: nothing
//
func (v Window) SetTitle(title string) {
	iv, err := _I.Get(3623, "Window", "set_title")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// gtk_window_set_titlebar
//
// [ titlebar ] trans: nothing
//
func (v Window) SetTitlebar(titlebar IWidget) {
	iv, err := _I.Get(3624, "Window", "set_titlebar")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if titlebar != nil {
		tmp = titlebar.P_Widget()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_titlebar := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_titlebar}
	iv.Call(args, nil, nil)
}

// gtk_window_set_transient_for
//
// [ parent ] trans: nothing
//
func (v Window) SetTransientFor(parent IWindow) {
	iv, err := _I.Get(3625, "Window", "set_transient_for")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	iv.Call(args, nil, nil)
}

// gtk_window_set_type_hint
//
// [ hint ] trans: nothing
//
func (v Window) SetTypeHint(hint gdk.WindowTypeHintEnum) {
	iv, err := _I.Get(3626, "Window", "set_type_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hint := gi.NewIntArgument(int(hint))
	args := []gi.Argument{arg_v, arg_hint}
	iv.Call(args, nil, nil)
}

// gtk_window_set_urgency_hint
//
// [ setting ] trans: nothing
//
func (v Window) SetUrgencyHint(setting bool) {
	iv, err := _I.Get(3627, "Window", "set_urgency_hint")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting := gi.NewBoolArgument(setting)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_window_set_wmclass
//
// [ wmclass_name ] trans: nothing
//
// [ wmclass_class ] trans: nothing
//
func (v Window) SetWmclass(wmclass_name string, wmclass_class string) {
	iv, err := _I.Get(3628, "Window", "set_wmclass")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_wmclass_name := gi.CString(wmclass_name)
	c_wmclass_class := gi.CString(wmclass_class)
	arg_v := gi.NewPointerArgument(v.P)
	arg_wmclass_name := gi.NewStringArgument(c_wmclass_name)
	arg_wmclass_class := gi.NewStringArgument(c_wmclass_class)
	args := []gi.Argument{arg_v, arg_wmclass_name, arg_wmclass_class}
	iv.Call(args, nil, nil)
	gi.Free(c_wmclass_name)
	gi.Free(c_wmclass_class)
}

// gtk_window_stick
//
func (v Window) Stick() {
	iv, err := _I.Get(3629, "Window", "stick")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_unfullscreen
//
func (v Window) Unfullscreen() {
	iv, err := _I.Get(3630, "Window", "unfullscreen")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_unmaximize
//
func (v Window) Unmaximize() {
	iv, err := _I.Get(3631, "Window", "unmaximize")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// gtk_window_unstick
//
func (v Window) Unstick() {
	iv, err := _I.Get(3632, "Window", "unstick")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object WindowAccessible
type WindowAccessible struct {
	atk.ComponentIfc
	atk.WindowIfc
	ContainerAccessible
}

func WrapWindowAccessible(p unsafe.Pointer) (r WindowAccessible) { r.P = p; return }

type IWindowAccessible interface{ P_WindowAccessible() unsafe.Pointer }

func (v WindowAccessible) P_WindowAccessible() unsafe.Pointer { return v.P }
func (v WindowAccessible) P_Component() unsafe.Pointer        { return v.P }
func (v WindowAccessible) P_Window() unsafe.Pointer           { return v.P }
func WindowAccessibleGetType() gi.GType {
	ret := _I.GetGType(645, "WindowAccessible")
	return ret
}

// ignore GType struct WindowAccessibleClass

// Struct WindowAccessiblePrivate
type WindowAccessiblePrivate struct {
	P unsafe.Pointer
}

func WindowAccessiblePrivateGetType() gi.GType {
	ret := _I.GetGType(646, "WindowAccessiblePrivate")
	return ret
}

// ignore GType struct WindowClass

// Struct WindowGeometryInfo
type WindowGeometryInfo struct {
	P unsafe.Pointer
}

func WindowGeometryInfoGetType() gi.GType {
	ret := _I.GetGType(647, "WindowGeometryInfo")
	return ret
}

// Object WindowGroup
type WindowGroup struct {
	g.Object
}

func WrapWindowGroup(p unsafe.Pointer) (r WindowGroup) { r.P = p; return }

type IWindowGroup interface{ P_WindowGroup() unsafe.Pointer }

func (v WindowGroup) P_WindowGroup() unsafe.Pointer { return v.P }
func WindowGroupGetType() gi.GType {
	ret := _I.GetGType(648, "WindowGroup")
	return ret
}

// gtk_window_group_new
//
// [ result ] trans: everything
//
func NewWindowGroup() (result WindowGroup) {
	iv, err := _I.Get(3633, "WindowGroup", "new")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_group_add_window
//
// [ window ] trans: nothing
//
func (v WindowGroup) AddWindow(window IWindow) {
	iv, err := _I.Get(3634, "WindowGroup", "add_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_window_group_get_current_device_grab
//
// [ device ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WindowGroup) GetCurrentDeviceGrab(device gdk.IDevice) (result Widget) {
	iv, err := _I.Get(3635, "WindowGroup", "get_current_device_grab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if device != nil {
		tmp = device.P_Device()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_device := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_device}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_group_get_current_grab
//
// [ result ] trans: nothing
//
func (v WindowGroup) GetCurrentGrab() (result Widget) {
	iv, err := _I.Get(3636, "WindowGroup", "get_current_grab")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_group_list_windows
//
// [ result ] trans: container
//
func (v WindowGroup) ListWindows() (result g.List) {
	iv, err := _I.Get(3637, "WindowGroup", "list_windows")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_window_group_remove_window
//
// [ window ] trans: nothing
//
func (v WindowGroup) RemoveWindow(window IWindow) {
	iv, err := _I.Get(3638, "WindowGroup", "remove_window")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_window}
	iv.Call(args, nil, nil)
}

// ignore GType struct WindowGroupClass

// Struct WindowGroupPrivate
type WindowGroupPrivate struct {
	P unsafe.Pointer
}

func WindowGroupPrivateGetType() gi.GType {
	ret := _I.GetGType(649, "WindowGroupPrivate")
	return ret
}

// Enum WindowPosition
type WindowPositionEnum int

const (
	WindowPositionNone           WindowPositionEnum = 0
	WindowPositionCenter         WindowPositionEnum = 1
	WindowPositionMouse          WindowPositionEnum = 2
	WindowPositionCenterAlways   WindowPositionEnum = 3
	WindowPositionCenterOnParent WindowPositionEnum = 4
)

func WindowPositionGetType() gi.GType {
	ret := _I.GetGType(650, "WindowPosition")
	return ret
}

// Struct WindowPrivate
type WindowPrivate struct {
	P unsafe.Pointer
}

func WindowPrivateGetType() gi.GType {
	ret := _I.GetGType(651, "WindowPrivate")
	return ret
}

// Enum WindowType
type WindowTypeEnum int

const (
	WindowTypeToplevel WindowTypeEnum = 0
	WindowTypePopup    WindowTypeEnum = 1
)

func WindowTypeGetType() gi.GType {
	ret := _I.GetGType(652, "WindowType")
	return ret
}

// Enum WrapMode
type WrapModeEnum int

const (
	WrapModeNone     WrapModeEnum = 0
	WrapModeChar     WrapModeEnum = 1
	WrapModeWord     WrapModeEnum = 2
	WrapModeWordChar WrapModeEnum = 3
)

func WrapModeGetType() gi.GType {
	ret := _I.GetGType(653, "WrapMode")
	return ret
}

// gtk_accel_groups_activate
//
// [ object ] trans: nothing
//
// [ accel_key ] trans: nothing
//
// [ accel_mods ] trans: nothing
//
// [ result ] trans: nothing
//
func AccelGroupsActivate(object g.IObject, accel_key uint32, accel_mods gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3639, "accel_groups_activate", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_object := gi.NewPointerArgument(tmp)
	arg_accel_key := gi.NewUint32Argument(accel_key)
	arg_accel_mods := gi.NewIntArgument(int(accel_mods))
	args := []gi.Argument{arg_object, arg_accel_key, arg_accel_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_accel_groups_from_object
//
// [ object ] trans: nothing
//
// [ result ] trans: nothing
//
func AccelGroupsFromObject(object g.IObject) (result g.SList) {
	iv, err := _I.Get(3640, "accel_groups_from_object", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_object}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_accelerator_get_default_mod_mask
//
// [ result ] trans: nothing
//
func AcceleratorGetDefaultModMask() (result gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3641, "accelerator_get_default_mod_mask", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = gdk.ModifierTypeFlags(ret.Int())
	return
}

// gtk_accelerator_get_label
//
// [ accelerator_key ] trans: nothing
//
// [ accelerator_mods ] trans: nothing
//
// [ result ] trans: everything
//
func AcceleratorGetLabel(accelerator_key uint32, accelerator_mods gdk.ModifierTypeFlags) (result string) {
	iv, err := _I.Get(3642, "accelerator_get_label", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_accelerator_key := gi.NewUint32Argument(accelerator_key)
	arg_accelerator_mods := gi.NewIntArgument(int(accelerator_mods))
	args := []gi.Argument{arg_accelerator_key, arg_accelerator_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_accelerator_get_label_with_keycode
//
// [ display ] trans: nothing
//
// [ accelerator_key ] trans: nothing
//
// [ keycode ] trans: nothing
//
// [ accelerator_mods ] trans: nothing
//
// [ result ] trans: everything
//
func AcceleratorGetLabelWithKeycode(display gdk.IDisplay, accelerator_key uint32, keycode uint32, accelerator_mods gdk.ModifierTypeFlags) (result string) {
	iv, err := _I.Get(3643, "accelerator_get_label_with_keycode", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	arg_accelerator_key := gi.NewUint32Argument(accelerator_key)
	arg_keycode := gi.NewUint32Argument(keycode)
	arg_accelerator_mods := gi.NewIntArgument(int(accelerator_mods))
	args := []gi.Argument{arg_display, arg_accelerator_key, arg_keycode, arg_accelerator_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_accelerator_name
//
// [ accelerator_key ] trans: nothing
//
// [ accelerator_mods ] trans: nothing
//
// [ result ] trans: everything
//
func AcceleratorName(accelerator_key uint32, accelerator_mods gdk.ModifierTypeFlags) (result string) {
	iv, err := _I.Get(3644, "accelerator_name", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_accelerator_key := gi.NewUint32Argument(accelerator_key)
	arg_accelerator_mods := gi.NewIntArgument(int(accelerator_mods))
	args := []gi.Argument{arg_accelerator_key, arg_accelerator_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_accelerator_name_with_keycode
//
// [ display ] trans: nothing
//
// [ accelerator_key ] trans: nothing
//
// [ keycode ] trans: nothing
//
// [ accelerator_mods ] trans: nothing
//
// [ result ] trans: everything
//
func AcceleratorNameWithKeycode(display gdk.IDisplay, accelerator_key uint32, keycode uint32, accelerator_mods gdk.ModifierTypeFlags) (result string) {
	iv, err := _I.Get(3645, "accelerator_name_with_keycode", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	arg_display := gi.NewPointerArgument(tmp)
	arg_accelerator_key := gi.NewUint32Argument(accelerator_key)
	arg_keycode := gi.NewUint32Argument(keycode)
	arg_accelerator_mods := gi.NewIntArgument(int(accelerator_mods))
	args := []gi.Argument{arg_display, arg_accelerator_key, arg_keycode, arg_accelerator_mods}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// gtk_accelerator_parse
//
// [ accelerator ] trans: nothing
//
// [ accelerator_key ] trans: everything, dir: out
//
// [ accelerator_mods ] trans: everything, dir: out
//
func AcceleratorParse(accelerator string) (accelerator_key uint32, accelerator_mods gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3646, "accelerator_parse", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	c_accelerator := gi.CString(accelerator)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	arg_accelerator_key := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_accelerator_mods := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_accelerator, arg_accelerator_key, arg_accelerator_mods}
	iv.Call(args, nil, &outArgs[0])
	gi.Free(c_accelerator)
	accelerator_key = outArgs[0].Uint32()
	accelerator_mods = gdk.ModifierTypeFlags(outArgs[1].Int())
	return
}

// gtk_accelerator_parse_with_keycode
//
// [ accelerator ] trans: nothing
//
// [ accelerator_key ] trans: everything, dir: out
//
// [ accelerator_codes ] trans: everything, dir: out
//
// [ accelerator_mods ] trans: everything, dir: out
//
func AcceleratorParseWithKeycode(accelerator string) (accelerator_key uint32, accelerator_codes gi.Uint32Array, accelerator_mods gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3647, "accelerator_parse_with_keycode", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	c_accelerator := gi.CString(accelerator)
	arg_accelerator := gi.NewStringArgument(c_accelerator)
	arg_accelerator_key := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_accelerator_codes := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_accelerator_mods := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_accelerator, arg_accelerator_key, arg_accelerator_codes, arg_accelerator_mods}
	iv.Call(args, nil, &outArgs[0])
	gi.Free(c_accelerator)
	accelerator_key = outArgs[0].Uint32()
	accelerator_codes.P = outArgs[1].Pointer()
	accelerator_mods = gdk.ModifierTypeFlags(outArgs[2].Int())
	return
}

// gtk_accelerator_set_default_mod_mask
//
// [ default_mod_mask ] trans: nothing
//
func AcceleratorSetDefaultModMask(default_mod_mask gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3648, "accelerator_set_default_mod_mask", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_default_mod_mask := gi.NewIntArgument(int(default_mod_mask))
	args := []gi.Argument{arg_default_mod_mask}
	iv.Call(args, nil, nil)
}

// gtk_accelerator_valid
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ result ] trans: nothing
//
func AcceleratorValid(keyval uint32, modifiers gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3649, "accelerator_valid", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_keyval, arg_modifiers}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_alternative_dialog_button_order
//
// [ screen ] trans: nothing
//
// [ result ] trans: nothing
//
func AlternativeDialogButtonOrder(screen gdk.IScreen) (result bool) {
	iv, err := _I.Get(3650, "alternative_dialog_button_order", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	arg_screen := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_screen}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_binding_entry_add_signal_from_string
//
// [ binding_set ] trans: nothing
//
// [ signal_desc ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingEntryAddSignalFromString(binding_set BindingSet, signal_desc string) (result g.TokenTypeEnum) {
	iv, err := _I.Get(3651, "binding_entry_add_signal_from_string", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_signal_desc := gi.CString(signal_desc)
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_signal_desc := gi.NewStringArgument(c_signal_desc)
	args := []gi.Argument{arg_binding_set, arg_signal_desc}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_signal_desc)
	result = g.TokenTypeEnum(ret.Int())
	return
}

// gtk_binding_entry_add_signall
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ signal_name ] trans: nothing
//
// [ binding_args ] trans: nothing
//
func BindingEntryAddSignall(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags, signal_name string, binding_args g.SList) {
	iv, err := _I.Get(3652, "binding_entry_add_signall", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_signal_name := gi.CString(signal_name)
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	arg_signal_name := gi.NewStringArgument(c_signal_name)
	arg_binding_args := gi.NewPointerArgument(binding_args.P)
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers, arg_signal_name, arg_binding_args}
	iv.Call(args, nil, nil)
	gi.Free(c_signal_name)
}

// gtk_binding_entry_remove
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
func BindingEntryRemove(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3653, "binding_entry_remove", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers}
	iv.Call(args, nil, nil)
}

// gtk_binding_entry_skip
//
// [ binding_set ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
func BindingEntrySkip(binding_set BindingSet, keyval uint32, modifiers gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3654, "binding_entry_skip", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_binding_set := gi.NewPointerArgument(binding_set.P)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_binding_set, arg_keyval, arg_modifiers}
	iv.Call(args, nil, nil)
}

// gtk_binding_set_find
//
// [ set_name ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingSetFind(set_name string) (result BindingSet) {
	iv, err := _I.Get(3655, "binding_set_find", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_set_name := gi.CString(set_name)
	arg_set_name := gi.NewStringArgument(c_set_name)
	args := []gi.Argument{arg_set_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_set_name)
	result.P = ret.Pointer()
	return
}

// gtk_bindings_activate
//
// [ object ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingsActivate(object g.IObject, keyval uint32, modifiers gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3656, "bindings_activate", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_object := gi.NewPointerArgument(tmp)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_object, arg_keyval, arg_modifiers}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_bindings_activate_event
//
// [ object ] trans: nothing
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func BindingsActivateEvent(object g.IObject, event gdk.EventKey) (result bool) {
	iv, err := _I.Get(3657, "bindings_activate_event", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	arg_object := gi.NewPointerArgument(tmp)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_object, arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_builder_error_quark
//
// [ result ] trans: nothing
//
func BuilderErrorQuark() (result uint32) {
	iv, err := _I.Get(3658, "builder_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_cairo_should_draw_window
//
// [ cr ] trans: nothing
//
// [ window ] trans: nothing
//
// [ result ] trans: nothing
//
func CairoShouldDrawWindow(cr cairo.Context, window gdk.IWindow) (result bool) {
	iv, err := _I.Get(3659, "cairo_should_draw_window", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if window != nil {
		tmp = window.P_Window()
	}
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_window := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_cr, arg_window}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_cairo_transform_to_window
//
// [ cr ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ window ] trans: nothing
//
func CairoTransformToWindow(cr cairo.Context, widget IWidget, window gdk.IWindow) {
	iv, err := _I.Get(3660, "cairo_transform_to_window", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if window != nil {
		tmp1 = window.P_Window()
	}
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_window := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_cr, arg_widget, arg_window}
	iv.Call(args, nil, nil)
}

// gtk_check_version
//
// [ required_major ] trans: nothing
//
// [ required_minor ] trans: nothing
//
// [ required_micro ] trans: nothing
//
// [ result ] trans: nothing
//
func CheckVersion(required_major uint32, required_minor uint32, required_micro uint32) (result string) {
	iv, err := _I.Get(3661, "check_version", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_required_major := gi.NewUint32Argument(required_major)
	arg_required_minor := gi.NewUint32Argument(required_minor)
	arg_required_micro := gi.NewUint32Argument(required_micro)
	args := []gi.Argument{arg_required_major, arg_required_minor, arg_required_micro}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_css_provider_error_quark
//
// [ result ] trans: nothing
//
func CssProviderErrorQuark() (result uint32) {
	iv, err := _I.Get(3662, "css_provider_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_device_grab_add
//
// [ widget ] trans: nothing
//
// [ device ] trans: nothing
//
// [ block_others ] trans: nothing
//
func DeviceGrabAdd(widget IWidget, device gdk.IDevice, block_others bool) {
	iv, err := _I.Get(3663, "device_grab_add", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if device != nil {
		tmp1 = device.P_Device()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_device := gi.NewPointerArgument(tmp1)
	arg_block_others := gi.NewBoolArgument(block_others)
	args := []gi.Argument{arg_widget, arg_device, arg_block_others}
	iv.Call(args, nil, nil)
}

// gtk_device_grab_remove
//
// [ widget ] trans: nothing
//
// [ device ] trans: nothing
//
func DeviceGrabRemove(widget IWidget, device gdk.IDevice) {
	iv, err := _I.Get(3664, "device_grab_remove", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	var tmp1 unsafe.Pointer
	if device != nil {
		tmp1 = device.P_Device()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_device := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_widget, arg_device}
	iv.Call(args, nil, nil)
}

// gtk_disable_setlocale
//
func DisableSetlocale() {
	iv, err := _I.Get(3665, "disable_setlocale", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// gtk_distribute_natural_allocation
//
// [ extra_space ] trans: nothing
//
// [ n_requested_sizes ] trans: nothing
//
// [ sizes ] trans: nothing
//
// [ result ] trans: nothing
//
func DistributeNaturalAllocation(extra_space int32, n_requested_sizes uint32, sizes RequestedSize) (result int32) {
	iv, err := _I.Get(3666, "distribute_natural_allocation", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_extra_space := gi.NewInt32Argument(extra_space)
	arg_n_requested_sizes := gi.NewUint32Argument(n_requested_sizes)
	arg_sizes := gi.NewPointerArgument(sizes.P)
	args := []gi.Argument{arg_extra_space, arg_n_requested_sizes, arg_sizes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// gtk_drag_cancel
//
// [ context ] trans: nothing
//
func DragCancel(context gdk.IDragContext) {
	iv, err := _I.Get(3667, "drag_cancel", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_context}
	iv.Call(args, nil, nil)
}

// gtk_drag_finish
//
// [ context ] trans: nothing
//
// [ success ] trans: nothing
//
// [ del ] trans: nothing
//
// [ time_ ] trans: nothing
//
func DragFinish(context gdk.IDragContext, success bool, del bool, time_ uint32) {
	iv, err := _I.Get(3668, "drag_finish", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_success := gi.NewBoolArgument(success)
	arg_del := gi.NewBoolArgument(del)
	arg_time_ := gi.NewUint32Argument(time_)
	args := []gi.Argument{arg_context, arg_success, arg_del, arg_time_}
	iv.Call(args, nil, nil)
}

// gtk_drag_get_source_widget
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func DragGetSourceWidget(context gdk.IDragContext) (result Widget) {
	iv, err := _I.Get(3669, "drag_get_source_widget", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_context}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_drag_set_icon_default
//
// [ context ] trans: nothing
//
func DragSetIconDefault(context gdk.IDragContext) {
	iv, err := _I.Get(3670, "drag_set_icon_default", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_context}
	iv.Call(args, nil, nil)
}

// gtk_drag_set_icon_gicon
//
// [ context ] trans: nothing
//
// [ icon ] trans: nothing
//
// [ hot_x ] trans: nothing
//
// [ hot_y ] trans: nothing
//
func DragSetIconGicon(context gdk.IDragContext, icon g.IIcon, hot_x int32, hot_y int32) {
	iv, err := _I.Get(3671, "drag_set_icon_gicon", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	var tmp1 unsafe.Pointer
	if icon != nil {
		tmp1 = icon.P_Icon()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_icon := gi.NewPointerArgument(tmp1)
	arg_hot_x := gi.NewInt32Argument(hot_x)
	arg_hot_y := gi.NewInt32Argument(hot_y)
	args := []gi.Argument{arg_context, arg_icon, arg_hot_x, arg_hot_y}
	iv.Call(args, nil, nil)
}

// gtk_drag_set_icon_name
//
// [ context ] trans: nothing
//
// [ icon_name ] trans: nothing
//
// [ hot_x ] trans: nothing
//
// [ hot_y ] trans: nothing
//
func DragSetIconName(context gdk.IDragContext, icon_name string, hot_x int32, hot_y int32) {
	iv, err := _I.Get(3672, "drag_set_icon_name", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	c_icon_name := gi.CString(icon_name)
	arg_context := gi.NewPointerArgument(tmp)
	arg_icon_name := gi.NewStringArgument(c_icon_name)
	arg_hot_x := gi.NewInt32Argument(hot_x)
	arg_hot_y := gi.NewInt32Argument(hot_y)
	args := []gi.Argument{arg_context, arg_icon_name, arg_hot_x, arg_hot_y}
	iv.Call(args, nil, nil)
	gi.Free(c_icon_name)
}

// gtk_drag_set_icon_pixbuf
//
// [ context ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
// [ hot_x ] trans: nothing
//
// [ hot_y ] trans: nothing
//
func DragSetIconPixbuf(context gdk.IDragContext, pixbuf gdkpixbuf.IPixbuf, hot_x int32, hot_y int32) {
	iv, err := _I.Get(3673, "drag_set_icon_pixbuf", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	var tmp1 unsafe.Pointer
	if pixbuf != nil {
		tmp1 = pixbuf.P_Pixbuf()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_pixbuf := gi.NewPointerArgument(tmp1)
	arg_hot_x := gi.NewInt32Argument(hot_x)
	arg_hot_y := gi.NewInt32Argument(hot_y)
	args := []gi.Argument{arg_context, arg_pixbuf, arg_hot_x, arg_hot_y}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_drag_set_icon_stock
//
// [ context ] trans: nothing
//
// [ stock_id ] trans: nothing
//
// [ hot_x ] trans: nothing
//
// [ hot_y ] trans: nothing
//
func DragSetIconStock(context gdk.IDragContext, stock_id string, hot_x int32, hot_y int32) {
	iv, err := _I.Get(3674, "drag_set_icon_stock", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	c_stock_id := gi.CString(stock_id)
	arg_context := gi.NewPointerArgument(tmp)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_hot_x := gi.NewInt32Argument(hot_x)
	arg_hot_y := gi.NewInt32Argument(hot_y)
	args := []gi.Argument{arg_context, arg_stock_id, arg_hot_x, arg_hot_y}
	iv.Call(args, nil, nil)
	gi.Free(c_stock_id)
}

// gtk_drag_set_icon_surface
//
// [ context ] trans: nothing
//
// [ surface ] trans: nothing
//
func DragSetIconSurface(context gdk.IDragContext, surface cairo.Surface) {
	iv, err := _I.Get(3675, "drag_set_icon_surface", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_surface := gi.NewPointerArgument(surface.P)
	args := []gi.Argument{arg_context, arg_surface}
	iv.Call(args, nil, nil)
}

// gtk_drag_set_icon_widget
//
// [ context ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ hot_x ] trans: nothing
//
// [ hot_y ] trans: nothing
//
func DragSetIconWidget(context gdk.IDragContext, widget IWidget, hot_x int32, hot_y int32) {
	iv, err := _I.Get(3676, "drag_set_icon_widget", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_DragContext()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_hot_x := gi.NewInt32Argument(hot_x)
	arg_hot_y := gi.NewInt32Argument(hot_y)
	args := []gi.Argument{arg_context, arg_widget, arg_hot_x, arg_hot_y}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_draw_insertion_cursor
//
// [ widget ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ location ] trans: nothing
//
// [ is_primary ] trans: nothing
//
// [ direction ] trans: nothing
//
// [ draw_arrow ] trans: nothing
//
func DrawInsertionCursor(widget IWidget, cr cairo.Context, location gdk.Rectangle, is_primary bool, direction TextDirectionEnum, draw_arrow bool) {
	iv, err := _I.Get(3677, "draw_insertion_cursor", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_location := gi.NewPointerArgument(location.P)
	arg_is_primary := gi.NewBoolArgument(is_primary)
	arg_direction := gi.NewIntArgument(int(direction))
	arg_draw_arrow := gi.NewBoolArgument(draw_arrow)
	args := []gi.Argument{arg_widget, arg_cr, arg_location, arg_is_primary, arg_direction, arg_draw_arrow}
	iv.Call(args, nil, nil)
}

// gtk_events_pending
//
// [ result ] trans: nothing
//
func EventsPending() (result bool) {
	iv, err := _I.Get(3678, "events_pending", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_false
//
// [ result ] trans: nothing
//
func False() (result bool) {
	iv, err := _I.Get(3679, "false", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_file_chooser_error_quark
//
// [ result ] trans: nothing
//
func FileChooserErrorQuark() (result uint32) {
	iv, err := _I.Get(3680, "file_chooser_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_binary_age
//
// [ result ] trans: nothing
//
func GetBinaryAge() (result uint32) {
	iv, err := _I.Get(3681, "get_binary_age", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_current_event
//
// [ result ] trans: everything
//
func GetCurrentEvent() (result gdk.Event) {
	iv, err := _I.Get(3682, "get_current_event", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_get_current_event_device
//
// [ result ] trans: nothing
//
func GetCurrentEventDevice() (result gdk.Device) {
	iv, err := _I.Get(3683, "get_current_event_device", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_get_current_event_state
//
// [ state ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func GetCurrentEventState() (result bool, state gdk.ModifierTypeFlags) {
	iv, err := _I.Get(3684, "get_current_event_state", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_state := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	state = gdk.ModifierTypeFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// gtk_get_current_event_time
//
// [ result ] trans: nothing
//
func GetCurrentEventTime() (result uint32) {
	iv, err := _I.Get(3685, "get_current_event_time", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_debug_flags
//
// [ result ] trans: nothing
//
func GetDebugFlags() (result uint32) {
	iv, err := _I.Get(3686, "get_debug_flags", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_default_language
//
// [ result ] trans: nothing
//
func GetDefaultLanguage() (result pango.Language) {
	iv, err := _I.Get(3687, "get_default_language", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_get_event_widget
//
// [ event ] trans: nothing
//
// [ result ] trans: nothing
//
func GetEventWidget(event gdk.Event) (result Widget) {
	iv, err := _I.Get(3688, "get_event_widget", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_event}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_get_interface_age
//
// [ result ] trans: nothing
//
func GetInterfaceAge() (result uint32) {
	iv, err := _I.Get(3689, "get_interface_age", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_locale_direction
//
// [ result ] trans: nothing
//
func GetLocaleDirection() (result TextDirectionEnum) {
	iv, err := _I.Get(3690, "get_locale_direction", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = TextDirectionEnum(ret.Int())
	return
}

// gtk_get_major_version
//
// [ result ] trans: nothing
//
func GetMajorVersion() (result uint32) {
	iv, err := _I.Get(3691, "get_major_version", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_micro_version
//
// [ result ] trans: nothing
//
func GetMicroVersion() (result uint32) {
	iv, err := _I.Get(3692, "get_micro_version", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_minor_version
//
// [ result ] trans: nothing
//
func GetMinorVersion() (result uint32) {
	iv, err := _I.Get(3693, "get_minor_version", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_get_option_group
//
// [ open_default_display ] trans: nothing
//
// [ result ] trans: everything
//
func GetOptionGroup(open_default_display bool) (result g.OptionGroup) {
	iv, err := _I.Get(3694, "get_option_group", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_open_default_display := gi.NewBoolArgument(open_default_display)
	args := []gi.Argument{arg_open_default_display}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_grab_get_current
//
// [ result ] trans: nothing
//
func GrabGetCurrent() (result Widget) {
	iv, err := _I.Get(3695, "grab_get_current", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_icon_size_from_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func IconSizeFromName(name string) (result int32) {
	iv, err := _I.Get(3696, "icon_size_from_name", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_icon_size_get_name
//
// [ size ] trans: nothing
//
// [ result ] trans: nothing
//
func IconSizeGetName(size int32) (result string) {
	iv, err := _I.Get(3697, "icon_size_get_name", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_icon_size_lookup
//
// [ size ] trans: nothing
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func IconSizeLookup(size int32) (result bool, width int32, height int32) {
	iv, err := _I.Get(3698, "icon_size_lookup", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_size := gi.NewInt32Argument(size)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_size, arg_width, arg_height}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_icon_size_lookup_for_settings
//
// [ settings ] trans: nothing
//
// [ size ] trans: nothing
//
// [ width ] trans: everything, dir: out
//
// [ height ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func IconSizeLookupForSettings(settings ISettings, size int32) (result bool, width int32, height int32) {
	iv, err := _I.Get(3699, "icon_size_lookup_for_settings", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if settings != nil {
		tmp = settings.P_Settings()
	}
	arg_settings := gi.NewPointerArgument(tmp)
	arg_size := gi.NewInt32Argument(size)
	arg_width := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_height := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_settings, arg_size, arg_width, arg_height}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	width = outArgs[0].Int32()
	height = outArgs[1].Int32()
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_icon_size_register
//
// [ name ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ result ] trans: nothing
//
func IconSizeRegister(name string, width int32, height int32) (result int32) {
	iv, err := _I.Get(3700, "icon_size_register", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_name, arg_width, arg_height}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Int32()
	return
}

// Deprecated
//
// gtk_icon_size_register_alias
//
// [ alias ] trans: nothing
//
// [ target ] trans: nothing
//
func IconSizeRegisterAlias(alias string, target int32) {
	iv, err := _I.Get(3701, "icon_size_register_alias", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_alias := gi.CString(alias)
	arg_alias := gi.NewStringArgument(c_alias)
	arg_target := gi.NewInt32Argument(target)
	args := []gi.Argument{arg_alias, arg_target}
	iv.Call(args, nil, nil)
	gi.Free(c_alias)
}

// gtk_icon_theme_error_quark
//
// [ result ] trans: nothing
//
func IconThemeErrorQuark() (result uint32) {
	iv, err := _I.Get(3702, "icon_theme_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_init_check
//
// [ argc ] trans: everything, dir: inout
//
// [ argv ] trans: everything, dir: inout
//
// [ result ] trans: nothing
//
func InitCheck(argc int /*TODO:TYPE*/, argv int /*TODO:TYPE*/) (result bool) {
	iv, err := _I.Get(3703, "init_check", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var ret gi.Argument
	iv.Call(nil, &ret, &outArgs[0])
	result = ret.Bool()
	return
}

// gtk_init_with_args
//
// [ argc ] trans: everything, dir: inout
//
// [ argv ] trans: everything, dir: inout
//
// [ parameter_string ] trans: nothing
//
// [ entries ] trans: nothing
//
// [ translation_domain ] trans: nothing
//
// [ result ] trans: nothing
//
func InitWithArgs(argc int /*TODO:TYPE*/, argv int /*TODO:TYPE*/, parameter_string string, entries unsafe.Pointer, translation_domain string) (result bool, err error) {
	iv, err := _I.Get(3704, "init_with_args", "")
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_parameter_string := gi.CString(parameter_string)
	c_translation_domain := gi.CString(translation_domain)
	arg_parameter_string := gi.NewStringArgument(c_parameter_string)
	arg_entries := gi.NewPointerArgument(entries)
	arg_translation_domain := gi.NewStringArgument(c_translation_domain)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_parameter_string, arg_entries, arg_translation_domain, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_parameter_string)
	gi.Free(c_translation_domain)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_key_snooper_remove
//
// [ snooper_handler_id ] trans: nothing
//
func KeySnooperRemove(snooper_handler_id uint32) {
	iv, err := _I.Get(3705, "key_snooper_remove", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_snooper_handler_id := gi.NewUint32Argument(snooper_handler_id)
	args := []gi.Argument{arg_snooper_handler_id}
	iv.Call(args, nil, nil)
}

// gtk_main
//
func Main() {
	iv, err := _I.Get(3706, "main", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// gtk_main_do_event
//
// [ event ] trans: nothing
//
func MainDoEvent(event gdk.Event) {
	iv, err := _I.Get(3707, "main_do_event", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_event}
	iv.Call(args, nil, nil)
}

// gtk_main_iteration
//
// [ result ] trans: nothing
//
func MainIteration() (result bool) {
	iv, err := _I.Get(3708, "main_iteration", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_main_iteration_do
//
// [ blocking ] trans: nothing
//
// [ result ] trans: nothing
//
func MainIterationDo(blocking bool) (result bool) {
	iv, err := _I.Get(3709, "main_iteration_do", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_blocking := gi.NewBoolArgument(blocking)
	args := []gi.Argument{arg_blocking}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_main_level
//
// [ result ] trans: nothing
//
func MainLevel() (result uint32) {
	iv, err := _I.Get(3710, "main_level", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_main_quit
//
func MainQuit() {
	iv, err := _I.Get(3711, "main_quit", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// Deprecated
//
// gtk_paint_arrow
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ arrow_type ] trans: nothing
//
// [ fill ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintArrow(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, arrow_type ArrowTypeEnum, fill bool, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3712, "paint_arrow", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_arrow_type := gi.NewIntArgument(int(arrow_type))
	arg_fill := gi.NewBoolArgument(fill)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_arrow_type, arg_fill, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_box
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintBox(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3713, "paint_box", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_box_gap
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ gap_side ] trans: nothing
//
// [ gap_x ] trans: nothing
//
// [ gap_width ] trans: nothing
//
func PaintBoxGap(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32, gap_side PositionTypeEnum, gap_x int32, gap_width int32) {
	iv, err := _I.Get(3714, "paint_box_gap", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_gap_side := gi.NewIntArgument(int(gap_side))
	arg_gap_x := gi.NewInt32Argument(gap_x)
	arg_gap_width := gi.NewInt32Argument(gap_width)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height, arg_gap_side, arg_gap_x, arg_gap_width}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_check
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintCheck(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3715, "paint_check", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_diamond
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintDiamond(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3716, "paint_diamond", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_expander
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ expander_style ] trans: nothing
//
func PaintExpander(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, x int32, y int32, expander_style ExpanderStyleEnum) {
	iv, err := _I.Get(3717, "paint_expander", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_expander_style := gi.NewIntArgument(int(expander_style))
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_x, arg_y, arg_expander_style}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_extension
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ gap_side ] trans: nothing
//
func PaintExtension(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32, gap_side PositionTypeEnum) {
	iv, err := _I.Get(3718, "paint_extension", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_gap_side := gi.NewIntArgument(int(gap_side))
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height, arg_gap_side}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_flat_box
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintFlatBox(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3719, "paint_flat_box", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_focus
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintFocus(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3720, "paint_focus", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_handle
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ orientation ] trans: nothing
//
func PaintHandle(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32, orientation OrientationEnum) {
	iv, err := _I.Get(3721, "paint_handle", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height, arg_orientation}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_hline
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x1 ] trans: nothing
//
// [ x2 ] trans: nothing
//
// [ y ] trans: nothing
//
func PaintHline(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, x1 int32, x2 int32, y int32) {
	iv, err := _I.Get(3722, "paint_hline", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x1 := gi.NewInt32Argument(x1)
	arg_x2 := gi.NewInt32Argument(x2)
	arg_y := gi.NewInt32Argument(y)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_x1, arg_x2, arg_y}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_layout
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ use_text ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ layout ] trans: nothing
//
func PaintLayout(style IStyle, cr cairo.Context, state_type StateTypeEnum, use_text bool, widget IWidget, detail string, x int32, y int32, layout pango.ILayout) {
	iv, err := _I.Get(3723, "paint_layout", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	var tmp2 unsafe.Pointer
	if layout != nil {
		tmp2 = layout.P_Layout()
	}
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_use_text := gi.NewBoolArgument(use_text)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_layout := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_use_text, arg_widget, arg_detail, arg_x, arg_y, arg_layout}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_option
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintOption(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3724, "paint_option", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_resize_grip
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ edge ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintResizeGrip(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, edge gdk.WindowEdgeEnum, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3725, "paint_resize_grip", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_edge := gi.NewIntArgument(int(edge))
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_edge, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_shadow
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintShadow(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3726, "paint_shadow", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_shadow_gap
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ gap_side ] trans: nothing
//
// [ gap_x ] trans: nothing
//
// [ gap_width ] trans: nothing
//
func PaintShadowGap(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32, gap_side PositionTypeEnum, gap_x int32, gap_width int32) {
	iv, err := _I.Get(3727, "paint_shadow_gap", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_gap_side := gi.NewIntArgument(int(gap_side))
	arg_gap_x := gi.NewInt32Argument(gap_x)
	arg_gap_width := gi.NewInt32Argument(gap_width)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height, arg_gap_side, arg_gap_x, arg_gap_width}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_slider
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ orientation ] trans: nothing
//
func PaintSlider(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32, orientation OrientationEnum) {
	iv, err := _I.Get(3728, "paint_slider", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height, arg_orientation}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_spinner
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ step ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintSpinner(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, step uint32, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3729, "paint_spinner", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_step := gi.NewUint32Argument(step)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_step, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_tab
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ shadow_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func PaintTab(style IStyle, cr cairo.Context, state_type StateTypeEnum, shadow_type ShadowTypeEnum, widget IWidget, detail string, x int32, y int32, width int32, height int32) {
	iv, err := _I.Get(3730, "paint_tab", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_shadow_type := gi.NewIntArgument(int(shadow_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_x := gi.NewInt32Argument(x)
	arg_y := gi.NewInt32Argument(y)
	arg_width := gi.NewInt32Argument(width)
	arg_height := gi.NewInt32Argument(height)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_shadow_type, arg_widget, arg_detail, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// Deprecated
//
// gtk_paint_vline
//
// [ style ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ state_type ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ y1_ ] trans: nothing
//
// [ y2_ ] trans: nothing
//
// [ x ] trans: nothing
//
func PaintVline(style IStyle, cr cairo.Context, state_type StateTypeEnum, widget IWidget, detail string, y1_ int32, y2_ int32, x int32) {
	iv, err := _I.Get(3731, "paint_vline", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_Style()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	c_detail := gi.CString(detail)
	arg_style := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_state_type := gi.NewIntArgument(int(state_type))
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_detail := gi.NewStringArgument(c_detail)
	arg_y1_ := gi.NewInt32Argument(y1_)
	arg_y2_ := gi.NewInt32Argument(y2_)
	arg_x := gi.NewInt32Argument(x)
	args := []gi.Argument{arg_style, arg_cr, arg_state_type, arg_widget, arg_detail, arg_y1_, arg_y2_, arg_x}
	iv.Call(args, nil, nil)
	gi.Free(c_detail)
}

// gtk_paper_size_get_default
//
// [ result ] trans: nothing
//
func PaperSizeGetDefault() (result string) {
	iv, err := _I.Get(3732, "paper_size_get_default", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Copy()
	return
}

// gtk_paper_size_get_paper_sizes
//
// [ include_custom ] trans: nothing
//
// [ result ] trans: everything
//
func PaperSizeGetPaperSizes(include_custom bool) (result g.List) {
	iv, err := _I.Get(3733, "paper_size_get_paper_sizes", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_include_custom := gi.NewBoolArgument(include_custom)
	args := []gi.Argument{arg_include_custom}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_parse_args
//
// [ argc ] trans: everything, dir: inout
//
// [ argv ] trans: everything, dir: inout
//
// [ result ] trans: nothing
//
func ParseArgs(argc int /*TODO:TYPE*/, argv int /*TODO:TYPE*/) (result bool) {
	iv, err := _I.Get(3734, "parse_args", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	var ret gi.Argument
	iv.Call(nil, &ret, &outArgs[0])
	result = ret.Bool()
	return
}

// gtk_print_error_quark
//
// [ result ] trans: nothing
//
func PrintErrorQuark() (result uint32) {
	iv, err := _I.Get(3735, "print_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_print_run_page_setup_dialog
//
// [ parent ] trans: nothing
//
// [ page_setup ] trans: nothing
//
// [ settings ] trans: nothing
//
// [ result ] trans: everything
//
func PrintRunPageSetupDialog(parent IWindow, page_setup IPageSetup, settings IPrintSettings) (result PageSetup) {
	iv, err := _I.Get(3736, "print_run_page_setup_dialog", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	var tmp1 unsafe.Pointer
	if page_setup != nil {
		tmp1 = page_setup.P_PageSetup()
	}
	var tmp2 unsafe.Pointer
	if settings != nil {
		tmp2 = settings.P_PrintSettings()
	}
	arg_parent := gi.NewPointerArgument(tmp)
	arg_page_setup := gi.NewPointerArgument(tmp1)
	arg_settings := gi.NewPointerArgument(tmp2)
	args := []gi.Argument{arg_parent, arg_page_setup, arg_settings}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_print_run_page_setup_dialog_async
//
// [ parent ] trans: nothing
//
// [ page_setup ] trans: nothing
//
// [ settings ] trans: nothing
//
// [ done_cb ] trans: nothing
//
// [ data ] trans: nothing
//
func PrintRunPageSetupDialogAsync(parent IWindow, page_setup IPageSetup, settings IPrintSettings, done_cb int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer) {
	iv, err := _I.Get(3737, "print_run_page_setup_dialog_async", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	var tmp1 unsafe.Pointer
	if page_setup != nil {
		tmp1 = page_setup.P_PageSetup()
	}
	var tmp2 unsafe.Pointer
	if settings != nil {
		tmp2 = settings.P_PrintSettings()
	}
	arg_parent := gi.NewPointerArgument(tmp)
	arg_page_setup := gi.NewPointerArgument(tmp1)
	arg_settings := gi.NewPointerArgument(tmp2)
	arg_done_cb := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myPageSetupDoneFunc()))
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_parent, arg_page_setup, arg_settings, arg_done_cb, arg_data}
	iv.Call(args, nil, nil)
}

// gtk_propagate_event
//
// [ widget ] trans: nothing
//
// [ event ] trans: nothing
//
func PropagateEvent(widget IWidget, event gdk.Event) {
	iv, err := _I.Get(3738, "propagate_event", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_event := gi.NewPointerArgument(event.P)
	args := []gi.Argument{arg_widget, arg_event}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_rc_add_default_file
//
// [ filename ] trans: nothing
//
func RcAddDefaultFile(filename string) {
	iv, err := _I.Get(3739, "rc_add_default_file", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// Deprecated
//
// gtk_rc_find_module_in_path
//
// [ module_file ] trans: nothing
//
// [ result ] trans: everything
//
func RcFindModuleInPath(module_file string) (result string) {
	iv, err := _I.Get(3740, "rc_find_module_in_path", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_module_file := gi.CString(module_file)
	arg_module_file := gi.NewStringArgument(c_module_file)
	args := []gi.Argument{arg_module_file}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_module_file)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_find_pixmap_in_path
//
// [ settings ] trans: nothing
//
// [ scanner ] trans: nothing
//
// [ pixmap_file ] trans: nothing
//
// [ result ] trans: everything
//
func RcFindPixmapInPath(settings ISettings, scanner g.Scanner, pixmap_file string) (result string) {
	iv, err := _I.Get(3741, "rc_find_pixmap_in_path", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if settings != nil {
		tmp = settings.P_Settings()
	}
	c_pixmap_file := gi.CString(pixmap_file)
	arg_settings := gi.NewPointerArgument(tmp)
	arg_scanner := gi.NewPointerArgument(scanner.P)
	arg_pixmap_file := gi.NewStringArgument(c_pixmap_file)
	args := []gi.Argument{arg_settings, arg_scanner, arg_pixmap_file}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_pixmap_file)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_get_default_files
//
// [ result ] trans: nothing
//
func RcGetDefaultFiles() (result gi.CStrArray) {
	iv, err := _I.Get(3742, "rc_get_default_files", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// Deprecated
//
// gtk_rc_get_im_module_file
//
// [ result ] trans: everything
//
func RcGetImModuleFile() (result string) {
	iv, err := _I.Get(3743, "rc_get_im_module_file", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_get_im_module_path
//
// [ result ] trans: everything
//
func RcGetImModulePath() (result string) {
	iv, err := _I.Get(3744, "rc_get_im_module_path", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_get_module_dir
//
// [ result ] trans: everything
//
func RcGetModuleDir() (result string) {
	iv, err := _I.Get(3745, "rc_get_module_dir", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_get_style
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func RcGetStyle(widget IWidget) (result Style) {
	iv, err := _I.Get(3746, "rc_get_style", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_rc_get_style_by_paths
//
// [ settings ] trans: nothing
//
// [ widget_path ] trans: nothing
//
// [ class_path ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func RcGetStyleByPaths(settings ISettings, widget_path string, class_path string, type1 gi.GType) (result Style) {
	iv, err := _I.Get(3747, "rc_get_style_by_paths", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if settings != nil {
		tmp = settings.P_Settings()
	}
	c_widget_path := gi.CString(widget_path)
	c_class_path := gi.CString(class_path)
	arg_settings := gi.NewPointerArgument(tmp)
	arg_widget_path := gi.NewStringArgument(c_widget_path)
	arg_class_path := gi.NewStringArgument(c_class_path)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_settings, arg_widget_path, arg_class_path, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_widget_path)
	gi.Free(c_class_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_rc_get_theme_dir
//
// [ result ] trans: everything
//
func RcGetThemeDir() (result string) {
	iv, err := _I.Get(3748, "rc_get_theme_dir", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_rc_parse
//
// [ filename ] trans: nothing
//
func RcParse(filename string) {
	iv, err := _I.Get(3749, "rc_parse", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	iv.Call(args, nil, nil)
	gi.Free(c_filename)
}

// Deprecated
//
// gtk_rc_parse_color
//
// [ scanner ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func RcParseColor(scanner g.Scanner, color gdk.Color) (result uint32) {
	iv, err := _I.Get(3750, "rc_parse_color", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_scanner := gi.NewPointerArgument(scanner.P)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_scanner, arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_rc_parse_color_full
//
// [ scanner ] trans: nothing
//
// [ style ] trans: nothing
//
// [ color ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func RcParseColorFull(scanner g.Scanner, style IRcStyle, color gdk.Color) (result uint32) {
	iv, err := _I.Get(3751, "rc_parse_color_full", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if style != nil {
		tmp = style.P_RcStyle()
	}
	arg_scanner := gi.NewPointerArgument(scanner.P)
	arg_style := gi.NewPointerArgument(tmp)
	arg_color := gi.NewPointerArgument(color.P)
	args := []gi.Argument{arg_scanner, arg_style, arg_color}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// Deprecated
//
// gtk_rc_parse_state
//
// [ scanner ] trans: nothing
//
// [ state ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func RcParseState(scanner g.Scanner) (result uint32, state StateTypeEnum) {
	iv, err := _I.Get(3752, "rc_parse_state", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_scanner := gi.NewPointerArgument(scanner.P)
	arg_state := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_scanner, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	state = StateTypeEnum(outArgs[0].Int())
	result = ret.Uint32()
	return
}

// Deprecated
//
// gtk_rc_parse_string
//
// [ rc_string ] trans: nothing
//
func RcParseString(rc_string string) {
	iv, err := _I.Get(3753, "rc_parse_string", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_rc_string := gi.CString(rc_string)
	arg_rc_string := gi.NewStringArgument(c_rc_string)
	args := []gi.Argument{arg_rc_string}
	iv.Call(args, nil, nil)
	gi.Free(c_rc_string)
}

// gtk_rc_property_parse_border
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseBorder(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(3754, "rc_property_parse_border", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_color
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseColor(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(3755, "rc_property_parse_color", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_enum
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseEnum(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(3756, "rc_property_parse_enum", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_flags
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseFlags(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(3757, "rc_property_parse_flags", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_rc_property_parse_requisition
//
// [ pspec ] trans: nothing
//
// [ gstring ] trans: nothing
//
// [ property_value ] trans: nothing
//
// [ result ] trans: nothing
//
func RcPropertyParseRequisition(pspec g.IParamSpec, gstring g.String, property_value g.Value) (result bool) {
	iv, err := _I.Get(3758, "rc_property_parse_requisition", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pspec != nil {
		tmp = pspec.P_ParamSpec()
	}
	arg_pspec := gi.NewPointerArgument(tmp)
	arg_gstring := gi.NewPointerArgument(gstring.P)
	arg_property_value := gi.NewPointerArgument(property_value.P)
	args := []gi.Argument{arg_pspec, arg_gstring, arg_property_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_rc_reparse_all
//
// [ result ] trans: nothing
//
func RcReparseAll() (result bool) {
	iv, err := _I.Get(3759, "rc_reparse_all", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_rc_reparse_all_for_settings
//
// [ settings ] trans: nothing
//
// [ force_load ] trans: nothing
//
// [ result ] trans: nothing
//
func RcReparseAllForSettings(settings ISettings, force_load bool) (result bool) {
	iv, err := _I.Get(3760, "rc_reparse_all_for_settings", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if settings != nil {
		tmp = settings.P_Settings()
	}
	arg_settings := gi.NewPointerArgument(tmp)
	arg_force_load := gi.NewBoolArgument(force_load)
	args := []gi.Argument{arg_settings, arg_force_load}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_rc_reset_styles
//
// [ settings ] trans: nothing
//
func RcResetStyles(settings ISettings) {
	iv, err := _I.Get(3761, "rc_reset_styles", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if settings != nil {
		tmp = settings.P_Settings()
	}
	arg_settings := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_settings}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_rc_set_default_files
//
// [ filenames ] trans: nothing
//
func RcSetDefaultFiles(filenames gi.CStrArray) {
	iv, err := _I.Get(3762, "rc_set_default_files", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_filenames := gi.NewPointerArgument(filenames.P)
	args := []gi.Argument{arg_filenames}
	iv.Call(args, nil, nil)
}

// gtk_recent_chooser_error_quark
//
// [ result ] trans: nothing
//
func RecentChooserErrorQuark() (result uint32) {
	iv, err := _I.Get(3763, "recent_chooser_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_recent_manager_error_quark
//
// [ result ] trans: nothing
//
func RecentManagerErrorQuark() (result uint32) {
	iv, err := _I.Get(3764, "recent_manager_error_quark", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// gtk_render_activity
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderActivity(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3765, "render_activity", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_arrow
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ angle ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ size ] trans: nothing
//
func RenderArrow(context IStyleContext, cr cairo.Context, angle float64, x float64, y float64, size float64) {
	iv, err := _I.Get(3766, "render_arrow", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_angle := gi.NewDoubleArgument(angle)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_size := gi.NewDoubleArgument(size)
	args := []gi.Argument{arg_context, arg_cr, arg_angle, arg_x, arg_y, arg_size}
	iv.Call(args, nil, nil)
}

// gtk_render_background
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderBackground(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3767, "render_background", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_background_get_clip
//
// [ context ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ out_clip ] trans: nothing, dir: out
//
func RenderBackgroundGetClip(context IStyleContext, x float64, y float64, width float64, height float64, out_clip gdk.Rectangle) {
	iv, err := _I.Get(3768, "render_background_get_clip", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_out_clip := gi.NewPointerArgument(out_clip.P)
	args := []gi.Argument{arg_context, arg_x, arg_y, arg_width, arg_height, arg_out_clip}
	iv.Call(args, nil, nil)
}

// gtk_render_check
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderCheck(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3769, "render_check", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_expander
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderExpander(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3770, "render_expander", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_extension
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ gap_side ] trans: nothing
//
func RenderExtension(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64, gap_side PositionTypeEnum) {
	iv, err := _I.Get(3771, "render_extension", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_gap_side := gi.NewIntArgument(int(gap_side))
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height, arg_gap_side}
	iv.Call(args, nil, nil)
}

// gtk_render_focus
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderFocus(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3772, "render_focus", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_frame
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderFrame(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3773, "render_frame", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_render_frame_gap
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ gap_side ] trans: nothing
//
// [ xy0_gap ] trans: nothing
//
// [ xy1_gap ] trans: nothing
//
func RenderFrameGap(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64, gap_side PositionTypeEnum, xy0_gap float64, xy1_gap float64) {
	iv, err := _I.Get(3774, "render_frame_gap", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_gap_side := gi.NewIntArgument(int(gap_side))
	arg_xy0_gap := gi.NewDoubleArgument(xy0_gap)
	arg_xy1_gap := gi.NewDoubleArgument(xy1_gap)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height, arg_gap_side, arg_xy0_gap, arg_xy1_gap}
	iv.Call(args, nil, nil)
}

// gtk_render_handle
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderHandle(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3775, "render_handle", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_icon
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ pixbuf ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func RenderIcon(context IStyleContext, cr cairo.Context, pixbuf gdkpixbuf.IPixbuf, x float64, y float64) {
	iv, err := _I.Get(3776, "render_icon", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	var tmp1 unsafe.Pointer
	if pixbuf != nil {
		tmp1 = pixbuf.P_Pixbuf()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_pixbuf := gi.NewPointerArgument(tmp1)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	args := []gi.Argument{arg_context, arg_cr, arg_pixbuf, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_render_icon_pixbuf
//
// [ context ] trans: nothing
//
// [ source ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func RenderIconPixbuf(context IStyleContext, source IconSource, size int32) (result gdkpixbuf.Pixbuf) {
	iv, err := _I.Get(3777, "render_icon_pixbuf", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_source := gi.NewPointerArgument(source.P)
	arg_size := gi.NewInt32Argument(size)
	args := []gi.Argument{arg_context, arg_source, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_render_icon_surface
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ surface ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
func RenderIconSurface(context IStyleContext, cr cairo.Context, surface cairo.Surface, x float64, y float64) {
	iv, err := _I.Get(3778, "render_icon_surface", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_surface := gi.NewPointerArgument(surface.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	args := []gi.Argument{arg_context, arg_cr, arg_surface, arg_x, arg_y}
	iv.Call(args, nil, nil)
}

// gtk_render_insertion_cursor
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ layout ] trans: nothing
//
// [ index ] trans: nothing
//
// [ direction ] trans: nothing
//
func RenderInsertionCursor(context IStyleContext, cr cairo.Context, x float64, y float64, layout pango.ILayout, index int32, direction pango.DirectionEnum) {
	iv, err := _I.Get(3779, "render_insertion_cursor", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	var tmp1 unsafe.Pointer
	if layout != nil {
		tmp1 = layout.P_Layout()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_layout := gi.NewPointerArgument(tmp1)
	arg_index := gi.NewInt32Argument(index)
	arg_direction := gi.NewIntArgument(int(direction))
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_layout, arg_index, arg_direction}
	iv.Call(args, nil, nil)
}

// gtk_render_layout
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ layout ] trans: nothing
//
func RenderLayout(context IStyleContext, cr cairo.Context, x float64, y float64, layout pango.ILayout) {
	iv, err := _I.Get(3780, "render_layout", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	var tmp1 unsafe.Pointer
	if layout != nil {
		tmp1 = layout.P_Layout()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_layout := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_layout}
	iv.Call(args, nil, nil)
}

// gtk_render_line
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x0 ] trans: nothing
//
// [ y0 ] trans: nothing
//
// [ x1 ] trans: nothing
//
// [ y1 ] trans: nothing
//
func RenderLine(context IStyleContext, cr cairo.Context, x0 float64, y0 float64, x1 float64, y1 float64) {
	iv, err := _I.Get(3781, "render_line", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x0 := gi.NewDoubleArgument(x0)
	arg_y0 := gi.NewDoubleArgument(y0)
	arg_x1 := gi.NewDoubleArgument(x1)
	arg_y1 := gi.NewDoubleArgument(y1)
	args := []gi.Argument{arg_context, arg_cr, arg_x0, arg_y0, arg_x1, arg_y1}
	iv.Call(args, nil, nil)
}

// gtk_render_option
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
func RenderOption(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64) {
	iv, err := _I.Get(3782, "render_option", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height}
	iv.Call(args, nil, nil)
}

// gtk_render_slider
//
// [ context ] trans: nothing
//
// [ cr ] trans: nothing
//
// [ x ] trans: nothing
//
// [ y ] trans: nothing
//
// [ width ] trans: nothing
//
// [ height ] trans: nothing
//
// [ orientation ] trans: nothing
//
func RenderSlider(context IStyleContext, cr cairo.Context, x float64, y float64, width float64, height float64, orientation OrientationEnum) {
	iv, err := _I.Get(3783, "render_slider", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_StyleContext()
	}
	arg_context := gi.NewPointerArgument(tmp)
	arg_cr := gi.NewPointerArgument(cr.P)
	arg_x := gi.NewDoubleArgument(x)
	arg_y := gi.NewDoubleArgument(y)
	arg_width := gi.NewDoubleArgument(width)
	arg_height := gi.NewDoubleArgument(height)
	arg_orientation := gi.NewIntArgument(int(orientation))
	args := []gi.Argument{arg_context, arg_cr, arg_x, arg_y, arg_width, arg_height, arg_orientation}
	iv.Call(args, nil, nil)
}

// gtk_rgb_to_hsv
//
// [ r ] trans: nothing
//
// [ g ] trans: nothing
//
// [ b ] trans: nothing
//
// [ h ] trans: everything, dir: out
//
// [ s ] trans: everything, dir: out
//
// [ v ] trans: everything, dir: out
//
func RgbToHsv(r float64, g float64, b float64) (h float64, s float64, v float64) {
	iv, err := _I.Get(3784, "rgb_to_hsv", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_r := gi.NewDoubleArgument(r)
	arg_g := gi.NewDoubleArgument(g)
	arg_b := gi.NewDoubleArgument(b)
	arg_h := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_s := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_v := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_r, arg_g, arg_b, arg_h, arg_s, arg_v}
	iv.Call(args, nil, &outArgs[0])
	h = outArgs[0].Double()
	s = outArgs[1].Double()
	v = outArgs[2].Double()
	return
}

// gtk_selection_add_target
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ target ] trans: nothing
//
// [ info ] trans: nothing
//
func SelectionAddTarget(widget IWidget, selection gdk.Atom, target gdk.Atom, info uint32) {
	iv, err := _I.Get(3785, "selection_add_target", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	arg_target := gi.NewPointerArgument(target.P)
	arg_info := gi.NewUint32Argument(info)
	args := []gi.Argument{arg_widget, arg_selection, arg_target, arg_info}
	iv.Call(args, nil, nil)
}

// gtk_selection_add_targets
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ targets ] trans: nothing
//
// [ ntargets ] trans: nothing
//
func SelectionAddTargets(widget IWidget, selection gdk.Atom, targets unsafe.Pointer, ntargets uint32) {
	iv, err := _I.Get(3786, "selection_add_targets", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	arg_targets := gi.NewPointerArgument(targets)
	arg_ntargets := gi.NewUint32Argument(ntargets)
	args := []gi.Argument{arg_widget, arg_selection, arg_targets, arg_ntargets}
	iv.Call(args, nil, nil)
}

// gtk_selection_clear_targets
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
func SelectionClearTargets(widget IWidget, selection gdk.Atom) {
	iv, err := _I.Get(3787, "selection_clear_targets", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	args := []gi.Argument{arg_widget, arg_selection}
	iv.Call(args, nil, nil)
}

// gtk_selection_convert
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ target ] trans: nothing
//
// [ time_ ] trans: nothing
//
// [ result ] trans: nothing
//
func SelectionConvert(widget IWidget, selection gdk.Atom, target gdk.Atom, time_ uint32) (result bool) {
	iv, err := _I.Get(3788, "selection_convert", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	arg_target := gi.NewPointerArgument(target.P)
	arg_time_ := gi.NewUint32Argument(time_)
	args := []gi.Argument{arg_widget, arg_selection, arg_target, arg_time_}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_owner_set
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ time_ ] trans: nothing
//
// [ result ] trans: nothing
//
func SelectionOwnerSet(widget IWidget, selection gdk.Atom, time_ uint32) (result bool) {
	iv, err := _I.Get(3789, "selection_owner_set", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_selection := gi.NewPointerArgument(selection.P)
	arg_time_ := gi.NewUint32Argument(time_)
	args := []gi.Argument{arg_widget, arg_selection, arg_time_}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_owner_set_for_display
//
// [ display ] trans: nothing
//
// [ widget ] trans: nothing
//
// [ selection ] trans: nothing
//
// [ time_ ] trans: nothing
//
// [ result ] trans: nothing
//
func SelectionOwnerSetForDisplay(display gdk.IDisplay, widget IWidget, selection gdk.Atom, time_ uint32) (result bool) {
	iv, err := _I.Get(3790, "selection_owner_set_for_display", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if display != nil {
		tmp = display.P_Display()
	}
	var tmp1 unsafe.Pointer
	if widget != nil {
		tmp1 = widget.P_Widget()
	}
	arg_display := gi.NewPointerArgument(tmp)
	arg_widget := gi.NewPointerArgument(tmp1)
	arg_selection := gi.NewPointerArgument(selection.P)
	arg_time_ := gi.NewUint32Argument(time_)
	args := []gi.Argument{arg_display, arg_widget, arg_selection, arg_time_}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_selection_remove_all
//
// [ widget ] trans: nothing
//
func SelectionRemoveAll(widget IWidget) {
	iv, err := _I.Get(3791, "selection_remove_all", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_set_debug_flags
//
// [ flags ] trans: nothing
//
func SetDebugFlags(flags uint32) {
	iv, err := _I.Get(3792, "set_debug_flags", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_flags := gi.NewUint32Argument(flags)
	args := []gi.Argument{arg_flags}
	iv.Call(args, nil, nil)
}

// gtk_show_uri
//
// [ screen ] trans: nothing
//
// [ uri ] trans: nothing
//
// [ timestamp ] trans: nothing
//
// [ result ] trans: nothing
//
func ShowUri(screen gdk.IScreen, uri string, timestamp uint32) (result bool, err error) {
	iv, err := _I.Get(3793, "show_uri", "")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if screen != nil {
		tmp = screen.P_Screen()
	}
	c_uri := gi.CString(uri)
	arg_screen := gi.NewPointerArgument(tmp)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_timestamp := gi.NewUint32Argument(timestamp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_screen, arg_uri, arg_timestamp, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// gtk_show_uri_on_window
//
// [ parent ] trans: nothing
//
// [ uri ] trans: nothing
//
// [ timestamp ] trans: nothing
//
// [ result ] trans: nothing
//
func ShowUriOnWindow(parent IWindow, uri string, timestamp uint32) (result bool, err error) {
	iv, err := _I.Get(3794, "show_uri_on_window", "")
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_Window()
	}
	c_uri := gi.CString(uri)
	arg_parent := gi.NewPointerArgument(tmp)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_timestamp := gi.NewUint32Argument(timestamp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_parent, arg_uri, arg_timestamp, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_stock_add
//
// [ items ] trans: nothing
//
// [ n_items ] trans: nothing
//
func StockAdd(items unsafe.Pointer, n_items uint32) {
	iv, err := _I.Get(3795, "stock_add", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_items := gi.NewPointerArgument(items)
	arg_n_items := gi.NewUint32Argument(n_items)
	args := []gi.Argument{arg_items, arg_n_items}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_stock_add_static
//
// [ items ] trans: nothing
//
// [ n_items ] trans: nothing
//
func StockAddStatic(items unsafe.Pointer, n_items uint32) {
	iv, err := _I.Get(3796, "stock_add_static", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_items := gi.NewPointerArgument(items)
	arg_n_items := gi.NewUint32Argument(n_items)
	args := []gi.Argument{arg_items, arg_n_items}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_stock_list_ids
//
// [ result ] trans: everything
//
func StockListIds() (result g.SList) {
	iv, err := _I.Get(3797, "stock_list_ids", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// gtk_stock_lookup
//
// [ stock_id ] trans: nothing
//
// [ item ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func StockLookup(stock_id string, item StockItem) (result bool) {
	iv, err := _I.Get(3798, "stock_lookup", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stock_id := gi.CString(stock_id)
	arg_stock_id := gi.NewStringArgument(c_stock_id)
	arg_item := gi.NewPointerArgument(item.P)
	args := []gi.Argument{arg_stock_id, arg_item}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_stock_id)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_stock_set_translate_func
//
// [ domain ] trans: nothing
//
// [ func1 ] trans: nothing
//
// [ data ] trans: nothing
//
// [ notify ] trans: nothing
//
func StockSetTranslateFunc(domain string, func1 int /*TODO_TYPE CALLBACK*/, data unsafe.Pointer, notify int /*TODO_TYPE CALLBACK*/) {
	iv, err := _I.Get(3799, "stock_set_translate_func", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_domain := gi.CString(domain)
	arg_domain := gi.NewStringArgument(c_domain)
	arg_func1 := gi.NewPointerArgument(unsafe.Pointer(GetPointer_myTranslateFunc()))
	arg_data := gi.NewPointerArgument(data)
	arg_notify := gi.NewPointerArgument(unsafe.Pointer(g.GetPointer_myDestroyNotify()))
	args := []gi.Argument{arg_domain, arg_func1, arg_data, arg_notify}
	iv.Call(args, nil, nil)
	gi.Free(c_domain)
}

// gtk_target_table_free
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
func TargetTableFree(targets unsafe.Pointer, n_targets int32) {
	iv, err := _I.Get(3800, "target_table_free", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_targets := gi.NewPointerArgument(targets)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	args := []gi.Argument{arg_targets, arg_n_targets}
	iv.Call(args, nil, nil)
}

// gtk_target_table_new_from_list
//
// [ list ] trans: nothing
//
// [ n_targets ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func TargetTableNewFromList(list TargetList) (result unsafe.Pointer) {
	iv, err := _I.Get(3801, "target_table_new_from_list", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_list := gi.NewPointerArgument(list.P)
	arg_n_targets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_list, arg_n_targets}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_targets int32
	_ = n_targets
	n_targets = outArgs[0].Int32()
	result = ret.Pointer()
	return
}

// gtk_targets_include_image
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ writable ] trans: nothing
//
// [ result ] trans: nothing
//
func TargetsIncludeImage(targets gi.PointerArray, n_targets int32, writable bool) (result bool) {
	iv, err := _I.Get(3802, "targets_include_image", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_writable := gi.NewBoolArgument(writable)
	args := []gi.Argument{arg_targets, arg_n_targets, arg_writable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_targets_include_rich_text
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ result ] trans: nothing
//
func TargetsIncludeRichText(targets gi.PointerArray, n_targets int32, buffer ITextBuffer) (result bool) {
	iv, err := _I.Get(3803, "targets_include_rich_text", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if buffer != nil {
		tmp = buffer.P_TextBuffer()
	}
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	arg_buffer := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_targets, arg_n_targets, arg_buffer}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_targets_include_text
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ result ] trans: nothing
//
func TargetsIncludeText(targets gi.PointerArray, n_targets int32) (result bool) {
	iv, err := _I.Get(3804, "targets_include_text", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	args := []gi.Argument{arg_targets, arg_n_targets}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_targets_include_uri
//
// [ targets ] trans: nothing
//
// [ n_targets ] trans: nothing
//
// [ result ] trans: nothing
//
func TargetsIncludeUri(targets gi.PointerArray, n_targets int32) (result bool) {
	iv, err := _I.Get(3805, "targets_include_uri", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_targets := gi.NewPointerArgument(targets.P)
	arg_n_targets := gi.NewInt32Argument(n_targets)
	args := []gi.Argument{arg_targets, arg_n_targets}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_test_create_simple_window
//
// [ window_title ] trans: nothing
//
// [ dialog_text ] trans: nothing
//
// [ result ] trans: nothing
//
func TestCreateSimpleWindow(window_title string, dialog_text string) (result Widget) {
	iv, err := _I.Get(3806, "test_create_simple_window", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_window_title := gi.CString(window_title)
	c_dialog_text := gi.CString(dialog_text)
	arg_window_title := gi.NewStringArgument(c_window_title)
	arg_dialog_text := gi.NewStringArgument(c_dialog_text)
	args := []gi.Argument{arg_window_title, arg_dialog_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_window_title)
	gi.Free(c_dialog_text)
	result.P = ret.Pointer()
	return
}

// gtk_test_find_label
//
// [ widget ] trans: nothing
//
// [ label_pattern ] trans: nothing
//
// [ result ] trans: nothing
//
func TestFindLabel(widget IWidget, label_pattern string) (result Widget) {
	iv, err := _I.Get(3807, "test_find_label", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_label_pattern := gi.CString(label_pattern)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_label_pattern := gi.NewStringArgument(c_label_pattern)
	args := []gi.Argument{arg_widget, arg_label_pattern}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label_pattern)
	result.P = ret.Pointer()
	return
}

// gtk_test_find_sibling
//
// [ base_widget ] trans: nothing
//
// [ widget_type ] trans: nothing
//
// [ result ] trans: nothing
//
func TestFindSibling(base_widget IWidget, widget_type gi.GType) (result Widget) {
	iv, err := _I.Get(3808, "test_find_sibling", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_widget != nil {
		tmp = base_widget.P_Widget()
	}
	arg_base_widget := gi.NewPointerArgument(tmp)
	arg_widget_type := gi.NewUintArgument(uint(widget_type))
	args := []gi.Argument{arg_base_widget, arg_widget_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// gtk_test_find_widget
//
// [ widget ] trans: nothing
//
// [ label_pattern ] trans: nothing
//
// [ widget_type ] trans: nothing
//
// [ result ] trans: nothing
//
func TestFindWidget(widget IWidget, label_pattern string, widget_type gi.GType) (result Widget) {
	iv, err := _I.Get(3809, "test_find_widget", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_label_pattern := gi.CString(label_pattern)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_label_pattern := gi.NewStringArgument(c_label_pattern)
	arg_widget_type := gi.NewUintArgument(uint(widget_type))
	args := []gi.Argument{arg_widget, arg_label_pattern, arg_widget_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label_pattern)
	result.P = ret.Pointer()
	return
}

// gtk_test_list_all_types
//
// [ n_types ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func TestListAllTypes() (result gi.GTypeArray) {
	iv, err := _I.Get(3810, "test_list_all_types", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_n_types := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_n_types}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var n_types uint32
	_ = n_types
	n_types = outArgs[0].Uint32()
	result = gi.GTypeArray{P: ret.Pointer(), Len: int(n_types)}
	return
}

// gtk_test_register_all_types
//
func TestRegisterAllTypes() {
	iv, err := _I.Get(3811, "test_register_all_types", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// Deprecated
//
// gtk_test_slider_get_value
//
// [ widget ] trans: nothing
//
// [ result ] trans: nothing
//
func TestSliderGetValue(widget IWidget) (result float64) {
	iv, err := _I.Get(3812, "test_slider_get_value", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Double()
	return
}

// Deprecated
//
// gtk_test_slider_set_perc
//
// [ widget ] trans: nothing
//
// [ percentage ] trans: nothing
//
func TestSliderSetPerc(widget IWidget, percentage float64) {
	iv, err := _I.Get(3813, "test_slider_set_perc", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_percentage := gi.NewDoubleArgument(percentage)
	args := []gi.Argument{arg_widget, arg_percentage}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// gtk_test_spin_button_click
//
// [ spinner ] trans: nothing
//
// [ button ] trans: nothing
//
// [ upwards ] trans: nothing
//
// [ result ] trans: nothing
//
func TestSpinButtonClick(spinner ISpinButton, button uint32, upwards bool) (result bool) {
	iv, err := _I.Get(3814, "test_spin_button_click", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if spinner != nil {
		tmp = spinner.P_SpinButton()
	}
	arg_spinner := gi.NewPointerArgument(tmp)
	arg_button := gi.NewUint32Argument(button)
	arg_upwards := gi.NewBoolArgument(upwards)
	args := []gi.Argument{arg_spinner, arg_button, arg_upwards}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// gtk_test_text_get
//
// [ widget ] trans: nothing
//
// [ result ] trans: everything
//
func TestTextGet(widget IWidget) (result string) {
	iv, err := _I.Get(3815, "test_text_get", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// Deprecated
//
// gtk_test_text_set
//
// [ widget ] trans: nothing
//
// [ string ] trans: nothing
//
func TestTextSet(widget IWidget, string string) {
	iv, err := _I.Get(3816, "test_text_set", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	c_string := gi.CString(string)
	arg_widget := gi.NewPointerArgument(tmp)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_widget, arg_string}
	iv.Call(args, nil, nil)
	gi.Free(c_string)
}

// Deprecated
//
// gtk_test_widget_click
//
// [ widget ] trans: nothing
//
// [ button ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ result ] trans: nothing
//
func TestWidgetClick(widget IWidget, button uint32, modifiers gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3817, "test_widget_click", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_button := gi.NewUint32Argument(button)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_widget, arg_button, arg_modifiers}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_test_widget_send_key
//
// [ widget ] trans: nothing
//
// [ keyval ] trans: nothing
//
// [ modifiers ] trans: nothing
//
// [ result ] trans: nothing
//
func TestWidgetSendKey(widget IWidget, keyval uint32, modifiers gdk.ModifierTypeFlags) (result bool) {
	iv, err := _I.Get(3818, "test_widget_send_key", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	arg_keyval := gi.NewUint32Argument(keyval)
	arg_modifiers := gi.NewIntArgument(int(modifiers))
	args := []gi.Argument{arg_widget, arg_keyval, arg_modifiers}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_test_widget_wait_for_draw
//
// [ widget ] trans: nothing
//
func TestWidgetWaitForDraw(widget IWidget) {
	iv, err := _I.Get(3819, "test_widget_wait_for_draw", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if widget != nil {
		tmp = widget.P_Widget()
	}
	arg_widget := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_widget}
	iv.Call(args, nil, nil)
}

// gtk_tree_get_row_drag_data
//
// [ selection_data ] trans: nothing
//
// [ tree_model ] trans: nothing, dir: out
//
// [ path ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func TreeGetRowDragData(selection_data SelectionData) (result bool, tree_model TreeModel, path TreePath) {
	iv, err := _I.Get(3820, "tree_get_row_drag_data", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_selection_data := gi.NewPointerArgument(selection_data.P)
	arg_tree_model := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_selection_data, arg_tree_model, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	tree_model.P = outArgs[0].Pointer()
	path.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// gtk_tree_row_reference_deleted
//
// [ proxy ] trans: nothing
//
// [ path ] trans: nothing
//
func TreeRowReferenceDeleted(proxy g.IObject, path TreePath) {
	iv, err := _I.Get(3821, "tree_row_reference_deleted", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy != nil {
		tmp = proxy.P_Object()
	}
	arg_proxy := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_proxy, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_row_reference_inserted
//
// [ proxy ] trans: nothing
//
// [ path ] trans: nothing
//
func TreeRowReferenceInserted(proxy g.IObject, path TreePath) {
	iv, err := _I.Get(3822, "tree_row_reference_inserted", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy != nil {
		tmp = proxy.P_Object()
	}
	arg_proxy := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_proxy, arg_path}
	iv.Call(args, nil, nil)
}

// gtk_tree_set_row_drag_data
//
// [ selection_data ] trans: nothing
//
// [ tree_model ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func TreeSetRowDragData(selection_data SelectionData, tree_model ITreeModel, path TreePath) (result bool) {
	iv, err := _I.Get(3823, "tree_set_row_drag_data", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if tree_model != nil {
		tmp = tree_model.P_TreeModel()
	}
	arg_selection_data := gi.NewPointerArgument(selection_data.P)
	arg_tree_model := gi.NewPointerArgument(tmp)
	arg_path := gi.NewPointerArgument(path.P)
	args := []gi.Argument{arg_selection_data, arg_tree_model, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// gtk_true
//
// [ result ] trans: nothing
//
func True() (result bool) {
	iv, err := _I.Get(3824, "true", "")
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// constants
const (
	BINARY_AGE                            = 2405
	INPUT_ERROR                           = -1
	INTERFACE_AGE                         = 1
	LEVEL_BAR_OFFSET_FULL                 = "full"
	LEVEL_BAR_OFFSET_HIGH                 = "high"
	LEVEL_BAR_OFFSET_LOW                  = "low"
	MAJOR_VERSION                         = 3
	MAX_COMPOSE_LEN                       = 7
	MICRO_VERSION                         = 5
	MINOR_VERSION                         = 24
	PAPER_NAME_A3                         = "iso_a3"
	PAPER_NAME_A4                         = "iso_a4"
	PAPER_NAME_A5                         = "iso_a5"
	PAPER_NAME_B5                         = "iso_b5"
	PAPER_NAME_EXECUTIVE                  = "na_executive"
	PAPER_NAME_LEGAL                      = "na_legal"
	PAPER_NAME_LETTER                     = "na_letter"
	PATH_PRIO_MASK                        = 15
	PRINT_SETTINGS_COLLATE                = "collate"
	PRINT_SETTINGS_DEFAULT_SOURCE         = "default-source"
	PRINT_SETTINGS_DITHER                 = "dither"
	PRINT_SETTINGS_DUPLEX                 = "duplex"
	PRINT_SETTINGS_FINISHINGS             = "finishings"
	PRINT_SETTINGS_MEDIA_TYPE             = "media-type"
	PRINT_SETTINGS_NUMBER_UP              = "number-up"
	PRINT_SETTINGS_NUMBER_UP_LAYOUT       = "number-up-layout"
	PRINT_SETTINGS_N_COPIES               = "n-copies"
	PRINT_SETTINGS_ORIENTATION            = "orientation"
	PRINT_SETTINGS_OUTPUT_BASENAME        = "output-basename"
	PRINT_SETTINGS_OUTPUT_BIN             = "output-bin"
	PRINT_SETTINGS_OUTPUT_DIR             = "output-dir"
	PRINT_SETTINGS_OUTPUT_FILE_FORMAT     = "output-file-format"
	PRINT_SETTINGS_OUTPUT_URI             = "output-uri"
	PRINT_SETTINGS_PAGE_RANGES            = "page-ranges"
	PRINT_SETTINGS_PAGE_SET               = "page-set"
	PRINT_SETTINGS_PAPER_FORMAT           = "paper-format"
	PRINT_SETTINGS_PAPER_HEIGHT           = "paper-height"
	PRINT_SETTINGS_PAPER_WIDTH            = "paper-width"
	PRINT_SETTINGS_PRINTER                = "printer"
	PRINT_SETTINGS_PRINTER_LPI            = "printer-lpi"
	PRINT_SETTINGS_PRINT_PAGES            = "print-pages"
	PRINT_SETTINGS_QUALITY                = "quality"
	PRINT_SETTINGS_RESOLUTION             = "resolution"
	PRINT_SETTINGS_RESOLUTION_X           = "resolution-x"
	PRINT_SETTINGS_RESOLUTION_Y           = "resolution-y"
	PRINT_SETTINGS_REVERSE                = "reverse"
	PRINT_SETTINGS_SCALE                  = "scale"
	PRINT_SETTINGS_USE_COLOR              = "use-color"
	PRINT_SETTINGS_WIN32_DRIVER_EXTRA     = "win32-driver-extra"
	PRINT_SETTINGS_WIN32_DRIVER_VERSION   = "win32-driver-version"
	PRIORITY_RESIZE                       = 110
	STOCK_ABOUT                           = "gtk-about"
	STOCK_ADD                             = "gtk-add"
	STOCK_APPLY                           = "gtk-apply"
	STOCK_BOLD                            = "gtk-bold"
	STOCK_CANCEL                          = "gtk-cancel"
	STOCK_CAPS_LOCK_WARNING               = "gtk-caps-lock-warning"
	STOCK_CDROM                           = "gtk-cdrom"
	STOCK_CLEAR                           = "gtk-clear"
	STOCK_CLOSE                           = "gtk-close"
	STOCK_COLOR_PICKER                    = "gtk-color-picker"
	STOCK_CONNECT                         = "gtk-connect"
	STOCK_CONVERT                         = "gtk-convert"
	STOCK_COPY                            = "gtk-copy"
	STOCK_CUT                             = "gtk-cut"
	STOCK_DELETE                          = "gtk-delete"
	STOCK_DIALOG_AUTHENTICATION           = "gtk-dialog-authentication"
	STOCK_DIALOG_ERROR                    = "gtk-dialog-error"
	STOCK_DIALOG_INFO                     = "gtk-dialog-info"
	STOCK_DIALOG_QUESTION                 = "gtk-dialog-question"
	STOCK_DIALOG_WARNING                  = "gtk-dialog-warning"
	STOCK_DIRECTORY                       = "gtk-directory"
	STOCK_DISCARD                         = "gtk-discard"
	STOCK_DISCONNECT                      = "gtk-disconnect"
	STOCK_DND                             = "gtk-dnd"
	STOCK_DND_MULTIPLE                    = "gtk-dnd-multiple"
	STOCK_EDIT                            = "gtk-edit"
	STOCK_EXECUTE                         = "gtk-execute"
	STOCK_FILE                            = "gtk-file"
	STOCK_FIND                            = "gtk-find"
	STOCK_FIND_AND_REPLACE                = "gtk-find-and-replace"
	STOCK_FLOPPY                          = "gtk-floppy"
	STOCK_FULLSCREEN                      = "gtk-fullscreen"
	STOCK_GOTO_BOTTOM                     = "gtk-goto-bottom"
	STOCK_GOTO_FIRST                      = "gtk-goto-first"
	STOCK_GOTO_LAST                       = "gtk-goto-last"
	STOCK_GOTO_TOP                        = "gtk-goto-top"
	STOCK_GO_BACK                         = "gtk-go-back"
	STOCK_GO_DOWN                         = "gtk-go-down"
	STOCK_GO_FORWARD                      = "gtk-go-forward"
	STOCK_GO_UP                           = "gtk-go-up"
	STOCK_HARDDISK                        = "gtk-harddisk"
	STOCK_HELP                            = "gtk-help"
	STOCK_HOME                            = "gtk-home"
	STOCK_INDENT                          = "gtk-indent"
	STOCK_INDEX                           = "gtk-index"
	STOCK_INFO                            = "gtk-info"
	STOCK_ITALIC                          = "gtk-italic"
	STOCK_JUMP_TO                         = "gtk-jump-to"
	STOCK_JUSTIFY_CENTER                  = "gtk-justify-center"
	STOCK_JUSTIFY_FILL                    = "gtk-justify-fill"
	STOCK_JUSTIFY_LEFT                    = "gtk-justify-left"
	STOCK_JUSTIFY_RIGHT                   = "gtk-justify-right"
	STOCK_LEAVE_FULLSCREEN                = "gtk-leave-fullscreen"
	STOCK_MEDIA_FORWARD                   = "gtk-media-forward"
	STOCK_MEDIA_NEXT                      = "gtk-media-next"
	STOCK_MEDIA_PAUSE                     = "gtk-media-pause"
	STOCK_MEDIA_PLAY                      = "gtk-media-play"
	STOCK_MEDIA_PREVIOUS                  = "gtk-media-previous"
	STOCK_MEDIA_RECORD                    = "gtk-media-record"
	STOCK_MEDIA_REWIND                    = "gtk-media-rewind"
	STOCK_MEDIA_STOP                      = "gtk-media-stop"
	STOCK_MISSING_IMAGE                   = "gtk-missing-image"
	STOCK_NETWORK                         = "gtk-network"
	STOCK_NEW                             = "gtk-new"
	STOCK_NO                              = "gtk-no"
	STOCK_OK                              = "gtk-ok"
	STOCK_OPEN                            = "gtk-open"
	STOCK_ORIENTATION_LANDSCAPE           = "gtk-orientation-landscape"
	STOCK_ORIENTATION_PORTRAIT            = "gtk-orientation-portrait"
	STOCK_ORIENTATION_REVERSE_LANDSCAPE   = "gtk-orientation-reverse-landscape"
	STOCK_ORIENTATION_REVERSE_PORTRAIT    = "gtk-orientation-reverse-portrait"
	STOCK_PAGE_SETUP                      = "gtk-page-setup"
	STOCK_PASTE                           = "gtk-paste"
	STOCK_PREFERENCES                     = "gtk-preferences"
	STOCK_PRINT                           = "gtk-print"
	STOCK_PRINT_ERROR                     = "gtk-print-error"
	STOCK_PRINT_PAUSED                    = "gtk-print-paused"
	STOCK_PRINT_PREVIEW                   = "gtk-print-preview"
	STOCK_PRINT_REPORT                    = "gtk-print-report"
	STOCK_PRINT_WARNING                   = "gtk-print-warning"
	STOCK_PROPERTIES                      = "gtk-properties"
	STOCK_QUIT                            = "gtk-quit"
	STOCK_REDO                            = "gtk-redo"
	STOCK_REFRESH                         = "gtk-refresh"
	STOCK_REMOVE                          = "gtk-remove"
	STOCK_REVERT_TO_SAVED                 = "gtk-revert-to-saved"
	STOCK_SAVE                            = "gtk-save"
	STOCK_SAVE_AS                         = "gtk-save-as"
	STOCK_SELECT_ALL                      = "gtk-select-all"
	STOCK_SELECT_COLOR                    = "gtk-select-color"
	STOCK_SELECT_FONT                     = "gtk-select-font"
	STOCK_SORT_ASCENDING                  = "gtk-sort-ascending"
	STOCK_SORT_DESCENDING                 = "gtk-sort-descending"
	STOCK_SPELL_CHECK                     = "gtk-spell-check"
	STOCK_STOP                            = "gtk-stop"
	STOCK_STRIKETHROUGH                   = "gtk-strikethrough"
	STOCK_UNDELETE                        = "gtk-undelete"
	STOCK_UNDERLINE                       = "gtk-underline"
	STOCK_UNDO                            = "gtk-undo"
	STOCK_UNINDENT                        = "gtk-unindent"
	STOCK_YES                             = "gtk-yes"
	STOCK_ZOOM_100                        = "gtk-zoom-100"
	STOCK_ZOOM_FIT                        = "gtk-zoom-fit"
	STOCK_ZOOM_IN                         = "gtk-zoom-in"
	STOCK_ZOOM_OUT                        = "gtk-zoom-out"
	STYLE_CLASS_ACCELERATOR               = "accelerator"
	STYLE_CLASS_ARROW                     = "arrow"
	STYLE_CLASS_BACKGROUND                = "background"
	STYLE_CLASS_BOTTOM                    = "bottom"
	STYLE_CLASS_BUTTON                    = "button"
	STYLE_CLASS_CALENDAR                  = "calendar"
	STYLE_CLASS_CELL                      = "cell"
	STYLE_CLASS_CHECK                     = "check"
	STYLE_CLASS_COMBOBOX_ENTRY            = "combobox-entry"
	STYLE_CLASS_CONTEXT_MENU              = "context-menu"
	STYLE_CLASS_CSD                       = "csd"
	STYLE_CLASS_CURSOR_HANDLE             = "cursor-handle"
	STYLE_CLASS_DEFAULT                   = "default"
	STYLE_CLASS_DESTRUCTIVE_ACTION        = "destructive-action"
	STYLE_CLASS_DIM_LABEL                 = "dim-label"
	STYLE_CLASS_DND                       = "dnd"
	STYLE_CLASS_DOCK                      = "dock"
	STYLE_CLASS_ENTRY                     = "entry"
	STYLE_CLASS_ERROR                     = "error"
	STYLE_CLASS_EXPANDER                  = "expander"
	STYLE_CLASS_FLAT                      = "flat"
	STYLE_CLASS_FRAME                     = "frame"
	STYLE_CLASS_GRIP                      = "grip"
	STYLE_CLASS_HEADER                    = "header"
	STYLE_CLASS_HIGHLIGHT                 = "highlight"
	STYLE_CLASS_HORIZONTAL                = "horizontal"
	STYLE_CLASS_IMAGE                     = "image"
	STYLE_CLASS_INFO                      = "info"
	STYLE_CLASS_INLINE_TOOLBAR            = "inline-toolbar"
	STYLE_CLASS_INSERTION_CURSOR          = "insertion-cursor"
	STYLE_CLASS_LABEL                     = "label"
	STYLE_CLASS_LEFT                      = "left"
	STYLE_CLASS_LEVEL_BAR                 = "level-bar"
	STYLE_CLASS_LINKED                    = "linked"
	STYLE_CLASS_LIST                      = "list"
	STYLE_CLASS_LIST_ROW                  = "list-row"
	STYLE_CLASS_MARK                      = "mark"
	STYLE_CLASS_MENU                      = "menu"
	STYLE_CLASS_MENUBAR                   = "menubar"
	STYLE_CLASS_MENUITEM                  = "menuitem"
	STYLE_CLASS_MESSAGE_DIALOG            = "message-dialog"
	STYLE_CLASS_MONOSPACE                 = "monospace"
	STYLE_CLASS_NEEDS_ATTENTION           = "needs-attention"
	STYLE_CLASS_NOTEBOOK                  = "notebook"
	STYLE_CLASS_OSD                       = "osd"
	STYLE_CLASS_OVERSHOOT                 = "overshoot"
	STYLE_CLASS_PANE_SEPARATOR            = "pane-separator"
	STYLE_CLASS_PAPER                     = "paper"
	STYLE_CLASS_POPOVER                   = "popover"
	STYLE_CLASS_POPUP                     = "popup"
	STYLE_CLASS_PRIMARY_TOOLBAR           = "primary-toolbar"
	STYLE_CLASS_PROGRESSBAR               = "progressbar"
	STYLE_CLASS_PULSE                     = "pulse"
	STYLE_CLASS_QUESTION                  = "question"
	STYLE_CLASS_RADIO                     = "radio"
	STYLE_CLASS_RAISED                    = "raised"
	STYLE_CLASS_READ_ONLY                 = "read-only"
	STYLE_CLASS_RIGHT                     = "right"
	STYLE_CLASS_RUBBERBAND                = "rubberband"
	STYLE_CLASS_SCALE                     = "scale"
	STYLE_CLASS_SCALE_HAS_MARKS_ABOVE     = "scale-has-marks-above"
	STYLE_CLASS_SCALE_HAS_MARKS_BELOW     = "scale-has-marks-below"
	STYLE_CLASS_SCROLLBAR                 = "scrollbar"
	STYLE_CLASS_SCROLLBARS_JUNCTION       = "scrollbars-junction"
	STYLE_CLASS_SEPARATOR                 = "separator"
	STYLE_CLASS_SIDEBAR                   = "sidebar"
	STYLE_CLASS_SLIDER                    = "slider"
	STYLE_CLASS_SPINBUTTON                = "spinbutton"
	STYLE_CLASS_SPINNER                   = "spinner"
	STYLE_CLASS_STATUSBAR                 = "statusbar"
	STYLE_CLASS_SUBTITLE                  = "subtitle"
	STYLE_CLASS_SUGGESTED_ACTION          = "suggested-action"
	STYLE_CLASS_TITLE                     = "title"
	STYLE_CLASS_TITLEBAR                  = "titlebar"
	STYLE_CLASS_TOOLBAR                   = "toolbar"
	STYLE_CLASS_TOOLTIP                   = "tooltip"
	STYLE_CLASS_TOP                       = "top"
	STYLE_CLASS_TOUCH_SELECTION           = "touch-selection"
	STYLE_CLASS_TROUGH                    = "trough"
	STYLE_CLASS_UNDERSHOOT                = "undershoot"
	STYLE_CLASS_VERTICAL                  = "vertical"
	STYLE_CLASS_VIEW                      = "view"
	STYLE_CLASS_WARNING                   = "warning"
	STYLE_CLASS_WIDE                      = "wide"
	STYLE_PROPERTY_BACKGROUND_COLOR       = "background-color"
	STYLE_PROPERTY_BACKGROUND_IMAGE       = "background-image"
	STYLE_PROPERTY_BORDER_COLOR           = "border-color"
	STYLE_PROPERTY_BORDER_RADIUS          = "border-radius"
	STYLE_PROPERTY_BORDER_STYLE           = "border-style"
	STYLE_PROPERTY_BORDER_WIDTH           = "border-width"
	STYLE_PROPERTY_COLOR                  = "color"
	STYLE_PROPERTY_FONT                   = "font"
	STYLE_PROPERTY_MARGIN                 = "margin"
	STYLE_PROPERTY_PADDING                = "padding"
	STYLE_PROVIDER_PRIORITY_APPLICATION   = 600
	STYLE_PROVIDER_PRIORITY_FALLBACK      = 1
	STYLE_PROVIDER_PRIORITY_SETTINGS      = 400
	STYLE_PROVIDER_PRIORITY_THEME         = 200
	STYLE_PROVIDER_PRIORITY_USER          = 800
	STYLE_REGION_COLUMN                   = "column"
	STYLE_REGION_COLUMN_HEADER            = "column-header"
	STYLE_REGION_ROW                      = "row"
	STYLE_REGION_TAB                      = "tab"
	TEXT_VIEW_PRIORITY_VALIDATE           = 125
	TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID  = -1
	TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2
)
